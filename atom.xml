<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zlinni&#39;s Blog For Study</title>
  
  <subtitle>一个专门做笔记的博客</subtitle>
  <link href="https://zlinni.github.io/atom.xml" rel="self"/>
  
  <link href="https://zlinni.github.io/"/>
  <updated>2022-03-18T02:43:31.891Z</updated>
  <id>https://zlinni.github.io/</id>
  
  <author>
    <name>Zlinni</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你所不知道的JavaScript①</title>
    <link href="https://zlinni.github.io/posts/fee85c52fd07/"/>
    <id>https://zlinni.github.io/posts/fee85c52fd07/</id>
    <published>2022-03-17T00:46:42.000Z</published>
    <updated>2022-03-18T02:43:31.891Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><p>首先js的类型有基本数据类型和引用类型<br>前者有七种 后者是一种<br>根据以前的USONB理论 大致是<br><code>Undefined</code>,<code>String</code>,<code>Symbol</code>,<code>Object</code>,<code>Null</code>,<code>Number</code>,<code>BigInt</code>,<code>Boolean</code></p><h2 id="基本数据类型的作用？"><a href="#基本数据类型的作用？" class="headerlink" title="基本数据类型的作用？"></a>基本数据类型的作用？</h2><p>基础类型存储在栈内存，被引用或拷贝时，会创建一个完全相等的变量；占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储。</p><h2 id="object为什么是引用类型？"><a href="#object为什么是引用类型？" class="headerlink" title="object为什么是引用类型？"></a><code>object</code>为什么是引用类型？</h2><p>而引用类型 在创建对象的时候会在堆内存中开辟一个空间 用来存放对象的属性 在为对象添加属性的时候，是将属性放在堆内存中开辟的空间里。<br>在栈内存中保存显示 对象名+一个地址 类似于指针 执行堆内存中对象开辟的空间<br>引用类型存储在堆内存，存储的是地址，多个引用指向同一个地址，这里会涉及一个“共享”的概念；占据空间大、大小不固定。引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。<br>引申出栈和堆的概念！</p><h2 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt?"></a><code>BigInt</code>?</h2><h1 id="栈和堆"><a href="#栈和堆" class="headerlink" title="栈和堆"></a>栈和堆</h1><p>在js的执行过程中，主要有三种类型的内存空间，一是代码空间，二是栈空间，三是堆空间。代码空间顾名思义就是存储代码用的，栈空间是用来保存变量和变量值的，堆空间是保存地址的。<br>对于栈空间来说，原始类型存储的是变量的值，而引用类型存储的是在堆空间中的地址，所以当js需要访问数据的时候，是通过栈中的引用地址来访问的，相当于多了一道转手程序</p><h2 id="闭包是怎么存储"><a href="#闭包是怎么存储" class="headerlink" title="闭包是怎么存储"></a>闭包是怎么存储</h2><p>js引擎对于闭包的处理，是当遇到一个闭包的时候，在堆空间中创建一个<code>closure(fn)</code>对象，用来保存闭包中的变量，所以闭包中的变量是存储在堆空间中的。这就是为什么闭包可以常驻在内存的原因。</p><h2 id="js为什么需要栈和堆"><a href="#js为什么需要栈和堆" class="headerlink" title="js为什么需要栈和堆"></a>js为什么需要栈和堆</h2><p>首先知道栈是让变量循环利用，通常也是设置一些小数据来放入栈中，而我们知道引用类型数据obj一般占用的空间都比较大。所以js引擎需要栈和堆来维持内存的平衡。</p><ul><li>题目1<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;lee&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line"><span class="built_in">console</span>.log(a.name);  <span class="comment">//第一个console</span></span><br><span class="line">b.name = <span class="string">&#x27;son&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.name);  <span class="comment">//第二个console</span></span><br><span class="line"><span class="built_in">console</span>.log(b.name);  <span class="comment">//第三个console</span></span><br></pre></td></tr></table></figure>第一个是lee显而易见，第二个console是son 第三个也是。这是因为a是对象 是引用类型 在赋值给b的时候 实际上是给了a在堆中的地址 所以b访问的是堆空间中a的变量 那么修改了b 自然a也会发生变动，这里就引出了堆空间共享的概念</li><li>题目2<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Julia&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  o.age = <span class="number">24</span>;</span><br><span class="line">  o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Kath&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = change(a);     <span class="comment">// 注意这里没有new，后面new相关会有专门文章讲解</span></span><br><span class="line"><span class="built_in">console</span>.log(b.age);    <span class="comment">// 第一个console</span></span><br><span class="line"><span class="built_in">console</span>.log(a.age);    <span class="comment">// 第二个console</span></span><br></pre></td></tr></table></figure>第一个输出30 第二个输出24<br>原因是function里面传入的是a在堆中的地址，那么自然a的age就会变成24 但是到了return这一步 它会把传入的内存地址修改 导致o变成另外一个内存地址 将o的数据存放在该内存中， 所以b就是kath和30</li></ul><h1 id="检测方式"><a href="#检测方式" class="headerlink" title="检测方式"></a>检测方式</h1><p>数据类型检测有很多种，常用的是<code>typeof instanceof constructor Object.prototype.toString.call([])</code></p><ol><li><code>typeof</code>方法是基于计算机底层的数据类型的二进制进行判断。 用于判断除了<code>array null</code>之外的类型,即可以判断除了<code>null</code>之外的基础数据类型和除了<code>array</code>之外的应用数据类型<br>下面看一下它对于所有类型的处理 注意它可以处理function<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">2</span>);               <span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">true</span>);            <span class="comment">// boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="string">&#x27;str&#x27;</span>);           <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> []);              <span class="comment">// object     []数组的数据类型在 typeof 中被解释为 object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);    <span class="comment">// function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> &#123;&#125;);              <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span>);       <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>);            <span class="comment">// object     null 的数据类型被 typeof 解释为 object</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>为什么null会被<code>typeof</code>识别成<code>object</code>？<br>这个是一个历史遗留问题 js底层是二进制存储的 前三位代表的是数据的存储类型 对于object来说则是000 而刚好null也是全0 正好代表object类型的数据格式 所以null才会输出object</li></ul><ol><li><code>instanceof</code><br>由于上面的方法不能精确判断数组和null的原因 所以产生了新的方法<code>instanceof</code><br>康康它对于所有类型的处理<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> <span class="keyword">instanceof</span> <span class="built_in">Number</span>);                    <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>);                <span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;str&#x27;</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>);                <span class="comment">// false  </span></span><br><span class="line"><span class="built_in">console</span>.log([] <span class="keyword">instanceof</span> <span class="built_in">Array</span>);                    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Function</span>);       <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Object</span>);                   <span class="comment">// true    </span></span><br><span class="line"><span class="comment">// console.log(undefined instanceof Undefined);</span></span><br><span class="line"><span class="comment">// console.log(null instanceof Null);</span></span><br></pre></td></tr></table></figure>和由此可见 <code>instanceof</code>方法能准确的判断引用数据类型 但是不能判断基础数据类型<br>因为它的原理是和原型链相关的 ,相当于判断是不是这个类的实例，所以对于<code>undefined和null</code>来说，这两者是没有原型的 所以无法判断。<br>引申一下 <code>null</code>是所有原型的终点 <code>undefined</code>是表示没有这个值 缺少这个值 </li><li><code>constructor</code><br>构造器判断方法 注意带括号 否则会报错<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log((<span class="number">2</span>).constructor === <span class="built_in">Number</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="literal">true</span>).constructor === <span class="built_in">Boolean</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="string">&#x27;str&#x27;</span>).constructor === <span class="built_in">String</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(([]).constructor === <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;).constructor === <span class="built_in">Function</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log((&#123;&#125;).constructor === <span class="built_in">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>弊端是 如果改变了对象原型，该方法会失效<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"> </span><br><span class="line">Fn.prototype=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> f=<span class="keyword">new</span> Fn();</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(f.constructor===Fn);    <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(f.constructor===<span class="built_in">Array</span>); <span class="comment">// true </span></span><br></pre></td></tr></table></figure></li><li><code>Object.prototype.toString.call()</code><br>使用<code>Object</code>上面的<code>toString</code>方法 会返回一个格式为<code>[object Xxx]</code>的字符串，通过call重新调用就可以精确判断对象类型<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString(&#123;&#125;)       <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;)  <span class="comment">// 同上结果，加上call也ok</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>)    <span class="comment">// &quot;[object Number]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">&#x27;1&#x27;</span>)  <span class="comment">// &quot;[object String]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>)  <span class="comment">// &quot;[object Boolean]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)  <span class="comment">// &quot;[object Function]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>)   <span class="comment">//&quot;[object Null]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>) <span class="comment">//&quot;[object Undefined]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="regexp">/123/g</span>)    <span class="comment">//&quot;[object RegExp]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>()) <span class="comment">//&quot;[object Date]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([])       <span class="comment">//&quot;[object Array]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">document</span>)  <span class="comment">//&quot;[object HTMLDocument]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">window</span>)   <span class="comment">//&quot;[object Window]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从上面这段代码可以看出，Object.prototype.toString.call() 可以很好地判断引用类型，甚至可以把 document 和 window 都区分开来。</span></span><br></pre></td></tr></table></figure>由于代码过长 推荐封装一下<code>Object.prototype.toString</code><br>实现一个全局通用的判断方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> type = <span class="keyword">typeof</span> obj;</span><br><span class="line"><span class="comment">//如果是基本类型 直接返回</span></span><br><span class="line"><span class="keyword">if</span>(type!==<span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toStirng.call(obj).replace(<span class="regexp">/^\[object (\S+)\]$/</span>, <span class="string">&#x27;$1&#x27;</span>);  <span class="comment">// 注意正则中间有个空格</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 代码验证，需要注意大小写，哪些是typeof判断，哪些是toString判断？思考下 */</span></span><br><span class="line">getType([])     <span class="comment">// &quot;Array&quot; typeof []是object，因此toString返回</span></span><br><span class="line">getType(<span class="string">&#x27;123&#x27;</span>)  <span class="comment">// &quot;string&quot; typeof 直接返回</span></span><br><span class="line">getType(<span class="built_in">window</span>) <span class="comment">// &quot;Window&quot; toString返回</span></span><br><span class="line">getType(<span class="literal">null</span>)   <span class="comment">// &quot;Null&quot;首字母大写，typeof null是object，需toString来判断</span></span><br><span class="line">getType(<span class="literal">undefined</span>)   <span class="comment">// &quot;undefined&quot; typeof 直接返回</span></span><br><span class="line">getType()            <span class="comment">// &quot;undefined&quot; typeof 直接返回</span></span><br><span class="line">getType(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;) <span class="comment">// &quot;function&quot; typeof能判断，因此首字母小写</span></span><br><span class="line">getType(<span class="regexp">/123/g</span>)      <span class="comment">//&quot;RegExp&quot; toString返回</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220316104931.png" alt=""></li></ol><h1 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h1><h1 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端进阶" scheme="https://zlinni.github.io/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="js" scheme="https://zlinni.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>前端算法日记</title>
    <link href="https://zlinni.github.io/posts/fa1981f36489/"/>
    <id>https://zlinni.github.io/posts/fa1981f36489/</id>
    <published>2022-03-09T03:01:33.000Z</published>
    <updated>2022-03-20T08:23:31.288Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>前端也是要刷算法的呀= =<br>选自leetcode hot 100 和 剑指offer</p></div><h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>给定一个整数数组<code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 和为目标值 <code>target</code>  的那 两个 整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>你可以按任意顺序返回答案。<br>示例 1：<br>输入：<code>nums = [2,7,11,15], target = 9</code><br>输出：<code>[0,1]</code><br>解释：因为 <code>nums[0] + nums[1] == 9</code> ，返回 <code>[0, 1]</code> 。<br>示例 2：<br>输入：<code>nums = [3,2,4], target = 6</code><br>输出：<code>[1,2]</code><br>示例 3：<br>输入：<code>nums = [3,3], target = 6</code><br>输出：<code>[0,1]</code><br>提示：<br><code>2 &lt;= nums.length &lt;= 104</code><br><code>-109 &lt;= nums[i] &lt;= 109</code><br><code>-109 &lt;= target &lt;= 109</code><br>只会存在一个有效答案<br>进阶：你可以想出一个时间复杂度小于<code>O(n2)</code> 的算法吗？</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>这道题对前端来说考察的应该是用map方法来操作数据的问题。<br>回顾一下map的三个方法<br><code>map.get(key)</code>用于返回key对应的value值<br><code>map.set(key,value)</code>设置key和value值<br><code>map.has(key)</code>返回key是否存在<br>那么这道题的思路就是 先遍历数组 判断target和数字的差值是否在map里面，如果是则返回key和当前i，否则存入map<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i===<span class="number">0</span>)&#123;map.set(nums[i],i)&#125;</span><br><span class="line">        <span class="keyword">let</span> less = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span>(map.has(less))&#123;</span><br><span class="line">            <span class="keyword">return</span> [map.get(less),i];</span><br><span class="line">        &#125;</span><br><span class="line">        map.set(nums[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>其实不用到map这个api也是可以做的，并且用时还快一点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums,target</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> map = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line"><span class="keyword">let</span> less = target - nums[i];</span><br><span class="line"><span class="keyword">if</span>(map[less]!==<span class="literal">undefined</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> [map[less],i];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">map[nums[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2.两数相加"></a>2.两数相加</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。<br>请你将两个数相加，并以相同形式返回一个表示和的链表。<br>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220309190959.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>这个就很类似于链表的合并，但是这个相较于合并特殊的一点在于它不能设置val为0 而是要设置next为一个新的节点。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span> (<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dummy = <span class="keyword">new</span> ListNode();</span><br><span class="line">    <span class="keyword">let</span> cur = dummy;</span><br><span class="line">    <span class="keyword">let</span> newAdd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l1 || l2) &#123;</span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//对l1 l2的加法逻辑单独放一块 避免有一方提前结束</span></span><br><span class="line">        <span class="keyword">if</span> (l1) &#123;</span><br><span class="line">            count += l1.val;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l2) &#123;</span><br><span class="line">            count += l2.val;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        count += newAdd;</span><br><span class="line">        <span class="comment">//这里下个节点要用listnode新建，不能直接赋当前的val为count%10</span></span><br><span class="line">        cur.next = <span class="keyword">new</span> ListNode(count % <span class="number">10</span>);</span><br><span class="line">        <span class="comment">//向下取整进位数</span></span><br><span class="line">        newAdd = <span class="built_in">Math</span>.floor(count / <span class="number">10</span>);</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//如果已经结束了且最后的进位还大于0 那么要再新建一个节点放这个数</span></span><br><span class="line">    <span class="keyword">if</span> (newAdd &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        cur.next = <span class="keyword">new</span> ListNode(newAdd)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="3-无重复字符的最长字串"><a href="#3-无重复字符的最长字串" class="headerlink" title="3.无重复字符的最长字串"></a>3.无重复字符的最长字串</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220309192827.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>思路就是用include方法循环判断是否存在这个字符 如果存在就删去，如果不存在就push<br>然后判断maxlength<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> str <span class="keyword">of</span> s) &#123;</span><br><span class="line">        <span class="keyword">while</span> (arr.includes(str)) &#123;</span><br><span class="line">            arr.shift();</span><br><span class="line">        &#125;</span><br><span class="line">        arr.push(str);</span><br><span class="line">        <span class="keyword">if</span>(arr.length&gt;max)&#123;</span><br><span class="line">            max =arr.length</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4.寻找两个正序数组的中位数"></a>4.寻找两个正序数组的中位数</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220309193413.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>思路就是合并数组 然后sort排序，然后判断奇偶来写。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findMedianSortedArrays = <span class="function"><span class="keyword">function</span> (<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [...nums1,...nums2];</span><br><span class="line">    arr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a-b;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> len = arr.length</span><br><span class="line">    <span class="keyword">if</span>(len%<span class="number">2</span>!==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parseFloat</span>(arr[(len-<span class="number">1</span>)/<span class="number">2</span>]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">parseFloat</span>((arr[len/<span class="number">2</span>]+arr[len/<span class="number">2</span>-<span class="number">1</span>])/<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19.删除链表的倒数第 N 个结点"></a>19.删除链表的倒数第 N 个结点</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220309194806.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>思路就是快慢指针，快指针先走n步，然后快慢一起遍历就能找到要删除节点的前驱节点和后继节点。<br>注意细节问题<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> removeNthFromEnd = <span class="function"><span class="keyword">function</span>(<span class="params">head, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dummy = <span class="keyword">new</span> ListNode();</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    <span class="keyword">let</span> fast = dummy;</span><br><span class="line">    <span class="keyword">let</span> slow = dummy;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//  这里判断不能写fast 要写fast.next 如果写了前者，那么到最后一个节点他还会前进</span></span><br><span class="line">    <span class="keyword">while</span>(fast.next)&#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注意这里不能直接写fast 如果只存在一个节点那么快慢指针同步 最后还是会返回fast节点的值</span></span><br><span class="line">   <span class="comment">//  slow.next = fast;</span></span><br><span class="line">   slow.next = slow.next.next;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20.有效的括号"></a>20.有效的括号</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220309195925.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>思路 利用栈 先定义括号的数据结构，然后进站的是右括号 如果和出栈的对应 那么最后栈空<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isValid = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack = [];</span><br><span class="line">    <span class="keyword">let</span> leftToRight = &#123;</span><br><span class="line">        <span class="string">&#x27;(&#x27;</span>:<span class="string">&#x27;)&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;[&#x27;</span>:<span class="string">&#x27;]&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;&#x27;</span>:<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>;i&lt;s.length;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> ch = s[i];</span><br><span class="line">        <span class="keyword">if</span>(ch===<span class="string">&#x27;&#123;&#x27;</span>||ch===<span class="string">&#x27;[&#x27;</span>||ch===<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">            stack.push(leftToRight[ch]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack.pop()!==ch)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !stack.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21.合并两个有序链表"></a>21.合并两个有序链表</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220309200133.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>思路 对链表进行穿针 最后多余出来的部分直接合并<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> mergeTwoLists = <span class="function"><span class="keyword">function</span>(<span class="params">list1, list2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> head = <span class="keyword">new</span> ListNode();</span><br><span class="line">    <span class="keyword">let</span> cur = head;</span><br><span class="line">    <span class="keyword">while</span>(list1&amp;&amp;list2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(list1.val&lt;=list2.val)&#123;</span><br><span class="line">            cur.next = list1;</span><br><span class="line">            list1 = list1.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cur.next = list2;</span><br><span class="line">            list2 = list2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注意这里是cur.next 因为是合并剩下的部分 而不是取代当前</span></span><br><span class="line">    cur.next = list1!==<span class="literal">null</span>?list1:list2;</span><br><span class="line">    <span class="keyword">return</span> head.next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="11-盛最多水的容器"><a href="#11-盛最多水的容器" class="headerlink" title="11. 盛最多水的容器"></a>11. 盛最多水的容器</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220310085330.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>看到涉及前后的问题 使用双指针 指向头尾</p><ol><li>高度是相对小的指针的值 宽度是下标的差值 </li><li>指针移动的条件是相对小的那边移动<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxArea = <span class="function"><span class="keyword">function</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> right = height.length-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(right!==left)&#123;</span><br><span class="line"><span class="keyword">let</span> square = <span class="built_in">Math</span>.min(height[left],height[right])*(right-left);</span><br><span class="line"><span class="keyword">if</span>(square&gt;max)&#123;</span><br><span class="line">max=square;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(height[left]&lt;height[right])&#123;</span><br><span class="line">left++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15.三数之和"></a>15.三数之和</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220313193323.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>思路就是双指针 头指针和尾指针</p><ol><li>先对数组进行排序</li><li>遍历数组，还有个next指针 为<code>i+1</code></li><li>头指针 next指针 尾指针 用<code>while</code>来判断，终止条件是next等于尾指针</li></ol><ul><li>若它们代表的元素相加若等于0，将三个指针代表的元素入数组，并将next指针指向下一位，如果下一位和上一位的数字相同则跳过 next继续指向下一位</li><li>如果小于0 next指针++</li><li>如果大于0 尾指针—<br>特别注意 如果前一项等于后一项 那么直接跳过当前项<br>代码<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> threeSum = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    nums.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">let</span> len = nums.length;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] === nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">let</span> next = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> last = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (next &lt; last) &#123;</span><br><span class="line">            <span class="keyword">const</span> sum = nums[i] + nums[next] + nums[last];</span><br><span class="line">            <span class="keyword">if</span> (sum === <span class="number">0</span>) &#123;</span><br><span class="line">                res.push([nums[i], nums[next], nums[last]]);</span><br><span class="line">                next++;</span><br><span class="line">                <span class="keyword">while</span> (nums[next] === nums[next - <span class="number">1</span>]) &#123;</span><br><span class="line">                    next++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                next++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                last--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="16-最接近的三数之和"><a href="#16-最接近的三数之和" class="headerlink" title="16.最接近的三数之和"></a>16.最接近的三数之和</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220313194812.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>思路 和三数之和类似 多了个比较 最接近其实就是绝对值最小<br>代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> threeSumClosest = <span class="function"><span class="keyword">function</span> (<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    nums.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">let</span> len = nums.length;</span><br><span class="line">    <span class="keyword">let</span> min = <span class="literal">Infinity</span>;</span><br><span class="line">    <span class="keyword">let</span> res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> next = i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> last = len-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(next&lt;last)&#123;</span><br><span class="line">            <span class="keyword">const</span> sum = nums[i]+nums[next]+nums[last];</span><br><span class="line">            <span class="keyword">const</span> diff = <span class="built_in">Math</span>.abs(sum-target);</span><br><span class="line">            <span class="keyword">if</span>(diff&lt;min)&#123;</span><br><span class="line">                min = diff;</span><br><span class="line">                res = sum;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum&lt;target)&#123;</span><br><span class="line">                next++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                last--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18.四数之和"></a>18.四数之和</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220313205436.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>思路 和三数差不多 但是多了层循环<br>代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fourSum = <span class="function"><span class="keyword">function</span> (<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    nums.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">let</span> len = nums.length;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] === nums[i - <span class="number">1</span>] &amp;&amp; i &lt; len) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">let</span> first = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (first &lt; len - <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first &gt; i + <span class="number">1</span> &amp;&amp; nums[first] === nums[first - <span class="number">1</span>] &amp;&amp; first &lt; len - <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">let</span> next = first + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">let</span> last = len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (next &lt; last) &#123;</span><br><span class="line">                <span class="keyword">let</span> sum = nums[i] + nums[first] + nums[next] + nums[last];</span><br><span class="line">                <span class="keyword">if</span> (sum === target) &#123;</span><br><span class="line">                    res.push([nums[i], nums[first], nums[next], nums[last]]);</span><br><span class="line">                    next++;</span><br><span class="line">                    <span class="keyword">while</span> (nums[next] === nums[next - <span class="number">1</span>]) &#123;</span><br><span class="line">                        next++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                    next++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    last--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            first++;</span><br><span class="line">            <span class="keyword">while</span> (nums[first] === nums[first - <span class="number">1</span>]) &#123;</span><br><span class="line">                first++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="53-最大子数组和"><a href="#53-最大子数组和" class="headerlink" title="53.最大子数组和"></a>53.最大子数组和</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220317204004.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>动态规划 但是是从前往后<br>正负收益 如果是相减是负收益 那么不要这个 取当前项<br>优化：不使用dp数组来维护这些变量 直接用一个sum变量来代替<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="comment">//初始化maxSum</span></span><br><span class="line"><span class="keyword">let</span> maxSum = nums[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//初始化sum</span></span><br><span class="line"><span class="keyword">let</span> sum = nums[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line"><span class="comment">//比较收益 两者差值和当前值谁更大 取更大的</span></span><br><span class="line">sum = <span class="built_in">Math</span>.max(sum-nums[i],nums[i]);</span><br><span class="line"><span class="comment">//比较最大收益 取最大收益</span></span><br><span class="line">maxSum = <span class="built_in">Math</span>.max(sum,maxSum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70.爬楼梯"></a>70.爬楼梯</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220317205059.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>动态规划 状态方程是<code>f[n]= f[n-1]+f[n-2]</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> climbStairs = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> f = [];</span><br><span class="line">f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">f[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">3</span> ;i&lt;=n;i++)&#123;</span><br><span class="line">f[i] = f[i-<span class="number">1</span>]+f[i-<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94.二叉树的中序遍历"></a>94.二叉树的中序遍历</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220317210015.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>注意在函数里面递归你的二叉树<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"><span class="keyword">const</span> res = <span class="function">(<span class="params">n</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!n)<span class="keyword">return</span>;</span><br><span class="line">res(root.left);</span><br><span class="line">arr.push(root.val);</span><br><span class="line">res(root.right);</span><br><span class="line">&#125;</span><br><span class="line">res(root);</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101.对称二叉树"></a>101.对称二叉树</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220317210209.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>左右节点都存在<br>左右节点相等<br>左节点的左等于右节点的右<br>左节点的右等于右键点的左<br>即为镜像<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isSymmetric = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!root)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jud = <span class="function">(<span class="params">l,r</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//已经是叶子节点了 返回真</span></span><br><span class="line"><span class="keyword">if</span>(!l&amp;&amp;!r)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(l&amp;&amp;r&amp;&amp;l.val===r.val&amp;&amp;jud(l.left,r.right)&amp;&amp;jud(l.right,r.left))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> jud(root.left,root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104. 二叉树的最大深度"></a>104. 二叉树的最大深度</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220318155736.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>最大深度用深度优先遍历<br>然后注意判断的时机<br>代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!root)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> dfs = <span class="function">(<span class="params">n,l</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!n)<span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//只在叶子节点的时候开始判断</span></span><br><span class="line"><span class="keyword">if</span>(!n.left&amp;&amp;!n.right)&#123;</span><br><span class="line">max = <span class="built_in">Math</span>.max(max,l);</span><br><span class="line">&#125;</span><br><span class="line">dfs(n.left,l+<span class="number">1</span>);</span><br><span class="line">dfs(n.right,l+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">dfs(root,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121. 买卖股票的最佳时机"></a>121. 买卖股票的最佳时机</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220318155828.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>先提出一个概念 收益 这里的话是前后元素的差值<br>这里涉及到一个问题 其实有时候不需要知道买进卖出的价格 我们只需要知道在这个过程中，收益的幅度，也就是收益为负的时候，刷新这个收益为0，收益为正的时候，和最大收益比较并考虑是否刷新最大收益。<br>代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span> (<span class="params">prices</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> last = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;prices.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">last = <span class="built_in">Math</span>.max(<span class="number">0</span>,last+prices[i+<span class="number">1</span>]-prices[i]);</span><br><span class="line">max = <span class="built_in">Math</span>.max(max,last);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136. 只出现一次的数字"></a>136. 只出现一次的数字</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220318161857.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>利用异或的性质</p><ol><li>0异或任何数都返回那个数字</li><li>两个数字异或 相同0 不同1<br>代码<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    nums.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        res = res^item;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226. 翻转二叉树"></a>226. 翻转二叉树</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220320140032.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> invertTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> left = invertTree(root.left);</span><br><span class="line">    <span class="keyword">let</span> right = invertTree(root.right);</span><br><span class="line">    root.left = right;</span><br><span class="line">    root.right = left;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141. 环形链表"></a>141. 环形链表</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220320141647.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>快慢指针 如果是环形 快指针走两步 慢指针走一步 最后肯定会相遇<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hasCycle = <span class="function"><span class="keyword">function</span> (<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> slow = head;</span><br><span class="line">    <span class="keyword">let</span> fast = head;</span><br><span class="line">    <span class="keyword">while</span> (slow&amp;&amp;fast&amp;&amp;fast.next) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next</span><br><span class="line">        <span class="keyword">if</span>(slow===fast)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="155-最小栈"><a href="#155-最小栈" class="headerlink" title="155. 最小栈"></a>155. 最小栈</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220320143256.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>两个栈 一个用于存放最小的数据集合 一个用于普通存放<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MinStack = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.stack1 = [];</span><br><span class="line">    <span class="built_in">this</span>.stack2 = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">val</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.stack1.push(val);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">this</span>.stack2)&#123;</span><br><span class="line">        <span class="built_in">this</span>.stack2.push(val);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(val&lt;=<span class="built_in">this</span>.stack2[<span class="built_in">this</span>.stack2.length-<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="built_in">this</span>.stack2.push(val);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.stack2.unshift(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.stack1.pop()===<span class="built_in">this</span>.stack2[<span class="built_in">this</span>.stack2.length-<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="built_in">this</span>.stack2.pop();</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.top = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.stack1[<span class="built_in">this</span>.stack1.length-<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.getMin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.stack2[<span class="built_in">this</span>.stack2.length-<span class="number">1</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new MinStack()</span></span><br><span class="line"><span class="comment"> * obj.push(val)</span></span><br><span class="line"><span class="comment"> * obj.pop()</span></span><br><span class="line"><span class="comment"> * var param_3 = obj.top()</span></span><br><span class="line"><span class="comment"> * var param_4 = obj.getMin()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="160-相交链表"><a href="#160-相交链表" class="headerlink" title="160. 相交链表"></a>160. 相交链表</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220320145134.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>连接headA和headB 使得它们总路程相同<br>那么可以看 此时总路程相同 速度相同 如果有相交的点 那么最后肯定会到达该点<br>假设公共路径是c 第一条公共路径之前是a 第二条是b<br>那么第一条路径就是a+c+b+c<br>第二条就是b+c+a+c<br>当第一条走过 a+c+b的时候 第二条也走过了b+c+a 此时下一步的c就是交点或者终点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getIntersectionNode = <span class="function"><span class="keyword">function</span>(<span class="params">headA, headB</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> p1 = headA;</span><br><span class="line"><span class="keyword">let</span> p2 = headB;</span><br><span class="line"><span class="keyword">while</span>(p1!===p2)&#123;</span><br><span class="line">p1 = p1 ? p1.next : headB;</span><br><span class="line">p2 = p2 ? p2.next : headA;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="448-找到所有数组中消失的数字"><a href="#448-找到所有数组中消失的数字" class="headerlink" title="448. 找到所有数组中消失的数字"></a>448. 找到所有数组中消失的数字</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220320152709.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>思路 set去重之后找到利用set的has特性 如果不存在该数字就把数组原地的<code>nums[count]</code>修改为i ，最后分割数组即可。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findDisappearedNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(nums);</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">1</span>;i&lt;=nums.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!set.has(i))&#123;</span><br><span class="line">nums[count] = i;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nums.splice(<span class="number">0</span>,count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="169-多数元素"><a href="#169-多数元素" class="headerlink" title="169. 多数元素"></a>169. 多数元素</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220320153743.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>code<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> majorityElement = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    nums.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a-b</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> nums[<span class="built_in">parseInt</span>(nums.length/<span class="number">2</span>)]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a>283. 移动零</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220320162258.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>code<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moveZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> n = nums.length</span><br><span class="line">    <span class="keyword">let</span> k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">            nums[k++] = nums[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; n)&#123;</span><br><span class="line">        nums[k++] = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面试" scheme="https://zlinni.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试" scheme="https://zlinni.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出vue.js</title>
    <link href="https://zlinni.github.io/posts/885b6d5d3821/"/>
    <id>https://zlinni.github.io/posts/885b6d5d3821/</id>
    <published>2022-03-06T13:45:45.000Z</published>
    <updated>2022-03-18T11:44:22.842Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tip cogs"><p>记录《深入浅出Vue.js》这本书中的内容，以笔记的形式了解vue之中涉及的部分原理</p></div><h1 id="Object变化侦测"><a href="#Object变化侦测" class="headerlink" title="Object变化侦测"></a>Object变化侦测</h1><div class="tip "><p>vue的特性之一就是响应式系统，我们在学习的过程中知道它是通过侦测数据的变化进行视图的更新，而具体到其中的原理是什么呢？</p></div><h2 id="推和拉"><a href="#推和拉" class="headerlink" title="推和拉"></a>推和拉</h2><p>变化侦测分为两种类型 一种是推一种是拉。<br>在Angular和React里面，变化侦测的内容属于”拉“，意思是当状态发生变化的时候，它不知道哪个状态改变了。只知道状态有可能变了。然后发送一个信号告诉框架。<br>而在Vue当中，变化侦测属于”推”。当状态发送改变的时候，vue立刻就知道了，然后在一定程度上知道哪些状态变了。意味着vue能进行颗粒度更细的更新。</p><h2 id="颗粒度"><a href="#颗粒度" class="headerlink" title="颗粒度"></a>颗粒度</h2><p>所谓颗粒度呢，就是指某一个状态在发生更新的时候，会影响到多少节点。举个例子来说，假如一个状态绑定着很多个依赖，此时每个依赖表示一个具体的DOM节点，当这个状态改变的时候，会向所有依赖发出通知，进行更新操作。<br>因此颗粒度越细，开销也就越大，所以vue将粒度调为中等，同时将依赖绑定的DOM节点换为了组件。</p><h2 id="如何追踪变化"><a href="#如何追踪变化" class="headerlink" title="如何追踪变化"></a>如何追踪变化</h2><p>vue中，先前的版本里，es6对浏览器的支持并不理想，所以采取了<code>defineProperty</code>的方法而非<code>Proxy</code>，通过前者的方法可以很容易的侦测对象的变化，并用getter/setter来对对象进行响应式的处理。</p><h2 id="如何收集依赖"><a href="#如何收集依赖" class="headerlink" title="如何收集依赖"></a>如何收集依赖</h2><p>在本节中，依赖的收集其实是使用到了getter，触发依赖使用到了setter。</p><h2 id="依赖收集在哪里？"><a href="#依赖收集在哪里？" class="headerlink" title="依赖收集在哪里？"></a>依赖收集在哪里？</h2><p>很清晰的理解，知道要收集依赖，那么势必有保存依赖的地方，而这个地方最好是唯一的，全局性的，因为我们做出的改变需要通知到这个依赖，然后让这样依赖去反馈或者处理我们需要的数据等。<br>代码的编写方面 在get中push数据到window的全局变量中，然后在set中循环触发依赖。<br>但是这样编写代码还是有点耦合，于是把收集依赖处理依赖的代码封装成一个Dep类，这个类中有增删改查的方法，还要向依赖发送通知的方法。这样只需要在变化侦测的代码中实例化这个Dep类就可以使用以上方法。</p><h2 id="依赖是谁？"><a href="#依赖是谁？" class="headerlink" title="依赖是谁？"></a>依赖是谁？</h2><p>在上一小节中，知道依赖最好是存放到一个全局变量中访问和获取，并且在我们调用get的时候负责管理依赖的类会执行修改 set的时候会新增，但我们收集完这些依赖，实际上是要去告诉其他地方或者其他用到依赖的地方，去通知他们要修改，而对于这个起到通知作用的类，我们称之为Watcher。<br>(在下面会了解到依赖其实就是watcher实例)</p><h2 id="Watcher是谁？"><a href="#Watcher是谁？" class="headerlink" title="Watcher是谁？"></a>Watcher是谁？</h2><p>在vue的watch方法中，可以知道参数变化之后触发函数的功能。而这个Watcher类也是需要做到这样的事情。在代码中可以看见，作者通过将Watcher类的this赋值给全局变量，然后再读取值触发getter方法，将watcher实例传输到Dep类中，这样Dep就会获取到该实例并且进行增删改查。在增删改查的部分，还会用到watcher的update方法，这就是代码的神奇之处。<br>写到这里可能有点一头雾水，实际上依赖就是这个watcher实例，这个类就是负责通知Dep是否进行增删改查的。</p><h2 id="递归侦测所有key"><a href="#递归侦测所有key" class="headerlink" title="递归侦测所有key"></a>递归侦测所有key</h2><p>其实写到这里 已经满足了变化侦测的基本需求了。但是如果我们想检测到数据中所有的属性，光是上面还不够，需要封装一个Observer类。这个类将数据内的全部属性，包括子属性，都转化成getter、setter的形式，然后去追踪它们的变化。</p><h2 id="Observer的缺点"><a href="#Observer的缺点" class="headerlink" title="Observer的缺点"></a>Observer的缺点</h2><p>上面实现了传入一个obj变成响应式obj的Observer类。但其实它也存在缺点，比如我们要使用点运算符新增一个数据或者delete方法删除一个数据的时候，vue并不能检测到，这是因为getter/setter方法本身只支持数据的修改，不能检测到数据的增加和删除。但是vue提供了两个api来帮助解决这个问题。一个是<code>vm.$set</code>，另外一个是<code>vm.$delete</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>变化侦测就是侦测数据的变化，当数据发生变化的时候，能侦测到并发出通知。<br>Object通过defineProperty的方法来将属性转化为响应式来追踪数据的变化。我们需要在getter中收集依赖，当setter被触发的时候通知getter中收集的依赖数据发生变化。<br>收集依赖需要为依赖找到一个存储依赖的地方，为此创建了Dep用于收集依赖，删除依赖和向依赖发送信息。<br>所谓的依赖，其实就是Watcher。只有Watcher触发的getter才会收集依赖，哪个watcher触发了getter，就把哪个watcher收集到Dep。当数据发生变化的时候，会循环依赖列表，把所有的watcher都通知一遍。</p><h1 id="Array变化侦测"><a href="#Array变化侦测" class="headerlink" title="Array变化侦测"></a>Array变化侦测</h1><div class="tip "><p>上文介绍了Object的变化侦测 但是getter和setter方法并不会触发数组的方法，比如push，pull等等，下面讲解vue是如何操作使得数组的操作能够被检测</p></div><h2 id="如何追踪变化-1"><a href="#如何追踪变化-1" class="headerlink" title="如何追踪变化"></a>如何追踪变化</h2><p>我们知道Object的变化是靠setter来追踪的，一旦数据发送了变化 就触发setter。<br>那么我们只要操作数组的时候，通知到一个容器让他存储这种变化即可。<br>可惜的是在es6之前没有提供元编程的能力，也没有提供拦截原型方法的能力，但是程序员可以自己创建一个方法，取拦截<code>Array.prototype</code>之后我们想使用Array上面的方法去操作数组的时候，使用的都是拦截器上面的方法，然后在拦截器中使用原生Array原型上面的方法去操作数组。<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220317212521.png" alt=""></p><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>拦截器其实是一个和<code>Array.prototype</code>一样的<code>Object</code> 里面包含的属性一模一样，只不过这个<code>object</code>中某些可以改变数组和自身内容的方法是处理过的。<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220317213444.png" alt=""><br>代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayProto = <span class="built_in">Array</span>.prototype;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> arrayMethods = <span class="built_in">Object</span>.create(arrayProto);</span><br><span class="line">[<span class="string">&#x27;push&#x27;</span>,<span class="string">&#x27;pop&#x27;</span>,<span class="string">&#x27;shift&#x27;</span>,<span class="string">&#x27;unshift&#x27;</span>,<span class="string">&#x27;splice&#x27;</span>,<span class="string">&#x27;sort&#x27;</span>,<span class="string">&#x27;reverse&#x27;</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">method</span>))</span>&#123;</span><br><span class="line"><span class="comment">//缓存原始方法</span></span><br><span class="line"><span class="keyword">const</span> original = arrayProto[method];</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(arrayMethods,methods,&#123;</span><br><span class="line"><span class="attr">value</span>:<span class="function"><span class="keyword">function</span> <span class="title">mutator</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> original.apply(<span class="built_in">this</span>,args);<span class="comment">//触发Array上面的方法</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">enumerable</span>:<span class="literal">false</span>,</span><br><span class="line"><span class="attr">writable</span>:<span class="literal">true</span>,</span><br><span class="line"><span class="attr">configurable</span>:<span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在上面的代码中 创建了变量<code>arrayMethods</code>，继承自<code>Array.prototype</code>，所以有它的全部功能。然后用<code>arrayMethods</code>去覆盖数组原型。<br>接着封装数组的方法在<code>Object.defineProperty</code>中<br>假如使用的是push，那么实际上调用的是<code>arrayMethods.push</code>然后<code>arrayMethods.push</code>是函数<code>mutator</code>所以实际执行的是<code>mutator</code>函数<br>最后在<code>mutator</code>中执行<code>original</code>（它是原生数组原型上面的方法 比如push）来做它应该做的事情。<br>因此我们就可以在<code>mutator</code>中做一些其他的事情 比如发送变化通知。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端进阶" scheme="https://zlinni.github.io/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://zlinni.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>CDN内容分发网络</title>
    <link href="https://zlinni.github.io/posts/5e2ce1604d71/"/>
    <id>https://zlinni.github.io/posts/5e2ce1604d71/</id>
    <published>2022-02-25T10:59:07.000Z</published>
    <updated>2022-02-27T02:49:12.953Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>大家可能都有过这样的经历，把博客建立在类似github上面的外网上，然后国内正常的访问方式访问博客，静态资源的加载速度都非常的慢，解决这个问题的方法就是使用CDN，依赖市场上的CDN，可以实现博客的加速访问，接下来就来详细讲述CDN（内容分发网络）的原理。</p></div><h1 id="Content-Delivery-Network"><a href="#Content-Delivery-Network" class="headerlink" title="Content Delivery Network"></a>Content Delivery Network</h1><p>CDN全称是Content Delivery Network，俗称内容分发网络，它是集中在世界各地的边缘服务器的集合。当你的服务器需要给来自世界各地的用户响应内容的时候，由于距离原因难免会有很大的网络延迟，所以就有人专门在世界各地设置了能帮你转发内容的服务器，并且有专门的人员进行维护。这些服务器叫做边缘服务器，意思就是接近用户的服务器，它们构建起来就是内容分发网络体系。CDN的这些服务器就是近距离给用户发送网页内容的。<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227095858.png" alt=""></p><h1 id="分发内容"><a href="#分发内容" class="headerlink" title="分发内容"></a>分发内容</h1><p>CDN服务器分发的内容分为两个部分，一个是静态内容，一个是动态内容。<br>简单的理解可以是长期不需要改变的内容为静态内容，经常需要改变的内容为动态内容，就好比网页中的标题，导航栏等，就是一开始设计好之后就基本不会更改的。而类似于echarts图表这种，可能会随某些操作进行变化的称之为动态内容。<br>像博客这种大部分都是静态内容的就很适合使用CDN，接下来通过分发流程讲解原因。</p><h1 id="分发流程"><a href="#分发流程" class="headerlink" title="分发流程"></a>分发流程</h1><p>CDN肯定一开始是不知道源服务器给了什么内容的，就需要主服务器将静态内容提前push到CDN服务器上面，当世界各地的用户需要访问网站的时候，就近的CDN就把内容响应到客户端，这也就是说如果你的静态博客像hexo这样的，在本地发布好才上传的博客，就可以先将静态的内容通过主服务器缓存到CDN服务器上面，这样客户端访问就可以飞快的运行。<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227100752.png" alt=""><br>如果是动态内容，由于主服务器没办法预测用户会产生怎么样的动态数据，所以也就没办法提前缓存到CDN服务器上面，这样的话CDN的作用就不是很大了，虽然也有CDN能够提高动态的服务，比方说时间。时间是一直变动的，如果一直让主服务器提供时间的动态内容，万一主服务器产生了网络的波动，时间就没办法同步。这时候就可以采用CDN上面的接口。有些CDN会提供类似的时间接口，让主服务器用CDN上面的接口，这样用户就可以直接在CDN上面获取时间，而不是通过主服务器了<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227102557.png" alt=""><br>CDN的设置无形中给主服务器设置了一道墙，因为访问主服务器的内容就得先访问CDN服务器，这样就能减少或者避免DDOS攻击，但是这样一来就会攻击CDN服务器了。这样的话CDN服务器接受的了吗？</p><h1 id="安全性和可靠性"><a href="#安全性和可靠性" class="headerlink" title="安全性和可靠性"></a>安全性和可靠性</h1><p>CDN的老板们肯定考虑过这个问题，他们将检测多台服务器的负载情况，如果说某台服务器超载了，那么就把用户的请求移动到没有超载的CDN服务器上面，这种情况也称之为负载均衡。<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227102959.png" alt=""><br>但是CDN是怎么将这些流量转移到别的服务器的呢？这里值得一提的是这个名为任播的技术，利用它的通信方式，服务器对外都拥有同样的ip地址<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227103208.png" alt=""><br>如果这个ip地址收到用户的请求之后，请求就会由距离最近的CDN服务器响应，同样的道理，只要使用这个技术，不管你的攻击有多猛烈，都可以将流量转移到没有超载的服务器上面<br>不仅如此，CDN还会帮你把文件进行最小化或者压缩文档，就和webpack打包之后生成的js/css代码类似，省略掉不必要的字符后都是一行的。<br>最后正式因为CDN更加接近用户提供服务，大大减小了CDN到源服务器之间的带宽的占用和使用</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>大部分的镜像源和网站都会使用CDN，比如npm的unpkg，hexo使用的jsdelivr，这些免费的东西最后可能还是会避免不了被禁用的命运。比如后者在国内的驾驶照就被吊销了，只能使用所谓的“附近”节点，导致hexo有段时间直接GG，好在现在笔者所处的位置访问还算ok，可能以后会考虑部署到自己的服务器上面并购置CDN包吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端进阶" scheme="https://zlinni.github.io/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="网络" scheme="https://zlinni.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Vue打包优化+可视化js体积</title>
    <link href="https://zlinni.github.io/posts/105e254930e2/"/>
    <id>https://zlinni.github.io/posts/105e254930e2/</id>
    <published>2022-02-25T04:21:03.000Z</published>
    <updated>2022-02-25T06:39:00.813Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>最近在了解性能优化的时候发现了vue的打包优化，其原理就是通过cdn的方式引入插件从而减小打包后的js和css体积。还有一个则是一款插件，可以让vue打包后以网页的形式显示js和css体积，更加直观。</p></div><h1 id="webpack-bundle-analyzer"><a href="#webpack-bundle-analyzer" class="headerlink" title="webpack-bundle-analyzer"></a>webpack-bundle-analyzer</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">效果预览</button></li><li class="tab"><button type="button" data-href="#test-2">安装方式</button></li><li class="tab"><button type="button" data-href="#test-3">使用教程</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>鼠标移动到上面会显示相关的js大小<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220225123114.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>项目地址：<a href="https://github.com/webpack-contrib/webpack-bundle-analyzer">传送门</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># NPM</span></span><br><span class="line">npm install --save-dev webpack-bundle-analyzer</span><br><span class="line"><span class="comment"># Yarn</span></span><br><span class="line">yarn add -D webpack-bundle-analyzer</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ol><li>安装</li><li>打开<code>package.json</code>，修改<code>script</code>下面的<code>build</code><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;serve&quot;</span>: <span class="string">&quot;vue-cli-service serve&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;vue-cli-service build --report&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;vue-cli-service lint&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>新建<code>vue.config.js</code>写入以下内容<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BundleAnalyzerPlugin = <span class="built_in">require</span>(<span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>).BundleAnalyzerPlugin;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="keyword">new</span> BundleAnalyzerPlugin()</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>npm run build</code>打包项目，会在dist下面生成一个<code>report.html</code>，右键运行</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="vue打包优化-cdn"><a href="#vue打包优化-cdn" class="headerlink" title="vue打包优化+cdn"></a>vue打包优化+cdn</h1><p>原理：通过cdn的方式引入插件从而减小打包后的js和css体积<br>这里要用到<code>configureWebpack</code>里面的<code>externals</code>配置项，简单说一下该配置项:就是不通过npm下载的类库，在html文件中以script引入，然后在页面中使用import导入的这种方式<br>写法如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BundleAnalyzerPlugin = <span class="built_in">require</span>(<span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>).BundleAnalyzerPlugin;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">    <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">        <span class="attr">externals</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;vue&#x27;</span>:<span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;vue-router&#x27;</span>:<span class="string">&#x27;VueRouter&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;vuex&#x27;</span>:<span class="string">&#x27;Vuex&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;vuetify&#x27;</span>:<span class="string">&#x27;Vuetify&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="keyword">new</span> BundleAnalyzerPlugin()</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其中 配置项里面的键指的是<code>package.json</code>中依赖的名字，后面跟的是对应的cdn里面的全局变量，一般来说只要上述三个加ui（如果你的ui按需引入则不用添加上去）达到减小打包体积。<br>注意:</p><ol><li>你的页面有多少个全局插件，就引入多少个对应的值<br>然后在<code>public</code>下面的<code>index.html</code>中配置插件的地址，可以用免费的cdn引入，推荐bootcdn<a href="https://www.bootcdn.cn/">传送门</a>。<br>接着看你自己依赖中写的对应的版本，这里我的依赖放出来演示一下<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;core-js&quot;</span>: <span class="string">&quot;^3.6.5&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;echarts&quot;</span>: <span class="string">&quot;^5.3.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;less-loader&quot;</span>: <span class="string">&quot;^6.2.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;nanoid&quot;</span>: <span class="string">&quot;^3.2.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;pubsub-js&quot;</span>: <span class="string">&quot;^1.9.4&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;vue&quot;</span>: <span class="string">&quot;^2.6.11&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;vue-clock-lonlyape&quot;</span>: <span class="string">&quot;^1.2.1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;vue-router&quot;</span>: <span class="string">&quot;^3.5.3&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;vuetify&quot;</span>: <span class="string">&quot;^2.6.2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;vuex&quot;</span>: <span class="string">&quot;^3.6.2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;vuex-persist&quot;</span>: <span class="string">&quot;^3.1.3&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">        externals:&#123;</span><br><span class="line">          &#x27;vue&#x27;:&#x27;Vue&#x27;,</span><br><span class="line">          &#x27;vue-router&#x27;:&#x27;VueRouter&#x27;,</span><br><span class="line">          &#x27;vuex&#x27;:&#x27;Vuex&#x27;,</span><br><span class="line">          &#x27;vuetify&#x27;:&#x27;Vuetify&#x27;,</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure>举例这个vue是<code>2.6.11</code>版本的，就打开bootcdn搜索vue，找到该版本并复制<code>min.js</code><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220225142247.png" alt=""><br>从官网上拷贝到相应的cdn地址之后引入：<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220225124252.png" alt=""><br>之后重新打包即可看到体积比之前减小了很多。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端进阶" scheme="https://zlinni.github.io/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://zlinni.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>牛客网刷题record</title>
    <link href="https://zlinni.github.io/posts/2d20c31c4911/"/>
    <id>https://zlinni.github.io/posts/2d20c31c4911/</id>
    <published>2022-02-22T10:49:45.000Z</published>
    <updated>2022-03-01T10:53:46.506Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>记录一下牛客网的错题记录以及知识点，用于查漏补缺</p></div><h1 id="基础不牢，地动山摇Day1"><a href="#基础不牢，地动山摇Day1" class="headerlink" title="基础不牢，地动山摇Day1"></a>基础不牢，地动山摇Day1</h1><details class="folding-tag" blue><summary> 行内元素 </summary>              <div class='content'>              <p>行内元素典型代表 span  ,a,  ,strong , em,  del,  ins<br>特点：</p><ol><li>在一行上显示</li><li>不能直接设置宽高</li><li>元素的宽和高就是内容撑开的宽高。</li></ol><p>行内块元素（内联元素）典型代表  input  img<br>特点：</p><ol><li>在一行上显示</li><li>可以设置宽高</li></ol><p>块元素典型代表,div,h1-h6,p,ul,li<br>特点: </p><ol><li>独占一行</li><li>可以设置宽高</li><li>嵌套（包含）下，子块元素宽度（没有定义情况下）和父块元素宽度默认一致。<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220222191634.png" alt=""><br>行内元素不可以设置宽高，但是可以设置   左右padding、左右margin</li></ol>              </div>            </details><details class="folding-tag" blue><summary> `link`和`import` </summary>              <div class='content'>              <p>link除了引用样式文件，还可以引用图片等资源文件，而import只引用样式文件<br>link属于html范畴 import属于css范畴<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;any&quot;</span> <span class="attr">mask</span> <span class="attr">href</span>=<span class="string">&quot;//www.baidu.com/img/baidu.svg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><br>兼容性不同，link不存在兼容性的问题，import在IE5以上支持，是css2.1新增的<br>在样式表文件可以使用import导入其它的样式表文件，而link不可以<br>link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。<br>link支持使用Javascript控制DOM去改变样式；而@import不支持。<br>原文链接：<a href="https://blog.csdn.net/lxcao/article/details/52639442">https://blog.csdn.net/lxcao/article/details/52639442</a></p>              </div>            </details><details class="folding-tag" blue><summary> DOM事件 </summary>              <div class='content'>              <p>onchange()  事件会在域的内容改变时发生<br>比如：<code>&lt;input type=&quot;text&quot;&gt;, &lt;select&gt;, &lt;textarea&gt;</code></p><p>onblur()  会在对象失去焦点时发生</p>              </div>            </details><details class="folding-tag" blue><summary> css选择器 </summary>              <div class='content'>              <p>这次主要错在了相邻兄弟选择器<br>eg<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span> + <span class="selector-class">.b</span>&#123;xxx&#125;</span><br></pre></td></tr></table></figure><br>这样的是选择兄弟中第一个叫b的人，而不是所有兄弟b</p>              </div>            </details><details class="folding-tag" blue><summary> input的元素 </summary>              <div class='content'>              <p>text password radio checkbox submit reset file image search button<br>email url number range color<br>关于时间 (date, month, week, time, datetime, datetime-local)</p>              </div>            </details><details class="folding-tag" blue><summary> 获取用户位置H5 </summary>              <div class='content'>              <p><code>getCurrentPosition()</code></p>              </div>            </details><details class="folding-tag" blue><summary> fieldset </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220222191949.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> audio和video </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220222192302.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220222192326.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224164217.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> DHTML </summary>              <div class='content'>              <p>DHTML 将 HTML、JavaScript、DOM 以及 CSS 组合在一起，用于创造动态性更强的网页。<br>通过 JavaScript 和 HTML DOM，能够动态地改变 HTML 元素的样式。<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223205919.png" alt=""><br>DHTML具有三个主要优点：动态样式、动态内容、动态定位</p>              </div>            </details><details class="folding-tag" blue><summary> H5中可以省略结束标记的标签 </summary>              <div class='content'>              <p>选C，html5中可以省略结束标记的元素有<br>1、dd<br>2、dt<br>3、li<br>4、p<br>5、optgroup<br>6、option<br>7、rt<br>8、rp<br>9、thread<br>10、tfoot<br>11、tr<br>12、td<br>13、th </p>              </div>            </details><details class="folding-tag" blue><summary> 锚伪类 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220222192700.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> nthchild的n从0开始 </summary>              <div class='content'>              <p>xx</p>              </div>            </details><details class="folding-tag" blue><summary> BFC </summary>              <div class='content'>              <p>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与,<br>哪些情况会产生BFC:<br>根元素<br>float属性不为none<br>position为absolute或fixed<br>display为inline-block, table-cell, table-caption, flex, inline-flex<br>overflow不为visible<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223195229.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223195252.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> H5新增的标签 </summary>              <div class='content'>              <p>新增header，footer，nav，article，section，aside，datalist，audio，video，embed，input属性<br>没有head！！！</p>              </div>            </details><details class="folding-tag" blue><summary> ul和ol </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;blockquote&gt; 标签定义块引用。 &lt;h1&gt; - &lt;h6&gt; 标签可定义标题。 &lt;strong&gt; 标签和 &lt;em&gt; 标签一样，用于强调文本，但不加粗，是斜体。它强调的程度更强一些。 &lt;a&gt;标签定义超链接，用于从一张页面链接到另一张页面。 &lt;p&gt;标签定义段落。 &lt;section&gt; 标签定义文档中的节（section、区段）。 &lt;nav&gt; 标签定义导航链接的部分。 &lt;ul&gt; 标签定义无序列表。 &lt;ol&gt; 标签定义有序列表。</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> `button`不建议嵌套`a` </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A：&lt;p&gt; 元素的父元素不能是 &lt;a&gt; 元素（最后一个 &lt;p&gt; 元素不满足这条件），见 MDN</span><br><span class="line">B: &lt;button&gt; 是行内块元素，可以嵌套行内元素。但是，不推荐嵌套 &lt;a&gt; 元素！！！</span><br><span class="line">   在比较多的 UI 库中，都是 &lt;a&gt; 元素嵌套 &lt;button&gt; 元素的。（自己试一下就知道区别了）</span><br><span class="line">C：正确</span><br><span class="line">D：&lt;dl&gt;、&lt;dt&gt;、&lt;dd&gt; 、&lt;h&gt;这些 标题标签 不推荐嵌套块级元素</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> `img` </summary>              <div class='content'>              <p><code>img</code>是<code>src</code>不是<code>href</code></p>              </div>            </details><details class="folding-tag" blue><summary> 定位 </summary>              <div class='content'>              <p>relative是相对于自身进行偏移的</p>              </div>            </details><h1 id="基础不牢，地动山摇Day2"><a href="#基础不牢，地动山摇Day2" class="headerlink" title="基础不牢，地动山摇Day2"></a>基础不牢，地动山摇Day2</h1><div class="note primary flat"><p>今天先回顾一下day1的错题，然后今天开始有每日总结</p></div><details class="folding-tag" blue><summary> H5元素 </summary>              <div class='content'>              <p>h5没有删除small元素<br>废除了能用css代替的元素：basefont、big、center、font、s、strike、tt、u</p>              </div>            </details><details class="folding-tag" cyan><summary> 空元素 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223104325.png" alt=""><br><code>address</code>用于定义文档或文章的作者/拥有者的联系信息。<br><code>&lt;embed&gt;</code> 标签定义嵌入的内容，比如插件。<br><code>&lt;wbr&gt;</code>元素来添加 Word Break Opportunity（单词换行时机）。</p>              </div>            </details><details class="folding-tag" cyan><summary> date </summary>              <div class='content'>              <p><code>&lt;input type=&quot;datetime-local&quot; &gt;</code>可以用来显示本地时间，且时间不可以修改</p>              </div>            </details><details class="folding-tag" cyan><summary> meta标签 </summary>              <div class='content'>              <p>meta标签是描述一些基本的元数据<br>head标签可以包含，title、meta、link、script 等<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223110914.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> dl标签 </summary>              <div class='content'>              <p>dl标签定义一个描述列表<br>dl标签和dt标签（定义项目/名字）和dd标签（描述每一个项目/名字）一起使用<br>且dt和dd同级，但dt要在dd前面</p>              </div>            </details><details class="folding-tag" cyan><summary> radio属性与label绑定 </summary>              <div class='content'>              <p>input中的radio属性以name来划分组，有且仅有一个被选中<br>label和radio绑定有两种方法</p><ol><li>label和input同级，label的for属性值与input的id相同<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;radioA&quot;</span> <span class="attr">name</span>=<span class="string">&quot;radio1&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;radioA&quot;</span>&gt;</span>这是radioA<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;radioB&quot;</span> <span class="attr">name</span>=<span class="string">&quot;radio1&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;radioB&quot;</span>&gt;</span>这是radioB<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>label里面嵌套input<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;radio2&quot;</span>&gt;</span>这是radioA<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;radio2&quot;</span>&gt;</span>这是radioB<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>另外注意label只有两个属性for（规定 label 绑定到哪个表单元素）和form（规定 label 字段所属的一个或多个表单）</li></ol>              </div>            </details><details class="folding-tag" cyan><summary> 注释问题 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223105322.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> object元素 </summary>              <div class='content'>              <p>称为html嵌入对象元素，表示引入一个外部资源，这个资源可能是一张图片，一个嵌入的浏览上下文，亦或是一个插件所使用的资源<br><code>param</code>用来为object或applet元素定义的对象或小程序进行初始化参数设置，param为object、applet的子元素，因此param只可以放置在object、applet元素的标签内容中。</p>              </div>            </details><details class="folding-tag" cyan><summary> contextmenu 和 spellcheck </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223105622.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> 脱标 </summary>              <div class='content'>              <p>浮动（float）、固定定位（fixed）和绝对定位（absolute）都会使元素脱离文档流</p>              </div>            </details><details class="folding-tag" cyan><summary> track标签 </summary>              <div class='content'>              <p><track> 标签为诸如 video 元素之类的媒介规定外部文本轨道。</p><p>用于规定字幕文件或其他包含文本的文件，当媒介播放时，这些文件是可见的。</p><p><track> 标签是 HTML 5 中的新标签。<br>目前所有主流浏览器都不支持 <track> 标签</p>              </div>            </details><details class="folding-tag" cyan><summary> canvas和svg比较 </summary>              <div class='content'>              <p>Canvas 与 SVG 的比较<br>下表列出了 canvas 与 SVG 之间的一些不同之处。</p><p>Canvas<br>依赖分辨率<br>不支持事件处理器<br>弱的文本渲染能力<br>能够以 .png 或 .jpg 格式保存结果图像<br>最适合图像密集型的游戏，其中的许多对象会被频繁重绘<br>Canvas 是逐像素进行渲染的。</p><p>在 canvas 中，一旦图形被绘制完成，它就不会继续得到浏览器的关注。如果其位置发生变化，那么整个场景也需要重新绘制，包括任何或许已被图形覆盖的对象。</p><p>什么是SVG?<br>SVG 指可伸缩矢量图形 (Scalable Vector Graphics)<br>SVG 用来定义用于网络的基于矢量的图形<br>SVG 使用 XML 格式定义图形<br>SVG 图像在放大或改变尺寸的情况下其图形质量不会有所损失<br>SVG 是万维网联盟的标准<br>SVG 与诸如 DOM 和 XSL 之类的 W3C 标准是一个整体<br>(SVG是HTML下的一个分支)</p><p>SVG<br>不依赖分辨率<br>支持事件处理器<br>最适合带有大型渲染区域的应用程序（比如谷歌地图）<br>复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）<br>不适合游戏应用</p>              </div>            </details><details class="folding-tag" cyan><summary> 高亮显示 </summary>              <div class='content'>              <p>mark<br>jquery的话是highlight<br>（1）highlight jQuery中的，突出特效，通过改变背景颜色来隐藏或者显示一个元素<br>（2）mark h5中的标签，定义带有记号的文本，文本高亮显示<br>（3）strong HTML中的标签，定义重要文本，用来加粗文本<br>（4）blink 是js中的方法，用于显示闪动的字符串，不能用于ie，Chrome，Safari</p>              </div>            </details><details class="folding-tag" cyan><summary> form属性 </summary>              <div class='content'>              <p>首先form的methods里面只有get和post 其他的方法是在ajax里面的<br>然后enctype属性规定发送到服务器之前一个如何对表单数据进行编码，它的默认值是<code>application/x-www-form-urlencoded</code></p>              </div>            </details><details class="folding-tag" cyan><summary> h5新特性 </summary>              <div class='content'>              <p>audio和video支持<br>Canvas<br>localStorage<br>WebSocket<br>…</p>              </div>            </details><details class="folding-tag" cyan><summary> 属性值顺序 </summary>              <div class='content'>              <p>上右下左 顺时针</p>              </div>            </details><details class="folding-tag" cyan><summary> 获取selected文本框的值或文本 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223123244.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> extra 知识 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223123424.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> 父类高度塌陷问题 </summary>              <div class='content'>              <p>如果子元素都是浮动</p><ol><li>直接给父元素设置高度，在子元素改变的情况下，此方法使用起来比较繁杂。</li><li>给父元素直接设置 overflow:hidden;样式 </li><li>父元结束标签之前加空div，样式为 clear：both； </li><li>伪元素选择器,父元素加上clearfix</li></ol>              </div>            </details><details class="folding-tag" cyan><summary> jq滑动 </summary>              <div class='content'>              <p><code>slideUp()</code>和<code>slideDown</code>都是jQuery函数，<code>slideUp()</code>通过使用滑动效果，隐藏被选元素，如果元素已显示出来的话。<code>slideDown()</code> 方法通过使用滑动效果，显示隐藏的被选元素。</p>              </div>            </details><details class="folding-tag" cyan><summary> WebStorage </summary>              <div class='content'>              <p>其实就是localStorage和sessionStorage的统称。<br>WebStorage存储是HTML5为数据存储在客户端提供的一项重要功能，分为两种：sessionStorage(保存会话数据)和loaclStorage(在客户端长期保存数据)。</p>              </div>            </details><details class="folding-tag" cyan><summary> svg标签 </summary>              <div class='content'>              <p>SVG 即 Scalable Vector Graphics，是一种用来绘制 矢量图 的 HTML5 标签。你只需定义好XML属性，就能获得一致的图像元素。<br>svg的嵌入：使用object标签才行 不能直接嵌入</p>              </div>            </details><details class="folding-tag" cyan><summary> 怪异模式/兼容模式 </summary>              <div class='content'>              <p>在 HTML 中，文档类型 doctype 的声明是必要的。在所有文档的头部，你都将会看到”&lt;!DOCTYPE html&gt;” 的身影。这个声明的目的是防止浏览器在渲染文档时，切换到我们称为“怪异模式(兼容模式)”的渲染模式。“&lt;!DOCTYPE html&gt;” 确保浏览器按照最佳的相关规范进行渲染，而不是使用一个不符合规范的渲染模式。<br>也就是没有声明的话是进入怪异模式</p>              </div>            </details><details class="folding-tag" cyan><summary> h5跨文档消息传输 </summary>              <div class='content'>              <p>h5提供了网页文档之间发送信息和相互接收的功能。使用这个功能，只要获得网页窗口所在对象的实例，既可以实现同域 跨域的通信</p>              </div>            </details><details class="folding-tag" cyan><summary> 权重计算 </summary>              <div class='content'>              <p>1.通配符选择器和继承:权重为0， 2.标签选择器:权重为0001 3.类选择器:权重为0010 4.id选择器:权重为0100 5.行内样式:权重为1000 6.!important:权重为无穷大<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223200820.png" alt=""><br>另外值得一提的是 继承的优先级是没有自身设置的高的 即使继承的是<code>!important</code></p>              </div>            </details><details class="folding-tag" cyan><summary> h5新增 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223195547.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223195557.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> border边框 </summary>              <div class='content'>              <p>none 无边框样式 自然没有宽度这一说<br>0 边框宽度0<br>定义边框的时候除了设置宽度还要设置边框的样式才行</p>              </div>            </details><details class="folding-tag" cyan><summary> 默认加粗 </summary>              <div class='content'>              <p>h1-6和th<br>em是斜体<br>caption是表格标题</p>              </div>            </details><details class="folding-tag" cyan><summary> hidden和none </summary>              <div class='content'>              <p>hidden的元素没有被渲染 但是元素内容是被创建了<br>none会触发回流<br>hidden会触发重绘<br>repaint(重绘) ，repaint发生更改时，元素的外观被改变，且在没有改变布局的情况下发生，如改变outline,visibility,background color，不会影响到dom结构渲染。</p><p>reflow(渲染)，与repaint区别就是他会影响到dom的结构渲染，同时他会触发repaint，他会改变他本身与所有父辈元素(祖先)，这种开销是非常昂贵的，导致性能下降是必然的，页面元素越多效果越明显。<br>回流一定会重绘 重绘不一定回流</p>              </div>            </details><details class="folding-tag" cyan><summary> dom中htmldivelement的正确继承关系是 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223200333.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> link标签的加载和解析 </summary>              <div class='content'>              <p>link标签是同时加载的 先加载完成的优先解析<br>js才是先加完一个再加另外一个</p>              </div>            </details><details class="folding-tag" cyan><summary> input标签的readonly </summary>              <div class='content'>              <p>readonly只读，用户不可以修改，但可以复制，也可以通过tab切换到该字段，还可以用js设置条件控制用户是否可以更改输入内容<br>step规定输入字段的合法数字间隔 比如说2 那么合法数字就是-2 0 2 4等<br>为负数或0的时候默认为1<br>disabled指当 input 元素加载时禁用此元素。input内容不会随着表单提交<br>readonly规定输入字段为只读。input内容会随着表单提交。<br>无论设置readonly还是disabled，通过js脚本都能更改input的value（亲测可以）</p>              </div>            </details><details class="folding-tag" cyan><summary> h5新增的input元素的type属性 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223201207.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> h5大小写 </summary>              <div class='content'>              <p>h5对大小写不敏感 但为了规范推荐小写</p>              </div>            </details><details class="folding-tag" cyan><summary> h5的`data-` </summary>              <div class='content'>              <p>h5允许使用<code>data-xx</code>来自定义数据</p>              </div>            </details><details class="folding-tag" cyan><summary> h5之前的版本是 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223210854.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> 优化滚动性能 </summary>              <div class='content'>              <p>重绘重排节流防抖<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223210917.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> p元素a元素包含问题 </summary>              <div class='content'>              <p>p不能包含任何块级元素包括自身<br>a可以包含任何其他元素除了自身</p>              </div>            </details><details class="folding-tag" cyan><summary> document </summary>              <div class='content'>              <p>dom树的根节点是document<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224162234.png" alt=""><br><code>getElementsByName()</code>是获取name<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224162317.png" alt=""></p>              </div>            </details><h1 id="基础不牢，地动山摇Day3"><a href="#基础不牢，地动山摇Day3" class="headerlink" title="基础不牢，地动山摇Day3"></a>基础不牢，地动山摇Day3</h1><details class="folding-tag" cyan><summary> a标签 </summary>              <div class='content'>              <p>有href才有下划线<br>href 属性的可选有：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 绝对路径（href = &quot;https://www.baidu.com&quot;）</span><br><span class="line">2. 相对路径（href = &quot;index.html&quot;）</span><br><span class="line">3. 锚（href = &quot;#top&quot;）</span><br></pre></td></tr></table></figure></p>              </div>            </details><details class="folding-tag" cyan><summary> 内容重要程度mark strong em b </summary>              <div class='content'>              <p>重要程度递减<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224092010.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> 重绘和重排(重点) </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224092054.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> td单元格 </summary>              <div class='content'>              <p>td标准意义指的是单元格 而不是列</p>              </div>            </details><details class="folding-tag" cyan><summary> textarea标签 </summary>              <div class='content'>              <p>textarea不能设置宽度 但是可以通过cols控制宽度</p>              </div>            </details><details class="folding-tag" cyan><summary> embed标签 </summary>              <div class='content'>              <p>定义嵌入的内容 比如插件 可以设置高度和宽度</p>              </div>            </details><details class="folding-tag" cyan><summary> head间的代码 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224092628.png" alt=""><br>其实页面是有能力进行响应式设计的，但是只是没有规范到合适的大小</p>              </div>            </details><details class="folding-tag" cyan><summary> vm视口单位 </summary>              <div class='content'>              <p>vm是视口单位，将视口分为100份</p>              </div>            </details><details class="folding-tag" cyan><summary> 无继承性的属性值 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224092829.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> 有继承性的属性值 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224092849.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224092906.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> q标签 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224093116.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> 定义滑块range </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224093154.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> 上标文本sup下标文本sub </summary>              <div class='content'>              <p>如上</p>              </div>            </details><details class="folding-tag" cyan><summary> manifest标签 </summary>              <div class='content'>              <p>应用缓存资源清单<br>带有缓存 manifest 的 HTML 文档（用于离线浏览）<br>manifest 文件是一个简单的文本文件，列举出了浏览器用于离线访问而缓存的资源。<br>HTML5 引入了应用程序缓存，即意味着 Web 应用程序可以被缓存，然后在无互联网连接的时候进行访问。<br>应用程序缓存使得应用程序有三个优点：</p><ol><li>离线浏览 - 用户可以在离线时使用应用程序</li><li>快速 - 缓存的资源可以更快地加载</li><li>减少服务器加载 - 浏览器只从服务器上下载已更新/已更改的资源</li></ol>              </div>            </details><details class="folding-tag" cyan><summary> h5新特性 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224094058.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> HTML5 是作为Flash的替代技术出现 </summary>              <div class='content'>                            </div>            </details><details class="folding-tag" cyan><summary> 浏览器渲染流程 </summary>              <div class='content'>              <ol><li>解析HTML并构建DOM树</li><li>构建render树</li><li>布局render树</li><li>绘制render树</li></ol>              </div>            </details><details class="folding-tag" cyan><summary> 创建带有id的dom元素有什么副作用 </summary>              <div class='content'>              <p>首先会增加内存负担，然后是会创建同名的全局变量，可以用<code>window[&#39;xx&#39;]</code>访问</p>              </div>            </details><details class="folding-tag" cyan><summary> css加载 </summary>              <div class='content'>              <p>css加载不会阻塞DOM树的解析<br>css加载会阻塞DOM树的渲染<br>css加载会阻塞后面js语句的执行</p>              </div>            </details><details class="folding-tag" cyan><summary> 优化滚动性能 </summary>              <div class='content'>              <ol><li>在滚动中对滚动函数进行节流处理</li><li>滚动中减少导致重绘的操作</li><li>滚动中减少导致重排的操作</li><li>对滚动事件进行防抖处理</li></ol>              </div>            </details><details class="folding-tag" cyan><summary> web表单的图形验证码 </summary>              <div class='content'>              <p>最好不要把验证码文本放在客户端 否则虫或者是恶意程序依旧可以通过各种手段获取你嵌入在html文本或者保存在cookie中的正确验证码文本，模拟表单提交来达到攻击的目的。<br>浏览器也不能判断验证码<br>正确的方式是：发送到客户端的只有图片形式的验证码，服务器端保存cookie对应的图形验证码的正确文本。客户端表单提交时到服务器端验证。</p>              </div>            </details><details class="folding-tag" cyan><summary> 外边距塌陷问题 </summary>              <div class='content'>              <p>当两个在标准流中相邻（兄弟或父子关系）的块级元素的外边距组合在一起的时候，垂直方向上会发生外边距塌陷的问题，计算方式：</p><ol><li>两个都为正，取最大</li><li>一正一负加起来</li><li>两个负 取绝对值最大</li></ol>              </div>            </details><details class="folding-tag" cyan><summary> clientWidth和offsetWidth </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224153703.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> window对象 </summary>              <div class='content'>              <p>如果页面中包含框架，那么每个框架都拥有自己的window对象</p>              </div>            </details><details class="folding-tag" cyan><summary> a标签 </summary>              <div class='content'>              <p>在a标签的href中添加<code>javascript:;</code>可以使页面不跳转<br><code>#</code>不是，是当前位置</p>              </div>            </details><details class="folding-tag" cyan><summary> json和xml比较 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON 和 XML 优缺点的比较 （1）【XML】的优缺点 优点： （1）格式统一，符合标准； （2）容易与其他系统进行远程交互，数据传输比较方便。 缺点： （1）XML文件庞大，文件格式复杂，传输占带宽； （2）服务器端和客户端都需要花费大量代码来解析XML，导致服务器端和客户端代码变得异常复杂且不易维护； （3）客户端不同浏览器之间解析XML的方式不一致，需要重复编写很多代码； （4）服务器端和客户端解析XML花费较多的资源和时间。 那么除了XML格式，还有一种叫JSON （2）【JSON】的优缺点 优点： （1）数据格式比较简单，易于读写，格式都是压缩的，占用带宽小； （2）易于解析，客户端JavaScript可以简单的通过eval_r()进行JSON数据的读取； （3）支持多种语言，包括ActionScript, C, C#, ColdFusion, Java, JavaScript, Perl, PHP, Python, Ruby等服务器端语言，便于服务器端的解析； （4）在PHP世界，已经有PHP-JSON和JSON-PHP出现了，偏于PHP序列化后的程序直接调用，PHP服务器端的对象、数组等能直接生成JSON格式，便于客户端的访问提取； （5）因为JSON格式能直接为服务器端代码使用，大大简化了服务器端和客户端的代码开发量，且完成任务不变，并且易于维护。 缺点： （1） 没有XML格式这么推广的深入人心和喜用广泛，没有XML那么通用性； （2）JSON格式目前在Web Service中推广还属于初级阶段</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" cyan><summary> 跨域 </summary>              <div class='content'>              <p>字体有的可能会受到影响<br>图片和css这类的 采用src的一般不会 因为src本质是get请求</p>              </div>            </details><details class="folding-tag" cyan><summary> enctype属性 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224162843.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> html全局属性 </summary>              <div class='content'>              <p>html全局属性就是所有标签都能用的属性</p>              </div>            </details><h2 id="css-part"><a href="#css-part" class="headerlink" title="css part"></a>css part</h2><details class="folding-tag" blue><summary> margin外边距 </summary>              <div class='content'>              <p><code>margin:auto</code>是根据剩余的长度居中对齐 并不是0</p>              </div>            </details><details class="folding-tag" blue><summary> 定位 </summary>              <div class='content'>              <p>absolute是基于第一个static定位以外的父元素进行定位<br>static定位就是默认值 没有定位</p>              </div>            </details><details class="folding-tag" blue><summary> overflow </summary>              <div class='content'>              <p>参数是scroll时候，必会出现滚动条。<br>参数是auto时候，子元素内容大于父元素时出现滚动条。<br>参数是visible时候，溢出的内容出现在父元素之外。<br>参数是hidden时候，溢出隐藏。</p>              </div>            </details><details class="folding-tag" blue><summary> 页面元素的优先显示以及优先级 </summary>              <div class='content'>              <p>在不涉及样式的情况下 优先显示指的是html文档加载时从上到下加载 只与标签的上下顺序有关，与标签的选用无关。<br>优先级是帧元素比表单元素优先 表单元素比非表单元素优先</p>              </div>            </details><details class="folding-tag" blue><summary> 浮动元素重叠 </summary>              <div class='content'>              <ol><li>行内元素和浮动元素发生重叠的时候，行内元素的边框 背景 内容都会在浮动元素之上</li><li>块状元素和浮动元素发生重叠的时候，边框，背景在浮动元素之下，内容在浮动元素之上</li></ol>              </div>            </details><details class="folding-tag" blue><summary> `:before`选择器 </summary>              <div class='content'>              <p>早在css2.1的时候就已经定义了</p>              </div>            </details><details class="folding-tag" blue><summary> `background-position`背景定位 </summary>              <div class='content'>              <p>用处：配合<code>background-image</code>属性一起使用，用于设置背景图片在盒子中的位置<br>参数：<code>xpos ypos |x% y% |x y三种,</code><br>如果只写第一个参数 那么第二个参数会默认为<code>center|50%|容器高度一半的px</code><br>Xpos：规定水平方向的对齐方式,值有left,right,center<br>Ypos：规定垂直方向的对齐方式,值有top,bottom,center<br>x%:规定图片水平方向的距离。<br>你会不会以为这个x%就是父级容器宽度的x%？那你就想错了哦，这里的x%指的是父级容器的宽度减去图片的宽度后的差值的x%。<br>举个栗子：background-position：50%，20%；<br>图片的宽度为     imgwidth：100px；高度为     imgheight：100px；<br>容器的宽度为     conwidth：200px；高度为     conheight：200px；<br>那么此时图片的左顶点距离容器的左顶点的水平距离就是(conwidth-imgwidth)<em>50%=50px,而不是conwidth</em>50%=100px；(很好理解的吧，不然盒子宽度200px，图片宽度100px，又距离左边100px，岂不是50%没实现水平居中而紧靠右了吗？)<br>由此也可以算出图片的左顶点距离容器的左顶点的垂直距离为20px<br>y%:对应x%<br>x:图片距离容器水平方向距离<br>y:图片距离容器垂直方向距离</p>              </div>            </details><details class="folding-tag" blue><summary> 字体三个单位 </summary>              <div class='content'>              <p>em的值并不是固定的， 会继承父级元素的字体大小。px为固定单位。 pt 绝对长度单位 </p>              </div>            </details><details class="folding-tag" blue><summary> 动画 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224203730.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> css sprite </summary>              <div class='content'>              <p>CSS Sprites在国内很多人叫css精灵，是一种网页图片应用处理方式。它允许你将一个页面涉及到的所有零星图片都包含到一张大图中去，这样一来，当访问该页面时，载入的图片就不会像以前那样一幅一幅地慢慢显示出来了。<br>利用CSS的“background-image”，“background- repeat”，“background-position”的组合进行背景定位，background-position可以用数字精确的定位出背景图片的位置。<br>利用CSS Sprites能很好地减少网页的http请求，从而大大的提高页面的性能，这也是CSS Sprites最大的优点，也是其被广泛传播和应用的主要原因；<br>CSS Sprites能减少图片的字节，曾经比较过多次3张图片合并成1张图片的字节总是小于这3张图片的字节总和。所以C错误<br>解决了网页设计师在图片命名上的困扰，只需对一张集合的图片上命名就可以了，不需要对每一个小元素进行命名，从而提高了网页的制作效率。<br>更换风格方便，只需要在一张或少张图片上修改图片的颜色或样式，整个网页的风格就可以改变。维护起来更加方便。</p>              </div>            </details><details class="folding-tag" blue><summary> cellpadding和cellspacing </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224212442.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> div 元素的哪些 CSS 属性的默认值为 0？ </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224212703.png" alt=""></p>              </div>            </details><h1 id="基础不牢，地动山摇Day4"><a href="#基础不牢，地动山摇Day4" class="headerlink" title="基础不牢，地动山摇Day4"></a>基础不牢，地动山摇Day4</h1><p>今天不出意外css应该就结束然后进入js篇章<br>承接上面的css继续写<br><details class="folding-tag" blue><summary> `text-shadow`属性 </summary>              <div class='content'>              <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: h-shadow v-shadow blur color;</span><br></pre></td></tr></table></figure><p>h-shadow指的是水平阴影，必需<br>v-shadow是垂直阴影，必需<br>blur模糊 color颜色<br>可以说是：<br>阴影离开文字的横方向距离，阴影离开文字的纵方向距离，阴影的模糊半径，阴影的颜色</p>              </div>            </details><details class="folding-tag" blue><summary> 百分比单位 </summary>              <div class='content'>              <p>宽泛的讲这个百分比单位应该是相对于父元素的，但也有特例的情况：</p><ol><li>line-height的百分比是相对于自身字体的大小</li><li>fixed定位的百分比是相对于视口的</li></ol>              </div>            </details><details class="folding-tag" blue><summary> 理论上的最小动画间隔 </summary>              <div class='content'>              <p>多数显示器的刷新率是60hz 即每秒刷新60次，所以理论上最小间隔是<code>1/60*1000ms=16.7ms</code></p>              </div>            </details><details class="folding-tag" blue><summary> css预编译工具 </summary>              <div class='content'>              <p>CSS 预编译工具有stylus，sass，less</p>              </div>            </details><details class="folding-tag" blue><summary> `list-style-type` </summary>              <div class='content'>              <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//标记圆圈（默认）</span><br><span class="line"><span class="attribute">list-style-type</span>:circle;</span><br><span class="line">//方块</span><br><span class="line"><span class="attribute">list-style-type</span>:square;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220225152635.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> 伪类和伪元素的区别 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">伪类  :link  :hover         伪元素  ::before    ::after</span><br></pre></td></tr></table></figure><p>其中伪类和伪元素的根本区别在于：它们是否创造了新的元素,,   这个新创造的元素就叫  “伪无素” 。<br>伪元素/伪对象：不存在在DOM文档中，是虚拟的元素，是创建新元素。 这个新元素(伪元素)  是某个元素的子元素，这个子元素虽然在逻辑上存在，但却并不实际存在于文档树中.<br>伪类：存在DOM文档中，(无标签,找不到,  只有符合触发条件时才能看到 ),  逻辑上存在但在文档树中却无须标识的“幽灵”分类。</p>              </div>            </details><details class="folding-tag" blue><summary> css继承 </summary>              <div class='content'>              <p>只有颜色，文字，字体间距行高对齐方式，和列表的样式可以继承<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220225154948.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> `text-overflow` </summary>              <div class='content'>              <p><code>text-overflow: ellipsis;</code>使超出的文字部分变成<code>「…」()</code></p>              </div>            </details><details class="folding-tag" blue><summary> `@font-face` </summary>              <div class='content'>              <p>css使用服务端字体的方式<code>@font-face</code><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220225160740.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> `currentColor` </summary>              <div class='content'>              <p>css3拓展了颜色值包括了currentColor关键字，它的值是计算之后的color值，当它被应用在color属性自身，相当于<code>color: inherit</code></p>              </div>            </details><details class="folding-tag" blue><summary> css注释 </summary>              <div class='content'>              <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*this is a comment*/</span></span><br></pre></td></tr></table></figure>              </div>            </details></p><h2 id="js篇"><a href="#js篇" class="headerlink" title="js篇"></a>js篇</h2><details class="folding-tag" blue><summary> 变量提升，函数提升 </summary>              <div class='content'>              <p>用var声明的变量会先在全局创建好然后赋值为undefined，最后在赋值为相应的值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jojo = <span class="string">&#x27;jostar&#x27;</span>;</span><br><span class="line"><span class="comment">//其实是</span></span><br><span class="line"><span class="keyword">var</span> jojo = <span class="literal">undefined</span>;</span><br><span class="line">jojo = <span class="string">&#x27;jostar&#x27;</span></span><br></pre></td></tr></table></figure><br>这就是变量提升。如果有多个同名变量提升，后面会覆盖前面的<br>函数提升的话，是js引擎把函数声明提前到了整个作用域的顶部，<br>举例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hoistFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    foo(); <span class="comment">// output: I am hoisted</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;I am hoisted&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hoistFunction();</span><br><span class="line"><span class="comment">//实际上是</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hoistFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;I am hoisted&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    foo(); <span class="comment">// output: I am hoisted</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hoistFunction();</span><br></pre></td></tr></table></figure><br>如果有多个同名函数提升 后面的会覆盖前面的<br>那么会考察到变量提升和函数提升是什么时候呢？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">3</span>);&#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">4</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = fn();</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure><br>这个时候是输出什么呢？<br>可以知道函数提升是大于变量提升的，所以此时的预编译应该是<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">4</span>);&#125;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    a=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line">a=<span class="number">1</span>;</span><br><span class="line">b=fn();</span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//2</span></span><br></pre></td></tr></table></figure></p>              </div>            </details><details class="folding-tag" blue><summary> ==与null与undefined </summary>              <div class='content'>              <p>在==的情况下，null和undefined与其他任何有意义的值比较都是返回false，只有它们两个比较的时候会返回true</p>              </div>            </details><details class="folding-tag" blue><summary> split </summary>              <div class='content'>              <p>split方法只能检测正则或者字符串，如果不是则返回typeerror</p>              </div>            </details><details class="folding-tag" blue><summary> history的back go forward </summary>              <div class='content'>              <p>go里面带数字 正数表示前进 负数表示后退</p>              </div>            </details><details class="folding-tag" blue><summary> JavaScript的全局函数 </summary>              <div class='content'>              <p>个人记忆方法：6（编码相关）+ 2（数据处理）+ 4（数字相关）+ 1（特殊）<br>编码相关：<br>    escape()、unescape()、encodeURI()、decodeURI()、<br>    encodeURIComponent()、decodeURIComponent()<br>数据处理：<br>    Number()、String()<br>数字相关：<br>    isFinite()、isNaN()、parseFloat()、parseInt()<br>特殊：<br>    eval()</p><p>ps:对于 getClass() 方法不确定，菜鸟教程上没有，Chrome 控制台也没提示。</p>              </div>            </details><h1 id="基础不牢，地动山摇Day5"><a href="#基础不牢，地动山摇Day5" class="headerlink" title="基础不牢，地动山摇Day5"></a>基础不牢，地动山摇Day5</h1><details class="folding-tag" blue><summary> 类型转换 </summary>              <div class='content'>              <p>在js中任何对象转化为布尔值都是true<br>只有<code>0,-0,NaN,&quot;&quot;,null,undefined</code>这六个值转化为布尔值才是false<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220226092430.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> js原始值 </summary>              <div class='content'>              <p>ECMAScript中，变量可以存放两种类型的值，即原始值和引用值。<br>原始值是存储在栈中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。<br>引用值是存储在堆中的对象，也就是说，存储在变量处的值是一个指针，指向存储对象的内存处。<br>ECMAScript中有5种原始类型，即undefined、null、number、string、boolean。<br>选项中的值分别是：string、number、null，而最后一个是数组，数组是一个对象，所以是引用值。</p>              </div>            </details><details class="folding-tag" blue><summary> 对话框 </summary>              <div class='content'>              <p><code>prompt()</code></p>              </div>            </details><details class="folding-tag" blue><summary> defineProperty </summary>              <div class='content'>              <p><code>defineProperty</code>为对象设置属性后，该属性的描述符<code>writable</code>、<code>configurable</code>以及<code>enumberable</code>默认为false。<br><code>configurable</code>：可否修改，false则不能被删除等<br><code>enumberable</code>：可否枚举，false则不能被遍历，输出长度没有该项，不能打印该项</p>              </div>            </details><details class="folding-tag" blue><summary> Math函数 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220226095854.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> call 、bind 、 apply </summary>              <div class='content'>              <p>返回的第一个参数都是this指向的对象，区别在第二个参数，<br>call的第二个参数必须用逗号分割<code>p1,&#39;xx1&#39;,&#39;xx2&#39;</code><br>apply的第二个参数必须用数组<code>p1,[&#39;xx1&#39;,&#39;xx2&#39;]</code><br>bind和call一样 除了返回是函数<br>有两种情况需要注意，传null或undefined时，将是JS执行环境的全局变量。浏览器中是window，其它环境（如node）则是global。</p>              </div>            </details><details class="folding-tag" blue><summary> 请求头 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220226100314.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> 支持冒泡的函数 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220226100451.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> symbol </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220226142636.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> this </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220226142958.png" alt=""><br>在本题中，<code>var func = user.getCount</code>其实相当于<code>var func = function(){return this.count}</code>this指向的是window而不是user 所以会返回undefined</p>              </div>            </details><details class="folding-tag" blue><summary> `var a=b=3` </summary>              <div class='content'>              <p>相当于<code>var a=3 b=3</code>此时b是全局变量</p>              </div>            </details><details class="folding-tag" blue><summary> 定义函数的方式 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220226143955.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> 点操作符 </summary>              <div class='content'>              <p>通过点操作符添加的属性 会添加到数组最后一位<br>不可以用foreach遍历<br>不会影响length的值<br>可以用forin遍历 此时遍历出来的只有点操作符添加的属性</p>              </div>            </details><details class="folding-tag" blue><summary> +和- </summary>              <div class='content'>              <p>在+的情况下，如果有一者为字符串 那么最后返回的结果是字符串<br>在-的情况下，返回数字</p>              </div>            </details><details class="folding-tag" blue><summary> ==的隐式转化 </summary>              <div class='content'>              <p>在<code>==</code>的隐式转化中，是对两边进行<code>Number()</code>,<br><code>Number(true) = 1</code><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220226152448.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220228150026.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> 闭包 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220226152753.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> in操作符 </summary>              <div class='content'>              <p>对于数组属性需要指定数字形式的索引值来表示数组的属性名称所以<code>1 in [1]</code>,其中<code>[1]</code>的索引是0 返回false</p>              </div>            </details><details class="folding-tag" blue><summary> &&和> </summary>              <div class='content'>              <p><code>&gt;</code>的权重大于<code>&amp;&amp;</code>优先执行</p>              </div>            </details><details class="folding-tag" blue><summary> 微任务和宏任务 </summary>              <div class='content'>              <p><code>promise</code>是微任务 在当轮事件循环结束前执行<br><code>setTimeout</code>是宏任务 在下一轮事件循环执行</p>              </div>            </details><details class="folding-tag" blue><summary> isNaN方法 </summary>              <div class='content'>              <p>如果不是数字，才返回true<br>escape方法： 该方法返回对一个字符串编码后的结果字符串<br>eval方法：该方法将某个参数字符串作为一个JavaScript执行</p>              </div>            </details><details class="folding-tag" blue><summary> `Object.is()` </summary>              <div class='content'>              <p>其行为与<code>===</code>基本一致，不过有两处不同： <code>+0</code>不等于<code>-0</code>。 <code>NaN</code>等于自身。</p>              </div>            </details><details class="folding-tag" blue><summary> CommonJS规范，在任何模块代码的作用域下内置了以下哪些变量？ </summary>              <div class='content'>              <p>浏览器不兼容CommonJS的根本原因，在于缺少四个Node.js环境的变量。 module exports require global 来自阮一峰</p>              </div>            </details><details class="folding-tag" blue><summary> onerror事件 </summary>              <div class='content'>              <p><code>onerror</code>   事件 当图片不存在时,将触发；</p>              </div>            </details><h1 id="基础不牢，地动山摇Day6"><a href="#基础不牢，地动山摇Day6" class="headerlink" title="基础不牢，地动山摇Day6"></a>基础不牢，地动山摇Day6</h1><details class="folding-tag" blue><summary> delete篇 </summary>              <div class='content'>              <p>delete删除的是对象的属性 或者说如果不是对象上的 比如let const 这种 不会挂载到window对象上面的属性 就不能删除<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220228152622.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> js中的内置对象 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227144314.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> `'0\0'` </summary>              <div class='content'>              <p>在js中允许0作为除数，只有<code>&#39;0\0&#39;</code>的结果为NaN 其他都是Infinitely<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227151024.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> 动态语言和静态语言 </summary>              <div class='content'>              <p>看变量使用之前需不需要类型声明，需要的是静态 不需要的是动态<br>静态语言（强类型语言）<br>静态语言是在编译时变量的数据类型即可确定的语言，多数静态类型语言要求在使用变量之前必须声明数据类型。<br>例如：C++、Java、Delphi、C#等。</p><p>动态语言（弱类型语言）<br>动态语言是在运行时确定数据类型的语言。变量使用之前不需要类型声明，通常变量的类型是被赋值的那个值的类型。<br>例如PHP/ASP/Ruby/Python/Perl/ABAP/SQL/JavaScript/Unix Shell等等。</p>              </div>            </details><details class="folding-tag" blue><summary> 运算 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227160505.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227160531.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> 块内声明函数 </summary>              <div class='content'>              <p>在非严格模式下，块内声明函数可以用函数表达式的形式声明</p>              </div>            </details><details class="folding-tag" blue><summary> 构造器 </summary>              <div class='content'>              <p>构造函数的原型对象的构造器指回构造函数本身<br>构造函数里面如果不写return 那么返回创建的实例对象<br>写return 且return是一个基本数据类型的话 还是返回创建的实例对象<br>return的是一个对象的话 则返回该对象 原本指向实例对象的this会被无效化<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220228142935.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> trycatch </summary>              <div class='content'>              <p>try后面一定要接catch或者finally 也可以先catch后finally<br>然后如果存在finally 就一定会执行finally里面的内容<br>且如果finally是return的话，那么后面的内容就不会执行了。没有return才会执行后面的内容</p>              </div>            </details><details class="folding-tag" blue><summary> 数组api </summary>              <div class='content'>              <p><code>filter</code>是过滤出符合条件的元素。<br><code>every</code>是检测数组是否所有元素都满足条件。<br><code>some</code>是检测数组是否有满足条件的元素。<br><code>map</code>是遍历数组，且对每个元素进行操作。</p>              </div>            </details><details class="folding-tag" blue><summary> NaN相关 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227202155.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> 会改变数组的方法以及不会改变数组的方法 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227202308.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> 原型覆盖 </summary>              <div class='content'>              <p>如果用点操作符提前定义了原型中的一个属性，那么后面再定义原型的话会开辟新的空间覆盖掉原先的点操作符属性<br>如果点操作符后定义，那么原型中会增加属性</p>              </div>            </details><details class="folding-tag" blue><summary> typeof </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227212201.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> length </summary>              <div class='content'>              <p>length是数组的属性不是方法 且不用带括号</p>              </div>            </details><h1 id="基础不牢，地动山摇Day7"><a href="#基础不牢，地动山摇Day7" class="headerlink" title="基础不牢，地动山摇Day7"></a>基础不牢，地动山摇Day7</h1><details class="folding-tag" blue><summary> class </summary>              <div class='content'>              <p>在class的方法里，前面有static 那么this指向类本身<br>没有static this指向类的实例化对象<br>类方法中有static 只能通过类调用 不能通过实例化对象调用<br>类方法前面没有static 那该方法只能通过实例化对象调用 不能通过类调用</p>              </div>            </details><details class="folding-tag" blue><summary> foreach </summary>              <div class='content'>              <p>该方法会忽略掉空元素</p>              </div>            </details><details class="folding-tag" blue><summary> toString </summary>              <div class='content'>              <p>toString会优先将小数点解析为数字小数点<br>所以存在这种情况会报错<br><code>2.toString()</code><br>正确的写法应该是<br><code>2. toString()</code><br>or<br><code>(2).toString()</code></p>              </div>            </details><details class="folding-tag" blue><summary> 跨域 </summary>              <div class='content'>              <p>只要 协议 、 域名 、 端口 有任何一个 不同, 都被当作是 不同 的域。</p>              </div>            </details><details class="folding-tag" blue><summary> 函数的执行与赋值 </summary>              <div class='content'>              <p>以一道题来讲解<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220228094341.png" alt=""><br>如果此时注释掉1<br>那么对于11行来说 只是将a这个函数赋值给了btn，所以会在整个执行结束之后输出1，点击的时候不会执行b的内容<br>如果此时注释掉2<br>那么对于10行来说，函数a执行 输出1 返回一个函数给btn 所以点击btn的时候 会输出2</p>              </div>            </details><details class="folding-tag" blue><summary> join方法 </summary>              <div class='content'>              <p>join是针对数组的 把数组的内容拼接成字符串 如果join内不加符号或者<code>undefined</code>默认用逗号隔开，如果是<code>&#39;&#39;</code>则没有间隔</p>              </div>            </details><details class="folding-tag" blue><summary> 不支持冒泡 </summary>              <div class='content'>              <p>妈（mouseenter）妈（mouseleave）不（blur）（unload）让（resize）浪（load）费（focus）</p>              </div>            </details><details class="folding-tag" blue><summary> eval </summary>              <div class='content'>              <p>eval 将会返回对最后一个表达式的求值结果。</p>              </div>            </details><details class="folding-tag" blue><summary> `hasOwnProperty`和`isPrototypeOf` </summary>              <div class='content'>              <p><code>hasOwnProperty</code>： 是用来判断一个对象是否有你给出名称的属性或对象。不过需要注意的是，此方法无法检查该对象的原型链中是否具有该属性，该属性必须是对象本身的一个成员。<br><code>isPrototypeOf</code> : 是用来判断要检查其原型链的对象是否存在于指定对象实例中，是则返回true，否则返回false。</p>              </div>            </details><details class="folding-tag" blue><summary> 函数加括号调用 引号调用 不加括号调用 </summary>              <div class='content'>              <p>加括号 相当于立刻执行<br>不加括号 正常执行<br>引号调用 正常执行<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220228143047.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> `parseInt` </summary>              <div class='content'>              <p><code>parseInt</code>在第一个字符是非数字的时候 返回NaN<br>在后面有字符是非数字的时候 返回前面的数字<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 2. parseInt(string,raix)函数有两个参数</span><br><span class="line"> // 2.1 注意:string字符串只会被解析从第一个字符开始直到不是数字的字符部分</span><br><span class="line"> console.log(parseInt(&#x27;223&#x27;));//223</span><br><span class="line"> // 2.2 当字符串中间存在非数字,那么就只解析前面是数字的部分字符</span><br><span class="line"> console.log(parseInt(&#x27;22e3&#x27;));//22</span><br><span class="line"> // 2.3 如果字符串中第一个字符就不是数字,那么返回NaN </span><br><span class="line"> console.log(parseInt(&#x27;e21&#x27;));//NaN</span><br></pre></td></tr></table></figure></p>              </div>            </details><details class="folding-tag" blue><summary> 原型和隐式原型 </summary>              <div class='content'>              <p>注意只有实例化的对象才有隐式原型</p>              </div>            </details><details class="folding-tag" blue><summary> 判断一个对象是否存在 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220228150210.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> symbol </summary>              <div class='content'>              <p>symbol不参与运算 会报错</p>              </div>            </details><details class="folding-tag" blue><summary> 集合A转化为数组？ </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Array.from(arr, mapfn,thisArg)方法，用于将两类可以把对象转换为真正的数组：类似数组的对象和可遍历的对象（部署了Iterator接口的，String，ES6新增的Map和Set）。可以传3个参数，其中第一个是数组，必传；第二个是一个函数（类似map函数），对数组元素进行操作后再返回数组，可选；第三个是对于this关键字的指向，可选。</span><br><span class="line">slice() 方法可从已有的数组中返回选定的元素。</span><br><span class="line">返回值：返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。</span><br><span class="line">说明</span><br><span class="line">请注意，该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()。</span><br><span class="line">所以在这里就是对集合A应用slice，返回一个新的数组，不对数组做任何改变。</span><br><span class="line">展开运算符，把A集合的元素展开后，用数组[]承载，返回新的数组。</span><br><span class="line">map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</span><br><span class="line">map() 方法按照原始数组元素顺序依次处理元素。</span><br><span class="line">注意： map() 不会对空数组进行检测。</span><br><span class="line">注意： map() 不会改变原始数组。</span><br><span class="line">所以map方法返回了一个新的数组，并且数组中每个元素是A里面的元素。</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="基础不牢，地动山摇Day8"><a href="#基础不牢，地动山摇Day8" class="headerlink" title="基础不牢，地动山摇Day8"></a>基础不牢，地动山摇Day8</h1><p>昨天有点小感冒 导致学习没太久，今天补上vue的专题</p><h2 id="vue篇"><a href="#vue篇" class="headerlink" title="vue篇"></a>vue篇</h2><details class="folding-tag" blue><summary> `Object.defineProperty(obj </summary>              <div class='content'>              <p>不能监视数组的变化。原因：defineProperty是监视对象的属性，且对于数组来说，要监听到length的变化首先就必须设置<code>configurable</code>为真，但是各大浏览器不允许这样设置吗，所以导致<code>push``pop</code>等修改数组原长度的方法无法被监听到。<br>vue能实现数组的监听原理是将一个新数组赋值给旧数组 而不是修改原数组，这样的话性能开销其实还是有点大。</p>              </div>            </details><details class="folding-tag" blue><summary> hash模式原理 </summary>              <div class='content'>              <p>通过<code>onhashchange</code>事件，监听url的修改<br>优点是可以快速上线，直接使用 缺点是不美观 且移动端有限制会报错<br><code>history</code>模式是传统的url模式，优点是不会影响到url的美感，缺点是需要后端的配合。</p>              </div>            </details><details class="folding-tag" blue><summary> 挂载 </summary>              <div class='content'>              <p>如果不是在脚手架环境下，vue的挂载需要el（重要！！）</p>              </div>            </details><details class="folding-tag" blue><summary> nextTick </summary>              <div class='content'>              <p>在created等还没生成dom的钩子中，想要操作dom可以将操作放到nextTick的回调函数里。<br>因为nextTick是等dom更新完后才执行操作</p>              </div>            </details><details class="folding-tag" blue><summary> 父子组件的生命周期 </summary>              <div class='content'>              <p>加载渲染过程：（注意是子先挂载完毕）<br>父beforeCreate 父created 父beforeMount 子beforeCreate 子created 子beforeMount<br>子mounted 父mounted<br>子组件更新过程：<br>父 beforeUpdate 子beforeUpdate 子updated 父updated<br>父组件更新过程：<br>父 beforeUpdate 父updated<br>销毁过程：（子先销毁完毕）<br>父beforeDestroy 子beforeDestroy 子destoryed 父destoryed</p>              </div>            </details><details class="folding-tag" blue><summary> watch初始化监听第一次 </summary>              <div class='content'>              <p>加<code>immediate:true</code></p>              </div>            </details><details class="folding-tag" blue><summary> `vue-lazyload` </summary>              <div class='content'>              <p>vue的懒加载插件<br>img标签中使用懒加载：<code>v-lazy</code> 代替 <code>v-bind:src</code> ；<br>背景图片中使用懒加载：<code>v-lazy:background-image = &quot;&quot;</code>  ==&gt;&gt; 注意图片和盒子大小问题，否则显示可能有问题哦。<br>使用的时候不一定要加上<code>:key</code>属性 因为可能会由于key相同导致图片不刷新</p>              </div>            </details><details class="folding-tag" blue><summary> 全局路由守卫的钩子 </summary>              <div class='content'>              <p>全局路由守卫的钩子函数有： <code>beforeEach</code>（全局前置守卫）、<code>beforeResolve</code>（全局解析守卫）、<code>afterEach</code>（全局后置守卫）</p>              </div>            </details><details class="folding-tag" blue><summary> 服务端渲染和客户端渲染 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220301103139.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> vuex的ajax </summary>              <div class='content'>              <p>actions一般操作异步 mutations同步 所以写在actions里面</p>              </div>            </details><details class="folding-tag" blue><summary> 钩子间共享数据 </summary>              <div class='content'>                            </div>            </details><details class="folding-tag" blue><summary> `keep-alive` </summary>              <div class='content'>              <p>组件设置了该属性才会有<code>activated和deactivated</code>两个钩子<br><code>max</code>属性控制最多可以缓存多少组件实例。一旦这个数字达到了，在新实例被创建之前，已缓存组件中最久没有被访问的实例会被销毁掉</p>              </div>            </details><details class="folding-tag" blue><summary> show和if </summary>              <div class='content'>              <p><code>v-show</code>本质是通过设置css中的<code>display:none</code>来控制隐藏<br><code>v-if</code>本质是动态的向dom树添加或者删除元素<br>经常切换用show 反之用if</p>              </div>            </details><h1 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h1><details class="folding-tag" blue><summary> promise的状态 </summary>              <div class='content'>              <p>pending进行中<br>fulfilled已成功<br>rejected已失败</p>              </div>            </details><details class="folding-tag" blue><summary> promise的固化 </summary>              <div class='content'>              <p>如果已经走了resolve 就不会继续走下一步了<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220301153036.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> 返回值 </summary>              <div class='content'>              <p>promise的return值如果是个常量 会包装成一个成功的promise对象<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220301153536.png" alt=""><br>如果没有return 那么默认是return一个undefined 而undefined也属于常量 所以是成功的回调<br>如果返回的不是常量 就看情况定 </p>              </div>            </details><details class="folding-tag" blue><summary> 宏任务和微任务 </summary>              <div class='content'>              <p>微任务：promise<br>宏任务：setTime系列<br>微任务在js机制中会被放到宏任务的前面，所以微任务先执行<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220301154635.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> `async`和`await` </summary>              <div class='content'>              <p><code>await</code>返回的是一个promise 然后包括<code>async</code>之后返回的也是一个promise<br>并且<code>await</code>的函数执行完才执行下一步，且下一步的任务是微任务（！！！）<br>如果<code>await</code>执行的函数没有返回<code>return Promise.reject(new Error())</code>那么就是一个成功的回调<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220301161026.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220301162533.png" alt=""><br><code>async</code>是同步函数 </p>              </div>            </details><details class="folding-tag" blue><summary> promise的return和throw </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220301161529.png" alt=""><br>此时它是return一个错误 看上去好像会执行catch的内容 实际是执行了then的内容<br>因为它实际上是返回了一个对象 而不是抛出了一个错误<br>所以正确的做法应该是<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220301161627.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> execution </summary>              <div class='content'>              <p>在promise的execution函数中是同步代码</p>              </div>            </details><details class="folding-tag" blue><summary> 综合 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220301163007.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> promise的赋值 </summary>              <div class='content'>              <p>如果有<code>xx = promise对象</code>的话,那么赋值操作在同步任务执行完之后再执行赋值‘<br>如果promise没有resolve也没有reject状态的话 那么它是pending<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220301185339.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary>  </summary>              <div class='content'>                            </div>            </details>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面试" scheme="https://zlinni.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试" scheme="https://zlinni.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Vue静态资源上传+GitHub</title>
    <link href="https://zlinni.github.io/posts/5a2ea4345d0a/"/>
    <id>https://zlinni.github.io/posts/5a2ea4345d0a/</id>
    <published>2022-02-22T07:46:08.000Z</published>
    <updated>2022-02-27T06:46:03.312Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>记录用vue-cli打包vue项目之后上传静态资源到github的踩坑向</p></div><h1 id="开始踩坑"><a href="#开始踩坑" class="headerlink" title="开始踩坑"></a>开始踩坑</h1><p>首先对于新版的vue-cli打包，指令是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><br>这个是没有变的<br>在打包之前 必须注意的一点是，新版的cli已经没有config文件夹了，需要自己新建<code>vue.config.js</code>然后配置参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个是为了防止服务端找不到地址</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;./&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>必须注意的第二点：在<code>.gitignore</code>文件夹下面，把有关<code>dist</code>的行数删掉<br>必须注意的第三点：如果你的路由是history模式，建议直接注释掉或者改hash模式<br>接着执行<code>npm run build</code> 会生成一个<code>dist</code>文件夹，检查里面的<code>index.html</code>的css和js路径是否正确。<br>如果完全是静态的可以<code>live server</code>打开，动态的需要用<code>tomcat</code>或者<code>node</code>进行测试<br>下面贴一个用node测试的<br><details class="folding-tag" cyan><summary> node test </summary>              <div class='content'>              <ol><li>新建文件夹</li><li>初始化 可以直接一直回车<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure></li><li>安装express<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save express</span><br></pre></td></tr></table></figure></li><li>新建<code>server.js</code>输入代码<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.use(express.static(__dirname+<span class="string">&#x27;/static&#x27;</span>))</span><br><span class="line">app.get(<span class="string">&#x27;/person&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3040</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)<span class="built_in">console</span>.log(<span class="string">&#x27;qidong&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>新建static文件夹 复制所有dist目录下面的文件到该文件夹</li><li>run</li></ol>              </div>            </details><br>确保你的网页在本地可以运行之后，打开github新建仓库…这一步就省略了，网上很多教程<br>当你已经把远程仓库和本地建立连接之后，在本地文件夹右键打开git命令窗口<br>接下来有两种方法可以上传到github 第一种是将dist重命名为docs（推荐） 另外一种是将dist里面的内容上传到分支，下面演示第一种<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//创建分支 且一定要是这个名字</span><br><span class="line">git branch gh-pages</span><br><span class="line">//切换到该分支</span><br><span class="line">git checkout gh-pages</span><br><span class="line">//强制提交dist</span><br><span class="line">git add -f docs</span><br><span class="line">//commit</span><br><span class="line">git commit -m &quot;message&quot;</span><br><span class="line">git push origin gh-pages </span><br></pre></td></tr></table></figure><br>然后打开你的github 点开仓库的setting 将目录改为docs 然后直接访问它提供的网址即可<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220222163700.png" alt=""></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>网上现在很多的教程说的都是旧版的cli 那个时候还有webpack的配置文件，现在只能通过js修改，导致在这块踩了很久的坑，然后就是github默认是不允许上传dist文件夹的，所以推荐还是使用docs来放静态资源，后续会更新关于vue打包的优化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端进阶" scheme="https://zlinni.github.io/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>MileStone项目杂谈</title>
    <link href="https://zlinni.github.io/posts/844c2cfdc4a5/"/>
    <id>https://zlinni.github.io/posts/844c2cfdc4a5/</id>
    <published>2022-02-09T10:14:58.000Z</published>
    <updated>2022-02-25T04:13:14.356Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>最近博客没更新的原因是，emm在搞一个新的项目，完全的从0开始没有参考任何项目视频，然后现在也是项目大体功能要做完了，就在这里写一下本次项目踩过的坑以及一些经验，算是一期杂谈。<br>源码地址：<a href="https://github.com/Zlinni/MileStone">传送门1</a><br>项目演示地址:<a href="https://zlinni.github.io/MileStone/#/">传送门2</a></p></div><h1 id="主体演示"><a href="#主体演示" class="headerlink" title="主体演示"></a>主体演示</h1><div class="note primary flat"><p>制作完毕~</p></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">效果展示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/milestone预览.gif" alt="不知道为什么自己很喜欢这种纯黑风格"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="构建工具-技术栈"><a href="#构建工具-技术栈" class="headerlink" title="构建工具+技术栈"></a>构建工具+技术栈</h1><p>编译软件：vscode<br>开发框架: vue2<br>打包工具：vue-cli<br>UI：vuetify<br>icon：阿里巴巴<br>其他：vuex， vue-router，git<br>插件：pubsub，nanoid，less-loader，vuex-persist</p><h1 id="组件列表"><a href="#组件列表" class="headerlink" title="组件列表"></a>组件列表</h1><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220222102652.png" alt=""></p><h1 id="项目难点"><a href="#项目难点" class="headerlink" title="项目难点"></a>项目难点</h1><div class="note primary flat"><p>本次项目综合了很多方面的问题，比如vuex模块化加数据持久化，对所有任务的时间排序，以及vuetify的栅格系统等等，各种方面的问题哈哈，但好在最后都能够解决出来</p></div><h2 id="vuex模块化结合本地化存储"><a href="#vuex模块化结合本地化存储" class="headerlink" title="vuex模块化结合本地化存储"></a>vuex模块化结合本地化存储</h2><div class="note primary flat"><p>vuex是一个很方便的官方提供的数据管理插件，但在使用的时候一遇到刷新就会导致数据丢失的问题。于是想到了<code>localStorage</code>结合本地存储的方式进行数据持久化。</p></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">方案一 localStorage</button></li><li class="tab"><button type="button" data-href="#test-2">方案2 vuex-presist</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>原理很简单 对于自己设置的数据先使用<code>JSON.parse(localStorage.getItem(&#39;xxx&#39;))</code><br>然后在mutations里面对于需要增删改查的操作最后进行一次<code>localStorage.setItem(&quot;xxx&quot;, JSON.stringify(state.xxx));</code><br>部分代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> todoObj =  <span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&quot;todoObj&quot;</span>)) || [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="string">&quot;X5DX4v8Wz4r97xjs&quot;</span>, <span class="attr">title</span>: <span class="string">&quot;阿斯顿&quot;</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">];</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">    <span class="function"><span class="title">updatedType</span>(<span class="params">state, [people, subject, typeId, typeValue]</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(typeValue);</span><br><span class="line">      state.dataList.forEach(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data.people === people) &#123;</span><br><span class="line">          data.kemu.forEach(<span class="function"><span class="params">kemu</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (kemu.subject === subject) &#123;</span><br><span class="line">              kemu.typeList.forEach(<span class="function"><span class="params">typelist</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (typelist.id === typeId) &#123;</span><br><span class="line">                  Vue.set(typelist, <span class="string">&#x27;type&#x27;</span>, typeValue[<span class="number">0</span>]);</span><br><span class="line">                  Vue.set(typelist, <span class="string">&#x27;time&#x27;</span>, typeValue[<span class="number">2</span>]);</span><br><span class="line">                  Vue.set(typelist, <span class="string">&#x27;remarks&#x27;</span>, typeValue[<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">       <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;dataList&#x27;</span>, <span class="built_in">JSON</span>.stringify(state.dataList));</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><br>但是这个方法也有一个弊端，就是每次执行增删改查的操作都需要进行一次手动存储，在操作多的情况下非常不适合。于是找到了这个vuex的插件<code>vuex-presist</code>来帮助模块进行本地存储</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>实质上就是进行了本地存储，当然也有新的类型比如session和cookie<br>安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save vuex-persist</span><br></pre></td></tr></table></figure><br>引入<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VuexPersistence <span class="keyword">from</span> <span class="string">&#x27;vuex-persist&#x27;</span></span><br></pre></td></tr></table></figure><br>定义 (此处是根据我的两个模块来使用)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vuexLocal = <span class="keyword">new</span> VuexPersistence(&#123;</span><br><span class="line">  <span class="attr">storage</span>: <span class="built_in">window</span>.localStorage,</span><br><span class="line">  <span class="attr">modules</span>: [<span class="string">&#x27;dataListOptions&#x27;</span>, <span class="string">&#x27;todoOptions&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>引入到vuex<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    dataListOptions,</span><br><span class="line">    todoOptions</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [vuexLocal.plugin]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>注意此处的引入位置</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="vuex模块化踩坑"><a href="#vuex模块化踩坑" class="headerlink" title="vuex模块化踩坑"></a>vuex模块化踩坑</h2><div class="note primary flat"><p>当vuex要使用很多options的时候，会采用模块化的方式来写代码会比较方便管理。<br>比如定义一个todoOptions 里面就要有store的全部方法 以及一个<code>namespaced</code>属性</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todoOptions =&#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>:&#123;</span><br><span class="line">  </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">todoObj</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    dataListOptions,</span><br><span class="line">    todoOptions</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>到这一步其实大多数时候都没有问题 出问题在于使用到mutation或者actions的时候<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此处需要使用名字/方法否则不行</span></span><br><span class="line"> <span class="built_in">this</span>.$store.dispatch(</span><br><span class="line">        <span class="string">&quot;dataListOptions/transType&quot;</span>,</span><br><span class="line">        <span class="built_in">this</span>.$route.params.people</span><br><span class="line">      );</span><br><span class="line">      </span><br></pre></td></tr></table></figure><br>如果用到了mapState插件或者其他的，也需要加名字 注意是要用双引号<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...mapState(<span class="string">&quot;todoOptions&quot;</span>, [<span class="string">&quot;todoObj&quot;</span>]),</span><br></pre></td></tr></table></figure><br>以及最后其实vuex的value是可以传多个参数的，用数组或者对象的形式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&quot;dataListOptions/addType&quot;</span>, [</span><br><span class="line">  <span class="built_in">this</span>.$route.params.people,</span><br><span class="line">  <span class="built_in">this</span>.subject,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p><h2 id="准确获取时区"><a href="#准确获取时区" class="headerlink" title="准确获取时区"></a>准确获取时区</h2><div class="note primary flat"><p>一般大家使用时间都是直接用<code>new Date()</code>但这个方法获取的并不是完全准确的时区时间，采用下面的方法可以获取更为准确的时间</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">selectTimezone</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="comment">//得到1970年一月一日到现在的秒数</span></span><br><span class="line">  <span class="keyword">var</span> len = d.getTime();</span><br><span class="line">  <span class="comment">//确定时区</span></span><br><span class="line">  <span class="keyword">var</span> timezone = -d.getTimezoneOffset() / <span class="number">60</span>;</span><br><span class="line">  <span class="comment">//本地时间与GMT时间的时间偏移差</span></span><br><span class="line">  <span class="keyword">var</span> offset = d.getTimezoneOffset() * <span class="number">60000</span>;</span><br><span class="line">  <span class="comment">//得到现在的格林尼治时间</span></span><br><span class="line">  <span class="keyword">var</span> utcTime = len + offset;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(utcTime + <span class="number">3600000</span> * timezone);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="时间排序"><a href="#时间排序" class="headerlink" title="时间排序"></a>时间排序</h2><div class="note primary flat"><p>项目中需要将自定义的任务进行一个时间的排序最后呈现到学习计划页面</p></div><p>预览<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220222122336.png" alt=""><br>当一开始的时间格式是<code>14:00-15:00</code>这样的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">subject: <span class="string">&quot;数学&quot;</span>,</span><br><span class="line"><span class="attr">typeList</span>: [&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;高等数学&quot;</span>,</span><br><span class="line">    <span class="attr">time</span>: <span class="string">&#x27;14:00-15:00&#x27;</span>,</span><br><span class="line">    <span class="attr">remarks</span>: <span class="string">&#x27;暂无&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;线性代数&quot;</span>,</span><br><span class="line">    <span class="attr">time</span>: <span class="string">&#x27;15:00-16:00&#x27;</span>,</span><br><span class="line">    <span class="attr">remarks</span>: <span class="string">&#x27;暂无&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;概率论&quot;</span>,</span><br><span class="line">    <span class="attr">time</span>: <span class="string">&#x27;16:00-17:00&#x27;</span>,</span><br><span class="line">    <span class="attr">remarks</span>: <span class="string">&#x27;暂无&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br>于是想到了<code>split</code>方法去分割第一个时间点，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = [];</span><br><span class="line"><span class="keyword">let</span> indexArr = [];</span><br><span class="line"><span class="built_in">this</span>.$store.state.dataListOptions.typeList.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> hhmm = item.time.split(<span class="string">&quot;-&quot;</span>, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> hh = hhmm.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> sum = hh.reduce(<span class="function">(<span class="params">total, val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (total += val);</span><br><span class="line">  &#125;, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  res.push(<span class="built_in">parseInt</span>(sum));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>然后将第一个时间点化为<code>1400</code>的形式，以此类推。只要对比第一个时间点就可以完成排序，这样一来就可以使用sort方法，但问题又出现了，这样比较之后需要将时间还原回去才能在原本的数组里面找到对应的任务名称。或者是知道数组下标的形式？那么如何知道排序后原先时间数组的下标呢？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> typeMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"> typeMap.set(<span class="built_in">parseInt</span>(sum), index);</span><br></pre></td></tr></table></figure><br>使用到map类里面的set方法，将原先的数据和下标传入到map中，最后遍历排序后的时间数组，通过get方法去查找数据原先对应的下标<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">typeList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  <span class="keyword">let</span> typeMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">let</span> indexArr = [];</span><br><span class="line">  <span class="built_in">this</span>.$store.state.dataListOptions.typeList.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> hhmm = item.time.split(<span class="string">&quot;-&quot;</span>, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> hh = hhmm.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> sum = hh.reduce(<span class="function">(<span class="params">total, val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (total += val);</span><br><span class="line">    &#125;, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    res.push(<span class="built_in">parseInt</span>(sum));</span><br><span class="line">    typeMap.set(<span class="built_in">parseInt</span>(sum), index);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;排序前的res&quot;</span>, res);</span><br><span class="line">  res.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;排序后的res&quot;</span>, res);</span><br><span class="line">  res.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    indexArr.push(typeMap.get(item));</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;下标&quot;</span>, indexArr);</span><br><span class="line">  <span class="keyword">let</span> finalArr = [];</span><br><span class="line">  indexArr.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$store.state.dataListOptions.typeList.forEach(<span class="function">(<span class="params">data, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (index === item) &#123;</span><br><span class="line">        finalArr.push(data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;最终数组&quot;</span>, finalArr);</span><br><span class="line">  <span class="keyword">return</span> finalArr;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h2 id="时间排序2"><a href="#时间排序2" class="headerlink" title="时间排序2"></a>时间排序2</h2><div class="note primary flat"><p>项目中还有一个地方需要用到时间排序，就是页面中这个introduce的地方，它会随着任务的执行判断时间，然后返回相应的内容到页面上</p></div><p>预览<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220222122836.png" alt=""><br>需求是有三种判断<br>一是任务没有开始 那么就显示下个任务还有xx时xx分开始，如果不到1小时，则返回xx分<br>二是任务正在执行中 那么显示该任务还有xx时xx分结束，如果不到1小时，则返回xx分<br>三是任务都执行完了 此时显示今日任务已完毕，查看今日总结</p><p>获取任务数组这块就不说了 用的是消息的订阅和发布，收到的是已经排序好时间的任务数组<br>那么为了执行现在的时间是否在某个任务时间段内，就需要三个变量，一个是现在时间，一个是当前任务开始时间，结束时间<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">this</span>.pid = pubsub.subscribe(</span><br><span class="line">      <span class="string">&quot;judgeTime&quot;</span>,</span><br><span class="line">      <span class="function">(<span class="params">msg, [timeArr, typeNameArr, len]</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          timeArr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> hhmm = item.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> strTime1 = hhmm[<span class="number">0</span>].split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> strTime2 = hhmm[<span class="number">1</span>].split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> b = <span class="built_in">this</span>.selectTimezone();</span><br><span class="line">            <span class="keyword">var</span> e = <span class="built_in">this</span>.selectTimezone();</span><br><span class="line">            <span class="keyword">var</span> n = <span class="built_in">this</span>.selectTimezone();</span><br><span class="line">            b.setHours(strTime1[<span class="number">0</span>]);</span><br><span class="line">            b.setMinutes(strTime1[<span class="number">1</span>]);</span><br><span class="line">            b.setSeconds(<span class="number">0</span>);</span><br><span class="line">            b.setMilliseconds(<span class="number">0</span>);</span><br><span class="line">            e.setHours(strTime2[<span class="number">0</span>]);</span><br><span class="line">            e.setMinutes(strTime2[<span class="number">1</span>]);</span><br><span class="line">            e.setSeconds(<span class="number">0</span>);</span><br><span class="line">            e.setMilliseconds(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (b.getTime() - n.getTime() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="built_in">this</span>.typeName = <span class="string">&quot;还未到学习时间&quot;</span>;</span><br><span class="line">              <span class="built_in">console</span>.log(b);</span><br><span class="line">              <span class="built_in">this</span>.beginTime = b;</span><br><span class="line">              <span class="built_in">this</span>.state = <span class="string">&quot;start&quot;</span>;</span><br><span class="line">······</span><br></pre></td></tr></table></figure><br>然后比较它们的时间戳，细节上为了准确的比较还得把秒和毫秒设置0<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">calTime</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> n = <span class="built_in">this</span>.selectTimezone();</span><br><span class="line">  <span class="keyword">var</span> chazhi = <span class="built_in">this</span>.beginTime - n;</span><br><span class="line">  <span class="built_in">this</span>.minutes = <span class="built_in">Math</span>.floor((chazhi / <span class="number">1000</span> / <span class="number">60</span>) % <span class="number">60</span>);</span><br><span class="line">  <span class="built_in">this</span>.hours = <span class="built_in">Math</span>.floor((chazhi / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span>) % <span class="number">24</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.hours &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&quot;start&quot;</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.endTime = <span class="string">`距离下一个任务开始还有<span class="subst">$&#123;<span class="built_in">this</span>.hours&#125;</span>小时<span class="subst">$&#123;<span class="built_in">this</span>.minutes&#125;</span>分钟`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&quot;end&quot;</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.endTime = <span class="string">`距离学习结束还有<span class="subst">$&#123;<span class="built_in">this</span>.hours&#125;</span>小时<span class="subst">$&#123;<span class="built_in">this</span>.minutes&#125;</span>分钟`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&quot;start&quot;</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.endTime = <span class="string">`距离下一个任务开始还有<span class="subst">$&#123;<span class="built_in">this</span>.minutes&#125;</span>分钟`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&quot;end&quot;</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.endTime = <span class="string">`距离学习结束还有<span class="subst">$&#123;<span class="built_in">this</span>.minutes&#125;</span>分钟`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (chazhi &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.calTime();</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$router.go(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>此处有个难点，就是在定时器代码那里，如果使用的是<code>setInterval</code>那么可能在下个时间段的时候，前面的代码计算比较复杂，他会跳过当前的这个时间应该执行的任务（代码队列之前的任务没有处理完，js引擎只能允许一份未执行的代码），这方面的问题要去了解js的事件循环机制，于是这里采用了<code>setTimeout</code>来反复调用自身，最后当差值小于或等于0的时候利用routergo刷新页面<br>最后在补充一下剩下的判断代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (b.getTime() - n.getTime() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="built_in">this</span>.typeName = <span class="string">&quot;还未到学习时间&quot;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="built_in">this</span>.beginTime = b;</span><br><span class="line">  <span class="built_in">this</span>.state = <span class="string">&quot;start&quot;</span>;</span><br><span class="line">  <span class="built_in">this</span>.calTime();</span><br><span class="line">  <span class="built_in">localStorage</span>.removeItem(<span class="string">&quot;dayEnd&quot;</span>);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">  n.getTime() - b.getTime() &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">  n.getTime() - e.getTime() &lt; <span class="number">0</span></span><br><span class="line">) &#123;</span><br><span class="line">  <span class="built_in">this</span>.typeName = typeNameArr[index];</span><br><span class="line">  <span class="built_in">this</span>.beginTime = e;</span><br><span class="line">  <span class="built_in">this</span>.state = <span class="string">&quot;end&quot;</span>;</span><br><span class="line">  <span class="built_in">this</span>.calTime();</span><br><span class="line">  <span class="built_in">localStorage</span>.removeItem(<span class="string">&quot;dayEnd&quot;</span>);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === len - <span class="number">1</span> &amp;&amp; n.getTime() - e.getTime() &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="built_in">this</span>.typeName = <span class="string">&quot;今日任务已完成&quot;</span>;</span><br><span class="line">  <span class="built_in">this</span>.endTime = <span class="string">&quot;点击查看今日总结~&quot;</span>;</span><br><span class="line">  <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;dayEnd&quot;</span>, <span class="string">&quot;end&quot;</span>);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><ol><li>采用了插件webpack-bundle-analyzer分析了项目中js文件占据的空间，又利用了bootcdn将插件以cdn的方式引入，减小了打包的时候生成的js体积。</li><li>echarts采用了按需引入的方式，减少了所需的js体积</li></ol><h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><p>本次项目是对vue2练手的独立项目，从该项目中我收获到了有关vuex模块化以及数据持久化的处理，时间算法和事件循环的操作，并加深了vuetify-ui的使用，尤其是栅格系统和断点系统，最后针对项目进行了打包优化，结合cdn提升了访问速度。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端进阶" scheme="https://zlinni.github.io/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="vue" scheme="https://zlinni.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue3</title>
    <link href="https://zlinni.github.io/posts/725dcb7bbb15/"/>
    <id>https://zlinni.github.io/posts/725dcb7bbb15/</id>
    <published>2022-01-25T02:28:40.000Z</published>
    <updated>2022-03-18T11:44:20.356Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>本文主要用于记录vue3的使用，参考视频<a href='https://www.bilibili.com/video/BV1Zy4y1K7SH?p=1'>【尚硅谷Vue2.0+Vue3.0全套教程丨vuejs从入门到精通】</a></p></div><h1 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">Vue3的提升</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125103708.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125103846.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125103919.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="创建Vue3工程"><a href="#创建Vue3工程" class="headerlink" title="创建Vue3工程"></a>创建Vue3工程</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">vuecli</button></li><li class="tab"><button type="button" data-href="#test-3">vite</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>两种方法 一种是传统的vuecli 另外一种是vite</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>使用vuecli创建该工程需要确保脚手架的版本在4.5以上<br>使用指令可以查看<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue -V</span><br><span class="line">or</span><br><span class="line">vue --version</span><br></pre></td></tr></table></figure><br>否则重新安装<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><br>创建<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vue_test</span><br></pre></td></tr></table></figure><br>启动<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>先看一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125104523.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125105053.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="分析工程解构"><a href="#分析工程解构" class="headerlink" title="分析工程解构"></a>分析工程解构</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>主要查看vue3和2有什么结构和写法上面的区别</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>从mainjs上面看 引入和实例化app的方法不一样了 而且也不能用vue2的形式写了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入的不再是vue构造函数了 而是一个精简版的createApp工厂函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">createApp(App).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>vue3不需要根标签了 在vue2里面需要用div当做根标签编写<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125111435.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>setup是vue3使用组合api的地方 结合了之前2中的data methods等</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>setup是一个函数 里面可以直接定义变量 方法等<br>返回有两种情况 一种是返回定义的变量 此时模板中可以直接使用该变量<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;这是a值&#123;&#123; a &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;这是b值&#123;&#123; b &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    let a = 1;</span><br><span class="line">    let b = 2;</span><br><span class="line">    return &#123;</span><br><span class="line">      a,</span><br><span class="line">      b,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>返回的第二种情况是 返回一个渲染函数 该函数的html元素可以直接被渲染<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; h &#125; from &quot;vue&quot;;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">    return () =&gt; h(&quot;h1&quot;, &quot;hahahah&quot;);</span><br></pre></td></tr></table></figure><br>除此之外 data methods写法可以正常访问setup的数据 但是反过来不行 即vue2可以访问vue3 但3不能访问2 而且最好两者不要混用！<br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125132019.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="ref函数"><a href="#ref函数" class="headerlink" title="ref函数"></a>ref函数</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>ref函数可以将数据变成响应式的，还用于处理对象类型。如果不设置ref直接修改变量 那么修改后的变量不会响应式的出现在页面上。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>案例如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;学习ref&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;jojoname is &#123;&#123;jojo&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;changeJOJO&quot;&gt;点击改变jojo&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 引入ref</span><br><span class="line">import &#123; h, ref &#125; from &quot;vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    // 将数据变成响应式</span><br><span class="line">    let jojo = ref(&quot;jotaro&quot;);</span><br><span class="line">    console.log(jojo);</span><br><span class="line">    function changeJOJO() &#123;</span><br><span class="line">      // 改变数据的方式</span><br><span class="line">      jojo.value = &#x27;jostar&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      jojo,</span><br><span class="line">      changeJOJO</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>注意的点是 初学使用setup容易忘记最后将模板需要的变量和方法返回出去<br>然后 数据变成响应式之后 修改数据需要<code>xxx.value</code>的方式修改<br>最后是ref的数据 看上去像是做了数据代理之后的结果 这个RefImpl的意思是reference 和 implement的组合 全称是引用实现的实例，我们称之为引用对象<br>类似于单例的加工返回单例，将函数交给ref处理后返回响应式</p><ul><li>ref实现响应式也是通过getter和setter即<code>object.defineProperty</code></li><li>将getter和setter藏在原型对象中 更简洁了<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314095628.png" alt=""><br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125134254.png" alt=""></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="reative函数-处理对象类型数据"><a href="#reative函数-处理对象类型数据" class="headerlink" title="reative函数 处理对象类型数据"></a>reative函数 处理对象类型数据</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">抛出疑惑</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue3对不同类型的数据有不同类型的响应式处理，处理对象的时候用的是ref则是Proxy形式，本质上是求助了reactive函数。<br>reactive函数主要用于处理对象类型数据 并且它是深层次处理的。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>用ref处理对象<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;学习ref&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;jojoname is &#123;&#123;jojo&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;jojo author is &#123;&#123;jojoHome.author&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;changeJOJO&quot;&gt;点击改变jojo&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 引入ref</span><br><span class="line">import &#123; h, ref &#125; from &quot;vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    // 将数据变成响应式</span><br><span class="line">    let jojo = ref(&quot;jotaro&quot;);</span><br><span class="line">    let jojoHome = ref(&#123;</span><br><span class="line">      author:&#x27;huangmu&#x27;,</span><br><span class="line">      jojoone:&#x27;幻影之血&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    console.log(jojoHome);</span><br><span class="line">    function changeJOJO() &#123;</span><br><span class="line">      // 改变数据的方式</span><br><span class="line">      jojo.value = &#x27;jostar&#x27;;</span><br><span class="line">      jojoHome.value.author = &#x27;dio哒&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      jojo,</span><br><span class="line">      jojoHome,</span><br><span class="line">      changeJOJO</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>在上述ref的使用过程我们知道 用ref将对象变成响应式的 修改的时候需要对象点value点具体的属性<br>而reactive则不需要点value 而且可以检测到深度的数据<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;学习ref&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;jojoname is &#123;&#123;jojo&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;jojo author is &#123;&#123;jojoHome.author&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;find 套娃 is &#123;&#123;jojoHome.a.b.c&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;changeJOJO&quot;&gt;点击改变jojo&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 引入ref</span><br><span class="line">import &#123; h, reactive, ref &#125; from &quot;vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    // 将数据变成响应式</span><br><span class="line">    let jojo = ref(&quot;jotaro&quot;);</span><br><span class="line">    let jojoHome = reactive(&#123;</span><br><span class="line">      author:&#x27;huangmu&#x27;,</span><br><span class="line">      jojoone:&#x27;幻影之血&#x27;,</span><br><span class="line">      a:&#123;</span><br><span class="line">        b:&#123;</span><br><span class="line">          c:&#x27;套娃呢？&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    console.log(jojoHome);</span><br><span class="line">    function changeJOJO() &#123;</span><br><span class="line">      // 改变数据的方式</span><br><span class="line">      jojo.value = &#x27;jostar&#x27;;</span><br><span class="line">      jojoHome.author = &#x27;dio哒&#x27;;</span><br><span class="line">      jojoHome.a.b.c = &#x27;对啊&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      jojo,</span><br><span class="line">      jojoHome,</span><br><span class="line">      changeJOJO</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125161054.png" alt=""></p><ul><li>reactive将源对象转化为代理对象</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ul><li>为什么基本类型数据最好用<code>ref</code> 对象类型要用<code>reactive</code>?</li><li>首先ref都能处理这两者 但是在处理对象类型的时候借用了<code>reactive</code>，而<code>reactive</code>只能处理对象类型，不能处理基本类型</li><li><code>ref</code>和<code>reactive</code>处理对象类型有什么区别</li><li>如果同样都是包裹了一个对象，比如说<code>obj</code>，那么访问的时候ref需要使用<code>obj.value</code>才能访问到<code>Proxy</code>下的<code>obj</code>对象 而reactive直接使用<code>obj</code>就可以访问。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="vue3中的响应式原理"><a href="#vue3中的响应式原理" class="headerlink" title="vue3中的响应式原理"></a>vue3中的响应式原理</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>回顾vue2的响应式，我们用对对象类型的数据用<code>object.defineProperty</code>对属性进行读取，修改和拦截。对数组类型的数据进行包裹然后使用原生的方法修改数组。<br>弊端：</p><ol><li>不支持删除delete，以及新增(点操作符)</li><li>不能通过下标直接修改数组，需要用数组原生的几个方法才行</li></ol><p>vue3中的响应式是通过Proxy代理，拦截</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314140322.png" alt=""><br>对比vue2的修改方法，有以下几点不同</p><ul><li>proxy的get和set接收了对象和属性值两个参数 通过键值对的方式修改</li><li>proxy对于增加的操作包含在了set方法中，意思是set方法可以检测到增加 </li><li>proxy有了delete操作 返回值最好写删除的结果<br>上面是简略版<br>实际上底层不是这样实现的<br>就需要讲解到Reflect反射这个东西了，首先这个Reflect是可以和Object一样进行数据的属性增删改查操作<br>如：<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314141154.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314141206.png" alt=""><br>但是又有点不同在于 如果重复写了<code>Object.defineProperty</code>那么会报错 而<code>Reflect</code>会返回一个布尔值 所以可以存在两个一样的reflect 但是只会执行第一个<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314142805.png" alt=""><br>最后<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314142833.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314142930.png" alt=""></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="setup的两个注意点"><a href="#setup的两个注意点" class="headerlink" title="setup的两个注意点"></a>setup的两个注意点</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>setup在<code>beforeCreate</code>之前调用，且<code>this</code>的值是<code>undefined</code><br>接收两个参数 一个是<code>props</code>一个是<code>context</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>对于<code>props</code>，接收的是一个Proxy类型的的数据，如果没有和<code>props</code>对应会有警告出现，如果没有传该值则是<code>undefined</code><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314144248.png" alt=""><br>对于<code>context</code>参数，有三个值接收<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314145920.png" alt=""><br>对于emit属性，就是触发事件，它可以使用<code>context.emit</code>触发，用于父子通信<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314150241.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314150406.png" alt=""><br>对于slot属性，插槽，需要注意和vue2不同的一点是 传递具名插槽的时候不再使用<code>slot=&quot;xxx&quot;</code>而是使用<code>v-slot:xxx</code>这个是一个兼容性的问题<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314150617.png" alt=""><br>总结一图流：<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314150657.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="computed计算属性"><a href="#computed计算属性" class="headerlink" title="computed计算属性"></a>computed计算属性</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>可以像vue2一样使用computed，但vue3里面使用可以import之后使用箭头函数的形式使用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314154516.png" alt=""><br>注意 因为结合了reative函数，所以计算属性赋值可以是响应式对象的属性的形式 且最后不用返回<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314154740.png" alt=""><br>但是这样一来有一个问题出现 就是这个computed之后的属性是可读不可写的，这样就导致修改数据会出错，那么如何让他可读可写呢？<br>使用computed的全称写法 里面包裹的是一个对象<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314155030.png" alt=""><br>总结一图流：<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314155044.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="watch监视属性"><a href="#watch监视属性" class="headerlink" title="watch监视属性"></a>watch监视属性</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue3中依然可以在setup外面写watch方法<br>在vue3自身中,watch方法可以写为如下形式</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>检测ref数据<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314185851.png" alt=""><br>注意 以上是检测ref数据 不是reactive的数据</p><ul><li>不同于computed不需要接收值 所以不用变量收集</li><li>检测多个数据的时候采用数组的形式</li><li>如果输出new和old的值 会发现它们是用数组的形式存储,即,修改后存在数组里面显示</li></ul><ol><li>那么抛出疑问 vue2有immediate 那vue3应该怎么写?<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setup()&#123;</span><br><span class="line">watch(sum,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">console.log(newValue,oldValue);</span><br><span class="line">&#125;,&#123;immediate:true&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在watch里面写第三个属性即可</li><li>那么deep应该如何写?会出现什么问题?<br>在reactive生成的响应式数据自动开启了deep监视,导致deep配置项无效 且无法关闭</li><li>那么reative的数据是如何监视以及出现的问题?<br>如果直接写watch一个reactive的对象 那么会出现new和old值一样的问题<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314190806.png" alt=""><br>暂时没有办法解决这个问题<br>4 因为深度监视没办法关闭 开着会浪费性能的问题,所以如果想监视一个reative响应式对象中的一个数据 直接使用<code>对象.属性</code>是不行的,vue3规定必须要返回这个值<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch(<span class="function">()=&gt;</span>person.age,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;xxx变化了&#x27;</span>,newValue,oldValue);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>如果要监视reactive定义的一个对象中的某些属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch([<span class="function">()=&gt;</span>person.age,<span class="function">()=&gt;</span>person.name],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;xxx变化了&#x27;</span>,newValue,oldValue);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>看起来很麻烦= =</li><li>特殊情况<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314192351.png" alt=""></li><li>watch中的value问题<br>如果是一个ref定义的基本数据,那么取出来我们需要用到<code>xx.value</code><br>而在watch里面想监视它 则不能写点value 因为watch监视的是一个结构 而不是一个具体的数据<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch(sum,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;aaa&#x27;</span>,newValue,oldValue);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>但是如果是ref定义的obj类型 即对象类型 那么用watch监视有两种方法<br>一是监视<code>obj.value</code>,为什么呢?因为我们知道 ref定义的对象类型数据,直接输出是一个RefImplll即引用对象,它是再借助了reactive生成了proxy类型数据 即它的响应式来自reactive中的proxy 所以单单监视<code>obj</code>是行不通的,必须监视<code>obj.value</code>让他访问到响应式数据<br>二是开启deep配置项,从1我们知道,ref生成的对象类型数据必须监视到其value里面的proxy 那么换个角度来说只要他能深度检测到obj里面的value里面的proxy即可 所以开启这个深度监视也奏效<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314193642.png" alt=""></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="wacthEffect"><a href="#wacthEffect" class="headerlink" title="wacthEffect"></a>wacthEffect</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">抛出疑问</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>watchEffect方法的功能用一句话来说就是用谁就监视谁</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先它区别于watch 不需要传入任何参数<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watchEffect(()=&gt;&#123;</span><br><span class="line">const x1 = sum;</span><br><span class="line">const x2 = person.job.j1.salary;</span><br><span class="line">console.log(&#x27;回调执行&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>刚刚说了 用到谁就去监视谁 所以在这里面 用到了sum 和<code>person.job.j1.salary</code>这两个变量,前者好理解 就是一个基本的数据检测 但后者是深度的数据 结果是也能检测出来.说明这个方法非常的智能,可以深度检测.<br>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314194918.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ul><li>computed和watchEffect很像的原因?<br>前者是有数据变化了,整个都要重新计算然后返回结果<br>后者也是一样 有东西变了 就执行回调</li><li>两者不一样的地方?<br>前者更注重的是回调的结果 所以要有一个返回值<br>而后者更注重过程 所以不用写返回值</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="vue3生命周期"><a href="#vue3生命周期" class="headerlink" title="vue3生命周期"></a>vue3生命周期</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要区别</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><ol><li>在vue3里面 原先vue2中的<code>beforeDestroy和destroyed</code>变成了<code>beforeUnmounted和unmounted</code></li><li>原先在vue2里面 如果创建了<code>new Vue</code>并且传入了配置项,但不写el 也不在vm中挂载el,意味着此时模板没有被解析 但是它经过了<code>beforeCreate和created</code>两个钩子 这样的情况是不必要的,在vue3中得到了改善,vue3需要app挂载完后才能走下一步<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314195722.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314195816.png" alt=""></li><li>vue3也提供了组合api形式的生命周期钩子 和vue2中的对应如下<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314202556.png" alt=""></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>其实本质上就是js的模块化</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>定义一个hook文件夹 将需要的函数放进去并暴露方法最后return<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314204651.png" alt=""><br>和mixins有点类似<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314204907.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">抛出疑问</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>解决响应式丢失的问题</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>如果我们return变量的时候想调用的时候简写,比如:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">return &#123;</span><br><span class="line">name:person.name,</span><br><span class="line">age:person.age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这个时候数据虽然能用 但因为只是把响应式的数据赋值给了变量,而变量不是响应式的 所以就丢失了响应式.<br>使用<code>toRef</code>或者<code>toRefs</code>方法 即可把数据变成响应式的,从而return的变量也是响应式的<br>并且非常需要注意的是 toRef之后修改的数据 对应原先的数据也会修改!!!.<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const name = toRef(person,&#x27;name&#x27;);</span><br><span class="line">console.log(name)//输出的是一个RefImpl对象</span><br></pre></td></tr></table></figure><br>注意 对于深层次的数据变成响应式需要这样写<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const salary = toRef(person.job.j1,&#x27;salary&#x27;);</span><br></pre></td></tr></table></figure><br>如果需要抛出的变量很多 那么建议使用<code>toRefs</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const x = toRefs(person);</span><br><span class="line">//这样就抛出了person的全部属性了 且属性里面的数据也是Proxy的</span><br><span class="line">//或者</span><br><span class="line">return &#123;</span><br><span class="line">...toRefs(person)</span><br><span class="line">&#125;</span><br><span class="line">//利用...运算符将person全部展开 但是需要注意的是 多层级的数据依旧需要在模板中一层一层写 比如job.j1.salary 暴露出来的只有job</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ul><li>为什么不在return的时候用ref包装呢?不是比toRef写法更简单吗?<br>结果上是可以的 但是这样会有个很严重的问题 ref只是将传过来的数据进行响应式 如果当前的数据改变页面也会变动 但是!!原先的数据并没有改变 改变的是ref新建的对象里面的数据<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314210835.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314211005.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314211035.png" alt=""></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="shallowReactive和shallowRef"><a href="#shallowReactive和shallowRef" class="headerlink" title="shallowReactive和shallowRef"></a>shallowReactive和shallowRef</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><code>shallowReactive</code>只考虑第一层的数据，意味着只对第一层做响应式，比较节能。<br><code>shallowRef</code>如果是基本类型 那么和<code>ref</code>没有区别 但是如果是对象类型 <code>shallowRef</code>不会使其变成响应式<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220316213307.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="readonly和shallowReadonly"><a href="#readonly和shallowReadonly" class="headerlink" title="readonly和shallowReadonly"></a>readonly和shallowReadonly</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><code>readonly</code>可以使得数据变成只读，虽然它是响应式的但是不允许更改<br>引申出页面没有变化的两种情况</p><ol><li>数据不是响应式的 vue就检测不到</li><li>数据不可以被修改 <code>readonly</code>属于这种情况<br><code>shallowReadonly</code>让数据的第一层不能被修改 但深层次可以被修改<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220316214755.png" alt=""></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="toRaw还原对象"><a href="#toRaw还原对象" class="headerlink" title="toRaw还原对象"></a>toRaw还原对象</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><code>toRaw</code>用于还原对象或者变量的响应式。<br>只能处理reactive定义的响应式对象<br><code>markRaw</code><br>用之前讲讲不用它的时候的需求<br>如果已经将对象变成响应式并且暴露出去了，那么后面有个function想在刚刚的对象中添加新数据进去是不行的，因为<code>toRefs</code>只把第一层的数据暴露了出去，新添加的数据是没有暴露的。解决方法有两种</p><ol><li>给原先的对象赋一个空的新数据，这样就会把空数据暴露出去且是响应式，所以后面增加也会变动</li><li>将对象重新交出去(交了两次 一次是源对象 一次是<code>toRefs</code>)这样一来就是把整个响应式对象交了出去，既然是响应式的对象，那么也能检测到添加和删除的元素。</li></ol><p>那么<code>markRaw</code>的业务是什么呢？<br>上面说了新添加的响应式数据 如果这个数据特别庞大，层次特别丰富，只是展示到页面上，且不用变动数据的时候，那么这时候这个数据最好就不用响应式。这样一来就需要用到<code>markRaw</code>标记这个数据，这样一来不管这个数据是进入到了响应式对象里，还是一开始给了它响应式，最后它都不会是响应式的。<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220316220630.png" alt="">    </p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>创建一个自定义的ref 一般用于防抖的业务场景</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">setup()&#123;</span><br><span class="line">function myRef(value,delay)&#123;</span><br><span class="line">let timer;</span><br><span class="line">return customRef((track,trigger)=&gt;&#123;</span><br><span class="line">return&#123;</span><br><span class="line">get()&#123;</span><br><span class="line">track();//告诉vue这个值需要被追踪</span><br><span class="line">&#125;,</span><br><span class="line">set(newValue)&#123;</span><br><span class="line">clearTimeout(timer);</span><br><span class="line">timer = setTimeout(()=&gt;&#123;</span><br><span class="line">value = newValue;</span><br><span class="line">trigger();//告诉vue去更新页面</span><br><span class="line">&#125;,delay)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">let keyword = myRef(&#x27;hello&#x27;,500)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="provide和inject"><a href="#provide和inject" class="headerlink" title="provide和inject"></a>provide和inject</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>提供了祖孙通信的方式<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220318193604.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="响应式数据的判断"><a href="#响应式数据的判断" class="headerlink" title="响应式数据的判断"></a>响应式数据的判断</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220318193651.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="composition-API的优势"><a href="#composition-API的优势" class="headerlink" title="composition API的优势"></a>composition API的优势</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>讲到组合api，那么就要讲到这个option api了。后者是vue2的，和它的中文含义一样，是将数据和方法进行一项一项的配置。但是这样存在一定的劣势，比如当变量很多的时候，数据就不好维护了。如下图，绿色的数据对应绿色的功能，但它们的位置不一样 很难维护。<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220318194106.png" alt=""><br>而到了vue3,借助了hook 就不会造成这样的问题<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220318194253.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端进阶" scheme="https://zlinni.github.io/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://zlinni.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Router</title>
    <link href="https://zlinni.github.io/posts/8bf806511a1a/"/>
    <id>https://zlinni.github.io/posts/8bf806511a1a/</id>
    <published>2022-01-19T05:45:03.000Z</published>
    <updated>2022-02-23T06:19:37.137Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tip cogs"><p>本文主要用于记录vue路由的使用，参考视频<a href='https://www.bilibili.com/video/BV1Zy4y1K7SH?p=1'>【尚硅谷Vue2.0+Vue3.0全套教程丨vuejs从入门到精通】</a></p></div><h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">SPA</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>是vue的一个插件库 专门用于实现spa应用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>全称single page web application<br>整个应用只有一个完整的页面<br>点击页面的xx链接不会刷新页面 只会做局部更新<br>数据需要通过ajax请求获取</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">注意事项</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>下面以单页面多组件跳转为例子讲解router的基本使用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>安装vuerouter<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-router</span><br></pre></td></tr></table></figure><br>创建router文件夹 写入indexjs 并导入相关组件的地址和名字<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入vuerouter</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">// 导入相关组件</span></span><br><span class="line"><span class="keyword">import</span> JOJO <span class="keyword">from</span> <span class="string">&#x27;../components/JOJO.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> DIO <span class="keyword">from</span> <span class="string">&#x27;../components/DIO.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/jojo&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:JOJO</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/dio&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:DIO</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>mainjs中导入以及应用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">render</span>:<span class="function"><span class="params">h</span>=&gt;</span>h(App),</span><br><span class="line">    <span class="attr">router</span>:router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>在app需要显示组件跳转的链接a标签改为<code>router-link</code>标签 并设置<code>to=&#39;/xxx地址&#39;</code><br>可以自行添加<code>active-class</code>属性(前提是css里面有这个样式)跳转后实现效果<br>最后在要显示组件的地方 换成<code>&lt;router-view&gt;&lt;/router-view&gt;</code>标签<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;开始学习router&lt;/h1&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;div class=&quot;middle&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;navi&quot;&gt;</span><br><span class="line">        &lt;router-link to=&quot;/jojo&quot; class=&quot;list-item&quot; active-class=&quot;active&quot;&gt;点我显示jojo组件&lt;/router-link&gt;</span><br><span class="line">        &lt;router-link to=&quot;/dio&quot; class=&quot;list-item&quot; active-class=&quot;active&quot;&gt;点我显示dio组件&lt;/router-link&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;compon&quot;&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure><br>总结一图流<br><img src="./Vue-route/Snipaste_2022-01-19_19-30-10.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ol><li>开发当中 被路由使用的组件叫做路由组件 其他的自己亲自注册亲自写的叫做一般组件<br>前者放在pages文件夹中 后者放在components文件夹中</li><li>被路由使用的组件 会在页面需要的时候挂载 不需要的时候销毁</li><li>每个路由器都有自己的<code>$route</code>属性 里面存着自己的路由信息</li><li>整个应用只有一个router 可以通过组件的<code>$router</code>属性获取</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>嵌套路由为了解决组件中想继续显示子组件的问题 使用到了children配置项</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>定义好子组件<br>在路由中引入子组件 注意这里使用了children配置项 也是配置数组对象 且path不写斜杠<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入vuerouter</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">// 导入相关组件</span></span><br><span class="line"><span class="keyword">import</span> JOJO <span class="keyword">from</span> <span class="string">&#x27;../pages/JOJO.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> DIO <span class="keyword">from</span> <span class="string">&#x27;../pages/DIO.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Msg <span class="keyword">from</span> <span class="string">&#x27;../pages/Msg.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">&#x27;../pages/News.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/jojo&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:JOJO,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 这里不用写斜杠了</span></span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;msg&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:Msg</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:News</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/dio&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:DIO</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>引入在组件中引入子组件 注意routerlink标签要写对应的组件下子组件的地址<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;bo ku wa jojo哒&lt;/h1&gt;</span><br><span class="line">    &lt;ul class=&quot;jojotab&quot;&gt;</span><br><span class="line">      &lt;!-- 这里不是写/msg了 是写/组件/子组件 --&gt;</span><br><span class="line">      &lt;li&gt;&lt;router-link to=&quot;/jojo/msg&quot; class=&quot;tabshow&quot;&gt;Msg&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;router-link to=&quot;/jojo/news&quot;  class=&quot;tabshow&quot;&gt;News&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;ul&gt;&lt;router-view&gt;&lt;/router-view&gt;&lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><br>注意的点 需要写routerview标签指定位置显示</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="路由的query参数"><a href="#路由的query参数" class="headerlink" title="路由的query参数"></a>路由的query参数</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">命名路由</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>利用路由的query可以实现同个组件点击切换不同的内容</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>先定义好组件 这里是以messageList为例子 点击列表中的选项 下方显示出传递的内容<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220120131547.png" alt=""><br>下方是组件Detail显示传递过来的信息 注意符号的使用<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li&gt;消息id是：&#123;&#123;$route.query.id&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;消息title是：&#123;&#123;$route.query.title&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><br>然后在路由的news下面导入以及定义detail<br>回到news 定义好列表 修改跳转的地址<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;老东西你的替身最强啦&lt;/li&gt;</span><br><span class="line">      &lt;li v-for=&quot;m in messageList&quot; :key=&quot;m.id&quot;&gt;</span><br><span class="line">        &lt;!-- 跳转路由并携带query参数 to的字符串写法--&gt;</span><br><span class="line">        &lt;!-- &lt;router-link :to=&quot;`/jojo/news/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;&gt;&#123;&#123; m.title &#125;&#125;&lt;/router-link&gt; --&gt;</span><br><span class="line">        &lt;!-- 跳转路由并携带query参数 to的对象写法--&gt;</span><br><span class="line">        &lt;router-link</span><br><span class="line">          :to=&quot;&#123;</span><br><span class="line">            path: &#x27;/jojo/news/detail&#x27;,</span><br><span class="line">            query: &#123;</span><br><span class="line">              id: m.id,</span><br><span class="line">              title: m.title,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;&quot;</span><br><span class="line">          &gt;&#123;&#123; m.title &#125;&#125;&lt;/router-link</span><br><span class="line">        &gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      messageList: [</span><br><span class="line">        &#123; id: &quot;001&quot;, title: &quot;msg001&quot; &#125;,</span><br><span class="line">        &#123; id: &quot;002&quot;, title: &quot;msg002&quot; &#125;,</span><br><span class="line">        &#123; id: &quot;003&quot;, title: &quot;msg003&quot; &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>注意跳转路由携带query参数的写法 推荐第二种 比较清晰<br>必须注意绑定to</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220120132306.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="params参数和路由器的props配置"><a href="#params参数和路由器的props配置" class="headerlink" title="params参数和路由器的props配置"></a>params参数和路由器的props配置</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>params参数接收基本和query相同 但是路径path要写成name<br>路由的props配置可以简化路由组件的编写</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>params<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220120134626.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220120134658.png" alt=""><br>props<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220120134727.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="开启replace操作"><a href="#开启replace操作" class="headerlink" title="开启replace操作"></a>开启replace操作</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220120162259.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>不借助routerlink的路由导航就是编程式路由导航<br>如果要使用button或者其他非a标签进行跳转实现的时候，routerlink就没有作用了<br>以及定时器自动跳转（没有点击用不到a标签）</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>主要内容<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124102705.png" alt=""><br>push和replace部分<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">        &lt;button @click=&quot;pushShow(m)&quot;&gt;push&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;replaceShow(m)&quot;&gt;replace&lt;/button&gt;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">methods: &#123;</span><br><span class="line">    pushShow(m) &#123;</span><br><span class="line">      this.$router.push(&#123;</span><br><span class="line">        path: &quot;/jojo/news/detail&quot;,</span><br><span class="line">        query: &#123;</span><br><span class="line">          id: m.id,</span><br><span class="line">          title: m.title,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    replaceShow(m) &#123;</span><br><span class="line">      this.$router.replace(&#123;</span><br><span class="line">        path: &quot;/jojo/news/detail&quot;,</span><br><span class="line">        query: &#123;</span><br><span class="line">          id: m.id,</span><br><span class="line">          title: m.title,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><br>前进后退和go部分<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    &lt;button @click=&quot;back&quot;&gt;后退&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;forward&quot;&gt;前进&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;testGo&quot;&gt;测试一下go&lt;/button&gt;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">  methods: &#123;</span><br><span class="line">    back()&#123;</span><br><span class="line">      this.$router.back();</span><br><span class="line">    &#125;,</span><br><span class="line">    forward()&#123;</span><br><span class="line">      this.$router.forward();</span><br><span class="line">    &#125;,</span><br><span class="line">    testGo()&#123;</span><br><span class="line">      // 正数前进 负数后退</span><br><span class="line">      this.$router.go(3)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><br>总结一波流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124102914.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="路由缓存"><a href="#路由缓存" class="headerlink" title="路由缓存"></a>路由缓存</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>为了解决当页面中输入了相关内容后进行跳转最后回去还保留内容的问题<br>原因是组件的切换会重新挂载和销毁<br>利用到keepalive标签以及include属性</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>msg里面定义输入框<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li&gt;name:&lt;input type=&quot;text&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;stand:&lt;input type=&quot;text&quot;&gt;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><br>jojo里面 （使用到输入框的父组件）设置keepalive<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;bo ku wa jojo哒&lt;/h1&gt;</span><br><span class="line">    &lt;ul class=&quot;jojotab&quot;&gt;</span><br><span class="line">      &lt;!-- 这里不是写/msg了 是写/组件/子组件 --&gt;</span><br><span class="line">      &lt;li&gt;&lt;router-link to=&quot;/jojo/msg&quot; class=&quot;tabshow&quot;&gt;Msg&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;router-link to=&quot;/jojo/news&quot; class=&quot;tabshow&quot;&gt;News&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;keep-alive include=&quot;Msg&quot;&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><br>注意 keepalive包裹的是routerview标签<br>include属性是指定缓存哪个组件 不写的话默认全部<br>最后特别注意 使用到include的时候 对应的组件要设置name<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;Msg&#x27;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124104807.png" alt=""></p><p>补充说明<br>如果想缓存多个路由组件 使用到<code>v-bind</code>和数组写法<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124104954.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="两个新的生命周期钩子"><a href="#两个新的生命周期钩子" class="headerlink" title="两个新的生命周期钩子"></a>两个新的生命周期钩子</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>如果使用上述的缓存路由就会出现一个问题 缓存组件中的东西没有执行销毁<br>引出两个路由的生命周期钩子 activated 和 deactivated</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>激活 activated<br>将之前需要写在mounted里面的功能写入 当切换到该组件就生效<br>失活 deactivated<br>将之前需要写在销毁之前的功能写入 当离开该组件生效<br>一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124111225.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="全局路由守卫"><a href="#全局路由守卫" class="headerlink" title="全局路由守卫"></a>全局路由守卫</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>用于判断某些条件的执行是否满足才进入到路由的下一级</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>全局前置路由：每一次切换前都被调用<br>要用到全局路由守卫就必须接收路由再暴露出去<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> router =  <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [&#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/jojo&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: JOJO,</span><br><span class="line">            <span class="attr">children</span>: [&#123;</span><br><span class="line">                    <span class="comment">// 这里不用写斜杠了</span></span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;msg&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: Msg</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: News,</span><br><span class="line">                    <span class="attr">children</span>: [&#123;</span><br><span class="line">                        <span class="attr">path</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                        <span class="attr">component</span>: Detail,</span><br><span class="line">                        <span class="function"><span class="title">props</span>(<span class="params">$route</span>)</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> &#123;</span><br><span class="line">                                <span class="attr">id</span>: $route.query.id,</span><br><span class="line">                                <span class="attr">title</span>: $route.query.title</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/dio&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: DIO</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(to,<span class="keyword">from</span>);</span><br><span class="line">    <span class="keyword">if</span>(to.path === <span class="string">&#x27;/jojo/news&#x27;</span>)&#123;</span><br><span class="line">        next();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;去往news&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><br>用到了beforeEach的方法 值得一提的是三个参数<br>to代表的是去往的位置<br>from代表从哪里来<br>next代表是否执行下一步<br>example：先点击jojo 后点击dio 就出现to里面有dio from里面有jojo<br>对于to 和 from 两者携带的参数如下<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124151706.png" alt=""><br>其中name指的是路由的名字 这里没有定义所以是undefined<br>可以在meta里面放入个人定义的信息 这个属性称之为路由元信息<br>就不用逐个判断这么复杂了 只要路由守卫判断路由信息里面是否有存在这么个meta里面的属性 就可以执行或不执行下面的步骤<br>且注意没有定义的时候 就是undefined 自然为假 所以只用定义真的情况<br>此处在news里面设置meta<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router =  <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [&#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/jojo&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: JOJO,</span><br><span class="line">            <span class="attr">children</span>: [&#123;</span><br><span class="line">                    <span class="comment">// 这里不用写斜杠了</span></span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;msg&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: Msg</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: News,</span><br><span class="line">                    <span class="attr">children</span>: [&#123;</span><br><span class="line">                        <span class="attr">path</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                        <span class="attr">component</span>: Detail,</span><br><span class="line">                        <span class="function"><span class="title">props</span>(<span class="params">$route</span>)</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> &#123;</span><br><span class="line">                                <span class="attr">id</span>: $route.query.id,</span><br><span class="line">                                <span class="attr">title</span>: $route.query.title</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;],</span><br><span class="line">                    <span class="attr">meta</span>:&#123;<span class="attr">isAuth</span>:<span class="literal">true</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/dio&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: DIO</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(to,<span class="keyword">from</span>);</span><br><span class="line">    <span class="keyword">if</span>(to.meta.isAuth)&#123;</span><br><span class="line">        next();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;去往news&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><br>全局后置守卫<br>没有next功能 常用于网页标题的切换<br>如果只使用前置守卫去切换这个标题的话 会出现一瞬间的网页标题错误等细节问题<br>所以使用后置守卫写比较好<br>另外修改标题的方法是<code>document.title = xxx</code>这里最好使用meta定义的title<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124153523.png" alt=""><br>总结一波流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124153608.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="独享路由守卫"><a href="#独享路由守卫" class="headerlink" title="独享路由守卫"></a>独享路由守卫</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>如果只想对单个路由进行权限操作 则可以使用独享路由守卫来执行</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>beforeEnter 也有to from next三个参数 类似于beforeEach<br>但独享路由守卫只有前置路由守卫 没有后置<br>一图流：<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124154108.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="组件路由守卫"><a href="#组件路由守卫" class="headerlink" title="组件路由守卫"></a>组件路由守卫</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>顾名思义就是在组件里面写路由守卫</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>两个方法<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124154242.png" alt=""><br>与前置后置守卫不同的一点是<br>从jojo到dio 会产生一次前置 一次后置<br>而组件路由守卫的话<br>从jojo到dio 会产生一次beforeRouteEnter 然后 当点击到其他的内容 比如msg 才会产生beforeRouteLeave<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124154607.png" alt=""><br>注意一点 如果不next 放行 那么就是进不去也出不来<br>一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124155056.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="history模式与hash模式"><a href="#history模式与hash模式" class="headerlink" title="history模式与hash模式"></a>history模式与hash模式</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue的路由有两种工作模式 hash 和 history 默认是hash</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>hash模式 地址栏井号斜杠后面的所有参数都是hash值 特点是不随http请求发给服务器<br>意味着如果后面写了很多东西 它也不会发给服务器的<br>history模式 没有井号 比较美观<br>默认hash模式 切换成history模式<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124155759.png" alt=""><br>此外 hash模式的兼容性比history好<br>且 如果项目上线的时候 打包为history模式 会在刷新的时候出现404问题 因为服务端没有配置相关地址 但hash 就不会 因为井号后面不会发给服务端<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124162251.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端进阶" scheme="https://zlinni.github.io/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://zlinni.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>数组去重的八种方法</title>
    <link href="https://zlinni.github.io/posts/1bdac88a9cd9/"/>
    <id>https://zlinni.github.io/posts/1bdac88a9cd9/</id>
    <published>2022-01-14T07:57:18.000Z</published>
    <updated>2022-02-23T06:43:06.741Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>本文主要用于讲解以及记录js数组去重的八种方法 主要学习其中的编程思想</p></div><h1 id="方法总览"><a href="#方法总览" class="headerlink" title="方法总览"></a>方法总览</h1><ol><li>第三方库<br>下面推荐underscore和loadash，这两个库也是官网直接下载下来然后引入即可<br>效果如下<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220114160343.png" alt=""><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./underscore-min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">500</span>];</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> result = _.uniq(arr);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    getUniqueArray();</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>es6的set方法<br>set方法里面的东西是独一无二的 利用这个特性去重<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">500</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 两种都可以 推荐上面的</span></span><br><span class="line">    <span class="comment">// var result = [...new Set(arr)]</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="built_in">Array</span>.from(<span class="built_in">Set</span>(arr));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">getUniqueArray();</span><br></pre></td></tr></table></figure></li><li>遍历数组再用indexOf判断 如果不存在相同的就push进去<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">500</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(result.indexOf(item) === -<span class="number">1</span>)result.push(item);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">getUniqueArray();</span><br></pre></td></tr></table></figure></li><li>利用filter过滤 原理是利用indexOf会返回数组下标 并且有两个一样的元素的时候 只会返回第一个的下标 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">500</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = arr.filter(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr.indexOf(item) === index</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">getUniqueArray();</span><br></pre></td></tr></table></figure></li><li>利用reduce方法 以及include方法 迭代的结果里面是否有相同<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">500</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = arr.reduce(<span class="function">(<span class="params">pre,current</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pre.includes(current)?pre:[...pre,current]</span><br><span class="line">    &#125;,[])</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">getUniqueArray();</span><br></pre></td></tr></table></figure></li><li>利用对象的特性 对象中的key是唯一的 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">500</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">item,index</span>) =&gt;</span> &#123;</span><br><span class="line">        result[arr[index]] = <span class="string">&#x27;sss&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    result = <span class="built_in">Object</span>.keys(result).map(<span class="function"><span class="params">item</span>=&gt;</span>~~item);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">getUniqueArray();</span><br></pre></td></tr></table></figure></li><li>基本的算法 数组去重 对比两数组<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">500</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    loop: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] === arr[j]) <span class="keyword">continue</span> loop;</span><br><span class="line">        &#125;</span><br><span class="line">        result.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">getUniqueArray();</span><br></pre></td></tr></table></figure></li><li>利用排序后的数组 相邻有相同的则重复的特性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">500</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    sortArr = arr.sort();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sortArr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sortArr[i] !== sortArr[i + <span class="number">1</span>]) result.push(sortArr[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br><span class="line">getUniqueArray();</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>上面写到的八种方法还是看需求使用比较好 有的方法虽然可以解决问题 但没有考虑到时间复杂度之类的 尽量使用简单的方法或者第三方库的方法吧</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面试" scheme="https://zlinni.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试" scheme="https://zlinni.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>LandingPage落地页</title>
    <link href="https://zlinni.github.io/posts/660fac1a5939/"/>
    <id>https://zlinni.github.io/posts/660fac1a5939/</id>
    <published>2022-01-09T02:35:44.000Z</published>
    <updated>2022-02-27T02:52:57.554Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>本文介绍了落地页的内容，设计风格以及落地页对用户的吸引作用。</p></div><h1 id="何为LandingPage"><a href="#何为LandingPage" class="headerlink" title="何为LandingPage"></a>何为LandingPage</h1><p>landingpage是一种网页设计风格制作的网页，中文名是落地页，像下面这几种<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220209180635.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220209180709.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220209180741.png" alt=""><br>它们都有非常鲜明的特点，就是非常集中式的引导用户进入某个选项。相比起传统的网页，落地页不需要用户去探索页面的各种内容，而是专于某种目的，比如推销产品，展现简历内容等。</p><h1 id="LandingPage的制作"><a href="#LandingPage的制作" class="headerlink" title="LandingPage的制作"></a>LandingPage的制作</h1><p>其实landingpage的制作并不太需要很好的前端能力，甚至现在很多开发网页都可以使用框架生成或者软件生成，这样有助于设计者更专注于界面的设计而非功能的使用，并且因为落地页基本不需要后台的功能，所以落地页基本是静态的网站，也就加快了网页的访问速度，减少用户的等待时间，进一步留住用户提高访问量。<br>另外，正常的网页中目标导向太多，导致用户不知道应该点哪个以进行下一步的选择，这样不仅会导致使用者的流失，也会导致设计者投资的广告费用白白浪费，所以一个正确的landingpage应该具有以下几点要求</p><ol><li>精美的设计</li><li>收集信息的表格</li><li>详细的产品或服务描述</li><li>以往客户评价</li></ol><p>关于实际制作landing page 需要使用到wordpress软件里面的一个插件brizy<br>下面提供视频演示地址<br><div class="note primary flat"><p><a href="https://www.bilibili.com/video/BV17h411R7vF?from=search&amp;seid=10740205905332206372&amp;spm_id_from=333.337.0.0">视频地址</a></p></div></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>依我个人而言，更喜欢landing page这种类型的页面制作，因为它的美感肯定是大于常规的电商网站的，而且也不会用到很多的功能，但是要练手项目的话，还是建议选择功能制作比较多的页面，这样能够体现自己的编程能力，以及解决问题的能力。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端进阶" scheme="https://zlinni.github.io/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="设计" scheme="https://zlinni.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>每日一面，快乐无限</title>
    <link href="https://zlinni.github.io/posts/427f696eb6e1/"/>
    <id>https://zlinni.github.io/posts/427f696eb6e1/</id>
    <published>2022-01-09T02:35:44.000Z</published>
    <updated>2022-03-16T02:50:17.975Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>本文主要用于记录前端面试常考题</p></div><h1 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h1><h2 id="HTTP-HTML-浏览器"><a href="#HTTP-HTML-浏览器" class="headerlink" title="HTTP/HTML/浏览器"></a>HTTP/HTML/浏览器</h2><h3 id="说一下http和https"><a href="#说一下http和https" class="headerlink" title="说一下http和https"></a>说一下http和https</h3><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">基本概念</button></li><li class="tab"><button type="button" data-href="#test-2">区别</button></li><li class="tab"><button type="button" data-href="#test-3">https的工作原理</button></li><li class="tab"><button type="button" data-href="#test-4">https协议的优缺点</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>http 超文本传输协议 是互联网上应用最广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（tcp），用于从www服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少<br>https 是以安全为目标的http通道，简单讲是http的安全版，即http下加入ssl层，https的安全基础是ssl，因此加密的详细内容就需要ssl<br>https协议的主要作用是：建立一个信息安全通道，来确保数组的传输，确保网站的真实性</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>https协议需要ca证书 费用比较高<br>http的信息是明文传输，https是经过ssl协议加密传输的<br>端口不同 一般来讲http是80端口 https是443端口</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>客户使用https url访问服务器，则要求web服务器建立ssl连接<br>web服务器收到客户端的请求后，将网站的证书（里面包含公钥）返回or传输给客户端<br>客户端和web服务器端开始协商ssl链接的安全等级<br>客户端浏览器通过双方协商一致的安全等级，建立会话密钥，然后通过网站的公钥加密会话密钥，并传送给网站<br>web服务器通过自己的私钥解密出会话密钥<br>web服务器通过会话密钥加密与客户端之间的通信</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-4"><p>优点：使用https协议可认证用户和服务器，确保数据发送到正确的客户机和服务器。<br>缺点：https握手阶段比较费时，会使得页面加载时间延长50%，增加10%-20%的耗电<br>https缓存不如http高效，会增加数据开销<br>ssl证书要钱 功能越强的证书费用越高<br>ssl证书要绑定ip 不能在同个ip上绑定多个域名，ipv4资源支持不了这种消耗</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="tcp三次握手"><a href="#tcp三次握手" class="headerlink" title="tcp三次握手"></a>tcp三次握手</h3><p>一句话概括：<br>客户端和服务端都需要直到各自可收发，因此需要三次握手</p><h3 id="tcp和udp的区别"><a href="#tcp和udp的区别" class="headerlink" title="tcp和udp的区别"></a>tcp和udp的区别</h3><ol><li>tcp是面向链接的 udp是无连接的即发送数据前不需要建立连接</li><li>tcp提供可靠的服务，也就是说通过tcp连接发送的数据，无差错，不丢失，不重复，且按序到达，udp尽最大的努力交付，即不保证可靠交付。并且因为tcp可靠，面向连接，不会丢失数据因此适合大数据量的交换</li><li>tcp是面向字节流，udp面向报文，并且网络出现拥塞不会使得发送速率降低（因此会产生丢包，对实时的应用比如ip电话和视频会议等）</li><li>tcp只能是一对一的，udp支持1对1 1对多</li><li>tcp的首部较大为20字节 udp只有8字节</li><li>tcp是面向连接的可靠性传输，udp是不可靠的</li></ol><h3 id="websocket的实现和应用"><a href="#websocket的实现和应用" class="headerlink" title="websocket的实现和应用"></a>websocket的实现和应用</h3><p>应用：多人聊天室，客服咨询<br><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">什么是websocket</button></li><li class="tab"><button type="button" data-href="#test-2">websocket是怎么样的协议？具体有什么优点</button></li><li class="tab"><button type="button" data-href="#test-3">websocket的作用</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>websocket是h5中的一种协议，支持持久性连接，而http协议不支持。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先，Websocket是一个持久化的协议，相对于HTTP这种非持久的协议来说</p><p>HTTP的生命周期通过 Request 来界定，也就是一个 Request 一个 Response ，那么在 HTTP1.0 中，这次HTTP请求就结束了。</p><p>在HTTP1.1中进行了改进，使得有一个keep-alive，也就是说，在一个HTTP连接中，可以发送多个Request，接收多个Response。但是请记住 Request = Response ， 在HTTP中永远是这样，也就是说一个request只能有一个response。而且这个response也是被动的，不能主动发起。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>（1）ajax轮询</p><p>ajax轮询的原理非常简单，让浏览器隔个几秒就发送一次请求，询问服务器是否有新信息。</p><p>（2）long poll（长轮询）</p><p>long poll 其实原理跟 ajax轮询 差不多，都是采用轮询的方式，不过采取的是阻塞模型（一直打电话，没收到就不挂电话），也就是说，客户端发起连接后，如果没消息，就一直不返回Response给客户端（对于PHP有最大执行时间，建议没消息，执行到一定时间也返回）。直到有消息才返回，返回完之后，客户端再次建立连接，周而复始。</p><p>从上面可以看出其实这两种方式，都是在不断地建立HTTP连接，关闭HTTP协议，由于HTTP是非状态性的，每次都要重新传输 identity info （鉴别信息），来告诉服务端你是谁。然后等待服务端处理，可以体现HTTP协议的另外一个特点，被动性。</p><p>何为被动性呢，其实就是，服务端不能主动联系客户端，只能有客户端发起。从上面很容易看出来，不管怎么样，上面这两种都是非常消耗资源的。</p><p>ajax轮询 需要服务器有很快的处理速度和资源。（速度）long poll 需要有很高的并发，也就是说同时接待客户的能力。（场地大小）</p><p>（3）WebSocket</p><p>Websocket解决了HTTP的这几个难题。首先，被动性，当服务器完成协议升级后（HTTP-&gt;Websocket），服务端就可以主动推送信息给客户端啦。解决了上面同步有延迟的问题。</p><p>解决服务器上消耗资源的问题：其实我们所用的程序是要经过两层代理的，即HTTP协议在Nginx等服务器的解析下，然后再传送给相应的Handler（php等）来处理。简单地说，我们有一个非常快速的 接线员（Nginx） ，他负责把问题转交给相应的 客服（Handler） 。Websocket就解决了这样一个难题，建立后，可以直接跟接线员建立持久连接，有信息的时候客服想办法通知接线员，然后接线员在统一转交给客户。</p><p>由于Websocket只需要一次HTTP握手，所以说整个通讯过程是建立在一次连接/状态中，也就避免了HTTP的非状态性，服务端会一直知道你的信息，直到你关闭请求，这样就解决了接线员要反复解析HTTP协议，还要查看identity info的信息。</p><p>目前唯一的问题是：不兼容低版本的IE</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><h3 id="http请求的HEAD方式"><a href="#http请求的HEAD方式" class="headerlink" title="http请求的HEAD方式"></a>http请求的HEAD方式</h3><p>head：类似于get请求，只不过返回的响应中没有具体的内容，用户获取报头<br>options： 允许客户端查看服务器的性能 比如服务器支持的请求方式等等</p><h3 id="一个图片url访问后下载怎样实现"><a href="#一个图片url访问后下载怎样实现" class="headerlink" title="一个图片url访问后下载怎样实现"></a>一个图片url访问后下载怎样实现</h3><p>请求的返回头里面，用于浏览器解析的重要参数就是oss的api文档里面的返回http头，决定用户下载行为的参数<br>下载的情况下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. x-oss-object-type</span><br><span class="line">Normal</span><br><span class="line">2. x-oss-request-id:</span><br><span class="line">3. x-oss-storage-class</span><br><span class="line">Standard</span><br></pre></td></tr></table></figure></p><h3 id="web-quality-无障碍"><a href="#web-quality-无障碍" class="headerlink" title="web quality(无障碍)"></a>web quality(无障碍)</h3><p>能够被残障人士使用的网站才能称得上是一个易用的网站<br>使用alt属性<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;person,jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;this is a person&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="几个实用的BOM属性对象方法"><a href="#几个实用的BOM属性对象方法" class="headerlink" title="几个实用的BOM属性对象方法"></a>几个实用的BOM属性对象方法</h3><p>1.location对象<br>2.history对象<br>3.Navigator对象</p><h3 id="H5的drag-api"><a href="#H5的drag-api" class="headerlink" title="H5的drag api"></a>H5的drag api</h3><h3 id="http2-0"><a href="#http2-0" class="headerlink" title="http2.0"></a>http2.0</h3><p>访问速度更快<br>允许多路复用<br>二进制分帧<br>首部压缩<br>服务器端推送</p><h3 id="400-401-403状态码"><a href="#400-401-403状态码" class="headerlink" title="400 401 403状态码"></a>400 401 403状态码</h3><ol><li>400：请求无效<br>产生原因：<br>前端提交数据的字段名称和字段类型与后台的实体没有保持一致<br>前端提交到后台的数据应该是json字符串类型 但是前端没有将对象<code>JSON.stringfy</code>转化成字符串<br>解决方法：<br>对照字段的名称 保持一致性<br>将obj对象通过<code>JSON.stringfy</code>实现序列化</li><li>401：当前请求需要用户验证</li><li>403：服务器已经得到请求，但是拒绝执行</li></ol><h3 id="fetch发送两次请求的原因"><a href="#fetch发送两次请求的原因" class="headerlink" title="fetch发送两次请求的原因"></a>fetch发送两次请求的原因</h3><p>fetch发送post请求的时候 总是发送两次，第一次的状态码是204 第二次才成功？<br>原因：<br>因为用fetch的post请求的时候，导致fetch第一次发送了一个options请求 询问服务器是否支持修改的请求头 如果服务器支持 则在第二次中发送真正的请求</p><h3 id="cookie-sessionStorage-localStorage的区别"><a href="#cookie-sessionStorage-localStorage的区别" class="headerlink" title="cookie sessionStorage localStorage的区别"></a>cookie sessionStorage localStorage的区别</h3><p>共同点：都是保存在浏览器 而且是同源的<br>cookie：cookie数据始终在同源的http请求中携带（即使不需要）即cookie在浏览器和服务器之间来回传递，而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存 cookie数据还有路径path的概念，可以限制cookie只属于某个路径下，存储的大小很小只有4k左右<br>（key：可以在浏览器和服务器之间来回传递 存储容量小 只有4k左右）<br>sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持<br>localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭<br>（key：本身就是一个会话过程，关闭浏览器后消失 ，session为一个会话，当页面不同即使是同一页面打开两次，也被视为同一次会话）</p><h3 id="web-worker"><a href="#web-worker" class="headerlink" title="web worker"></a>web worker</h3><h3 id="对html语义化标签的理解"><a href="#对html语义化标签的理解" class="headerlink" title="对html语义化标签的理解"></a>对html语义化标签的理解</h3><p>h5语义化标签是指正确的标签包含了正确的内容 结构良好 便于阅读 比如nav表示导航条 类似的还有artical header footer等等</p><h3 id="iframe是什么？有什么缺点？"><a href="#iframe是什么？有什么缺点？" class="headerlink" title="iframe是什么？有什么缺点？"></a>iframe是什么？有什么缺点？</h3><p>定义：iframe元素会创建包含另一个文档的内联框架<br>提示：可以将提示文字放在iframe标签之间，来提示某些不支持iframe的浏览器<br>缺点：</p><ol><li>会阻塞主页面的onload事件</li><li>搜索引擎无法解读这种页面 不利于SEO</li><li>iframe和主页面共享连接池 而浏览器对相同区域有限制所以会影响性能</li></ol><h3 id="Doctype的作用？严格模式与混杂模式如何区分？它们有何意义？"><a href="#Doctype的作用？严格模式与混杂模式如何区分？它们有何意义？" class="headerlink" title="Doctype的作用？严格模式与混杂模式如何区分？它们有何意义？"></a>Doctype的作用？严格模式与混杂模式如何区分？它们有何意义？</h3><p>Doctype声明于文档最前面 告诉浏览器以何种方式来渲染页面 有两种模式 混杂模式和严格模式<br>严格模式的排版和js运作模式是以该浏览器支持的最高标准运行<br>混杂模式则向后兼容 模拟老实浏览器 防止浏览器无法兼容页面</p><h3 id="cookie如何防范xss攻击"><a href="#cookie如何防范xss攻击" class="headerlink" title="cookie如何防范xss攻击"></a>cookie如何防范xss攻击</h3><p>xss 跨站脚本攻击 是指攻击者在返回的html中嵌入js脚本，为了减轻这些攻击，需要在http的头部配上，<code>set-cookie:httponly</code>这个属性可以防止xss，他会禁止js脚本来访问cookie<br><code>secure</code>这个属性告诉浏览器仅在请求为https的时候发送cookie</p><h3 id="一句话概括RESTFUL"><a href="#一句话概括RESTFUL" class="headerlink" title="一句话概括RESTFUL"></a>一句话概括RESTFUL</h3><p>就是用url定位资源 用http描述操作</p><h3 id="讲讲viewport和移动端布局"><a href="#讲讲viewport和移动端布局" class="headerlink" title="讲讲viewport和移动端布局"></a>讲讲viewport和移动端布局</h3><p>常用解决方案<br>媒体查询<br>百分比<br>rem<br>vw和vh</p><h3 id="click在ios上有300ms延迟-原因以及如何解决"><a href="#click在ios上有300ms延迟-原因以及如何解决" class="headerlink" title="click在ios上有300ms延迟 原因以及如何解决"></a>click在ios上有300ms延迟 原因以及如何解决</h3><h3 id="addEventListener的参数"><a href="#addEventListener的参数" class="headerlink" title="addEventListener的参数"></a>addEventListener的参数</h3><p>代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(event,<span class="keyword">function</span>.useCapture)</span><br><span class="line"><span class="comment">//event事件名</span></span><br><span class="line"><span class="comment">//function指定事件触发时执行的函数</span></span><br><span class="line"><span class="comment">//useCapture是否在捕获或者冒泡阶段执行</span></span><br></pre></td></tr></table></figure></p><h3 id="讲讲304"><a href="#讲讲304" class="headerlink" title="讲讲304"></a>讲讲304</h3><p>如果客户端发送了一个带条件的get请求且该请求已被允许，而文档的内容并没有改变，则服务器应该返回这个304状态码</p><h3 id="强缓存-协商缓存什么时候用哪个？"><a href="#强缓存-协商缓存什么时候用哪个？" class="headerlink" title="强缓存 协商缓存什么时候用哪个？"></a>强缓存 协商缓存什么时候用哪个？</h3><h3 id="前端优化"><a href="#前端优化" class="headerlink" title="前端优化"></a>前端优化</h3><ol><li>降低请求量：合并资源，减少http请求数，minify/gzip压缩，webP，lazyLoad</li><li>加快请求速度：预解析DNS，减少域名数，并行加载，CDN分发。</li><li>缓存：HTTP协议缓存请求，离线缓存，manifest，离线数据缓存localStorage</li><li>渲染：JS/CSS优化，加载顺序，服务端渲染，pipeline</li></ol><h3 id="post和get的区别"><a href="#post和get的区别" class="headerlink" title="post和get的区别"></a>post和get的区别</h3><ol><li>get参数通过url传递，post放在request body中</li><li>get请求在url中传递的参数是有长度限制的 post没有</li><li>get比post更不安全，因为参数直接暴露在url中，所以不能用来传输敏感信息</li><li>get请求只能进行url编码 post支持多种编码方式</li><li>get请求会浏览器主动cache</li><li>get请求的参数会被完整的保留在浏览器的历史记录里，而post不会</li><li>get和post本质上都是TCP连接，没有差别。但由于http的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同</li><li>get产生一个TCP数据包 post产生两个</li></ol><h3 id="301-和-302的区别"><a href="#301-和-302的区别" class="headerlink" title="301 和 302的区别"></a>301 和 302的区别</h3><h3 id="HTTP支持的方法"><a href="#HTTP支持的方法" class="headerlink" title="HTTP支持的方法"></a>HTTP支持的方法</h3><p>get post head options put delete trace connect</p><h3 id="如何画一个三角形"><a href="#如何画一个三角形" class="headerlink" title="如何画一个三角形"></a>如何画一个三角形</h3><p>三角形原理，边框的均分原理<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">0px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">0px</span>;</span><br><span class="line"><span class="attribute">border-top</span>:<span class="number">10px</span> solid red;</span><br><span class="line"><span class="attribute">border-right</span>:<span class="number">10px</span> solid transparent;</span><br><span class="line"><span class="attribute">border-bottom</span>:<span class="number">10px</span> solid transparent;</span><br><span class="line"><span class="attribute">border-left</span>:<span class="number">10px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="状态码304和200"><a href="#状态码304和200" class="headerlink" title="状态码304和200"></a>状态码304和200</h3><p>200：请求已经成功 请求所希望的响应头或数据体岁此响应返回<br>304：如果客户端发送了一个带条件的get请求且该请求已被允许，而文档的内容并没有改变，则返回这个状态码</p><h3 id="说一下浏览器缓存"><a href="#说一下浏览器缓存" class="headerlink" title="说一下浏览器缓存"></a>说一下浏览器缓存</h3><h3 id="HTML5新增的元素"><a href="#HTML5新增的元素" class="headerlink" title="HTML5新增的元素"></a>HTML5新增的元素</h3><p>首先html5为了更好的实践web语义化，增加了<code>header</code>，<code>footer</code>，<code>nav</code>，<code>aside</code>，<code>section</code>等语义化标签，在表单方面，为了增强表单，为input增加了<code>color</code>,<code>emial</code>, <code>data</code>,<code>range</code> 等类型。在存储方面，提供了<code>sessionStorage</code>，<code>localStorage</code>和离线存储，通过这些存储方式方便数据在客户端的存储和获取，在多媒体方面规定了音频和视频元素<code>audio</code>和<code>video</code>，另外还有地理定位，<code>canvas</code>画布，拖放，多线程编程的web worker和websocket协议</p><h3 id="在地址栏里输入一个url-到这个页面呈现出来，中间会发生什么？"><a href="#在地址栏里输入一个url-到这个页面呈现出来，中间会发生什么？" class="headerlink" title="在地址栏里输入一个url 到这个页面呈现出来，中间会发生什么？"></a>在地址栏里输入一个url 到这个页面呈现出来，中间会发生什么？</h3><p>DNS解析<br>TCP连接<br>发送HTTP请求<br>服务器处理请求并返回http报文<br>浏览器解析渲染页面<br>连接结束</p><h3 id="浏览器在生成页面的时候会生成哪两颗树"><a href="#浏览器在生成页面的时候会生成哪两颗树" class="headerlink" title="浏览器在生成页面的时候会生成哪两颗树"></a>浏览器在生成页面的时候会生成哪两颗树</h3><p>构造两棵树，DOM树和CSSOM规则树<br>当浏览器接收到服务器相应来的HTML文档后，会遍历文档节点，生成DOM树<br>CSSOM规则树则由浏览器解析css文件生成</p><h3 id="csrf和xss网络攻击及防范"><a href="#csrf和xss网络攻击及防范" class="headerlink" title="csrf和xss网络攻击及防范"></a>csrf和xss网络攻击及防范</h3><p>csrf 跨站请求伪造，理解为攻击者盗用了用户的身份，以用户的名义发送了恶意请求，比如用户登陆了一个网站后，立刻在另一个tab页面访问攻击者用来制造攻击的网站，这个网站要求访问刚刚登陆的网站，并发送了一个恶意请求，这时候csrf就产生了。<br>防范方式：使用验证码，检查http头部的refer，使用token<br>xss 跨站脚本攻击 可以理解为攻击者通过注入恶意的脚本，在用户浏览网页的时候进行攻击，比如获取cookie，或者其他用户身份信息，可以分为存储型和反射型。<br>防范方式：cookie设置httponly属性，对用户的输入进行检查，进行特殊字符过滤</p><h3 id="怎么看网站的性能如何"><a href="#怎么看网站的性能如何" class="headerlink" title="怎么看网站的性能如何"></a>怎么看网站的性能如何</h3><p>检测页面加载事件一般有两种方式：</p><ol><li>被动去测：就是在被检测的页面置入脚本或探针，当用户访问网页时，探针自动菜鸡数据并传回到数据库进行分析。</li><li>主动检测，即主动搭建分布式受控环境，模拟用户发起页面访问请求，主动采集性能数据并分析，在检测的精准度上，专业的第三方工具效果更佳，比如性能极客。</li></ol><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>1xx 信息状态码<br>100 continue 继续 一般在发送post请求的时候 已发送了http header 之后服务端返回此信息 表示确认，之后发送具体的参数消息<br>2xx 成功状态码<br>200 ok 正常返回信息<br>201 created 请求服务器已经成功并且创建了新的资源<br>202 accepted 服务器已接受请求 但未响应<br>3xx 重定向<br>301 moved permanently 请求的网页已永久移到新的位置<br>302 found 临时性重定向<br>303 see other 临时性重定向 且总是使用get请求新的url<br>304 not modified 自从上次的请求过后     请求的网页未修改过<br>4xx 客户端错误<br>400 bad request 服务端不理解客户端请求的格式 客户端不应该继续使用相同的内容发起请求<br>401 unauthorized 请求未授权<br>403 forbidden 禁止访问<br>404 not found 找不到与url匹配的资源<br>5xx 服务器错误<br>500 Internal server error 最常见的服务器错误<br>503 service unavailable 服务端暂时无法处理请求</p><h3 id="严格模式和混杂模式之doctype"><a href="#严格模式和混杂模式之doctype" class="headerlink" title="严格模式和混杂模式之doctype"></a>严格模式和混杂模式之doctype</h3><p>严格模式 以浏览器支持的最高标准执行 混杂模式也称怪异模式 向后兼容<br>没有<code>!Doctype</code>位于文档首部或者格式不正确 那么就是以混杂模式执行</p><h3 id="web标准以及w3c标准是什么"><a href="#web标准以及w3c标准是什么" class="headerlink" title="web标准以及w3c标准是什么"></a>web标准以及w3c标准是什么</h3><p>标签闭合 标签小写 不乱嵌套 使用外链的js/css 结构行为表现的分离</p><h3 id="行内元素-行内块-块元素-空元素"><a href="#行内元素-行内块-块元素-空元素" class="headerlink" title="行内元素 行内块 块元素 空元素"></a>行内元素 行内块 块元素 空元素</h3><p>行内元素：<code>a b span br i em strong label q code cite var</code><br>行内块:<code>img input</code><br>块元素:<code>div p h1-6 ol ul dl table form</code><br>行内元素 在一行上显示 不能设置宽高 元素的大小就是内容撑开的大小<br>行内块 在一行上显示 可设置宽高<br>块元素 独占一行 可以设置宽高 嵌套的情况下子默认和父宽度一致</p><p>空元素：不用写闭合标签的元素<br>常见空元素:<code>img input hr br link meta</code></p><h3 id="html全局属性"><a href="#html全局属性" class="headerlink" title="html全局属性"></a>html全局属性</h3><h2 id="CSS篇"><a href="#CSS篇" class="headerlink" title="CSS篇"></a>CSS篇</h2><h3 id="css盒模型"><a href="#css盒模型" class="headerlink" title="css盒模型"></a>css盒模型</h3><p>就是用来装页面上的元素的矩形区域，css中的盒模型包括ie盒子模型和标准的w3c盒子模型<br>标准盒子模型：<br>只有content<br>ie盒子模型:<br>包含了content padding 和 border</p><h3 id="画一条0-5px的线"><a href="#画一条0-5px的线" class="headerlink" title="画一条0.5px的线"></a>画一条0.5px的线</h3><ol><li>采用<code>meta viewport</code>的方法</li><li>采用<code>border-image</code>的方式</li><li>采用<code>transform:scale()</code></li></ol><h3 id="link标签和import标签的区别"><a href="#link标签和import标签的区别" class="headerlink" title="link标签和import标签的区别"></a>link标签和import标签的区别</h3><p><code>link</code>属于html标签 而<code>@import</code>是css提供的<br>页面被加载的时候，<code>link</code>会同时被加载，而<code>@import</code>引用的css会等页面加载结束后加载<br><code>link</code>是html标签，因此没有兼容性的问题，而<code>@import</code>只有ie5以上才能识别<br>link方式的权重高于import方式</p><h3 id="transition和animation的区别"><a href="#transition和animation的区别" class="headerlink" title="transition和animation的区别"></a>transition和animation的区别</h3><p><code>animation</code>和<code>transition</code>大部分属性都是相同的，它们都是随着事件改变元素的属性值，主要区别是<code>transition</code>需要触发一个事件才能改变属性，而<code>animation</code>不需要触发事件<br><code>transition</code>为2帧 从<code>from...to...</code> 而<code>animation</code>是一帧一帧的</p><h3 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h3><p>弹性布局<br><code>flex-direction</code>主轴方向<br><code>flex-wrap</code>换行原则<br><code>flex-flow</code><br><code>justify-content</code>水平主轴对齐方式<br><code>align-items</code>垂直对齐方式<br>属性<br><code>order</code>：定义项目的排列顺序 越小越前 默认0<br><code>flex-grow</code>定义项目的放大比例 即使存在空间也不会放大<br><code>flex-shrink</code>定义了项目的缩小比例，当空间不足的情况下会等比例缩小，如果为0则不缩小<br><code>flex-basis</code> 定义了在分配多余的空间，项目占据的空间<br><code>flex</code>前三者的简称 默认值为<code>0 1 auto</code><br><code>align-self</code>允许单个项目与其他项目不一样的对齐方式 可以覆盖<code>align-items</code>默认属性为auto 表示继承父元素的<code>align-items</code><br>圣杯布局</p><h3 id="BFC块级格式化上下文"><a href="#BFC块级格式化上下文" class="headerlink" title="BFC块级格式化上下文"></a>BFC块级格式化上下文</h3><p>用于清除浮动防止margin重叠等</p><h1 id="JS篇章"><a href="#JS篇章" class="headerlink" title="JS篇章"></a>JS篇章</h1><h2 id="类型及检测方式及栈和堆"><a href="#类型及检测方式及栈和堆" class="headerlink" title="类型及检测方式及栈和堆"></a>类型及检测方式及栈和堆</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">类型</button></li><li class="tab"><button type="button" data-href="#test-2">栈和堆</button></li><li class="tab"><button type="button" data-href="#test-3">检测方式</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>首先js的类型有基本数据类型和引用类型<br>前者有七种 后者是一种<br>根据以前的USONB理论 大致是<br><code>Undefined</code>,<code>String</code>,<code>Symbol</code>,<code>Object</code>,<code>Null</code>,<code>Number</code>,<code>BigInt</code>,<code>Boolean</code></p><ul><li>基本数据类型的作用？<br>基础类型存储在栈内存，被引用或拷贝时，会创建一个完全相等的变量；占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储。</li><li><code>object</code>为什么是引用类型？<br>而引用类型 在创建对象的时候会在堆内存中开辟一个空间 用来存放对象的属性 在为对象添加属性的时候，是将属性放在堆内存中开辟的空间里。<br>在栈内存中保存显示 对象名+一个地址 类似于指针 执行堆内存中对象开辟的空间<br>引用类型存储在堆内存，存储的是地址，多个引用指向同一个地址，这里会涉及一个“共享”的概念；占据空间大、大小不固定。引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。<br>引申出栈和堆的概念！</li><li><code>BigInt</code>?</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>在js的执行过程中，主要有三种类型的内存空间，一是代码空间，二是栈空间，三是堆空间。代码空间顾名思义就是存储代码用的，栈空间是用来保存变量和变量值的，堆空间是保存地址的。<br>对于栈空间来说，原始类型存储的是变量的值，而引用类型存储的是在堆空间中的地址，所以当js需要访问数据的时候，是通过栈中的引用地址来访问的，相当于多了一道转手程序</p><ul><li>闭包是怎么存储<br>js引擎对于闭包的处理，是当遇到一个闭包的时候，在堆空间中创建一个<code>closure(fn)</code>对象，用来保存闭包中的变量，所以闭包中的变量是存储在堆空间中的。这就是为什么闭包可以常驻在内存的原因。</li><li>js为什么需要栈和堆<br>首先知道栈是让变量循环利用，通常也是设置一些小数据来放入栈中，而我们知道引用类型数据obj一般占用的空间都比较大。所以js引擎需要栈和堆来维持内存的平衡。</li><li>题目1<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;lee&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line"><span class="built_in">console</span>.log(a.name);  <span class="comment">//第一个console</span></span><br><span class="line">b.name = <span class="string">&#x27;son&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.name);  <span class="comment">//第二个console</span></span><br><span class="line"><span class="built_in">console</span>.log(b.name);  <span class="comment">//第三个console</span></span><br></pre></td></tr></table></figure>第一个是lee显而易见，第二个console是son 第三个也是。这是因为a是对象 是引用类型 在赋值给b的时候 实际上是给了a在堆中的地址 所以b访问的是堆空间中a的变量 那么修改了b 自然a也会发生变动，这里就引出了堆空间共享的概念</li><li>题目2<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Julia&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  o.age = <span class="number">24</span>;</span><br><span class="line">  o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Kath&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = change(a);     <span class="comment">// 注意这里没有new，后面new相关会有专门文章讲解</span></span><br><span class="line"><span class="built_in">console</span>.log(b.age);    <span class="comment">// 第一个console</span></span><br><span class="line"><span class="built_in">console</span>.log(a.age);    <span class="comment">// 第二个console</span></span><br></pre></td></tr></table></figure>第一个输出30 第二个输出24<br>原因是function里面传入的是a在堆中的地址，那么自然a的age就会变成24 但是到了return这一步 它会把传入的内存地址修改 导致o变成另外一个内存地址 将o的数据存放在该内存中， 所以b就是kath和30</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>数据类型检测有很多种，常用的是<code>typeof instanceof constructor Object.prototype.toString.call([])</code></p><ol><li><code>typeof</code>方法是基于计算机底层的数据类型的二进制进行判断。 用于判断除了<code>array null</code>之外的类型,即可以判断除了<code>null</code>之外的基础数据类型和除了<code>array</code>之外的应用数据类型<br>下面看一下它对于所有类型的处理 注意它可以处理function<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">2</span>);               <span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">true</span>);            <span class="comment">// boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="string">&#x27;str&#x27;</span>);           <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> []);              <span class="comment">// object     []数组的数据类型在 typeof 中被解释为 object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);    <span class="comment">// function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> &#123;&#125;);              <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span>);       <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>);            <span class="comment">// object     null 的数据类型被 typeof 解释为 object</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>为什么null会被<code>typeof</code>识别成<code>object</code>？<br>这个是一个历史遗留问题 js底层是二进制存储的 前三位代表的是数据的存储类型 对于object来说则是000 而刚好null也是全0 正好代表object类型的数据格式 所以null才会输出object</li></ul><ol><li><code>instanceof</code><br>由于上面的方法不能精确判断数组和null的原因 所以产生了新的方法<code>instanceof</code><br>康康它对于所有类型的处理<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> <span class="keyword">instanceof</span> <span class="built_in">Number</span>);                    <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>);                <span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;str&#x27;</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>);                <span class="comment">// false  </span></span><br><span class="line"><span class="built_in">console</span>.log([] <span class="keyword">instanceof</span> <span class="built_in">Array</span>);                    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Function</span>);       <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Object</span>);                   <span class="comment">// true    </span></span><br><span class="line"><span class="comment">// console.log(undefined instanceof Undefined);</span></span><br><span class="line"><span class="comment">// console.log(null instanceof Null);</span></span><br></pre></td></tr></table></figure>和由此可见 <code>instanceof</code>方法能准确的判断引用数据类型 但是不能判断基础数据类型<br>因为它的原理是和原型链相关的 ,相当于判断是不是这个类的实例，所以对于<code>undefined和null</code>来说，这两者是没有原型的 所以无法判断。<br>引申一下 <code>null</code>是所有原型的终点 <code>undefined</code>是表示没有这个值 缺少这个值 </li><li><code>constructor</code><br>构造器判断方法 注意带括号 否则会报错<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log((<span class="number">2</span>).constructor === <span class="built_in">Number</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="literal">true</span>).constructor === <span class="built_in">Boolean</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="string">&#x27;str&#x27;</span>).constructor === <span class="built_in">String</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(([]).constructor === <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;).constructor === <span class="built_in">Function</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log((&#123;&#125;).constructor === <span class="built_in">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>弊端是 如果改变了对象原型，该方法会失效<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"> </span><br><span class="line">Fn.prototype=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> f=<span class="keyword">new</span> Fn();</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(f.constructor===Fn);    <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(f.constructor===<span class="built_in">Array</span>); <span class="comment">// true </span></span><br></pre></td></tr></table></figure></li><li><code>Object.prototype.toString.call()</code><br>使用<code>Object</code>上面的<code>toString</code>方法 会返回一个格式为<code>[object Xxx]</code>的字符串，通过call重新调用就可以精确判断对象类型<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString(&#123;&#125;)       <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;)  <span class="comment">// 同上结果，加上call也ok</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>)    <span class="comment">// &quot;[object Number]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">&#x27;1&#x27;</span>)  <span class="comment">// &quot;[object String]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>)  <span class="comment">// &quot;[object Boolean]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)  <span class="comment">// &quot;[object Function]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>)   <span class="comment">//&quot;[object Null]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>) <span class="comment">//&quot;[object Undefined]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="regexp">/123/g</span>)    <span class="comment">//&quot;[object RegExp]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>()) <span class="comment">//&quot;[object Date]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([])       <span class="comment">//&quot;[object Array]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">document</span>)  <span class="comment">//&quot;[object HTMLDocument]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">window</span>)   <span class="comment">//&quot;[object Window]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从上面这段代码可以看出，Object.prototype.toString.call() 可以很好地判断引用类型，甚至可以把 document 和 window 都区分开来。</span></span><br></pre></td></tr></table></figure>由于代码过长 推荐封装一下<code>Object.prototype.toString</code><br>实现一个全局通用的判断方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> type = <span class="keyword">typeof</span> obj;</span><br><span class="line"><span class="comment">//如果是基本类型 直接返回</span></span><br><span class="line"><span class="keyword">if</span>(type!==<span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toStirng.call(obj).replace(<span class="regexp">/^\[object (\S+)\]$/</span>, <span class="string">&#x27;$1&#x27;</span>);  <span class="comment">// 注意正则中间有个空格</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 代码验证，需要注意大小写，哪些是typeof判断，哪些是toString判断？思考下 */</span></span><br><span class="line">getType([])     <span class="comment">// &quot;Array&quot; typeof []是object，因此toString返回</span></span><br><span class="line">getType(<span class="string">&#x27;123&#x27;</span>)  <span class="comment">// &quot;string&quot; typeof 直接返回</span></span><br><span class="line">getType(<span class="built_in">window</span>) <span class="comment">// &quot;Window&quot; toString返回</span></span><br><span class="line">getType(<span class="literal">null</span>)   <span class="comment">// &quot;Null&quot;首字母大写，typeof null是object，需toString来判断</span></span><br><span class="line">getType(<span class="literal">undefined</span>)   <span class="comment">// &quot;undefined&quot; typeof 直接返回</span></span><br><span class="line">getType()            <span class="comment">// &quot;undefined&quot; typeof 直接返回</span></span><br><span class="line">getType(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;) <span class="comment">// &quot;function&quot; typeof能判断，因此首字母小写</span></span><br><span class="line">getType(<span class="regexp">/123/g</span>)      <span class="comment">//&quot;RegExp&quot; toString返回</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220316104931.png" alt=""></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">防抖</button></li><li class="tab"><button type="button" data-href="#test-2">节流</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>防抖主要是为了不让事件同一时间内触发多次导致请求多次的问题<br>防抖有两种情况<br>第一种是只触发第一次<br>第二种是只触发最后一次<br>防抖的主要写法如下: 但会产生一个问题 就是一开始必须等待才能进行<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="comment">// const msg = document.getElementById(&#x27;msg&#x27;);</span></span></span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, debounce(submit), <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">submit</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> t = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (t) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">clearTimeout</span>(t);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            t = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span></span><br><span class="line"><span class="javascript">            &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol><li>用<code>debounce</code>传入参数 并且注意最后返回的是一个函数</li><li>设置t来决定定时器的销毁和开启</li><li>定时器用箭头函数 让<code>this</code>指向<code>window</code></li><li>apply将<code>this</code>和<code>arguments</code>传给<code>submit</code></li></ol><p>解决上面问题的做法如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="comment">// const msg = document.getElementById(&#x27;msg&#x27;);</span></span></span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, debounce(submit, <span class="number">2000</span>), <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">submit</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, timer</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> t = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> firstclick = !t;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (firstclick) &#123;</span></span><br><span class="line"><span class="javascript">                fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            t = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                t = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">            &#125;, timer);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>原理是判断是否为第一次执行 如果是的话直接请求 然后让定时器将t经过一定时间还原，这样下一次就又是第一次 否则的话 因为t还没还原 所以不会输出；</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>节流是指函数在一定时间间隔内只能执行一次，从而减少一段时间内的触发频率<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="comment">// const msg = document.getElementById(&#x27;msg&#x27;);</span></span></span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, throttle(submit, <span class="number">2000</span>), <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">submit</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e, <span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> begin = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cur = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (cur - begin &gt;= delay) &#123;</span></span><br><span class="line"><span class="javascript">                fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span></span><br><span class="line"><span class="javascript">                begin = cur;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol><li>用<code>throttle</code>传入参数 并且注意最后返回的是一个函数</li><li>用<code>begin</code>定义一开始的时间，用<code>cur</code>定义当前时间 </li><li>最后<code>begin</code>要变成<code>cur</code></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="手写深浅拷贝"><a href="#手写深浅拷贝" class="headerlink" title="手写深浅拷贝"></a>手写深浅拷贝</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">浅拷贝</button></li><li class="tab"><button type="button" data-href="#test-2">深拷贝</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>浅拷贝顾名思义就是直接拷贝对象上面的内容 但是如果新的对象的属性发生了改变，原先对象上面的属性也会随之改变<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> oldObj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jotaro&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="attr">color</span>:[<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>],</span><br><span class="line">    <span class="attr">friend</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;jostar&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newObj = oldObj;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;oldObj&#x27;</span>,oldObj);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;newObj&#x27;</span>,newObj);</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>深拷贝的话，新的对象发生改变不会影响旧的对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> oldObj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jotaro&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="attr">color</span>:[<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>],</span><br><span class="line">    <span class="attr">friend</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;jostar&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 深拷贝的话 在复制对象属性的基础上 不能对原先对象的属性进行改变</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 如果传进来的参数不是对象 或者是 空 直接返回原先参数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>||obj===<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义一个result 用于复制参数</span></span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    <span class="comment">// 那么只剩数组和对象两种可能 继续判断 并改变result的类型</span></span><br><span class="line">    <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">        result = [];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 之后就是把obj里面的key拿出来放到result里面 这样就完成了初步的深拷贝</span></span><br><span class="line">    <span class="comment">// for(let key in obj)&#123;</span></span><br><span class="line">    <span class="comment">//     result[key] = obj[key];</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 会发现有一点缺陷就是 如果对象里面包含了对象 那么最后做出的修改 还是浅拷贝类型的修改</span></span><br><span class="line">    <span class="comment">// 解决方法是 递归obj[key] 让他继续判断再传递</span></span><br><span class="line">    <span class="comment">// 还有一个可以优化的地方 就是对象原型上面的属性不应该去拷贝 所以使用到一个方法</span></span><br><span class="line">    <span class="comment">// 只会拷贝对象自身的属性</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj.hasOwnProperty(key))&#123;</span><br><span class="line">            result[key] = deepClone(obj[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = deepClone(oldObj);</span><br><span class="line">newObj.age = <span class="number">99</span>;</span><br><span class="line">newObj.color[<span class="number">0</span>] = <span class="string">&#x27;yellow&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;oldObj&#x27;</span>,oldObj);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;newObj&#x27;</span>,newObj);</span><br></pre></td></tr></table></figure><br>分几步走</p><ol><li>判断obj不为对象 和 为空的情况 直接返回obj</li><li>定义一个result用来放结果 再根据传进来的obj 判断它是否为对象或者数组 相应的改变result的类型</li><li>for循环将obj的key传给result的key 注意要用递归的形式</li><li>优化 只拷贝对象的属性 不拷贝对象原型的属性 </li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>需求 已知数组<code>arr[1,2,[3,[4,[5,6]]]]</code> 将其扁平化处理成<code>[1,2,3,4,5,6]</code><br>方法一 flat函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,[<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>]]]];</span><br><span class="line"><span class="built_in">console</span>.log(arr.flat(<span class="literal">Infinity</span>));</span><br></pre></td></tr></table></figure><br>方法2 reduce加递归<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatfn</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">res,item</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// return res.concat((item instanceof Array)?flatfn(item):item)</span></span><br><span class="line">        <span class="comment">// 也可以写成</span></span><br><span class="line">        <span class="keyword">return</span> res.concat(<span class="built_in">Array</span>.isArray(item)?flatfn(item):item);</span><br><span class="line">    &#125;,[])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(flatfn(arr))</span><br></pre></td></tr></table></figure><br>方法3 数组转字符串<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatfn</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">&#x27;,&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>).map(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parseInt</span>(item);</span><br><span class="line">    &#125;)    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(flatfn(arr))</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="单例模式-设计模式"><a href="#单例模式-设计模式" class="headerlink" title="单例模式(设计模式)"></a>单例模式(设计模式)</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>单例模式算是编程思想中的一种设计模式，简单来讲就是一个类只能有一个实例对象，这个实例对象最终也只会被新建一次，并且要提供一个能访问到这个实例的入口</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>假设有个person类 里面构造器传入的是姓名 设计单例模式 让两个人的名字都用的同一个<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;zzz&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person(<span class="string">&#x27;yyy&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p1===p2);</span><br><span class="line">返回<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Person.getInstance = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.instance) <span class="keyword">return</span> <span class="built_in">this</span>.instance;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.instance = <span class="keyword">new</span> Person(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = Person.getInstance(<span class="string">&#x27;zzz&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = Person.getInstance(<span class="string">&#x27;yyy&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p1===p2);</span><br><span class="line">返回<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>提高版本 假设有个女朋友类 里面传入的是姓名和年龄 设计单例模式 让女朋友类变成单例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GF</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name,age</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> danli = <span class="function"><span class="keyword">function</span>(<span class="params">customClass</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(instance)<span class="keyword">return</span> instance;</span><br><span class="line">            <span class="keyword">return</span> instance = <span class="keyword">new</span> customClass(...arguments);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let g1 = new GF(&#x27;2b&#x27;,20);</span></span><br><span class="line"><span class="comment">// let g2 = new GF(&#x27;3b&#x27;,18);</span></span><br><span class="line"><span class="comment">// console.log(g1===g2)</span></span><br><span class="line"><span class="comment">// 返回false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> DanliGF = danli(GF);</span><br><span class="line"><span class="keyword">let</span> g1 = <span class="keyword">new</span> DanliGF(<span class="string">&#x27;2b&#x27;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">let</span> g2 = <span class="keyword">new</span> DanliGF(<span class="string">&#x27;3b&#x27;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(g1===g2)</span><br><span class="line"><span class="comment">// 返回ture</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h1><div class="note primary flat"><p><a href="https://zlinni.github.io/posts/1bdac88a9cd9/">数组去重的八种方法</a></p></div><h1 id="手写promise-all和promise-race"><a href="#手写promise-all和promise-race" class="headerlink" title="手写promise.all和promise.race"></a>手写promise.all和promise.race</h1><h1 id="模拟实现new"><a href="#模拟实现new" class="headerlink" title="模拟实现new"></a>模拟实现new</h1><h1 id="实现call-apply-bind"><a href="#实现call-apply-bind" class="headerlink" title="实现call/apply/bind"></a>实现call/apply/bind</h1><h1 id="模拟Object-create-的实现"><a href="#模拟Object-create-的实现" class="headerlink" title="模拟Object.create()的实现"></a>模拟Object.create()的实现</h1><h1 id="千分位分隔符"><a href="#千分位分隔符" class="headerlink" title="千分位分隔符"></a>千分位分隔符</h1><h1 id="实现三角形"><a href="#实现三角形" class="headerlink" title="实现三角形"></a>实现三角形</h1><h1 id="实现三栏布局-双栏布局"><a href="#实现三栏布局-双栏布局" class="headerlink" title="实现三栏布局/双栏布局"></a>实现三栏布局/双栏布局</h1><h1 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h1><h2 id="判断一个数组是否是数组"><a href="#判断一个数组是否是数组" class="headerlink" title="判断一个数组是否是数组"></a>判断一个数组是否是数组</h2><p>关键：结合<code>Object.prototype.toString.call(arr)</code>判断。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judgeArr</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> arr === <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(arr) === <span class="string">&#x27;[object Array]&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h3><p>每次比较相邻的数 如果后一个比前一个小 换位置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;arr.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j+<span class="number">1</span>]&lt;arr[j])&#123;</span><br><span class="line"><span class="keyword">var</span> temp;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(bubbleSort(arr));</span><br></pre></td></tr></table></figure></p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>思路 二分数组 找个基准点 遍历数组小于基准点在左反之在又 之后继续递归左数组和右数组最后concat起来<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.length === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> cIndex = <span class="built_in">Math</span>.floor(arr.length/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">var</span> c = arr.splice(cIndex,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> l = [];</span><br><span class="line">    <span class="keyword">var</span> r = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span> ;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]&lt;c)&#123;</span><br><span class="line">            l.push(arr[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            r.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> quickSort(l).concat(c,quickSort(r));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(quickSort(arr));</span><br></pre></td></tr></table></figure></p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>先序遍历 根左右<br>中序遍历 左根右<br>后序遍历 左右根<br>关键：了解递归边界<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">const</span> root = &#123;</span><br><span class="line">        <span class="attr">val</span>:<span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">        <span class="attr">left</span>:&#123;</span><br><span class="line">            <span class="attr">val</span>:<span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">            <span class="attr">left</span>:&#123;</span><br><span class="line">                <span class="attr">val</span>:<span class="string">&#x27;d&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">right</span>:&#123;</span><br><span class="line">                <span class="attr">val</span>:<span class="string">&#x27;e&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">right</span>:&#123;</span><br><span class="line">            <span class="attr">val</span>:<span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">            <span class="attr">left</span>:&#123;</span><br><span class="line">                <span class="attr">val</span>:<span class="string">&#x27;f&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">right</span>:&#123;</span><br><span class="line">                <span class="attr">val</span>:<span class="string">&#x27;g&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//先序遍历</span></span><br><span class="line"><span class="comment">// function preorder(root)&#123;</span></span><br><span class="line"><span class="comment">//     if(!root)&#123;</span></span><br><span class="line"><span class="comment">//         return;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;当前遍历的节点值是&#x27;,root.val);</span></span><br><span class="line"><span class="comment">//     preorder(root.left);</span></span><br><span class="line"><span class="comment">//     preorder(root.right);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line"><span class="comment">// function inorder(root)&#123;</span></span><br><span class="line"><span class="comment">//     if(!root)&#123;</span></span><br><span class="line"><span class="comment">//         return;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     inorder(root.left);</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;当前遍历的节点值是&#x27;,root.val);</span></span><br><span class="line"><span class="comment">//     inorder(root.right);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// inorder(root);</span></span><br><span class="line"><span class="comment">// 后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postorder</span>(<span class="params">root</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    postorder(root.left);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;当前遍历的节点值是&#x27;</span>,root.val);</span><br><span class="line">    postorder(root.right);</span><br><span class="line">&#125;</span><br><span class="line">postorder(root);</span><br></pre></td></tr></table></figure></p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>下列代码会执行几次？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverse</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length <span class="comment">//1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++) &#123; <span class="comment">//1,n+1,n</span></span><br><span class="line">        <span class="built_in">console</span>.log(arr[i]) <span class="comment">//n</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><code>T(n) = 1 + n +1 +(n+1) +n = 3n+3</code>次<br>规则：如果n是常数 无脑化为1 如果n不是常熟 取最高项的值且常数项化为1<br>所以时间复杂度 <code>O(n) = n</code><br>注意 判断语句比递增语句执行多一次 因为要多判断最后一次。<br>下面代码会执行多少次？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverse</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> outLen = arr.length <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;outLen;i++) &#123; <span class="comment">//1,n+1,n</span></span><br><span class="line">        <span class="keyword">var</span> inLen = arr[i].length <span class="comment">//n </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;inLen;j++) &#123; <span class="comment">//由上知循环n 所以这部分总的是n，即n,n(n+1),n²</span></span><br><span class="line">            <span class="built_in">console</span>.log(arr[i][j]) <span class="comment">//n²</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><code>T(n) = 1 + n +1 +(n+1) +n + n(3n+2) = 3n²+5n+3</code><br><code>O(n) = n²</code><br>所以综上得知只要计算最高项的就可以<br>再看<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length  <span class="comment">//不看</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;len;i=i*<span class="number">2</span>) &#123; <span class="comment">//看i*2 已知i++是i一直加 所以是n次 而这里相当于2的n次 而跳出循环的条件是i&gt;=len 所以这里不妨设2的x次&gt;=n来计算 得log2(n) = x 去掉常数项 则On为log(n)</span></span><br><span class="line">        <span class="built_in">console</span>.log(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>看代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverse</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>里面有三个变量<code>arr len i</code><br>而这三个变量在执行的时候是恒定的并没有开辟新的空间 都是时间上的开销 所以是空间复杂度是<code>O(1)</code><br>看代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">        arr[i] = i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>而在这个代码中 数组的大小不是恒定的 是随n变化的 所以它的空间复杂度是<code>O(n)</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面试" scheme="https://zlinni.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试" scheme="https://zlinni.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件化编程+Vuex</title>
    <link href="https://zlinni.github.io/posts/910d3920d22d/"/>
    <id>https://zlinni.github.io/posts/910d3920d22d/</id>
    <published>2022-01-07T02:32:58.000Z</published>
    <updated>2022-02-23T06:20:07.674Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tip cogs"><p>本文主要用于记录Vue2.0的组件化编程功能和vux管理数据，参考视频<a href='https://www.bilibili.com/video/BV1Zy4y1K7SH?p=1'>【尚硅谷Vue2.0+Vue3.0全套教程丨vuejs从入门到精通】</a></p></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">效果展示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>实现应用中局部功能代码和资源的集合</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>代码复用<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220107105407.png" alt=""><br>组件可以产生嵌套<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220107105435.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="模块与组件-模块化与组件化"><a href="#模块与组件-模块化与组件化" class="headerlink" title="模块与组件 模块化与组件化"></a>模块与组件 模块化与组件化</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">模块</button></li><li class="tab"><button type="button" data-href="#test-2">组件</button></li><li class="tab"><button type="button" data-href="#test-3">模块化</button></li><li class="tab"><button type="button" data-href="#test-4">组件化</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><ol><li>向外提供特定功能的js程序 一般就是一个js文件</li><li>为什么 ？ 因为js文件很多很复杂</li><li>作用 复用js 简化js的编写 提高js运行效率</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>用来实现局部（特定）功能效果的代码集合（html/css/js/image…）</li><li>为什么？ 一个界面的功能很复杂</li><li>作用 复用编码 简化项目编码 提高运行效率</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>当应用中的js都已模块化来编写 那这个应用就是一个模块化应用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-4"><p>当应用中的功能都是以多组件的形式来编写 那么这个应用就是一个组件化应用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供非单文件组件的形式 使得一个文件包含有n个组件来编写</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>为什么组件中要使用<code>data:{return{xxx}}</code>?<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// const data = &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     x:1,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     y:2</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//每次都返回一个全新的对象 互不干扰</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> data = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">x</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">y</span>:<span class="number">2</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> x1 = data();</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> x2 = data();</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>组件先声明 后注册 注册分为全局和局部注册<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;intro&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jojo</span>&gt;</span><span class="tag">&lt;/<span class="name">jojo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dio</span>&gt;</span><span class="tag">&lt;/<span class="name">dio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    // 定义组件 用Vue.extend 注意不要写extends 接收记得data函数式且return一个对象</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    const jojo = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        // 定义模板标签</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        `,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        data:function()&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            return &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                name:&#x27;jotaro&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                age:18</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    // 全局注册一个组件</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    const dio = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    `,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        data:function()&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            return &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                name:&#x27;dio&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                age:9999</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    // 注意不用加s 组件的名字逗号加组件在哪</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    Vue.component(&#x27;dio&#x27;,dio);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    new Vue(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        data:&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            intro:&#x27;vue组件使用&#x27;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        // 注册组件 components记得加s 此为局部注册</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        components:&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            jojo:jojo</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>需要注意的是单词的拼写是否正确<br>在声明的时候 <code>extend</code>不用加s<br>在局部注册的时候 使用<code>components</code> 因为可能会局部注册到很多个逐渐<br>在全局注册的时候 <code>Vue.component</code>不用加s 因为全局一次只能注册一个</p><p>一图流总结<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220108213845.png" alt=""></p><p>常见问题:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220108214611.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue可以在组件里面嵌套组件 但需要注意一些细节上的问题</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>直接上代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    const jotaro = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml">-----</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        `,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        data:function()&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            return &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                name:&#x27;jotaro&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                age:18</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    const jojohome = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml">-----</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">jotaro</span>&gt;</span><span class="tag">&lt;/<span class="name">jotaro</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        `,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        data:function()&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            return &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                name:&#x27;jostar&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                age:18</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        components:&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            jotaro</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    const dio = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml">-----</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        `,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        data:function()&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            return &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                name:&#x27;dio&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                age:999</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    const huangmu = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">jojohome</span>&gt;</span><span class="tag">&lt;/<span class="name">jojohome</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">dio</span>&gt;</span><span class="tag">&lt;/<span class="name">dio</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        `,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        components:&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            jojohome,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            dio</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    new Vue(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;<span class="name">huangmu</span>&gt;</span><span class="tag">&lt;/<span class="name">huangmu</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        `,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        components:&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            huangmu</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Vuecomponent构造函数"><a href="#Vuecomponent构造函数" class="headerlink" title="Vuecomponent构造函数"></a>Vuecomponent构造函数</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>讲解一下vue源码中这个构造函数的作用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220109163817.png" alt=""><br>可以直接通过vm查看下面所带领的全部vc 而vc也可以查看自己带领的vc<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220109163935.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="单文件组件的使用"><a href="#单文件组件的使用" class="headerlink" title="单文件组件的使用"></a>单文件组件的使用</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供了<code>.vue</code>格式的文件作为单文件组件的使用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>先在vscode里面安装<code>vtuer</code>插件<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220109201930.png" alt=""></p><p>创建vue文件 使用<code>&lt;v</code>能快捷创建<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>一个vue文件里面包含三个标签<br><code>&lt;template&gt;&lt;/template&gt;</code>模板标签 用于书写html代码<br><code>&lt;script&gt;&lt;/script&gt;</code>脚本标签 用于书写js代码<br><code>&lt;style&gt;&lt;/style&gt;</code>样式标签 用于书写css代码</p><p>需要注意的是 </p><ol><li>注释问题 (如果没有脚手架写注释默认报错)</li><li>命名问题 建议首字母大写 或者<code>my-school</code></li><li>js代码暴露问题 参见之前的es6学习 有三种暴露方式</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p><code>JOJO.vue</code>的代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; name &#125;&#125;----&#123;&#123; age &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;JOJO&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &quot;jotaro&quot;,</span><br><span class="line">      age: 18,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br><code>App.vue</code>的代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;JOJO&gt;&lt;/JOJO&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JOJO from &quot;./JOJO&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        JOJO</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br><code>main.js</code>的代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`&lt;div&gt;&lt;App&gt;&lt;/App&gt;&lt;/div&gt;`</span>,</span><br><span class="line">    <span class="attr">components</span>:&#123;App&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><code>index.html</code>代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>需要注意的是</p><ol><li>上面的东西最好按顺序写 </li><li>记得暴露 和 导入</li><li>在vue的使用中 一般root写在<code>main.js</code>里面</li><li>最后是html文件中引入js的顺序 一定要先把vuejs引入再引入自己的mainjs</li></ol><p>新增注意 记得组件中的data返回的是函数</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="创建vue脚手架"><a href="#创建vue脚手架" class="headerlink" title="创建vue脚手架"></a>创建vue脚手架</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">配置参数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供脚手架cli为程序员使用，相当于webpack配置好了，方便编译vue代码</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先安装vue cli<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><br>之后在创建的目录打开输入cmd<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create xxx</span><br></pre></td></tr></table></figure><br>然后启动项目 注意是<code>serve</code><br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="分析vue脚手架"><a href="#分析vue脚手架" class="headerlink" title="分析vue脚手架"></a>分析vue脚手架</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">详细分析</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>一个脚手架项目构建好之后有以下几个文件<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220110212007.png" alt=""><br>自上而下说明<br><code>nodexxx</code>这个是node配置文件<br><code>favicon.ico</code>ico文件<br><code>index.html</code>首页文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 避免路径产生的错误以后统一用baseurl这个是vue提供的取代./的方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这个是webpack里面默认去packagejson里面找文件名作为网站标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果你的浏览器不支持js 将执行下面的代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><code>main.js</code>入口文件 不用在页面中引入都可以找到该文件 vue已经配置好了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入口文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><code>gitignore</code>git文件<br><code>babelxxx</code>es6转es5文件</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="render函数"><a href="#render函数" class="headerlink" title="render函数"></a>render函数</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>上面讲到了在入口文件mainjs里面有一句代码叫做<code>render: h =&gt; h(App),</code>，下面来讲述它的作用以及相关的vue文件</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先在入口文件中必须写这个render函数作为模板template的替代 否则会报错<br>其原因是 入口文件中引入的并非完整的vue<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111125016.png" alt=""><br>而是一个精简版的 去掉模板解析器的vue<br>这么做是为了精简代码体积，到最后打包的时候减少代码量 虽然只有一点点</p><p>再讲讲这个render函数的本质：<br>它本来是个函数 可以写成<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params">createElement</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> createElement(<span class="string">&#x27;h1&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这样就相当于生成了一个h1标签内容是hello<br>由于它用不到this以及参数的名字可以改变 最后就可以简写成上面的形式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="params">h</span> =&gt;</span> h(<span class="string">&#x27;h1&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure><br>最后说明一下 这个render函数只需要在mainjs里面写 其他需要用到模板的地方可以在vue文件里面写 vue配置了单独的模板解析器 直接使用提供的template标签即可</p><p>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111125714.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="ref指令"><a href="#ref指令" class="headerlink" title="ref指令"></a>ref指令</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供ref指令来获取dom元素和组件，方便后续的组件通信</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>在使用的时候是,xxx是自己定义的名字<br><code>ref=&quot;xxx&quot;</code><br>获取ref的时候是 注意这里是dollar符和refs<br><code>this.$refs.xxx</code><br>如果不加后续的xxx 则显示全部ref标志的元素或组件</p><p>上代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1 ref=&quot;title&quot;&gt;这是app组件 现在要学习ref&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;showTitle&quot;&gt;点我切换标题&lt;/button&gt;</span><br><span class="line">        &lt;JOJO ref=&quot;jojo&quot;&gt;&lt;/JOJO&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JOJO from &quot;./components/JOJO.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        JOJO</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        showTitle()&#123;</span><br><span class="line">            let title = this.$refs.title;</span><br><span class="line">            title.innerText = &#x27;开始拉&#x27;;</span><br><span class="line">            console.log(this.$refs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>ref在标记dom元素的时候 还可以标记组件<br>像上面标记组件之后输出的结果如下<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111150120.png" alt=""><br>由此可见 可以完全获取整个组件 而<code>document.getElementById</code>这个原生的方法 只能获取组件的根标签内容 像下面这样<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111150252.png" alt=""><br>一图流：<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111150327.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="配置项props"><a href="#配置项props" class="headerlink" title="配置项props"></a>配置项props</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>需求是当组件复用的时候 希望更改组件的内置属性而不是重新写个组件 就要使用到props配置项</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>第一种方法 用数组的方式 <code>prop:[&#39;xxx&#39;,&#39;xxxx&#39;]</code> 这是简单声明接收<br>jojovue文件 使用props配置项<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; name &#125;&#125;----&#123;&#123; age &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;JOJO&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg:&#x27;现在开始学习props配置项&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  props:[&#x27;name&#x27;,&#x27;age&#x27;]</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>appvue文件 在组件标签中传参<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;JOJO name=&quot;jotaro&quot; age=&quot;18&quot;&gt;&lt;/JOJO&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JOJO from &quot;./components/JOJO.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        JOJO</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>注意 上面的方法中 传进去的age是字符串的形式 并不是number的形式<br>如果不加双引号 那么再保存的时候他也会自动给你加上双引号<br>所以如果有需求更改age的值的时候会出现问题<br>那么解决这个问题的主要方式就是使用<code>v-bind:</code>即动态绑定 进行js代码的运算<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111152423.png" alt=""><br>并且最好用props的另外一种方法进行类型的限制<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">  name:String,</span><br><span class="line">  age:Number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这样一来如果接收的东西不对 它就会报错<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111152649.png" alt=""><br>以及更高级别的写法 接收的同时对数据进行类型限制+默认值的指定+必要性的限制<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">  name:&#123;</span><br><span class="line">    typeof:String, //name的类型</span><br><span class="line">    required:true //name是否必须传 为true必传</span><br><span class="line">  &#125;,</span><br><span class="line">  age:&#123;</span><br><span class="line">    typeof:Number, </span><br><span class="line">    default:99 //如果不传 默认值99</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>一般来说 <code>required</code>和<code>default</code>只能用一个</p><p>最后注意一下 传进来的prop是不能修改的 最好不要修改<br>如果业务上面必须要修改可以参考以下的方法<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; name &#125;&#125;----&#123;&#123; myage + 1 &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;点我修改age&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;JOJO&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;现在开始学习props配置项&quot;,</span><br><span class="line">      myage: this.age //由于必须要修改age 所以这里加一个myage接收age 因为优先级prop大于data 所以会在这里接收到age</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">      typeof: String, //name的类型</span><br><span class="line">      required: true, //name是否必须传 为true必传</span><br><span class="line">    &#125;,</span><br><span class="line">    age: &#123;</span><br><span class="line">      typeof: Number,</span><br><span class="line">      default: 99, //如果不传</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeAge() &#123;</span><br><span class="line">      this.myage++;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111154250.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="mixins混入"><a href="#mixins混入" class="headerlink" title="mixins混入"></a>mixins混入</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供mixins混入的配置项 来使用公共的方法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>需求 jojo和dio在h1标签中表态 但荒木偷偷混入 点击h1之后就会变成made in heaven<br>huangmujs<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> huangmu = &#123;</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">showMsg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.msg = <span class="string">&#x27;made in heaven!!!!!!!!!&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>jojovue<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 @click=&quot;showMsg&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;huangmu&#125; from &#x27;../huangmu&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;JOJO&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;欧拉欧拉欧拉&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mixins:[huangmu]</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>diovue<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 @click=&quot;showMsg&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;huangmu&#125; from &#x27;../huangmu&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;DIO&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;我不做人啦jojo&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mixins:[huangmu]</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>appvue<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;JOJO&gt;&lt;/JOJO&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;DIO&gt;&lt;/DIO&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JOJO from &quot;./components/JOJO.vue&quot;;</span><br><span class="line">import DIO from &quot;./components/DIO.vue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        JOJO,</span><br><span class="line">        DIO</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>注意混入的js要暴露 引入的时候也要注意<br>最后是mixins方法是一个数组的配置，多个的时候要用逗号隔开</p><p>混合的原则是 如果你自己有的 就用自己的 如果没有 就用混合的<br>但如果是生命周期钩子 则都要的 来者不拒<br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111191145.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="vue插件"><a href="#vue插件" class="headerlink" title="vue插件"></a>vue插件</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供插件功能来增强页面的功能</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111192201.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">less安装</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供scoped关键字 在style标签中使用 可以将该style标签中的样式独立使用于当前vue文件 但最好不要使用在appvue中</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>语法如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>图例<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111193910.png" alt=""><br>生成一个随机数data<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111194222.png" alt=""></p><p>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111200334.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>由于webpack目前版本已经到5以上 vue求稳定使用它的4.46版本，所以在安装less-loader的时候，会报错，要使用6的版本才能安装<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i less-loader@<span class="number">6</span></span><br></pre></td></tr></table></figure><br>然后在样式中引入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line">  .jojo&#123;</span><br><span class="line">    color: pink;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>最后补充一个查插件版本的指令<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm view xxx versions</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="todolist案例"><a href="#todolist案例" class="headerlink" title="todolist案例"></a>todolist案例</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>学会编写todolist案例来帮助理解vue开发</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>把全部静态资源定义好</li><li><p>分析需要做哪个组件 这里选择了 mylist和myitem<br>mylist相关代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;ul class=&quot;todo-main&quot;&gt;</span><br><span class="line">&lt;MyItem v-for=&quot;todo in todoObj&quot; :key=&quot;todo.id&quot; :todo=&quot;todo&quot;/&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyItem from &#x27;./MyItem&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;MyList&#x27;,</span><br><span class="line">components:&#123;MyItem&#125;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">todoObj:[</span><br><span class="line">&#123;id:&#x27;001&#x27;,title:&quot;我不做人了jojo&quot;,done:true&#125;,</span><br><span class="line">&#123;id:&#x27;002&#x27;,title:&quot;扎瓦鲁多&quot;,done:false&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这里要注意<code>v-for</code>的使用 注意传进去的内容 以及<code>v-bind</code>绑定 最后传给item的是单个对象<br>myitem相关代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;label&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; :checked=&quot;todo.done&quot;/&gt;</span><br><span class="line">&lt;span&gt;&#123;&#123;todo.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line">&lt;button class=&quot;btn btn-danger&quot; style=&quot;display:none&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;MyItem&#x27;,</span><br><span class="line">props:[&#x27;todo&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这里需要注意 item需要接收一个对象用于渲染</p></li><li><p>开始编写myheader<br>myheader中 需要使用的是 输入框 以及输入之后敲回车的执行<br>这里就会出现一个问题 因为不知道如何和子组件进行通信 而且也没有相关的list标签可以用于传递参数 所以这里要用到父子组件的通信<br>解决前者的问题 需要在app中定义一个带参函数addTodo 在header中prop该函数 当keyupenter之后 header就会往该函数中传入相应的对象<br>myheadervue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;todo-header&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; placeholder=&quot;请输入你的任务名称，按回车键确认&quot; @keyup.enter=&quot;addTodos&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;nanoid&#125; from &#x27;nanoid&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;MyHeader&#x27;,</span><br><span class="line">props:[&#x27;addTodo&#x27;],</span><br><span class="line">methods: &#123;</span><br><span class="line">addTodos(e)&#123;</span><br><span class="line">this.addTodo(&#123;id:nanoid(),title:e.target.value,done:false&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>部分appvue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyHeader :addTodo=&quot;addTodo&quot;/&gt;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">methods: &#123;</span><br><span class="line">addTodo(x)&#123;</span><br><span class="line">console.log(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>那么后者的问题 就需要将list中的todoObj放到app中 这样做的好处是 全局共享这个数据 这样一来 app也可以像上面给header传东西一样 给list传这个obj 最后交给item去渲染<br>mylist代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;ul class=&quot;todo-main&quot;&gt;</span><br><span class="line">&lt;MyItem v-for=&quot;todo in todoObj&quot; :key=&quot;todo.id&quot; :todo=&quot;todo&quot;/&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyItem from &#x27;./MyItem&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;MyList&#x27;,</span><br><span class="line">components:&#123;MyItem&#125;,</span><br><span class="line">props:[&#x27;todoObj&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>部分app代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyList :todoObj=&quot;todoObj&quot;/&gt;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">todoObj:[</span><br><span class="line">&#123;id:&#x27;001&#x27;,title:&quot;我不做人了jojo&quot;,done:true&#125;,</span><br><span class="line">&#123;id:&#x27;002&#x27;,title:&quot;扎瓦鲁多&quot;,done:false&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">addTodo(obj)&#123;</span><br><span class="line">this.todoObj.unshift(obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>开始进行勾选功能的实现<br>流程是 勾选myitem组件，改变它的checkbox，由于数据在app中，所以要告诉app它改变了checkbox 然后todoObj中的<code>todoObj.done</code>进行取反操作 又由于app和myitem属于爷孙关系 不能直接通信 需要借助mylist。<br>Q: 如何改变？<br>A: 使用click事件 点击之后执行一个函数<br>Q: 函数应该传什么告诉它改变了呢？<br>A: 应该传id 传这种唯一的标识符到app app才能根据id进行遍历，找到对应项的done进行取反<br>Q: 这个整体的过程大概是怎么样呢？<br>A: app组件将数据共享出来 并定义一个函数改变done值，然后把这个函数传递给mylist mylist用prop接收后 再传递给myitem myitem的checkbox改变的时候 在调用这个函数 就实现了数据的改变<br>关键在于app里的data数据是全局共享的<br>部分appvue代码 定义checkTodo 遍历todoObj 如果找到相同的id 则done取反<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    &lt;MyList :todoObj=&quot;todoObj&quot; :checkTodo=&quot;checkTodo&quot;/&gt;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">    checkTodo(id) &#123;</span><br><span class="line">      this.todoObj.forEach((todo) =&gt; &#123;</span><br><span class="line">        if (todo.id === id) todo.done = !todo.done;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="本地存储和会话存储"><a href="#本地存储和会话存储" class="headerlink" title="本地存储和会话存储"></a>本地存储和会话存储</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">本地存储</button></li><li class="tab"><button type="button" data-href="#test-3">会话存储</button></li><li class="tab"><button type="button" data-href="#test-4">todolist的本地存储</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>本篇将涉及两个js原生代码<code>localStorage</code>和<code>sessionStorage</code>的讲解，前者会存储在用户硬盘上 后者在网页关闭后消失</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>注意所有的数据将在控制台的application下面的<code>localStorage</code>里面查看<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220115141439.png" alt=""><br>代码如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>本地存储<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveData()&quot;</span>&gt;</span>点我保存一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;readData()&quot;</span>&gt;</span>点我读取一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteData()&quot;</span>&gt;</span>点我删除一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;clearData()&quot;</span>&gt;</span>点我清空数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>:<span class="string">&#x27;josefu&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>:<span class="number">70</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">saveData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;name1&#x27;</span>,<span class="string">&#x27;jostar&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;name2&#x27;</span>,<span class="string">&#x27;jotaro&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果是数字 自动转化为字符串</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;age&#x27;</span>,<span class="number">18</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果是对象 需要用JSON.stringify()方法将对象转化为json字符串</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;person&#x27;</span>,<span class="built_in">JSON</span>.stringify(person));</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">readData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;name1&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;name2&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;age&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果想读取到的格式是对象 就要把json转为对象 </span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(JSON.parse(localStorage.getItem(&#x27;person&#x27;)));</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> result = <span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;person&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 但这里转化的age是由于是对象 所以还是保留原来的格式</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(result.age)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果不存在 返回null</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> result2 = <span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;person2&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(result2)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">deleteData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.removeItem(<span class="string">&#x27;name1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.removeItem(<span class="string">&#x27;name2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">clearData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.clear()</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>代码如下：只是替换了关键字<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>会话存储<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveData()&quot;</span>&gt;</span>点我保存一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;readData()&quot;</span>&gt;</span>点我读取一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteData()&quot;</span>&gt;</span>点我删除一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;clearData()&quot;</span>&gt;</span>点我清空数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>:<span class="string">&#x27;josefu&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>:<span class="number">70</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">saveData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        sessionStorage.setItem(<span class="string">&#x27;name1&#x27;</span>,<span class="string">&#x27;jostar&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        sessionStorage.setItem(<span class="string">&#x27;name2&#x27;</span>,<span class="string">&#x27;jotaro&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果是数字 自动转化为字符串</span></span></span><br><span class="line"><span class="javascript">        sessionStorage.setItem(<span class="string">&#x27;age&#x27;</span>,<span class="number">18</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果是对象 需要用JSON.stringify()方法将对象转化为json字符串</span></span></span><br><span class="line"><span class="javascript">        sessionStorage.setItem(<span class="string">&#x27;person&#x27;</span>,<span class="built_in">JSON</span>.stringify(person));</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">readData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(sessionStorage.getItem(<span class="string">&#x27;name1&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(sessionStorage.getItem(<span class="string">&#x27;name2&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(sessionStorage.getItem(<span class="string">&#x27;age&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果想读取到的格式是对象 就要把json转为对象 </span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(JSON.parse(sessionStorage.getItem(&#x27;person&#x27;)));</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> result = <span class="built_in">JSON</span>.parse(sessionStorage.getItem(<span class="string">&#x27;person&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 但这里转化的age是由于是对象 所以还是保留原来的格式</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(result.age)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果不存在 返回null</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> result2 = <span class="built_in">JSON</span>.parse(sessionStorage.getItem(<span class="string">&#x27;person2&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(result2)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">deleteData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        sessionStorage.removeItem(<span class="string">&#x27;name1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        sessionStorage.removeItem(<span class="string">&#x27;name2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">clearData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        sessionStorage.clear()</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220115141620.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-4"><p>todolist自然也会用到本地存储 思路就是监视app里面todoObj的改变 并且在一开始初始化todoObj的时候读取本地数据<br>踩坑的有两点<br>一是初始化的时候如果本地没有值会报错（因为myfooter里面的初始化要计算数组长度，如果是null是没有长度的）<br>解决方法是或运算<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    todoObj: JSON.parse(localStorage.getItem(&quot;todoObj&quot;)) || [],</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>二是在勾选完之后刷新会发现选项并没有勾选成功 因为监视属性中只监视了第一层 没有发现数组内部的变化<br>解决方法 使用深度监视<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  // 这里勾选的时候会不显示改变 因为不是深度监视 无法知道数组内容的改变</span><br><span class="line">  todoObj: &#123;</span><br><span class="line">    deep: true,</span><br><span class="line">    handler(value) &#123;</span><br><span class="line">      localStorage.setItem(&quot;todoObj&quot;, JSON.stringify(value));</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="组件自定义事件-绑定"><a href="#组件自定义事件-绑定" class="headerlink" title="组件自定义事件_绑定"></a>组件自定义事件_绑定</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>组件之间的通信前面学过 需要父组件定义函数 发送到子组件 子组件props之后调用<br>但现在用两种旧的方法来进行组件的通信 它们分别是直接自定义事件和挂载后自定义事件</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先要了解作用机制<br>自定义事件能够通信是因为 父组件在子组件身上定义了自定义事件，在子组件中通过某种方式触发该自定义事件 实现函数的调用 以此来通信<br>流程是 父组件先定义自定义事件 然后写该事件的函数 之后子组件用自己的需要的方式触发该自定义事件 并 传参<br>app部分代码如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1 ref=&quot;title&quot;&gt;这是app组件 现在要学习自定义事件&lt;/h1&gt;</span><br><span class="line">        &lt;JOJO @customEvent=&quot;getJOJO&quot;&gt;&lt;/JOJO&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JOJO from &quot;./components/JOJO.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        JOJO</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        getJOJO(name)&#123;</span><br><span class="line">            console.log(&#x27;JOJO的名字是&#x27;,name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>jojovue<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; name &#125;&#125;----&#123;&#123; age &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;sendJOJO&quot;&gt;点我发送jojoname&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;JOJO&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &quot;jotaro&quot;,</span><br><span class="line">      age: 18,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendJOJO()&#123;</span><br><span class="line">      this.$emit(&#x27;customEvent&#x27;,this.name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>第二种写法 是通过挂载自定义事件来写<br>流程是用ref定义子组件 然后书写回调函数 之后在mounted里面通过refs拿到子组件 之后通过<code>$on</code>指定在该自定义事件触发的时候调用上面的回调函数<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1 ref=&quot;title&quot;&gt;这是app组件 现在要学习自定义事件&lt;/h1&gt;</span><br><span class="line">        &lt;!-- &lt;JOJO @customEvent=&quot;getJOJO&quot;&gt;&lt;/JOJO&gt; --&gt;</span><br><span class="line">        &lt;JOJO ref=&quot;jojo&quot;&gt;&lt;/JOJO&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JOJO from &quot;./components/JOJO.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        JOJO</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        getJOJO(name)&#123;</span><br><span class="line">            console.log(&#x27;JOJO的名字是&#x27;,name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        this.$refs.jojo.$on(&#x27;customEvent&#x27;,this.getJOJO);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>这种方法的好处是灵活性强，可以通过延时函数设定什么时候触发这个自定义事件等</p><p>然后是一些细节上或者优化的问题<br>假如想要自定义事件只触发一次 前面用<code>v-on</code>的方法就是直接在事件后面加once<br><code>@customEvent.once=&quot;getJOJO&quot;</code><br>后者ref的就是<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">    this.$refs.jojo.$once(&#x27;customEvent&#x27;,this.getJOJO);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>以及如果想要在自定义事件中传入多个参数 则最好使用对象发送或者es6的剩余参数rest接收<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    <span class="function"><span class="title">getJOJO</span>(<span class="params">name,...params</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;JOJO的名字是&#x27;</span>,name,params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="解绑事件"><a href="#解绑事件" class="headerlink" title="解绑事件"></a>解绑事件</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>上面绑定事件之后如果要想进行事件的解绑操作 需要用到<code>$off</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>见代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; name &#125;&#125;----&#123;&#123; age &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;sendJOJO&quot;&gt;点我发送jojoname&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;unbind&quot;&gt;点我解绑jojoname&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;JOJO&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &quot;jotaro&quot;,</span><br><span class="line">      age: 18,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendJOJO()&#123;</span><br><span class="line">      this.$emit(&#x27;customEvent&#x27;,this.name);</span><br><span class="line">      this.$emit(&#x27;customEvent2&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">    unbind()&#123;</span><br><span class="line">      // 只解绑一个事件</span><br><span class="line">      // this.$off(&#x27;customEvent&#x27;);</span><br><span class="line">      // 解绑多个事件 数组的方式</span><br><span class="line">      // this.$off([&#x27;customEvent&#x27;,&#x27;customEvent2&#x27;]);</span><br><span class="line">      // 或者直接啥都不写</span><br><span class="line">      this.$off();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="自定义事件踩坑总结"><a href="#自定义事件踩坑总结" class="headerlink" title="自定义事件踩坑总结"></a>自定义事件踩坑总结</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>主要内容有 </p><ol><li>app组件获取自定义事件的结果渲染到页面</li><li>组件使用原生事件</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>综上所述 有两种方法自定义 一种是<code>v-on</code> 另外一种是<code>ref</code><br>前者代码 思路是在data中定义然后方法调用的时候赋值给定义的变量<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        jojoName:&#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">components:&#123;</span><br><span class="line">    JOJO</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">    getJOJO(name)&#123;</span><br><span class="line">        console.log(&#x27;JOJO的名字是&#x27;,name);</span><br><span class="line">        this.jojoName = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>后者<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1 ref=&quot;title&quot;&gt;这是app组件 jojo的名字是&#123;&#123;jojoName&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;!-- &lt;JOJO @customEvent=&quot;getJOJO&quot;&gt;&lt;/JOJO&gt; --&gt;</span><br><span class="line">        &lt;JOJO ref=&quot;jojo&quot;&gt;&lt;/JOJO&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JOJO from &quot;./components/JOJO.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            jojoName:&#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        JOJO</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        getJOJO(name)&#123;</span><br><span class="line">            console.log(&#x27;JOJO的名字是&#x27;,name);</span><br><span class="line">            this.jojoName = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        this.$refs.jojo.$on(&#x27;customEvent&#x27;,this.getJOJO);</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><br>但是后者如果直接将回调的具体内容写在on后面的话 会出现问题<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">    // 此处的function中的this指代的是触发该事件的对象 就是子组件 然鹅子组件里面没有jojoName所以不行</span><br><span class="line">  this.$refs.jojo.$on(&quot;customEvent&quot;, function (name) &#123;</span><br><span class="line">    console.log(&quot;JOJO的名字是&quot;, name);</span><br><span class="line">    this.jojoName = name;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>需要写成箭头函数的形式<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//箭头函数的this指向前面一个 即app的vm</span><br><span class="line">    this.$refs.jojo.$on(&quot;customEvent&quot;, (name)=&gt; &#123;</span><br><span class="line">      console.log(&quot;JOJO的名字是&quot;, name);</span><br><span class="line">      this.jojoName = name;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><br>组件正常来说 如果使用像<code>@click=&quot;show&quot;</code>这样的方法 那么他会判断该click是个自定义事件，要用自定义事件的方式去定义才行<br>那么组件如何使用原生事件呢？<br>只需要加个<code>.native</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;JOJO ref=&quot;jojo&quot; @click.native=&quot;show&quot;&gt;&lt;/JOJO&gt;</span><br></pre></td></tr></table></figure></p><p>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220115163213.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>全局事件总线用于处理子组件和子组件之间的通信。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>为了处理子组件之间的通信 要有一个中间人 当它被定义之后 如果有组件往里面挂载自定义事件用于得到信息，那么另外的组件就可以触发该事件发送信息 从此进行组件间的通信<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220115220953.png" alt=""><br>那么这个中间人有三点需求</p><ol><li>它可以被所有组件知道</li><li>它必须有<code>$on</code>，<code>$emit</code>和<code>$off</code></li></ol><p>首先第一点只要它在vue原型中出现就可以<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.x = &#123;a:1,b:2&#125;;</span><br><span class="line">//这样子组件直接打印是有数据的</span><br></pre></td></tr></table></figure><br>但是要满足第二点的时候 会发现它的对象不合法 因为对象上面并没有<code>$on</code>，<code>$emit</code>和<code>$off</code>这几个方法<br>解决这个问题 也很简单 要知道在vm或者vc上面才有这三个方法的存在 所以出发点就是这两个对象<br>对于vm来说 因为要创建vm实例对象就要接收 那么接收之后再赋值给原型上的x已经晚了 因为这个时候其他组件已经渲染完了<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//这是错误做法</span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    render:h=&gt;h(App)</span><br><span class="line">&#125;)</span><br><span class="line">Vue.prototype.x = vm;</span><br></pre></td></tr></table></figure><br>所以只能想到用vc 要用vc的话 之前学到要使用<code>const Demo = Vue.extend({});</code> 但是不能直接传给x 因为没有新建 之前的做法是直接使用这个标签<code>&lt;Demo/&gt;</code> 所以这里只能自己新建<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Demo = Vue.extend(&#123;&#125;);</span><br><span class="line">const d = new Demo();</span><br><span class="line">Vue.prototype.x = d;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    render:h=&gt;h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>这样做之后就满足要求了<br>其他组件的通信写法<br>jojovue 发送端<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  sendHello() &#123;</span><br><span class="line">    this.x.$emit(&quot;hello&quot;, this.msg);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>diovue接收端<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  this.x.$on(&#x27;hello&#x27;,(data)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;ko no DIO da!!!&#x27;,data);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>那么项目中肯定不是以这样的复杂的形式去定义x的 这里引出全局事件总线的写法<br>首先vm里面有个钩子叫做<code>beforeCreate()</code>这个是在模板解析之前做的操作 所以在这里面创建所谓的x是最好的 vue告诉我们这里的x应该叫做<code>$bus</code> 可以理解未公共汽车 都可以把东西往里面放<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    render:h=&gt;h(App),</span><br><span class="line">    beforeCreate()&#123;</span><br><span class="line">        // 安装全局事件总线</span><br><span class="line">        Vue.prototype.$bus = this </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>注意 最好在组件销毁之前解绑bus身上的相关事件 利用<code>beforeDestroy()</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeDestroy() &#123;</span><br><span class="line">  this.$bus.$off(&#x27;hello&#x27;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220116155551.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="消息订阅与发布"><a href="#消息订阅与发布" class="headerlink" title="消息订阅与发布"></a>消息订阅与发布</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>消息的订阅与发布是另外一种组件间通信的方法 一般引入<code>pubsub.js</code>来调用pubsub对象里面的方法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>安装pubsub<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i pubsub-js</span><br></pre></td></tr></table></figure></li><li>导入pubsub<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pubsub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br></pre></td></tr></table></figure></li><li>基本使用<br>消息的订阅 使用到的是subscribe 传入两个参数 一个是订阅的名字 一个是进来的数据<br>且注意因为每次订阅都会生成不同的id 所以最后取消订阅是要传入一个id的 这里用pubId来演示 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  this.pubId = pubsub.subscribe(&#x27;hello&#x27;,function(msgName,data)&#123;</span><br><span class="line">      console.log(&#x27;系内jojo&#x27;,msgName,data);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy() &#123;</span><br><span class="line">  pubsub.unsubscribe(this.pubId);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>消息的发布 使用到的是publish<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  sendHello() &#123;</span><br><span class="line">    pubsub.publish(&#x27;hello&#x27;,&#x27;欧拉欧拉欧拉欧拉！！！！！！！&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>直接在function里面输出this的话结果是undefined 这时候需要用到箭头函数来将this设置为vc<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  this.pubId = pubsub.subscribe(&quot;hello&quot;, (msgName, data) =&gt; &#123;</span><br><span class="line">    console.log(this);</span><br><span class="line">    console.log(&quot;系内jojo&quot;, msgName, data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>特别注意一点 如果订阅的功能是写在methods里面的 那么需要methods里面的方法的第一个参数用占位符代替 因为它第一个要传一个msgName<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220116193229.png" alt=""><br>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220116192934.png" alt=""></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="todolist编辑"><a href="#todolist编辑" class="headerlink" title="todolist编辑"></a>todolist编辑</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>讲一下todolist编辑这个功能的实现 运用到了动态添加属性<code>$set</code>, 事件总线，事件对象<code>$event</code> 显示指令<code>v-show</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先样式写好 编辑框和点击编辑之后出现的文本框<br>对于编辑框 需要的是1点击之后 出现文本框 2 出现文本框后 编辑框消失<br>对于文本框需要的是 1点击编辑框之后自动获取焦点 离开自动失去焦点并修改数据<br>所以先给编辑框绑定一个事件 叫isEdit 传入todo并添加响应式的edit 如果todo里面的edit为真 那么就显示文本框<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">      &lt;span v-show=&quot;!todo.edit&quot;&gt;&#123;&#123; todo.title &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;input v-show=&quot;todo.edit&quot; type=&quot;text&quot; :value=&quot;todo.title&quot; @blur=&quot;isBlur(todo,$event)&quot;/&gt;</span><br><span class="line">          &lt;button v-show=&quot;!todo.edit&quot; class=&quot;btn btn-danger&quot; @click=&quot;isEdit(todo)&quot;&gt;编辑&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">    isEdit(todo) &#123;</span><br><span class="line">      if (todo.edit !== undefined) &#123;</span><br><span class="line">        todo.edit = true;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.$set(todo, &quot;edit&quot;, true);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><br>然后文本框也需要编写一个isBlur函数 用于改变edit状态 来影响编辑框和title<br>由于失去焦点后要完成改变 需要在app里面编写update函数接收当前的todoid和title值<br>值得一提的是<code>@blur=&quot;isBlur(todo,$event)&quot;</code>传入event找到<code>e.target.value</code><br>（这里还没有写自动获取焦点）<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    isBlur(todo,e)&#123;</span><br><span class="line">      todo.edit = false;</span><br><span class="line">      this.$bus.$emit(&quot;updateTodo&quot;, todo.id,e.target.value);</span><br><span class="line">    &#125;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">    updateTodo(id,title) &#123;</span><br><span class="line">      this.todoObj.forEach((todo) =&gt; &#123;</span><br><span class="line">        if (todo.id === id) todo.title = title;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><br>关于自动获取焦点 由于函数里面的内容线执行完毕再去渲染dom 所以直接写focus是没有作用的<br>解决的办法有使用定时器和<code>$nextTick</code> 后者的原理是等dom渲染完后执行回调<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  this.$refs.edit.focus();</span><br><span class="line">&#125;, 200);</span><br><span class="line">// this.$nextTick(function () &#123;</span><br><span class="line">//   this.$refs.edit.focus();</span><br><span class="line">// &#125;);</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="vue动画"><a href="#vue动画" class="headerlink" title="vue动画"></a>vue动画</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供了几个动画类名和指令用于调用动画</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>如果自己写的话 还需要判断什么时候来什么时候去<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;现在学习vue动画&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;showMsg&quot;&gt;点我显示/隐藏&lt;/button&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;h1 v-show=&quot;isShow&quot; class=&quot;msg&quot;&gt;我不做人啦&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isShow:false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        showMsg()&#123;</span><br><span class="line">            this.isShow = !this.isShow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    @keyframes enter &#123;</span><br><span class="line">        from&#123;</span><br><span class="line">            transform:translateX(100%)</span><br><span class="line">        &#125;</span><br><span class="line">        to&#123;</span><br><span class="line">            transform: translateX(0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .come&#123;</span><br><span class="line">        animation: enter 1s linear;</span><br><span class="line">    &#125;</span><br><span class="line">    .go&#123;</span><br><span class="line">        animation: enter 1s reverse;</span><br><span class="line">    &#125;</span><br><span class="line">    .msg&#123;</span><br><span class="line">        background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>利用vue提供的transistion标签<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;现在学习vue动画&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;showMsg&quot;&gt;点我显示/隐藏&lt;/button&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;transition&gt;</span><br><span class="line">        &lt;h1 v-show=&quot;isShow&quot; class=&quot;msg&quot;&gt;我不做人啦&lt;/h1&gt;        </span><br><span class="line">        &lt;/transition&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isShow:false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        showMsg()&#123;</span><br><span class="line">            this.isShow = !this.isShow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    @keyframes enter &#123;</span><br><span class="line">        from&#123;</span><br><span class="line">            transform:translateX(100%)</span><br><span class="line">        &#125;</span><br><span class="line">        to&#123;</span><br><span class="line">            transform: translateX(0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /* 来的时候 */</span><br><span class="line">    .v-enter-active&#123;</span><br><span class="line">        animation: enter 1s linear;</span><br><span class="line">    &#125;</span><br><span class="line">    /* 去的时候 */</span><br><span class="line">    .v-leave-active&#123;</span><br><span class="line">        animation: enter 1s reverse;</span><br><span class="line">    &#125;</span><br><span class="line">    .msg&#123;</span><br><span class="line">        background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>如果有多个需要用到不同动画效果的时候 要给transistion标签一个name值 并且在下方样式中的v改成name值 并且如果想要一上来就执行动画 可以使用<code>appear</code>指令<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;现在学习vue动画&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;showMsg&quot;&gt;点我显示/隐藏&lt;/button&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;transition name=&quot;dio&quot; appear&gt;</span><br><span class="line">        &lt;h1 v-show=&quot;isShow&quot; class=&quot;msg&quot;&gt;我不做人啦&lt;/h1&gt;        </span><br><span class="line">        &lt;/transition&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isShow:true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        showMsg()&#123;</span><br><span class="line">            this.isShow = !this.isShow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    @keyframes enter &#123;</span><br><span class="line">        from&#123;</span><br><span class="line">            transform:translateX(100%)</span><br><span class="line">        &#125;</span><br><span class="line">        to&#123;</span><br><span class="line">            transform: translateX(0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /* 来的时候 */</span><br><span class="line">    .dio-enter-active&#123;</span><br><span class="line">        animation: enter 1s linear;</span><br><span class="line">    &#125;</span><br><span class="line">    /* 去的时候 */</span><br><span class="line">    .dio-leave-active&#123;</span><br><span class="line">        animation: enter 1s reverse;</span><br><span class="line">    &#125;</span><br><span class="line">    .msg&#123;</span><br><span class="line">        background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117101836.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117101907.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="配置代理-axios"><a href="#配置代理-axios" class="headerlink" title="配置代理(axios)"></a>配置代理(axios)</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>配置代理解决vue中发送请求的时候跨域的问题</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>安装axios<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i axios</span><br></pre></td></tr></table></figure><br>导入axios<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br></pre></td></tr></table></figure><br>实例代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;现在开始学习vue发送axios请求&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;sendAxios&quot;&gt;点我发送一个请求&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        sendAxios()&#123;</span><br><span class="line">            axios.get(&#x27;http://localhost:3000/timeout-server&#x27;).then(</span><br><span class="line">                response=&gt;&#123;</span><br><span class="line">                    console.log(&#x27;请求成功了&#x27;,response.data);</span><br><span class="line">                &#125;,</span><br><span class="line">                error=&gt;&#123;</span><br><span class="line">                    console.log(&#x27;请求失败了&#x27;,error.message)</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>注意跨域问题<br>之前在ajax学过 跨域就是违背了同源策略 同源策略规定协议 主机 端口号一致<br>如果要解决这个问题 可以在nodejs里配置 也可以直接使用代理服务器<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/9f479b0a038d8abb97e2f066ad255f6.png" alt=""><br>原理是前端网页访问代理服务器的时候 代理服务器的协议主机端口号是一致的 所以就可以请求 同时 代理服务器和保存结果的服务器直接又可以互相请求 就达成了效果<br>新建<code>vue.config.js</code>输入<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">pages</span>:&#123;</span><br><span class="line">        <span class="attr">index</span>:&#123;</span><br><span class="line">            <span class="attr">entry</span>:<span class="string">&#x27;src/main.js&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">        <span class="attr">proxy</span>:<span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>注意 里面的proxy的地址就是代理服务器请求的有结果的服务器的地址<br>然后改变axios的请求地址如下:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    sendAxios()&#123;</span><br><span class="line">        axios.get(&#x27;http://localhost:8080/timeout-server&#x27;).then(</span><br><span class="line">            response=&gt;&#123;</span><br><span class="line">                console.log(&#x27;请求成功了&#x27;,response.data);</span><br><span class="line">            &#125;,</span><br><span class="line">            error=&gt;&#123;</span><br><span class="line">                console.log(&#x27;请求失败了&#x27;,error.message)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>注意 这里就是往代理服务器8080发送了请求 让该代理服务器从端口号3000的timeoutserver拿结果过来<br>这里还涉及到一个问题 代理服务器并不是全部的请求都发给实际服务器 如果代理服务器发现public目录下有该资源 就直接返回该资源 不会往服务器请求数据<br>并且它的缺陷就是配置完只能转发给一个服务器 不能给多个<br>下面讲解另外一种方式 转发给多个服务器<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    devServer:&#123;</span><br><span class="line">        proxy:&#123;</span><br><span class="line">            &#x27;/jojo&#x27;:&#123;</span><br><span class="line">                target:&#x27;http://localhost:3000&#x27;,</span><br><span class="line">                changeOrigin:true,</span><br><span class="line">                pathRewrite:&#123;&#x27;^/jojo&#x27;:&#x27;&#x27;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">//请求端的vue</span><br><span class="line">    methods: &#123;</span><br><span class="line">        sendAxios()&#123;</span><br><span class="line">            axios.get(&#x27;http://localhost:8080/jojo/timeout-server&#x27;).then(</span><br><span class="line">                response=&gt;&#123;</span><br><span class="line">                    console.log(&#x27;请求成功了&#x27;,response.data);</span><br><span class="line">                &#125;,</span><br><span class="line">                error=&gt;&#123;</span><br><span class="line">                    console.log(&#x27;请求失败了&#x27;,error.message)</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><br>原理是当请求的地址中第一项是以jojo为名字的话 代理服务器就开始向目标服务器请求数据<br>前面的<code>&#39;/jojo&#39;</code>指的是代理的服务器请求路径 他会匹配所有以此为路径的地址<br>target 是目标服务器地址<br>changeOrigin为true的话 指的是请求目标服务器的时候 伪装自己的host为相同的host<br>pathRewrite的话 当代理服务器向目标服务器请求数据的时候 地址其实是<code>/jojo/timeout-server</code>但目标服务器中并没有这一项 所以要使用这个方法 以键值对的形式找到所有<code>&#39;/jojo&#39;</code>并改写成空<br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117143427.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117143454.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>slot插槽标签的功能主要是当组件需要传入单独的内容的时候，对该内容进行渲染。常用于组件复用。分为三类 默认插槽 具名插槽 作用域插槽</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>默认插槽 使用方法<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117193522.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117193625.png" alt=""><br>适用场景 只有一个需要独立渲染的内容的时候</p><p>具名插槽 适用场景 需要多个slot来渲染数据的时候<br>使用方法<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117193832.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117193848.png" alt=""><br>如果出现多个标签共享同样的slot的时候 如下<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117194043.png" alt=""><br>建议使用<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117194144.png" alt=""><br><code>v-slot</code>可以用#号代替<br>并且注意该指令只能使用在组件的标签上<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117194257.png" alt=""></p><p>作用域插槽<br>使用场景 当需要组件里面的相同数据进行不同的渲染的时候使用到该方法<br>比如同样的列表数据 想展示成有序列表 无序列表 两种方式<br>使用方法<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117195308.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117195502.png" alt=""><br>如果直接用插值语法输出scope的名字 会出现传递的数据<br>主要的概念是传给插槽的使用者<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117195756.png" alt=""><br>技巧<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117195919.png" alt=""><br>新的api是<code>slot-scope</code>功能和scope是一致的<br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117200048.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117200128.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117200144.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>全局事件总线<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117200729.png" alt=""><br>vuex<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117201111.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117201156.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>新建一个store文件夹 下面放indexjs<br>写入如下 注意Store要大写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import vuex from &#x27;vuex&#x27;</span><br><span class="line">Vue.use(vuex)</span><br><span class="line"></span><br><span class="line">// 准备actions 用于响应组件中的动作</span><br><span class="line">const actions = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">// 准备mutations 用于操作数据 state</span><br><span class="line">const mutations = &#123;&#125;</span><br><span class="line">// 准备state 用于存储数据</span><br><span class="line">const state = &#123;&#125;</span><br><span class="line"></span><br><span class="line">// 创建并暴露store</span><br><span class="line">export default new vuex.Store(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在mainjs里面导入 注意store后面的index不能省略<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App&#x27;</span><br><span class="line">import store from &#x27;./store/index&#x27;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    render:h=&gt;h(App),</span><br><span class="line">    store,</span><br><span class="line">    beforeCreate()&#123;</span><br><span class="line">        // 安装全局事件总线</span><br><span class="line">        Vue.prototype.$bus = this </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>注意这里在index里面写入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import vuex from &#x27;vuex&#x27;</span><br><span class="line">Vue.use(vuex)</span><br></pre></td></tr></table></figure><br>是因为cli脚手架它有个代码执行顺序的问题<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220118114954.png" alt=""><br>所以不能在mainjs里面使用vuex再引入store </p><p>查看vuex的数据<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220118150438.png" alt=""><br>还有一个案例再下一栏</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>加减法计算器<br>jisuanqivue<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;现在开始学习vuex 案例是加减&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;当前求和是:&#123;&#123; $store.state.sum &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;select v-model=&quot;n&quot;&gt;</span><br><span class="line">      &lt;option :value=&quot;1&quot;&gt;1&lt;/option&gt;</span><br><span class="line">      &lt;option :value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">      &lt;option :value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;button @click=&quot;increment&quot;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;decrement&quot;&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;incrementOdd&quot;&gt;当前求和为奇数再加&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;incrementWait&quot;&gt;等一等再加&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      n: 1,</span><br><span class="line">      sum: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment() &#123;</span><br><span class="line">      this.$store.commit(&quot;INCREMENT&quot;, this.n);</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement() &#123;</span><br><span class="line">      this.$store.commit(&quot;DECREMENT&quot;, this.n);    </span><br><span class="line">    &#125;,</span><br><span class="line">    incrementOdd() &#123;</span><br><span class="line">      this.$store.dispatch(&quot;incrementOdd&quot;, this.n);</span><br><span class="line">    &#125;,</span><br><span class="line">    incrementWait() &#123;</span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">        this.$store.dispatch(&quot;incrementWait&quot;, this.n);</span><br><span class="line">      &#125;, 500);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(this);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>indexjs<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line">Vue.use(vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备actions 用于响应组件中的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//context 上下文 value 传过来的值 </span></span><br><span class="line">    <span class="comment">// increment(context, value) &#123;</span></span><br><span class="line">    <span class="comment">//     context.commit(&#x27;INCREMENT&#x27;, value)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// decrement(context, value) &#123;</span></span><br><span class="line">    <span class="comment">//     context.commit(&#x27;DECREMENT&#x27;, value)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="function"><span class="title">incrementOdd</span>(<span class="params">context, value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (context.state.sum % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">            context.commit(<span class="string">&#x27;INCREMENT&#x27;</span>, value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">incrementWait</span>(<span class="params">context, value</span>)</span> &#123;</span><br><span class="line">        context.commit(<span class="string">&#x27;INCREMENT&#x27;</span>, value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 准备mutations 用于操作数据 state</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="function"><span class="title">INCREMENT</span>(<span class="params">state, value</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;mutation里面的INCREMENT被调用了&#x27;</span>, state, value)</span><br><span class="line">        state.sum += value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">DECREMENT</span>(<span class="params">state, value</span>)</span> &#123;</span><br><span class="line">        state.sum -= value;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 准备state 用于存储数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">sum</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>注意这里有比较细节的问题<br>整个流程是vc传递n值给action action做出判断之后传递给mutation加工 mutation加工之后将数据给到state state里面的值改变重新渲染vc<br>vc将n值传递给action这个part</p><ol><li>因为已经use了vux这个插件 且已经注册了store 所以vc中会出现<code>$store</code>并且里面的state中有想要的sum值 可以插值语法直接获取</li><li>vc如果先和action沟通 使用的是dispatch 并且第一个参数要和action里面的key对应</li><li>如果不需要action的业务逻辑判断 可以使用commit 直接发送给mutation进行加工 这里的加法和减法就是例子</li></ol><p>action判断部分</p><ol><li>action在这里接收两个参数 一个是context 上下文对象 这个上下文对象依然也包含state 所以可以拿到sum进行数据过滤 另外一个参数是value 就是传递来的值</li><li>action判断完之后需要传递两个参数 第一个和mutation里面的key相同 建议使用大写区分 第二个是value</li></ol><p>mutation部分</p><ol><li>加工数据 接收两个参数 一个是state 一个是value</li><li>没有发送 </li></ol><p>state部分</p><ol><li>初始化参数 </li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="getters配置项"><a href="#getters配置项" class="headerlink" title="getters配置项"></a>getters配置项</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>使用getters配置项可以想计算属性一样对state里面的数据进行操作</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先在store下面的indexjs里面定义getters<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="comment">// 类似计算属性 传入的是state</span></span><br><span class="line">    <span class="function"><span class="title">bigSum</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state.sum * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然后追加该配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">    getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>最后在组件中使用 注意此时是getters里面的xx 不是state<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;当前求和放大十倍是&#123;&#123; $store.getters.bigSum &#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220118193534.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="mapState和mapGetters"><a href="#mapState和mapGetters" class="headerlink" title="mapState和mapGetters"></a>mapState和mapGetters</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>主要是优化模板中插值语法<code>$store.state.xxx</code>的冗余写法 应用场景是需要用到vuex里面的数据并且不想写复杂的<code>$store.state.xxx</code>，用computed进行读取则可以用这种形式优化</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先需要import<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;mapState&#125; from &#x27;vuex&#x27;</span><br></pre></td></tr></table></figure><br>原理就是函数生成函数 这里mapState会把传进来的对象根据key生成函数 并返回从state里面找到的value值 巧妙的一点是用了拓展运算符<code>...</code>将全部对象展开<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220118194547.png" alt=""><br>在vue开发者工具中也可以知道这个它其实最后是隶属于computed的 但是vue把他独立出来显示<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220118195043.png" alt=""><br>简写方法 数组写法<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220118195326.png" alt=""><br>同理 mapGetters<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220118195453.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="mapMutations和mapActions"><a href="#mapMutations和mapActions" class="headerlink" title="mapMutations和mapActions"></a>mapMutations和mapActions</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>作用： 优化methods的写法 但需要导入和传参</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先导入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;mapActions, mapMutations&#125; from &#x27;vuex&#x27;</span><br></pre></td></tr></table></figure><br>在模板中传参<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;increment(n)&quot;&gt;+&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;decrement(n)&quot;&gt;-&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;incrementOdd(n)&quot;&gt;当前求和为奇数再加&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;incrementWait(n)&quot;&gt;等一等再加&lt;/button&gt;</span><br></pre></td></tr></table></figure><br>在methods中编写 key是模板中的方法 value是给mutations或者actions传递的信息 注意要写成字符串<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  //使用这种写法要注意模板里面的函数要传参 值要写成字符串</span><br><span class="line">  ...mapMutations(&#123;</span><br><span class="line">    increment:&#x27;INCREMENT&#x27;,</span><br><span class="line">    decrement:&#x27;DECREMENT&#x27;</span><br><span class="line">  &#125;),</span><br><span class="line">  ...mapActions(&#123;</span><br><span class="line">    incrementOdd:&#x27;incrementOdd&#x27;,</span><br><span class="line">    incrementWait:&#x27;incrementWait&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>常见错误 不传参<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220119112907.png" alt=""><br>点击一下加之后是1 1之后点奇数加（奇数加没有传参） 就会默认将事件event传进去给actions<br>在actions中完成拼接 就是这个结果<br>也有数组写法 不过个人感觉不太适合</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="vux模块化-namespaced"><a href="#vux模块化-namespaced" class="headerlink" title="vux模块化+namespaced"></a>vux模块化+namespaced</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>利用vuex模块化可以更加方便的维护数据 并且利用namespaced属性 可以使得methods和computed添加方法更方便</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>模块化配置 将所有的actions mutations getters state全部配置在一个options里面<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">const countOptions = &#123;</span><br><span class="line">    namespaced:true,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        incrementOdd(context, value) &#123;</span><br><span class="line">            if (context.state.sum % 2 !== 0) &#123;</span><br><span class="line">                context.commit(&#x27;INCREMENT&#x27;, value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        incrementWait(context, value) &#123;</span><br><span class="line">            setTimeout(() =&gt; &#123;</span><br><span class="line">                context.commit(&#x27;INCREMENT&#x27;, value)</span><br><span class="line">            &#125;, 500);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        INCREMENT(state, value) &#123;</span><br><span class="line">            console.log(&#x27;mutation里面的INCREMENT被调用了&#x27;, state, value)</span><br><span class="line">            state.sum += value;</span><br><span class="line">        &#125;,</span><br><span class="line">        DECREMENT(state, value) &#123;</span><br><span class="line">            state.sum -= value;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">        bigSum(state) &#123;</span><br><span class="line">            return state.sum * 10</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    state: &#123;</span><br><span class="line">        sum: 0,</span><br><span class="line">        school: &#x27;进击的鬼灭学园&#x27;,</span><br><span class="line">        name: &#x27;炭之狼&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>创建并暴露store的适合要引入模块 有多少就引入多少<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 创建并暴露store</span><br><span class="line">export default new vuex.Store(&#123;</span><br><span class="line">    modules:&#123;</span><br><span class="line">        countOptions</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>添加namespace属性为true<br>然后重写一下mapstate 以及其他mapxxx方法<br>注意 如果不配置namespace的话 mapxxx方法是找不到对应的模块的<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  ...mapState(&quot;countOptions&quot;, [&quot;school&quot;, &quot;name&quot;, &quot;sum&quot;]),</span><br><span class="line">  ...mapGetters(&quot;countOptions&quot;, [&quot;bigSum&quot;])</span><br><span class="line">&#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">  ...mapMutations(&quot;countOptions&quot;, &#123;</span><br><span class="line">    increment: &quot;INCREMENT&quot;,</span><br><span class="line">    decrement: &quot;DECREMENT&quot;,</span><br><span class="line">  &#125;),</span><br><span class="line">  ...mapActions(&quot;countOptions&quot;, &#123;</span><br><span class="line">    incrementOdd: &quot;incrementOdd&quot;,</span><br><span class="line">    incrementWait: &quot;incrementWait&quot;,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220119121619.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="技巧类"><a href="#技巧类" class="headerlink" title="技巧类"></a>技巧类</h1><p>iconfont<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220201143732.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端进阶" scheme="https://zlinni.github.io/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://zlinni.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>替身面板生成器</title>
    <link href="https://zlinni.github.io/posts/47a379b80246/"/>
    <id>https://zlinni.github.io/posts/47a379b80246/</id>
    <published>2022-01-03T09:18:44.000Z</published>
    <updated>2022-01-04T03:11:22.193Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>本文主要介绍如何给自己的替身匹配相应的面板</p></div><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220104105601.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/joji.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220104110655.png" alt=""></p><h1 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h1><div class="note warning flat"><p>鉴于在线版网址已经挂掉的情况下，建议使用离线版本，本质也是个echarts图表</p></div><p>在线版地址:<a href="http://dogend.tripleying.com/article/?id=1">点击</a><br>离线版地址:<a href="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/JOJO替身面板生成 _ Dogend.html">点击之后右键另存为html</a><br>使用方法：</p><ol><li>选择右边输入数值之后生成数据</li><li>之后右击图片另存为，注意是替身面板，不是整个图片<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220104110255.png" alt=""></li><li>下载以下任意图片 用ps工具覆盖刚刚的面板数值上去<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/standCharts2.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/standCharts.png" alt=""></li></ol><div class="note info flat"><p>下面介绍的是来自于b站up主木南工坊的pr替身教学</p></div><p>可以直接参考原视频的<a href="https://www.bilibili.com/video/BV1YJ411R768/?spm_id_from=333.788.recommend_more_video.0">地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="工具" scheme="https://zlinni.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="https://zlinni.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>JOJO石之海信封替换</title>
    <link href="https://zlinni.github.io/posts/f49019ed9855/"/>
    <id>https://zlinni.github.io/posts/f49019ed9855/</id>
    <published>2022-01-03T09:01:30.000Z</published>
    <updated>2022-02-23T06:35:44.020Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>本文用自建的jojo信封替换原akilar博客的蓝色信封，原帖地址:<a href="https://akilar.top/posts/e2d3c450/">akilar的信封留言板</a></p></div><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/jojo.gif" alt=""></p><h1 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h1><ol><li>在<code>[Blogroot]</code>运行指令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-envelope --save</span><br></pre></td></tr></table></figure></li><li>在站点配置文件或者主题配置文件添加配置项（对，两者任一均可。但不要都写）<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># envelope_comment</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/58900a8/</span></span><br><span class="line"><span class="attr">envelope_comment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#开关</span></span><br><span class="line">  <span class="attr">cover:</span> <span class="string">https://ae01.alicdn.com/kf/U5bb04af32be544c4b41206d9a42fcacfd.jpg</span> <span class="comment">#信笺封面图</span></span><br><span class="line">  <span class="attr">message:</span> <span class="comment">#信笺内容，支持多行</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">有什么想问的？</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">有什么想说的？</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">有什么想吐槽的？</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">哪怕是有什么想吃的，都可以告诉我哦~</span></span><br><span class="line">  <span class="attr">bottom:</span> <span class="string">自动书记人偶竭诚为您服务！</span> <span class="comment">#信笺结束语，只能单行</span></span><br><span class="line">  <span class="attr">height:</span> <span class="comment">#调整信笺划出高度，默认1050px</span></span><br><span class="line">  <span class="attr">path:</span> <span class="comment">#【可选】comments 的路径名称。默认为 comments，生成的页面为 comments/index.html</span></span><br><span class="line">  <span class="attr">front_matter:</span> <span class="comment">#【可选】comments页面的 front_matter 配置</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">留言板</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>新建js，导入以下内容<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//messageboard为你的信封所在位置</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.location.pathname.match(<span class="string">&#x27;messageboard&#x27;</span>)) &#123;</span><br><span class="line"><span class="keyword">var</span> fancybox = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;fancybox&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> beforeimg = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;beforeimg&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> afterimg = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;afterimg&#x27;</span>);</span><br><span class="line">beforeimg.setAttribute(<span class="string">&quot;data-lazy-src&quot;</span>,<span class="string">&quot;https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/beforenew.png&quot;</span>);</span><br><span class="line">afterimg.setAttribute(<span class="string">&quot;data-lazy-src&quot;</span>,<span class="string">&quot;https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/afternew.png&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="魔改" scheme="https://zlinni.github.io/categories/%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="魔改" scheme="https://zlinni.github.io/tags/%E9%AD%94%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>给Blog安排一个图床</title>
    <link href="https://zlinni.github.io/posts/ceb26206ef16/"/>
    <id>https://zlinni.github.io/posts/ceb26206ef16/</id>
    <published>2022-01-03T03:52:27.000Z</published>
    <updated>2022-02-23T06:33:45.632Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>初次尝试使用Typora编写上传博客的时候，发现图片居然都加载不出来，原因是使用软件截屏的时候直接cv到了文章内容里面，地址还是本地的地址，以下提供了两种方案对图片进行在线化处理。</p></div><div class="note warning flat"><p>自2021年12月开始jsdeliver不提供中国内部的加速服务，可以自行斟酌换cdn加速，笔者学校网络暂时没有影响。</p></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">PicGo图床</button></li><li class="tab"><button type="button" data-href="#test-2">本地插件</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><ol><li>安装PicGO图床 </li><li>打开github 右上角选择你的仓库<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103120101.png" alt=""></li><li>新建一个仓库<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103120201.png" alt=""></li><li>仓库名称为picgo 公开该仓库<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103120232.png" alt=""></li><li>回到右上角settings<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103120401.png" alt=""></li><li>选择Developer settings<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103120603.png" alt=""></li><li>选择Personal acess tokens 并创建新的token之后复制下来(只有一次)<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103120649.png" alt=""></li><li>回到PicGo 在图床设置里选择github图床 设为默认图床后确定<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103121026.png" alt=""><br>提供一下cdn加速的地址，cv即可: <a href="https://cdn.jsdelivr.net/gh/">https://cdn.jsdelivr.net/gh/</a> </li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>安装插件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></li><li>在<code>_config.yml</code>配置文件中，修改为<code>post_asset_folder: true</code>， 然后新建一篇文章<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">new</span> <span class="string">post</span> <span class="string">ceshi</span></span><br></pre></td></tr></table></figure></li><li>此时就会出现一个ceshi的文件夹和ceshi的md文件</li><li>最后只要把图片放到对应文件夹之后在对应md文件中引入即可</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="魔改" scheme="https://zlinni.github.io/categories/%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="工具" scheme="https://zlinni.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Animation主页动画处理</title>
    <link href="https://zlinni.github.io/posts/0368fe1c5ab9/"/>
    <id>https://zlinni.github.io/posts/0368fe1c5ab9/</id>
    <published>2022-01-02T09:06:07.000Z</published>
    <updated>2022-02-23T06:32:08.862Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip "><p>采用wowjs对主页进行动画效果处理，使得页面加载更加平滑流畅</p></div>     <details class="folding-tag" cyan><summary> 预览效果 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/index.gif" alt=""></p>              </div>            </details><h1 id="主要配置"><a href="#主要配置" class="headerlink" title="主要配置"></a>主要配置</h1><ol><li>引入<code>wow.min.js</code> 和 <code>animated.min.css</code><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css&quot;</span> <span class="string">media=&quot;defer&quot;</span> <span class="string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/gh/graingert/wow@1.3.0/dist/wow.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">data-pjax</span> <span class="string">src=&quot;/js/fadeIn.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li><li>新建<code>fadeIn.js</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给首页文章卡片套上动画</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;recent-post-item&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="comment">// 必填项 打上wow类名</span></span><br><span class="line">    arr[i].classList.add(<span class="string">&quot;wow&quot;</span>),</span><br><span class="line">    <span class="comment">// 必填项 打上动画类名</span></span><br><span class="line">    arr[i].classList.add(<span class="string">&quot;animate__zoomIn&quot;</span>),</span><br><span class="line">    <span class="comment">// 动画执行时间</span></span><br><span class="line">    arr[i].setAttribute(<span class="string">&quot;data-wow-duration&quot;</span>, <span class="string">&quot;1.5s&quot;</span>),</span><br><span class="line">    <span class="comment">// 动画延迟多久后执行</span></span><br><span class="line">    arr[i].setAttribute(<span class="string">&quot;data-wow-delay&quot;</span>, <span class="string">&quot;0&quot;</span>),</span><br><span class="line">    <span class="comment">// 动画执行次数</span></span><br><span class="line">    arr[i].setAttribute(<span class="string">&quot;data-wow-iteration&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//给侧边栏套动画</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;card-widget&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr2.length;i++)&#123;</span><br><span class="line">    arr2[i].classList.add(<span class="string">&quot;wow&quot;</span>);</span><br><span class="line">    arr2[i].classList.add(<span class="string">&quot;animate__zoomIn&quot;</span>);</span><br><span class="line">    arr2[i].setAttribute(<span class="string">&quot;data-wow-duration&quot;</span>, <span class="string">&quot;1.5s&quot;</span>),</span><br><span class="line">    arr2[i].setAttribute(<span class="string">&quot;data-wow-delay&quot;</span>, <span class="string">&quot;0&quot;</span>),</span><br><span class="line">    arr2[i].setAttribute(<span class="string">&quot;data-wow-iteration&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//初始化函数</span></span><br><span class="line">wow = <span class="keyword">new</span> WOW(&#123;</span><br><span class="line">  <span class="attr">boxClass</span>: <span class="string">&#x27;wow&#x27;</span>,</span><br><span class="line">  <span class="comment">// 当用户滚动时显示隐藏框的类名称</span></span><br><span class="line">  <span class="attr">animateClass</span>: <span class="string">&#x27;animated&#x27;</span>,</span><br><span class="line">  <span class="comment">// 触发 CSS 动画的类名称（动画库默认为&quot;animate.css&quot;库）</span></span><br><span class="line">  <span class="attr">offset</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="comment">// 定义浏览器视口底部与隐藏框顶部之间的距离。</span></span><br><span class="line">  <span class="comment">// 当用户滚动并到达此距离时，将显示隐藏的框。</span></span><br><span class="line">  <span class="attr">mobile</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 在移动设备上打开/关闭wow.js。</span></span><br><span class="line">  <span class="attr">live</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment">// 在页面上检查新的 wow.js元素。</span></span><br><span class="line">&#125;)</span><br><span class="line">wow.init();</span><br></pre></td></tr></table></figure></li></ol><h1 id="可能会遇到的问题"><a href="#可能会遇到的问题" class="headerlink" title="可能会遇到的问题"></a>可能会遇到的问题</h1><ol><li>初始化wow尽量不要改变 否则会出错</li><li>动画名称的类是双<code>_</code> 建议直接复制</li><li>使用了pjax的情况下可能出现图片残存一下再隐藏的情况 暂时无法解决 或者使用大背景遮住等待图片完全消失</li><li><code>wowjs</code>是基于<code>animatedcss</code>动画的 可以去官方文档查看动画种类</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="魔改" scheme="https://zlinni.github.io/categories/%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="魔改" scheme="https://zlinni.github.io/tags/%E9%AD%94%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>RGB头像魔改</title>
    <link href="https://zlinni.github.io/posts/08ebb908b528/"/>
    <id>https://zlinni.github.io/posts/08ebb908b528/</id>
    <published>2022-01-01T13:34:46.000Z</published>
    <updated>2022-02-23T06:18:16.284Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip "><p>本教程为rgb头像魔改，替换原先的头像，可以自定义颜色。</p></div><details class="folding-tag" cyan><summary> 预览效果 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/logosucai.gif" alt=""></p>              </div>            </details><h1 id="主要配置"><a href="#主要配置" class="headerlink" title="主要配置"></a>主要配置</h1><ol><li>引入rgbHead.css<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* rgb头像魔改 */</span></span><br><span class="line"><span class="selector-class">.avatar-img</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">overflow</span>: visible;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">55px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> black;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>, <span class="built_in">rgb</span>(<span class="number">1</span>, <span class="number">255</span>, <span class="number">234</span>), <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">251</span>, <span class="number">14</span>), <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">238</span>, <span class="number">255</span>));</span><br><span class="line">    <span class="attribute">animation</span>: color <span class="number">3s</span> linear infinite;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.avatar-img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> <span class="number">0</span> <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> <span class="attribute">color</span> &#123;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">filter</span>: <span class="built_in">hue-rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 隐藏掉原先的头像 */</span></span><br><span class="line"><span class="selector-class">.avatar-img</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.centerBox</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 引入新的头像 url是你的头像位置 */</span></span><br><span class="line"><span class="selector-class">.newheadBox</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">../img/head/boji.jpg</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 防止和上面的菜单冲突 添加一下zindex */</span></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.site-page</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.child</span>):after &#123;</span><br><span class="line">    z-index: <span class="number">23</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*头像旋转*/</span></span><br><span class="line"><span class="keyword">@keyframes</span> turn &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">25%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">75%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">270deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.newheadBox</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: turn linear <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>引入addEle.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cardinfoBox = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;card-info&#x27;</span>)[<span class="number">0</span>].children[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(cardinfoBox);</span><br><span class="line"><span class="keyword">var</span> newheadBox = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">newheadBox.classList.add(<span class="string">&#x27;newheadBox&#x27;</span>);</span><br><span class="line">cardinfoBox.classList.add(<span class="string">&#x27;centerBox&#x27;</span>);</span><br><span class="line">cardinfoBox.insertBefore(newheadBox,cardinfoBox.childNodes[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="魔改" scheme="https://zlinni.github.io/categories/%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="魔改" scheme="https://zlinni.github.io/tags/%E9%AD%94%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>Aplayer设置与优化</title>
    <link href="https://zlinni.github.io/posts/6327a1b7c765/"/>
    <id>https://zlinni.github.io/posts/6327a1b7c765/</id>
    <published>2021-12-19T04:00:30.000Z</published>
    <updated>2022-02-23T06:18:07.661Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip "><p>本教程分为两个版本，一个是插件版本，一个是修改源代码的版本。两个版本选择一个即可。</p></div><details class="folding-tag" cyan><summary> 预览效果 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/music.gif" alt=""></p>              </div>            </details><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">源代码版(个人使用)</button></li><li class="tab"><button type="button" data-href="#test-2">插件版</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><ol><li>引入aplayer.pug<br>打开<code>themes\hexo-theme-butterfly\layout\includes\head.pug</code>里面添加<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include ./third-party/aplayer.pug</span><br></pre></td></tr></table></figure></li><li>创建aplayer.pug<br>在<code>themes\hexo-theme-butterfly\layout\includes\third-party下创建aplayer.pug</code> 内容如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if theme.aplayer &amp;&amp; theme.aplayer.enable</span><br><span class="line">.aplayer(data-id=theme.aplayer.id data-server=theme.aplayer.server data-type=theme.aplayer.type data-fixed=theme.aplayer.fixed data-mini=theme.aplayer.mini data-listFolded=theme.aplayer.listFolded data-order=theme.aplayer.order data-preload=theme.aplayer.preload)</span><br><span class="line">each item in theme.aplayer.css</span><br><span class="line">link(rel=&#x27;stylesheet&#x27;, href=item)</span><br><span class="line">each item in theme.aplayer.js</span><br><span class="line">script(src=item)</span><br></pre></td></tr></table></figure></li><li>打开主题配置文件<code>themes\hexo-theme-butterfly\_config.yml</code>在最后加入</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">aplayer:</span><br><span class="line">  enable: true</span><br><span class="line">  js:</span><br><span class="line">    - https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.js</span><br><span class="line">    - https://cdn.jsdelivr.net/npm/meting@1.2.0/dist/Meting.min.js</span><br><span class="line">  css:</span><br><span class="line">    - https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.css</span><br><span class="line">  id: 2841149029</span><br><span class="line">  server: netease </span><br><span class="line">  type: playlist</span><br><span class="line">  fixed: &#x27;true&#x27;</span><br><span class="line">  order: random</span><br><span class="line">  preload: none</span><br><span class="line">  listFolded: &#x27;false&#x27;</span><br></pre></td></tr></table></figure><p>其中参数见下图</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211217200814.png"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><div class="note primary flat"><p>转自<a href="https://akilar.top/posts/3afa069a/">akilar的博客</a></p></div><ol><li><p>在博客根目录 <code>[Blogroot]</code> 下打开终端，运行以下指令安装 <a href="https://www.npmjs.com/package/hexo-tag-aplayer">hexo-tag-aplayer</a> 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexp-tag-aplayer --save</span><br></pre></td></tr></table></figure></li><li><p>在站点配置文件 <code>[Blogroot]\_config.yml</code> 中新增配置项，建议直接加在最底下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># APlayer</span></span><br><span class="line"><span class="comment"># https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md</span></span><br><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>修改主题配置文件 <code>[Blogroot]\_config.butterfly.yml</code> 中关于 Aplayer 的配置内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>在主题配置文件 <code>[Blogroot]\_config.butterfly.yml</code> 的 inject 配置项中添加 Aplayer 的容器。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> <span class="string">data-id=&quot;5183531430&quot;</span> <span class="string">data-server=&quot;netease&quot;</span> <span class="string">data-type=&quot;playlist&quot;</span> <span class="string">data-fixed=&quot;true&quot;</span> <span class="string">data-mini=&quot;true&quot;</span> <span class="string">data-listFolded=&quot;false&quot;</span> <span class="string">data-order=&quot;random&quot;</span> <span class="string">data-preload=&quot;none&quot;</span> <span class="string">data-autoplay=&quot;false&quot;</span> <span class="string">muted&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在博客根目录 <code>[Blogroot]</code> 下打开终端，运行以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></li><li><p>关于更换歌单的问题，大部分同学都因为只更改了 <code>data-id</code> 的值，所以出现歌单加载不出的情况，此处需要注意，<code>data-id</code>、<code>data-server</code>、<code>data-type</code> 分别对应了<code>歌单的</code>id<code>，歌单的服务商、歌单的类型,所以需要确认这三项是一一对应的。如图中所示，找到网易云歌单的url，</code><a href="https://music.163.com/#/playlist?id=4907060762`">https://music.163.com/#/playlist?id=4907060762`</a>, 此处的<code>palylist</code>对应的就是<code>data-type</code>的值，<code>id</code>就是<code>data-id</code>的值，而网易云的<code>data-server</code>为<code>netease</code>，这个可以通过Aplayer的插件文档查阅到。<strong>只有三个参数对应正确才能正常加载歌单。</strong></p></li><li><p>Aplayer的网易云歌单接口时不时的会挂掉，所以如果你确定你配置正确，但是歌单还是没有出现。不妨去看看其他人的站点是不是也没有Aplayer标签了来判断是Aplayer本身接口的问题还是自己配置出错的问题。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="收入侧边栏-修改配色和歌词"><a href="#收入侧边栏-修改配色和歌词" class="headerlink" title="收入侧边栏+修改配色和歌词"></a>收入侧边栏+修改配色和歌词</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">收入侧边栏</button></li><li class="tab"><button type="button" data-href="#test-2">配色和歌词</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span><span class="selector-class">.aplayer-narrow</span> <span class="selector-class">.aplayer-body</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">66px</span> <span class="meta">!important</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.aplayer-body</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span> <span class="meta">!important</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.aplayer.aplayer-fixed .aplayer-lrc &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    position: fixed;</span><br><span class="line">    bottom: 10px;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    margin: 0;</span><br><span class="line">    z-index: 98;</span><br><span class="line">    pointer-events: none;</span><br><span class="line">    text-shadow: -1px -1px 0 #fff;  </span><br><span class="line">&#125;</span><br><span class="line">.aplayer .aplayer-lrc p &#123;</span><br><span class="line">color: #0ff5ff !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="不间断播放"><a href="#不间断播放" class="headerlink" title="不间断播放"></a>不间断播放</h1><div class="tip "><p>刚开始以为设置了pjax之后就会切换页面连续播放，但后面发现还是有问题，随后找文章发现是aplayer每次在进入页面就会重载一次。</p></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">解决方法1</button></li><li class="tab"><button type="button" data-href="#test-2">解决方法2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>引入1.2的metingjs里面的no-destroy方法<br>1.2版本metingjs下载地址：<a href="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/Meting.min.zip">点击下载</a><br>修改主题配置文件<code>themes\hexo-theme-butterfly\_config.yml</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">aplayer:</span><br><span class="line">  enable: true</span><br><span class="line">  js:</span><br><span class="line">    - https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.js</span><br><span class="line">    - ./lib/Meting.min.js</span><br><span class="line">  css:</span><br><span class="line">    - https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.css</span><br><span class="line">  id: 7123261369 //这个是你的歌单id</span><br><span class="line">  server: netease </span><br><span class="line">  type: playlist</span><br><span class="line">  fixed: &#x27;true&#x27;</span><br><span class="line">  order: list</span><br><span class="line">  preload: none</span><br><span class="line">  listFolded: &#x27;false&#x27;</span><br><span class="line">  autoplay: true</span><br></pre></td></tr></table></figure><br>新建addnodestory.js，内容如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aplayer = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;aplayer&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">aplayer.classList.add(<span class="string">&#x27;no-destroy&#x27;</span>);</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>使用插件版</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="关于导入歌单"><a href="#关于导入歌单" class="headerlink" title="关于导入歌单"></a>关于导入歌单</h1><p>网易云右键你想要导入的歌单并复制链接，用网页打开<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211217204804.png" alt="此处id就是你的歌单id"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="魔改" scheme="https://zlinni.github.io/categories/%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="魔改" scheme="https://zlinni.github.io/tags/%E9%AD%94%E6%94%B9/"/>
    
  </entry>
  
</feed>
