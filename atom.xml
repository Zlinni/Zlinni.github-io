<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zlinni&#39;s Blog For Study</title>
  
  <subtitle>一个专门做笔记的博客</subtitle>
  <link href="https://zlinni.github.io/atom.xml" rel="self"/>
  
  <link href="https://zlinni.github.io/"/>
  <updated>2022-02-09T11:33:28.813Z</updated>
  <id>https://zlinni.github.io/</id>
  
  <author>
    <name>Zlinni</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MileStone项目杂谈</title>
    <link href="https://zlinni.github.io/posts/844c2cfdc4a5/"/>
    <id>https://zlinni.github.io/posts/844c2cfdc4a5/</id>
    <published>2022-02-09T10:14:58.000Z</published>
    <updated>2022-02-09T11:33:28.813Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>最近博客没更新的原因是，emm在搞一个新的项目，完全的从0开始没有参考任何项目视频，然后现在也是项目大体功能要做完了，就在这里写一下本次项目踩过的坑以及一些经验，算是一期杂谈。<br>源码地址：<a href="">传送门</a></p></div><h1 id="主体演示"><a href="#主体演示" class="headerlink" title="主体演示"></a>主体演示</h1><div class="note primary flat"><p>还没制作完成 就先放个图吧</p></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">效果展示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220209182158.png" alt="不知道为什么自己很喜欢这种纯黑风格"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="构建工具-技术栈"><a href="#构建工具-技术栈" class="headerlink" title="构建工具+技术栈"></a>构建工具+技术栈</h1><p>编译软件：vscode<br>开发框架: vue2<br>打包工具：vue-cli<br>UI：vuetify<br>icon：阿里巴巴<br>其他：vuex， vue-router，git<br>插件：pubsub，nanoid，less-loader</p><h1 id="组件列表"><a href="#组件列表" class="headerlink" title="组件列表"></a>组件列表</h1><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220209182856.png" alt=""></p><h1 id="项目难点"><a href="#项目难点" class="headerlink" title="项目难点"></a>项目难点</h1><p>本次项目综合了很多方面的问题，比如vuex模块化加本地存储，对所有任务的时间排序，以及vuetify的栅格系统等等，各种方面的问题哈哈，但好在最后都能够解决出来</p><h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端进阶" scheme="https://zlinni.github.io/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue3</title>
    <link href="https://zlinni.github.io/posts/725dcb7bbb15/"/>
    <id>https://zlinni.github.io/posts/725dcb7bbb15/</id>
    <published>2022-01-25T02:28:40.000Z</published>
    <updated>2022-01-25T08:11:09.766Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>本文主要用于记录vue3的使用，参考视频<a href='https://www.bilibili.com/video/BV1Zy4y1K7SH?p=1'>【尚硅谷Vue2.0+Vue3.0全套教程丨vuejs从入门到精通】</a></p></div><h1 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">Vue3的提升</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125103708.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125103846.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125103919.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="创建Vue3工程"><a href="#创建Vue3工程" class="headerlink" title="创建Vue3工程"></a>创建Vue3工程</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">vuecli</button></li><li class="tab"><button type="button" data-href="#test-3">vite</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>两种方法 一种是传统的vuecli 另外一种是vite</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>使用vuecli创建该工程需要确保脚手架的版本在4.5以上<br>使用指令可以查看<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue -V</span><br><span class="line">or</span><br><span class="line">vue --version</span><br></pre></td></tr></table></figure><br>否则重新安装<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><br>创建<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vue_test</span><br></pre></td></tr></table></figure><br>启动<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>先看一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125104523.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125105053.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="分析工程解构"><a href="#分析工程解构" class="headerlink" title="分析工程解构"></a>分析工程解构</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>主要查看vue3和2有什么结构和写法上面的区别</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>从mainjs上面看 引入和实例化app的方法不一样了 而且也不能用vue2的形式写了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入的不再是vue构造函数了 而是一个精简版的createApp工厂函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">createApp(App).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>vue3不需要根标签了 在vue2里面需要用div当做根标签编写<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125111435.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>setup是vue3使用组合api的地方 结合了之前2中的data methods等</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>setup是一个函数 里面可以直接定义变量 方法等<br>返回有两种情况 一种是返回定义的变量 此时模板中可以直接使用该变量<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;这是a值&#123;&#123; a &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;这是b值&#123;&#123; b &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    let a = 1;</span><br><span class="line">    let b = 2;</span><br><span class="line">    return &#123;</span><br><span class="line">      a,</span><br><span class="line">      b,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>返回的第二种情况是 返回一个渲染函数 该函数的html元素可以直接被渲染<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; h &#125; from &quot;vue&quot;;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">    return () =&gt; h(&quot;h1&quot;, &quot;hahahah&quot;);</span><br></pre></td></tr></table></figure><br>除此之外 data methods写法可以正常访问setup的数据 但是反过来不行 即vue2可以访问vue3 但3不能访问2 而且最好两者不要混用<br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125132019.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="ref函数"><a href="#ref函数" class="headerlink" title="ref函数"></a>ref函数</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>ref函数可以将数据变成响应式的，还用于处理对象类型</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>案例如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;学习ref&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;jojoname is &#123;&#123;jojo&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;changeJOJO&quot;&gt;点击改变jojo&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 引入ref</span><br><span class="line">import &#123; h, ref &#125; from &quot;vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    // 将数据变成响应式</span><br><span class="line">    let jojo = ref(&quot;jotaro&quot;);</span><br><span class="line">    console.log(jojo);</span><br><span class="line">    function changeJOJO() &#123;</span><br><span class="line">      // 改变数据的方式</span><br><span class="line">      jojo.value = &#x27;jostar&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      jojo,</span><br><span class="line">      changeJOJO</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>注意的点是 初学使用setup容易忘记最后将模板需要的变量和方法返回出去<br>然后 数据变成响应式之后 修改数据需要<code>xxx.value</code>的方式修改<br>最后是ref的数据 看上去像是做了数据代理之后的结果 这个RefImpl的意思是reference 和 implement的组合 这个对象称为引用对象<br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125134254.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="reative函数-处理对象类型数据"><a href="#reative函数-处理对象类型数据" class="headerlink" title="reative函数 处理对象类型数据"></a>reative函数 处理对象类型数据</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>reactive函数主要用于处理对象类型数据 并且它是深层次处理的</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>用ref处理对象<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;学习ref&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;jojoname is &#123;&#123;jojo&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;jojo author is &#123;&#123;jojoHome.author&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;changeJOJO&quot;&gt;点击改变jojo&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 引入ref</span><br><span class="line">import &#123; h, ref &#125; from &quot;vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    // 将数据变成响应式</span><br><span class="line">    let jojo = ref(&quot;jotaro&quot;);</span><br><span class="line">    let jojoHome = ref(&#123;</span><br><span class="line">      author:&#x27;huangmu&#x27;,</span><br><span class="line">      jojoone:&#x27;幻影之血&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    console.log(jojoHome);</span><br><span class="line">    function changeJOJO() &#123;</span><br><span class="line">      // 改变数据的方式</span><br><span class="line">      jojo.value = &#x27;jostar&#x27;;</span><br><span class="line">      jojoHome.value.author = &#x27;dio哒&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      jojo,</span><br><span class="line">      jojoHome,</span><br><span class="line">      changeJOJO</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>在上述ref的使用过程我们知道 用ref将对象变成响应式的 修改的时候需要对象点value点具体的属性<br>而reactive则不需要点value 而且可以检测到深度的数据<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;学习ref&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;jojoname is &#123;&#123;jojo&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;jojo author is &#123;&#123;jojoHome.author&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;find 套娃 is &#123;&#123;jojoHome.a.b.c&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;changeJOJO&quot;&gt;点击改变jojo&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 引入ref</span><br><span class="line">import &#123; h, reactive, ref &#125; from &quot;vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    // 将数据变成响应式</span><br><span class="line">    let jojo = ref(&quot;jotaro&quot;);</span><br><span class="line">    let jojoHome = reactive(&#123;</span><br><span class="line">      author:&#x27;huangmu&#x27;,</span><br><span class="line">      jojoone:&#x27;幻影之血&#x27;,</span><br><span class="line">      a:&#123;</span><br><span class="line">        b:&#123;</span><br><span class="line">          c:&#x27;套娃呢？&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    console.log(jojoHome);</span><br><span class="line">    function changeJOJO() &#123;</span><br><span class="line">      // 改变数据的方式</span><br><span class="line">      jojo.value = &#x27;jostar&#x27;;</span><br><span class="line">      jojoHome.author = &#x27;dio哒&#x27;;</span><br><span class="line">      jojoHome.a.b.c = &#x27;对啊&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      jojo,</span><br><span class="line">      jojoHome,</span><br><span class="line">      changeJOJO</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125161054.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端进阶" scheme="https://zlinni.github.io/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://zlinni.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue-Router</title>
    <link href="https://zlinni.github.io/posts/8bf806511a1a/"/>
    <id>https://zlinni.github.io/posts/8bf806511a1a/</id>
    <published>2022-01-19T05:45:03.000Z</published>
    <updated>2022-01-31T14:06:48.453Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tip cogs"><p>本文主要用于记录vue路由的使用，参考视频<a href='https://www.bilibili.com/video/BV1Zy4y1K7SH?p=1'>【尚硅谷Vue2.0+Vue3.0全套教程丨vuejs从入门到精通】</a></p></div><h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">SPA</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>是vue的一个插件库 专门用于实现spa应用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>全称single page web application<br>整个应用只有一个完整的页面<br>点击页面的xx链接不会刷新页面 只会做局部更新<br>数据需要通过ajax请求获取</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">注意事项</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>下面以单页面多组件跳转为例子讲解router的基本使用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>安装vuerouter<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-router</span><br></pre></td></tr></table></figure><br>创建router文件夹 写入indexjs 并导入相关组件的地址和名字<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入vuerouter</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">// 导入相关组件</span></span><br><span class="line"><span class="keyword">import</span> JOJO <span class="keyword">from</span> <span class="string">&#x27;../components/JOJO.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> DIO <span class="keyword">from</span> <span class="string">&#x27;../components/DIO.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/jojo&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:JOJO</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/dio&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:DIO</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>mainjs中导入以及应用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">render</span>:<span class="function"><span class="params">h</span>=&gt;</span>h(App),</span><br><span class="line">    <span class="attr">router</span>:router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>在app需要显示组件跳转的链接a标签改为<code>router-link</code>标签 并设置<code>to=&#39;/xxx地址&#39;</code><br>可以自行添加<code>active-class</code>属性(前提是css里面有这个样式)跳转后实现效果<br>最后在要显示组件的地方 换成<code>&lt;router-view&gt;&lt;/router-view&gt;</code>标签<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;开始学习router&lt;/h1&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;div class=&quot;middle&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;navi&quot;&gt;</span><br><span class="line">        &lt;router-link to=&quot;/jojo&quot; class=&quot;list-item&quot; active-class=&quot;active&quot;&gt;点我显示jojo组件&lt;/router-link&gt;</span><br><span class="line">        &lt;router-link to=&quot;/dio&quot; class=&quot;list-item&quot; active-class=&quot;active&quot;&gt;点我显示dio组件&lt;/router-link&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;compon&quot;&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure><br>总结一图流<br><img src="./Vue-route/Snipaste_2022-01-19_19-30-10.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ol><li>开发当中 被路由使用的组件叫做路由组件 其他的自己亲自注册亲自写的叫做一般组件<br>前者放在pages文件夹中 后者放在components文件夹中</li><li>被路由使用的组件 会在页面需要的时候挂载 不需要的时候销毁</li><li>每个路由器都有自己的<code>$route</code>属性 里面存着自己的路由信息</li><li>整个应用只有一个router 可以通过组件的<code>$router</code>属性获取</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>嵌套路由为了解决组件中想继续显示子组件的问题 使用到了children配置项</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>定义好子组件<br>在路由中引入子组件 注意这里使用了children配置项 也是配置数组对象 且path不写斜杠<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入vuerouter</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">// 导入相关组件</span></span><br><span class="line"><span class="keyword">import</span> JOJO <span class="keyword">from</span> <span class="string">&#x27;../pages/JOJO.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> DIO <span class="keyword">from</span> <span class="string">&#x27;../pages/DIO.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Msg <span class="keyword">from</span> <span class="string">&#x27;../pages/Msg.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">&#x27;../pages/News.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/jojo&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:JOJO,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 这里不用写斜杠了</span></span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;msg&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:Msg</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:News</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/dio&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:DIO</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>引入在组件中引入子组件 注意routerlink标签要写对应的组件下子组件的地址<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;bo ku wa jojo哒&lt;/h1&gt;</span><br><span class="line">    &lt;ul class=&quot;jojotab&quot;&gt;</span><br><span class="line">      &lt;!-- 这里不是写/msg了 是写/组件/子组件 --&gt;</span><br><span class="line">      &lt;li&gt;&lt;router-link to=&quot;/jojo/msg&quot; class=&quot;tabshow&quot;&gt;Msg&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;router-link to=&quot;/jojo/news&quot;  class=&quot;tabshow&quot;&gt;News&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;ul&gt;&lt;router-view&gt;&lt;/router-view&gt;&lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><br>注意的点 需要写routerview标签指定位置显示</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="路由的query参数"><a href="#路由的query参数" class="headerlink" title="路由的query参数"></a>路由的query参数</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">命名路由</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>利用路由的query可以实现同个组件点击切换不同的内容</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>先定义好组件 这里是以messageList为例子 点击列表中的选项 下方显示出传递的内容<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220120131547.png" alt=""><br>下方是组件Detail显示传递过来的信息 注意符号的使用<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li&gt;消息id是：&#123;&#123;$route.query.id&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;消息title是：&#123;&#123;$route.query.title&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><br>然后在路由的news下面导入以及定义detail<br>回到news 定义好列表 修改跳转的地址<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;老东西你的替身最强啦&lt;/li&gt;</span><br><span class="line">      &lt;li v-for=&quot;m in messageList&quot; :key=&quot;m.id&quot;&gt;</span><br><span class="line">        &lt;!-- 跳转路由并携带query参数 to的字符串写法--&gt;</span><br><span class="line">        &lt;!-- &lt;router-link :to=&quot;`/jojo/news/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;&gt;&#123;&#123; m.title &#125;&#125;&lt;/router-link&gt; --&gt;</span><br><span class="line">        &lt;!-- 跳转路由并携带query参数 to的对象写法--&gt;</span><br><span class="line">        &lt;router-link</span><br><span class="line">          :to=&quot;&#123;</span><br><span class="line">            path: &#x27;/jojo/news/detail&#x27;,</span><br><span class="line">            query: &#123;</span><br><span class="line">              id: m.id,</span><br><span class="line">              title: m.title,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;&quot;</span><br><span class="line">          &gt;&#123;&#123; m.title &#125;&#125;&lt;/router-link</span><br><span class="line">        &gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      messageList: [</span><br><span class="line">        &#123; id: &quot;001&quot;, title: &quot;msg001&quot; &#125;,</span><br><span class="line">        &#123; id: &quot;002&quot;, title: &quot;msg002&quot; &#125;,</span><br><span class="line">        &#123; id: &quot;003&quot;, title: &quot;msg003&quot; &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>注意跳转路由携带query参数的写法 推荐第二种 比较清晰<br>必须注意绑定to</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220120132306.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="params参数和路由器的props配置"><a href="#params参数和路由器的props配置" class="headerlink" title="params参数和路由器的props配置"></a>params参数和路由器的props配置</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>params参数接收基本和query相同 但是路径path要写成name<br>路由的props配置可以简化路由组件的编写</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>params<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220120134626.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220120134658.png" alt=""><br>props<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220120134727.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="开启replace操作"><a href="#开启replace操作" class="headerlink" title="开启replace操作"></a>开启replace操作</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220120162259.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>不借助routerlink的路由导航就是编程式路由导航<br>如果要使用button或者其他非a标签进行跳转实现的时候，routerlink就没有作用了<br>以及定时器自动跳转（没有点击用不到a标签）</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>主要内容<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124102705.png" alt=""><br>push和replace部分<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">        &lt;button @click=&quot;pushShow(m)&quot;&gt;push&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;replaceShow(m)&quot;&gt;replace&lt;/button&gt;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">methods: &#123;</span><br><span class="line">    pushShow(m) &#123;</span><br><span class="line">      this.$router.push(&#123;</span><br><span class="line">        path: &quot;/jojo/news/detail&quot;,</span><br><span class="line">        query: &#123;</span><br><span class="line">          id: m.id,</span><br><span class="line">          title: m.title,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    replaceShow(m) &#123;</span><br><span class="line">      this.$router.replace(&#123;</span><br><span class="line">        path: &quot;/jojo/news/detail&quot;,</span><br><span class="line">        query: &#123;</span><br><span class="line">          id: m.id,</span><br><span class="line">          title: m.title,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><br>前进后退和go部分<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    &lt;button @click=&quot;back&quot;&gt;后退&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;forward&quot;&gt;前进&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;testGo&quot;&gt;测试一下go&lt;/button&gt;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">  methods: &#123;</span><br><span class="line">    back()&#123;</span><br><span class="line">      this.$router.back();</span><br><span class="line">    &#125;,</span><br><span class="line">    forward()&#123;</span><br><span class="line">      this.$router.forward();</span><br><span class="line">    &#125;,</span><br><span class="line">    testGo()&#123;</span><br><span class="line">      // 正数前进 负数后退</span><br><span class="line">      this.$router.go(3)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><br>总结一波流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124102914.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="路由缓存"><a href="#路由缓存" class="headerlink" title="路由缓存"></a>路由缓存</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>为了解决当页面中输入了相关内容后进行跳转最后回去还保留内容的问题<br>原因是组件的切换会重新挂载和销毁<br>利用到keepalive标签以及include属性</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>msg里面定义输入框<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li&gt;name:&lt;input type=&quot;text&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;stand:&lt;input type=&quot;text&quot;&gt;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><br>jojo里面 （使用到输入框的父组件）设置keepalive<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;bo ku wa jojo哒&lt;/h1&gt;</span><br><span class="line">    &lt;ul class=&quot;jojotab&quot;&gt;</span><br><span class="line">      &lt;!-- 这里不是写/msg了 是写/组件/子组件 --&gt;</span><br><span class="line">      &lt;li&gt;&lt;router-link to=&quot;/jojo/msg&quot; class=&quot;tabshow&quot;&gt;Msg&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;router-link to=&quot;/jojo/news&quot; class=&quot;tabshow&quot;&gt;News&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;keep-alive include=&quot;Msg&quot;&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><br>注意 keepalive包裹的是routerview标签<br>include属性是指定缓存哪个组件 不写的话默认全部<br>最后特别注意 使用到include的时候 对应的组件要设置name<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;Msg&#x27;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124104807.png" alt=""></p><p>补充说明<br>如果想缓存多个路由组件 使用到<code>v-bind</code>和数组写法<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124104954.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="两个新的生命周期钩子"><a href="#两个新的生命周期钩子" class="headerlink" title="两个新的生命周期钩子"></a>两个新的生命周期钩子</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>如果使用上述的缓存路由就会出现一个问题 缓存组件中的东西没有执行销毁<br>引出两个路由的生命周期钩子 activated 和 deactivated</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>激活 activated<br>将之前需要写在mounted里面的功能写入 当切换到该组件就生效<br>失活 deactivated<br>将之前需要写在销毁之前的功能写入 当离开该组件生效<br>一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124111225.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="全局路由守卫"><a href="#全局路由守卫" class="headerlink" title="全局路由守卫"></a>全局路由守卫</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>用于判断某些条件的执行是否满足才进入到路由的下一级</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>全局前置路由：每一次切换前都被调用<br>要用到全局路由守卫就必须接收路由再暴露出去<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> router =  <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [&#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/jojo&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: JOJO,</span><br><span class="line">            <span class="attr">children</span>: [&#123;</span><br><span class="line">                    <span class="comment">// 这里不用写斜杠了</span></span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;msg&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: Msg</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: News,</span><br><span class="line">                    <span class="attr">children</span>: [&#123;</span><br><span class="line">                        <span class="attr">path</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                        <span class="attr">component</span>: Detail,</span><br><span class="line">                        <span class="function"><span class="title">props</span>(<span class="params">$route</span>)</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> &#123;</span><br><span class="line">                                <span class="attr">id</span>: $route.query.id,</span><br><span class="line">                                <span class="attr">title</span>: $route.query.title</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/dio&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: DIO</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(to,<span class="keyword">from</span>);</span><br><span class="line">    <span class="keyword">if</span>(to.path === <span class="string">&#x27;/jojo/news&#x27;</span>)&#123;</span><br><span class="line">        next();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;去往news&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><br>用到了beforeEach的方法 值得一提的是三个参数<br>to代表的是去往的位置<br>from代表从哪里来<br>next代表是否执行下一步<br>example：先点击jojo 后点击dio 就出现to里面有dio from里面有jojo<br>对于to 和 from 两者携带的参数如下<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124151706.png" alt=""><br>其中name指的是路由的名字 这里没有定义所以是undefined<br>可以在meta里面放入个人定义的信息 这个属性称之为路由元信息<br>就不用逐个判断这么复杂了 只要路由守卫判断路由信息里面是否有存在这么个meta里面的属性 就可以执行或不执行下面的步骤<br>且注意没有定义的时候 就是undefined 自然为假 所以只用定义真的情况<br>此处在news里面设置meta<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router =  <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [&#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/jojo&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: JOJO,</span><br><span class="line">            <span class="attr">children</span>: [&#123;</span><br><span class="line">                    <span class="comment">// 这里不用写斜杠了</span></span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;msg&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: Msg</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: News,</span><br><span class="line">                    <span class="attr">children</span>: [&#123;</span><br><span class="line">                        <span class="attr">path</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                        <span class="attr">component</span>: Detail,</span><br><span class="line">                        <span class="function"><span class="title">props</span>(<span class="params">$route</span>)</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> &#123;</span><br><span class="line">                                <span class="attr">id</span>: $route.query.id,</span><br><span class="line">                                <span class="attr">title</span>: $route.query.title</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;],</span><br><span class="line">                    <span class="attr">meta</span>:&#123;<span class="attr">isAuth</span>:<span class="literal">true</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/dio&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: DIO</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(to,<span class="keyword">from</span>);</span><br><span class="line">    <span class="keyword">if</span>(to.meta.isAuth)&#123;</span><br><span class="line">        next();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;去往news&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><br>全局后置守卫<br>没有next功能 常用于网页标题的切换<br>如果只使用前置守卫去切换这个标题的话 会出现一瞬间的网页标题错误等细节问题<br>所以使用后置守卫写比较好<br>另外修改标题的方法是<code>document.title = xxx</code>这里最好使用meta定义的title<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124153523.png" alt=""><br>总结一波流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124153608.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="独享路由守卫"><a href="#独享路由守卫" class="headerlink" title="独享路由守卫"></a>独享路由守卫</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>如果只想对单个路由进行权限操作 则可以使用独享路由守卫来执行</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>beforeEnter 也有to from next三个参数 类似于beforeEach<br>但独享路由守卫只有前置路由守卫 没有后置<br>一图流：<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124154108.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="组件路由守卫"><a href="#组件路由守卫" class="headerlink" title="组件路由守卫"></a>组件路由守卫</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>顾名思义就是在组件里面写路由守卫</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>两个方法<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124154242.png" alt=""><br>与前置后置守卫不同的一点是<br>从jojo到dio 会产生一次前置 一次后置<br>而组件路由守卫的话<br>从jojo到dio 会产生一次beforeRouteEnter 然后 当点击到其他的内容 比如msg 才会产生beforeRouteLeave<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124154607.png" alt=""><br>注意一点 如果不next 放行 那么就是进不去也出不来<br>一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124155056.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="history模式与hash模式"><a href="#history模式与hash模式" class="headerlink" title="history模式与hash模式"></a>history模式与hash模式</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue的路由有两种工作模式 hash 和 history 默认是hash</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>hash模式 地址栏井号斜杠后面的所有参数都是hash值 特点是不随http请求发给服务器<br>意味着如果后面写了很多东西 它也不会发给服务器的<br>history模式 没有井号 比较美观<br>默认hash模式 切换成history模式<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124155759.png" alt=""><br>此外 hash模式的兼容性比history好<br>且 如果项目上线的时候 打包为history模式 会在刷新的时候出现404问题 因为服务端没有配置相关地址 但hash 就不会 因为井号后面不会发给服务端<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124162251.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端进阶" scheme="https://zlinni.github.io/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://zlinni.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>数组去重的八种方法</title>
    <link href="https://zlinni.github.io/posts/1bdac88a9cd9/"/>
    <id>https://zlinni.github.io/posts/1bdac88a9cd9/</id>
    <published>2022-01-14T07:57:18.000Z</published>
    <updated>2022-01-14T11:03:06.761Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>本文主要用于讲解以及记录js数组去重的八种方法 主要学习其中的编程思想</p></div><h1 id="方法总览"><a href="#方法总览" class="headerlink" title="方法总览"></a>方法总览</h1><ol><li>第三方库<br>下面推荐underscore和loadash，这两个库也是官网直接下载下来然后引入即可<br>效果如下<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220114160343.png" alt=""><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./underscore-min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">500</span>];</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> result = _.uniq(arr);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    getUniqueArray();</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>es6的set方法<br>set方法里面的东西是独一无二的 利用这个特性去重<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">500</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 两种都可以 推荐上面的</span></span><br><span class="line">    <span class="comment">// var result = [...new Set(arr)]</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="built_in">Array</span>.from(<span class="built_in">Set</span>(arr));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">getUniqueArray();</span><br></pre></td></tr></table></figure></li><li>遍历数组再用indexOf判断 如果不存在相同的就push进去<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">500</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(result.indexOf(item) === -<span class="number">1</span>)result.push(item);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">getUniqueArray();</span><br></pre></td></tr></table></figure></li><li>利用filter过滤 原理是利用indexOf会返回数组下标 并且有两个一样的元素的时候 只会返回第一个的下标 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">500</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = arr.filter(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr.indexOf(item) === index</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">getUniqueArray();</span><br></pre></td></tr></table></figure></li><li>利用reduce方法 以及include方法 迭代的结果里面是否有相同<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">500</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = arr.reduce(<span class="function">(<span class="params">pre,current</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pre.includes(current)?pre:[...pre,current]</span><br><span class="line">    &#125;,[])</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">getUniqueArray();</span><br></pre></td></tr></table></figure></li><li>利用对象的特性 对象中的key是唯一的 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">500</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">item,index</span>) =&gt;</span> &#123;</span><br><span class="line">        result[arr[index]] = <span class="string">&#x27;sss&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    result = <span class="built_in">Object</span>.keys(result).map(<span class="function"><span class="params">item</span>=&gt;</span>~~item);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">getUniqueArray();</span><br></pre></td></tr></table></figure></li><li>基本的算法 数组去重 对比两数组<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">500</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    loop: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] === arr[j]) <span class="keyword">continue</span> loop;</span><br><span class="line">        &#125;</span><br><span class="line">        result.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">getUniqueArray();</span><br></pre></td></tr></table></figure></li><li>利用排序后的数组 相邻有相同的则重复的特性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">500</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    sortArr = arr.sort();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sortArr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sortArr[i] !== sortArr[i + <span class="number">1</span>]) result.push(sortArr[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br><span class="line">getUniqueArray();</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>上面写到的八种方法还是看需求使用比较好 有的方法虽然可以解决问题 但没有考虑到时间复杂度之类的 尽量使用简单的方法或者第三方库的方法吧</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面试" scheme="https://zlinni.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试" scheme="https://zlinni.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>LandingPage落地页</title>
    <link href="https://zlinni.github.io/posts/660fac1a5939/"/>
    <id>https://zlinni.github.io/posts/660fac1a5939/</id>
    <published>2022-01-09T02:35:44.000Z</published>
    <updated>2022-02-09T10:13:57.697Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>本文介绍了落地页的内容，设计风格以及落地页对用户的吸引作用。</p></div><h1 id="何为LandingPage"><a href="#何为LandingPage" class="headerlink" title="何为LandingPage"></a>何为LandingPage</h1><p>landingpage是一种网页设计风格制作的网页，中文名是落地页，像下面这几种<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220209180635.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220209180709.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220209180741.png" alt=""><br>它们都有非常鲜明的特点，就是非常集中式的引导用户进入某个选项。相比起传统的网页，落地页不需要用户去探索页面的各种内容，而是专于某种目的，比如推销产品，展现简历内容等。</p><h1 id="LandingPage的制作"><a href="#LandingPage的制作" class="headerlink" title="LandingPage的制作"></a>LandingPage的制作</h1><p>其实landingpage的制作并不太需要很好的前端能力，甚至现在很多开发网页都可以使用框架生成或者软件生成，这样有助于设计者更专注于界面的设计而非功能的使用，并且因为落地页基本不需要后台的功能，所以落地页基本是静态的网站，也就加快了网页的访问速度，减少用户的等待时间，进一步留住用户提高访问量。<br>另外，正常的网页中目标导向太多，导致用户不知道应该点哪个以进行下一步的选择，这样不仅会导致使用者的流失，也会导致设计者投资的广告费用白白浪费，所以一个正确的landingpage应该具有以下几点要求</p><ol><li>精美的设计</li><li>收集信息的表格</li><li>详细的产品或服务描述</li><li>以往客户评价</li></ol><p>关于实际制作landing page 需要使用到wordpress软件里面的一个插件brizy<br>下面提供视频演示地址<br><div class="note primary flat"><p><a href="https://www.bilibili.com/video/BV17h411R7vF?from=search&amp;seid=10740205905332206372&amp;spm_id_from=333.337.0.0">视频地址</a></p></div></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>依我个人而言，更喜欢landing page这种类型的页面制作，因为它的美感肯定是大于常规的电商网站的，而且也不会用到很多的功能，但是要练手项目的话，还是建议选择功能制作比较多的页面，这样能够体现自己的编程能力，以及解决问题的能力。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="设计" scheme="https://zlinni.github.io/categories/%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="设计" scheme="https://zlinni.github.io/tags/%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>每日一面，快乐无限</title>
    <link href="https://zlinni.github.io/posts/427f696eb6e1/"/>
    <id>https://zlinni.github.io/posts/427f696eb6e1/</id>
    <published>2022-01-09T02:35:44.000Z</published>
    <updated>2022-02-03T03:07:17.735Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>本文主要用于记录前端面试常考题</p></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">JavaScript</button></li><li class="tab"><button type="button" data-href="#test-2">Vue</button></li><li class="tab"><button type="button" data-href="#test-3">项目</button></li><li class="tab"><button type="button" data-href="#test-4">webpack</button></li><li class="tab"><button type="button" data-href="#test-5">布局</button></li><li class="tab"><button type="button" data-href="#test-6">算法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-4"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-5"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-6"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">防抖</button></li><li class="tab"><button type="button" data-href="#test-2">节流</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>防抖主要是为了不让事件同一时间内触发多次导致请求多次的问题<br>防抖有两种情况<br>第一种是只触发第一次<br>第二种是只触发最后一次<br>防抖的主要写法如下: 但会产生一个问题 就是一开始必须等待才能进行<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="comment">// const msg = document.getElementById(&#x27;msg&#x27;);</span></span></span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, debounce(submit), <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">submit</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> t = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (t) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">clearTimeout</span>(t);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            t = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span></span><br><span class="line"><span class="javascript">            &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol><li>用<code>debounce</code>传入参数 并且注意最后返回的是一个函数</li><li>设置t来决定定时器的销毁和开启</li><li>定时器用箭头函数 让<code>this</code>指向<code>window</code></li><li>apply将<code>this</code>和<code>arguments</code>传给<code>submit</code></li></ol><p>解决上面问题的做法如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="comment">// const msg = document.getElementById(&#x27;msg&#x27;);</span></span></span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, debounce(submit, <span class="number">2000</span>), <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">submit</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, timer</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> t = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> firstclick = !t;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (firstclick) &#123;</span></span><br><span class="line"><span class="javascript">                fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            t = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                t = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">            &#125;, timer);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>原理是判断是否为第一次执行 如果是的话直接请求 然后让定时器将t经过一定时间还原，这样下一次就又是第一次 否则的话 因为t还没还原 所以不会输出；</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>节流是指函数在一定时间间隔内只能执行一次，从而减少一段时间内的触发频率<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="comment">// const msg = document.getElementById(&#x27;msg&#x27;);</span></span></span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, throttle(submit, <span class="number">2000</span>), <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">submit</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e, <span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> begin = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cur = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (cur - begin &gt;= delay) &#123;</span></span><br><span class="line"><span class="javascript">                fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span></span><br><span class="line"><span class="javascript">                begin = cur;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol><li>用<code>throttle</code>传入参数 并且注意最后返回的是一个函数</li><li>用<code>begin</code>定义一开始的时间，用<code>cur</code>定义当前时间 </li><li>最后<code>begin</code>要变成<code>cur</code></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="手写深浅拷贝"><a href="#手写深浅拷贝" class="headerlink" title="手写深浅拷贝"></a>手写深浅拷贝</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">浅拷贝</button></li><li class="tab"><button type="button" data-href="#test-2">深拷贝</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>浅拷贝顾名思义就是直接拷贝对象上面的内容 但是如果新的对象的属性发生了改变，原先对象上面的属性也会随之改变<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> oldObj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jotaro&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="attr">color</span>:[<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>],</span><br><span class="line">    <span class="attr">friend</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;jostar&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newObj = oldObj;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;oldObj&#x27;</span>,oldObj);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;newObj&#x27;</span>,newObj);</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>深拷贝的话，新的对象发生改变不会影响旧的对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> oldObj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jotaro&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="attr">color</span>:[<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>],</span><br><span class="line">    <span class="attr">friend</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;jostar&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 深拷贝的话 在复制对象属性的基础上 不能对原先对象的属性进行改变</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 如果传进来的参数不是对象 或者是 空 直接返回原先参数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>||obj===<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义一个result 用于复制参数</span></span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    <span class="comment">// 那么只剩数组和对象两种可能 继续判断 并改变result的类型</span></span><br><span class="line">    <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">        result = [];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 之后就是把obj里面的key拿出来放到result里面 这样就完成了初步的深拷贝</span></span><br><span class="line">    <span class="comment">// for(let key in obj)&#123;</span></span><br><span class="line">    <span class="comment">//     result[key] = obj[key];</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 会发现有一点缺陷就是 如果对象里面包含了对象 那么最后做出的修改 还是浅拷贝类型的修改</span></span><br><span class="line">    <span class="comment">// 解决方法是 递归obj[key] 让他继续判断再传递</span></span><br><span class="line">    <span class="comment">// 还有一个可以优化的地方 就是对象原型上面的属性不应该去拷贝 所以使用到一个方法</span></span><br><span class="line">    <span class="comment">// 只会拷贝对象自身的属性</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj.hasOwnProperty(key))&#123;</span><br><span class="line">            result[key] = deepClone(obj[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = deepClone(oldObj);</span><br><span class="line">newObj.age = <span class="number">99</span>;</span><br><span class="line">newObj.color[<span class="number">0</span>] = <span class="string">&#x27;yellow&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;oldObj&#x27;</span>,oldObj);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;newObj&#x27;</span>,newObj);</span><br></pre></td></tr></table></figure><br>分几步走</p><ol><li>判断obj不为对象 和 为空的情况 直接返回obj</li><li>定义一个result用来放结果 再根据传进来的obj 判断它是否为对象或者数组 相应的改变result的类型</li><li>for循环将obj的key传给result的key 注意要用递归的形式</li><li>优化 只拷贝对象的属性 不拷贝对象原型的属性 </li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>需求 已知数组<code>arr[1,2,[3,[4,[5,6]]]]</code> 将其扁平化处理成<code>[1,2,3,4,5,6]</code><br>方法一 flat函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,[<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>]]]];</span><br><span class="line"><span class="built_in">console</span>.log(arr.flat(<span class="literal">Infinity</span>));</span><br></pre></td></tr></table></figure><br>方法2 reduce加递归<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatfn</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">res,item</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// return res.concat((item instanceof Array)?flatfn(item):item)</span></span><br><span class="line">        <span class="comment">// 也可以写成</span></span><br><span class="line">        <span class="keyword">return</span> res.concat(<span class="built_in">Array</span>.isArray(item)?flatfn(item):item);</span><br><span class="line">    &#125;,[])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(flatfn(arr))</span><br></pre></td></tr></table></figure><br>方法3 数组转字符串<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatfn</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">&#x27;,&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>).map(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parseInt</span>(item);</span><br><span class="line">    &#125;)    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(flatfn(arr))</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="单例模式-设计模式"><a href="#单例模式-设计模式" class="headerlink" title="单例模式(设计模式)"></a>单例模式(设计模式)</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>单例模式算是编程思想中的一种设计模式，简单来讲就是一个类只能有一个实例对象，这个实例对象最终也只会被新建一次，并且要提供一个能访问到这个实例的入口</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>假设有个person类 里面构造器传入的是姓名 设计单例模式 让两个人的名字都用的同一个<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;zzz&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person(<span class="string">&#x27;yyy&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p1===p2);</span><br><span class="line">返回<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Person.getInstance = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.instance) <span class="keyword">return</span> <span class="built_in">this</span>.instance;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.instance = <span class="keyword">new</span> Person(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = Person.getInstance(<span class="string">&#x27;zzz&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = Person.getInstance(<span class="string">&#x27;yyy&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p1===p2);</span><br><span class="line">返回<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>提高版本 假设有个女朋友类 里面传入的是姓名和年龄 设计单例模式 让女朋友类变成单例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GF</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name,age</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> danli = <span class="function"><span class="keyword">function</span>(<span class="params">customClass</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(instance)<span class="keyword">return</span> instance;</span><br><span class="line">            <span class="keyword">return</span> instance = <span class="keyword">new</span> customClass(...arguments);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let g1 = new GF(&#x27;2b&#x27;,20);</span></span><br><span class="line"><span class="comment">// let g2 = new GF(&#x27;3b&#x27;,18);</span></span><br><span class="line"><span class="comment">// console.log(g1===g2)</span></span><br><span class="line"><span class="comment">// 返回false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> DanliGF = danli(GF);</span><br><span class="line"><span class="keyword">let</span> g1 = <span class="keyword">new</span> DanliGF(<span class="string">&#x27;2b&#x27;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">let</span> g2 = <span class="keyword">new</span> DanliGF(<span class="string">&#x27;3b&#x27;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(g1===g2)</span><br><span class="line"><span class="comment">// 返回ture</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h1><div class="note primary flat"><p><a href="https://zlinni.github.io/posts/1bdac88a9cd9/">数组去重的八种方法</a></p></div><h1 id="手写promise-all和promise-race"><a href="#手写promise-all和promise-race" class="headerlink" title="手写promise.all和promise.race"></a>手写promise.all和promise.race</h1><h1 id="模拟实现new"><a href="#模拟实现new" class="headerlink" title="模拟实现new"></a>模拟实现new</h1><h1 id="实现call-apply-bind"><a href="#实现call-apply-bind" class="headerlink" title="实现call/apply/bind"></a>实现call/apply/bind</h1><h1 id="模拟Object-create-的实现"><a href="#模拟Object-create-的实现" class="headerlink" title="模拟Object.create()的实现"></a>模拟Object.create()的实现</h1><h1 id="千分位分隔符"><a href="#千分位分隔符" class="headerlink" title="千分位分隔符"></a>千分位分隔符</h1><h1 id="实现三角形"><a href="#实现三角形" class="headerlink" title="实现三角形"></a>实现三角形</h1><h1 id="实现三栏布局-双栏布局"><a href="#实现三栏布局-双栏布局" class="headerlink" title="实现三栏布局/双栏布局"></a>实现三栏布局/双栏布局</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面试" scheme="https://zlinni.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试" scheme="https://zlinni.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件化编程+Vuex</title>
    <link href="https://zlinni.github.io/posts/910d3920d22d/"/>
    <id>https://zlinni.github.io/posts/910d3920d22d/</id>
    <published>2022-01-07T02:32:58.000Z</published>
    <updated>2022-02-01T06:37:37.059Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tip cogs"><p>本文主要用于记录Vue2.0的组件化编程功能和vux管理数据，参考视频<a href='https://www.bilibili.com/video/BV1Zy4y1K7SH?p=1'>【尚硅谷Vue2.0+Vue3.0全套教程丨vuejs从入门到精通】</a></p></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">效果展示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>实现应用中局部功能代码和资源的集合</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>代码复用<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220107105407.png" alt=""><br>组件可以产生嵌套<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220107105435.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="模块与组件-模块化与组件化"><a href="#模块与组件-模块化与组件化" class="headerlink" title="模块与组件 模块化与组件化"></a>模块与组件 模块化与组件化</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">模块</button></li><li class="tab"><button type="button" data-href="#test-2">组件</button></li><li class="tab"><button type="button" data-href="#test-3">模块化</button></li><li class="tab"><button type="button" data-href="#test-4">组件化</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><ol><li>向外提供特定功能的js程序 一般就是一个js文件</li><li>为什么 ？ 因为js文件很多很复杂</li><li>作用 复用js 简化js的编写 提高js运行效率</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>用来实现局部（特定）功能效果的代码集合（html/css/js/image…）</li><li>为什么？ 一个界面的功能很复杂</li><li>作用 复用编码 简化项目编码 提高运行效率</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>当应用中的js都已模块化来编写 那这个应用就是一个模块化应用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-4"><p>当应用中的功能都是以多组件的形式来编写 那么这个应用就是一个组件化应用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供非单文件组件的形式 使得一个文件包含有n个组件来编写</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>为什么组件中要使用<code>data:{return{xxx}}</code>?<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// const data = &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     x:1,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     y:2</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//每次都返回一个全新的对象 互不干扰</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> data = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">x</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">y</span>:<span class="number">2</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> x1 = data();</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> x2 = data();</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>组件先声明 后注册 注册分为全局和局部注册<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;intro&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jojo</span>&gt;</span><span class="tag">&lt;/<span class="name">jojo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dio</span>&gt;</span><span class="tag">&lt;/<span class="name">dio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    // 定义组件 用Vue.extend 注意不要写extends 接收记得data函数式且return一个对象</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    const jojo = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        // 定义模板标签</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        `,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        data:function()&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            return &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                name:&#x27;jotaro&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                age:18</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    // 全局注册一个组件</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    const dio = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    `,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        data:function()&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            return &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                name:&#x27;dio&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                age:9999</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    // 注意不用加s 组件的名字逗号加组件在哪</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    Vue.component(&#x27;dio&#x27;,dio);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    new Vue(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        data:&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            intro:&#x27;vue组件使用&#x27;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        // 注册组件 components记得加s 此为局部注册</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        components:&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            jojo:jojo</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>需要注意的是单词的拼写是否正确<br>在声明的时候 <code>extend</code>不用加s<br>在局部注册的时候 使用<code>components</code> 因为可能会局部注册到很多个逐渐<br>在全局注册的时候 <code>Vue.component</code>不用加s 因为全局一次只能注册一个</p><p>一图流总结<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220108213845.png" alt=""></p><p>常见问题:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220108214611.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue可以在组件里面嵌套组件 但需要注意一些细节上的问题</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>直接上代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    const jotaro = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml">-----</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        `,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        data:function()&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            return &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                name:&#x27;jotaro&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                age:18</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    const jojohome = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml">-----</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">jotaro</span>&gt;</span><span class="tag">&lt;/<span class="name">jotaro</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        `,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        data:function()&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            return &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                name:&#x27;jostar&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                age:18</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        components:&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            jotaro</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    const dio = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml">-----</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        `,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        data:function()&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            return &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                name:&#x27;dio&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                age:999</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    const huangmu = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">jojohome</span>&gt;</span><span class="tag">&lt;/<span class="name">jojohome</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">dio</span>&gt;</span><span class="tag">&lt;/<span class="name">dio</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        `,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        components:&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            jojohome,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            dio</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    new Vue(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;<span class="name">huangmu</span>&gt;</span><span class="tag">&lt;/<span class="name">huangmu</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        `,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        components:&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            huangmu</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Vuecomponent构造函数"><a href="#Vuecomponent构造函数" class="headerlink" title="Vuecomponent构造函数"></a>Vuecomponent构造函数</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>讲解一下vue源码中这个构造函数的作用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220109163817.png" alt=""><br>可以直接通过vm查看下面所带领的全部vc 而vc也可以查看自己带领的vc<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220109163935.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="单文件组件的使用"><a href="#单文件组件的使用" class="headerlink" title="单文件组件的使用"></a>单文件组件的使用</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供了<code>.vue</code>格式的文件作为单文件组件的使用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>先在vscode里面安装<code>vtuer</code>插件<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220109201930.png" alt=""></p><p>创建vue文件 使用<code>&lt;v</code>能快捷创建<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>一个vue文件里面包含三个标签<br><code>&lt;template&gt;&lt;/template&gt;</code>模板标签 用于书写html代码<br><code>&lt;script&gt;&lt;/script&gt;</code>脚本标签 用于书写js代码<br><code>&lt;style&gt;&lt;/style&gt;</code>样式标签 用于书写css代码</p><p>需要注意的是 </p><ol><li>注释问题 (如果没有脚手架写注释默认报错)</li><li>命名问题 建议首字母大写 或者<code>my-school</code></li><li>js代码暴露问题 参见之前的es6学习 有三种暴露方式</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p><code>JOJO.vue</code>的代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; name &#125;&#125;----&#123;&#123; age &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;JOJO&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &quot;jotaro&quot;,</span><br><span class="line">      age: 18,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br><code>App.vue</code>的代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;JOJO&gt;&lt;/JOJO&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JOJO from &quot;./JOJO&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        JOJO</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br><code>main.js</code>的代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`&lt;div&gt;&lt;App&gt;&lt;/App&gt;&lt;/div&gt;`</span>,</span><br><span class="line">    <span class="attr">components</span>:&#123;App&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><code>index.html</code>代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>需要注意的是</p><ol><li>上面的东西最好按顺序写 </li><li>记得暴露 和 导入</li><li>在vue的使用中 一般root写在<code>main.js</code>里面</li><li>最后是html文件中引入js的顺序 一定要先把vuejs引入再引入自己的mainjs</li></ol><p>新增注意 记得组件中的data返回的是函数</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="创建vue脚手架"><a href="#创建vue脚手架" class="headerlink" title="创建vue脚手架"></a>创建vue脚手架</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">配置参数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供脚手架cli为程序员使用，相当于webpack配置好了，方便编译vue代码</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先安装vue cli<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><br>之后在创建的目录打开输入cmd<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create xxx</span><br></pre></td></tr></table></figure><br>然后启动项目 注意是<code>serve</code><br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="分析vue脚手架"><a href="#分析vue脚手架" class="headerlink" title="分析vue脚手架"></a>分析vue脚手架</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">详细分析</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>一个脚手架项目构建好之后有以下几个文件<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220110212007.png" alt=""><br>自上而下说明<br><code>nodexxx</code>这个是node配置文件<br><code>favicon.ico</code>ico文件<br><code>index.html</code>首页文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 避免路径产生的错误以后统一用baseurl这个是vue提供的取代./的方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这个是webpack里面默认去packagejson里面找文件名作为网站标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果你的浏览器不支持js 将执行下面的代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><code>main.js</code>入口文件 不用在页面中引入都可以找到该文件 vue已经配置好了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入口文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><code>gitignore</code>git文件<br><code>babelxxx</code>es6转es5文件</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="render函数"><a href="#render函数" class="headerlink" title="render函数"></a>render函数</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>上面讲到了在入口文件mainjs里面有一句代码叫做<code>render: h =&gt; h(App),</code>，下面来讲述它的作用以及相关的vue文件</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先在入口文件中必须写这个render函数作为模板template的替代 否则会报错<br>其原因是 入口文件中引入的并非完整的vue<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111125016.png" alt=""><br>而是一个精简版的 去掉模板解析器的vue<br>这么做是为了精简代码体积，到最后打包的时候减少代码量 虽然只有一点点</p><p>再讲讲这个render函数的本质：<br>它本来是个函数 可以写成<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params">createElement</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> createElement(<span class="string">&#x27;h1&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这样就相当于生成了一个h1标签内容是hello<br>由于它用不到this以及参数的名字可以改变 最后就可以简写成上面的形式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="params">h</span> =&gt;</span> h(<span class="string">&#x27;h1&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure><br>最后说明一下 这个render函数只需要在mainjs里面写 其他需要用到模板的地方可以在vue文件里面写 vue配置了单独的模板解析器 直接使用提供的template标签即可</p><p>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111125714.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="ref指令"><a href="#ref指令" class="headerlink" title="ref指令"></a>ref指令</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供ref指令来获取dom元素和组件，方便后续的组件通信</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>在使用的时候是,xxx是自己定义的名字<br><code>ref=&quot;xxx&quot;</code><br>获取ref的时候是 注意这里是dollar符和refs<br><code>this.$refs.xxx</code><br>如果不加后续的xxx 则显示全部ref标志的元素或组件</p><p>上代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1 ref=&quot;title&quot;&gt;这是app组件 现在要学习ref&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;showTitle&quot;&gt;点我切换标题&lt;/button&gt;</span><br><span class="line">        &lt;JOJO ref=&quot;jojo&quot;&gt;&lt;/JOJO&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JOJO from &quot;./components/JOJO.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        JOJO</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        showTitle()&#123;</span><br><span class="line">            let title = this.$refs.title;</span><br><span class="line">            title.innerText = &#x27;开始拉&#x27;;</span><br><span class="line">            console.log(this.$refs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>ref在标记dom元素的时候 还可以标记组件<br>像上面标记组件之后输出的结果如下<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111150120.png" alt=""><br>由此可见 可以完全获取整个组件 而<code>document.getElementById</code>这个原生的方法 只能获取组件的根标签内容 像下面这样<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111150252.png" alt=""><br>一图流：<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111150327.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="配置项props"><a href="#配置项props" class="headerlink" title="配置项props"></a>配置项props</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>需求是当组件复用的时候 希望更改组件的内置属性而不是重新写个组件 就要使用到props配置项</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>第一种方法 用数组的方式 <code>prop:[&#39;xxx&#39;,&#39;xxxx&#39;]</code> 这是简单声明接收<br>jojovue文件 使用props配置项<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; name &#125;&#125;----&#123;&#123; age &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;JOJO&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg:&#x27;现在开始学习props配置项&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  props:[&#x27;name&#x27;,&#x27;age&#x27;]</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>appvue文件 在组件标签中传参<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;JOJO name=&quot;jotaro&quot; age=&quot;18&quot;&gt;&lt;/JOJO&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JOJO from &quot;./components/JOJO.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        JOJO</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>注意 上面的方法中 传进去的age是字符串的形式 并不是number的形式<br>如果不加双引号 那么再保存的时候他也会自动给你加上双引号<br>所以如果有需求更改age的值的时候会出现问题<br>那么解决这个问题的主要方式就是使用<code>v-bind:</code>即动态绑定 进行js代码的运算<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111152423.png" alt=""><br>并且最好用props的另外一种方法进行类型的限制<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">  name:String,</span><br><span class="line">  age:Number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这样一来如果接收的东西不对 它就会报错<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111152649.png" alt=""><br>以及更高级别的写法 接收的同时对数据进行类型限制+默认值的指定+必要性的限制<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">  name:&#123;</span><br><span class="line">    typeof:String, //name的类型</span><br><span class="line">    required:true //name是否必须传 为true必传</span><br><span class="line">  &#125;,</span><br><span class="line">  age:&#123;</span><br><span class="line">    typeof:Number, </span><br><span class="line">    default:99 //如果不传 默认值99</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>一般来说 <code>required</code>和<code>default</code>只能用一个</p><p>最后注意一下 传进来的prop是不能修改的 最好不要修改<br>如果业务上面必须要修改可以参考以下的方法<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; name &#125;&#125;----&#123;&#123; myage + 1 &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;点我修改age&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;JOJO&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;现在开始学习props配置项&quot;,</span><br><span class="line">      myage: this.age //由于必须要修改age 所以这里加一个myage接收age 因为优先级prop大于data 所以会在这里接收到age</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">      typeof: String, //name的类型</span><br><span class="line">      required: true, //name是否必须传 为true必传</span><br><span class="line">    &#125;,</span><br><span class="line">    age: &#123;</span><br><span class="line">      typeof: Number,</span><br><span class="line">      default: 99, //如果不传</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeAge() &#123;</span><br><span class="line">      this.myage++;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111154250.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="mixins混入"><a href="#mixins混入" class="headerlink" title="mixins混入"></a>mixins混入</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供mixins混入的配置项 来使用公共的方法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>需求 jojo和dio在h1标签中表态 但荒木偷偷混入 点击h1之后就会变成made in heaven<br>huangmujs<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> huangmu = &#123;</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">showMsg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.msg = <span class="string">&#x27;made in heaven!!!!!!!!!&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>jojovue<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 @click=&quot;showMsg&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;huangmu&#125; from &#x27;../huangmu&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;JOJO&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;欧拉欧拉欧拉&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mixins:[huangmu]</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>diovue<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 @click=&quot;showMsg&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;huangmu&#125; from &#x27;../huangmu&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;DIO&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;我不做人啦jojo&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mixins:[huangmu]</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>appvue<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;JOJO&gt;&lt;/JOJO&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;DIO&gt;&lt;/DIO&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JOJO from &quot;./components/JOJO.vue&quot;;</span><br><span class="line">import DIO from &quot;./components/DIO.vue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        JOJO,</span><br><span class="line">        DIO</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>注意混入的js要暴露 引入的时候也要注意<br>最后是mixins方法是一个数组的配置，多个的时候要用逗号隔开</p><p>混合的原则是 如果你自己有的 就用自己的 如果没有 就用混合的<br>但如果是生命周期钩子 则都要的 来者不拒<br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111191145.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="vue插件"><a href="#vue插件" class="headerlink" title="vue插件"></a>vue插件</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供插件功能来增强页面的功能</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111192201.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">less安装</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供scoped关键字 在style标签中使用 可以将该style标签中的样式独立使用于当前vue文件 但最好不要使用在appvue中</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>语法如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>图例<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111193910.png" alt=""><br>生成一个随机数data<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111194222.png" alt=""></p><p>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111200334.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>由于webpack目前版本已经到5以上 vue求稳定使用它的4.46版本，所以在安装less-loader的时候，会报错，要使用6的版本才能安装<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i less-loader@<span class="number">6</span></span><br></pre></td></tr></table></figure><br>然后在样式中引入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line">  .jojo&#123;</span><br><span class="line">    color: pink;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>最后补充一个查插件版本的指令<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm view xxx versions</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="todolist案例"><a href="#todolist案例" class="headerlink" title="todolist案例"></a>todolist案例</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>学会编写todolist案例来帮助理解vue开发</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>把全部静态资源定义好</li><li><p>分析需要做哪个组件 这里选择了 mylist和myitem<br>mylist相关代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;ul class=&quot;todo-main&quot;&gt;</span><br><span class="line">&lt;MyItem v-for=&quot;todo in todoObj&quot; :key=&quot;todo.id&quot; :todo=&quot;todo&quot;/&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyItem from &#x27;./MyItem&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;MyList&#x27;,</span><br><span class="line">components:&#123;MyItem&#125;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">todoObj:[</span><br><span class="line">&#123;id:&#x27;001&#x27;,title:&quot;我不做人了jojo&quot;,done:true&#125;,</span><br><span class="line">&#123;id:&#x27;002&#x27;,title:&quot;扎瓦鲁多&quot;,done:false&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这里要注意<code>v-for</code>的使用 注意传进去的内容 以及<code>v-bind</code>绑定 最后传给item的是单个对象<br>myitem相关代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;label&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; :checked=&quot;todo.done&quot;/&gt;</span><br><span class="line">&lt;span&gt;&#123;&#123;todo.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line">&lt;button class=&quot;btn btn-danger&quot; style=&quot;display:none&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;MyItem&#x27;,</span><br><span class="line">props:[&#x27;todo&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这里需要注意 item需要接收一个对象用于渲染</p></li><li><p>开始编写myheader<br>myheader中 需要使用的是 输入框 以及输入之后敲回车的执行<br>这里就会出现一个问题 因为不知道如何和子组件进行通信 而且也没有相关的list标签可以用于传递参数 所以这里要用到父子组件的通信<br>解决前者的问题 需要在app中定义一个带参函数addTodo 在header中prop该函数 当keyupenter之后 header就会往该函数中传入相应的对象<br>myheadervue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;todo-header&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; placeholder=&quot;请输入你的任务名称，按回车键确认&quot; @keyup.enter=&quot;addTodos&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;nanoid&#125; from &#x27;nanoid&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;MyHeader&#x27;,</span><br><span class="line">props:[&#x27;addTodo&#x27;],</span><br><span class="line">methods: &#123;</span><br><span class="line">addTodos(e)&#123;</span><br><span class="line">this.addTodo(&#123;id:nanoid(),title:e.target.value,done:false&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>部分appvue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyHeader :addTodo=&quot;addTodo&quot;/&gt;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">methods: &#123;</span><br><span class="line">addTodo(x)&#123;</span><br><span class="line">console.log(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>那么后者的问题 就需要将list中的todoObj放到app中 这样做的好处是 全局共享这个数据 这样一来 app也可以像上面给header传东西一样 给list传这个obj 最后交给item去渲染<br>mylist代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;ul class=&quot;todo-main&quot;&gt;</span><br><span class="line">&lt;MyItem v-for=&quot;todo in todoObj&quot; :key=&quot;todo.id&quot; :todo=&quot;todo&quot;/&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyItem from &#x27;./MyItem&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;MyList&#x27;,</span><br><span class="line">components:&#123;MyItem&#125;,</span><br><span class="line">props:[&#x27;todoObj&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>部分app代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyList :todoObj=&quot;todoObj&quot;/&gt;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">todoObj:[</span><br><span class="line">&#123;id:&#x27;001&#x27;,title:&quot;我不做人了jojo&quot;,done:true&#125;,</span><br><span class="line">&#123;id:&#x27;002&#x27;,title:&quot;扎瓦鲁多&quot;,done:false&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">addTodo(obj)&#123;</span><br><span class="line">this.todoObj.unshift(obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>开始进行勾选功能的实现<br>流程是 勾选myitem组件，改变它的checkbox，由于数据在app中，所以要告诉app它改变了checkbox 然后todoObj中的<code>todoObj.done</code>进行取反操作 又由于app和myitem属于爷孙关系 不能直接通信 需要借助mylist。<br>Q: 如何改变？<br>A: 使用click事件 点击之后执行一个函数<br>Q: 函数应该传什么告诉它改变了呢？<br>A: 应该传id 传这种唯一的标识符到app app才能根据id进行遍历，找到对应项的done进行取反<br>Q: 这个整体的过程大概是怎么样呢？<br>A: app组件将数据共享出来 并定义一个函数改变done值，然后把这个函数传递给mylist mylist用prop接收后 再传递给myitem myitem的checkbox改变的时候 在调用这个函数 就实现了数据的改变<br>关键在于app里的data数据是全局共享的<br>部分appvue代码 定义checkTodo 遍历todoObj 如果找到相同的id 则done取反<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    &lt;MyList :todoObj=&quot;todoObj&quot; :checkTodo=&quot;checkTodo&quot;/&gt;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">    checkTodo(id) &#123;</span><br><span class="line">      this.todoObj.forEach((todo) =&gt; &#123;</span><br><span class="line">        if (todo.id === id) todo.done = !todo.done;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="本地存储和会话存储"><a href="#本地存储和会话存储" class="headerlink" title="本地存储和会话存储"></a>本地存储和会话存储</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">本地存储</button></li><li class="tab"><button type="button" data-href="#test-3">会话存储</button></li><li class="tab"><button type="button" data-href="#test-4">todolist的本地存储</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>本篇将涉及两个js原生代码<code>localStorage</code>和<code>sessionStorage</code>的讲解，前者会存储在用户硬盘上 后者在网页关闭后消失</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>注意所有的数据将在控制台的application下面的<code>localStorage</code>里面查看<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220115141439.png" alt=""><br>代码如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>本地存储<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveData()&quot;</span>&gt;</span>点我保存一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;readData()&quot;</span>&gt;</span>点我读取一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteData()&quot;</span>&gt;</span>点我删除一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;clearData()&quot;</span>&gt;</span>点我清空数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>:<span class="string">&#x27;josefu&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>:<span class="number">70</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">saveData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;name1&#x27;</span>,<span class="string">&#x27;jostar&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;name2&#x27;</span>,<span class="string">&#x27;jotaro&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果是数字 自动转化为字符串</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;age&#x27;</span>,<span class="number">18</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果是对象 需要用JSON.stringify()方法将对象转化为json字符串</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;person&#x27;</span>,<span class="built_in">JSON</span>.stringify(person));</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">readData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;name1&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;name2&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;age&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果想读取到的格式是对象 就要把json转为对象 </span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(JSON.parse(localStorage.getItem(&#x27;person&#x27;)));</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> result = <span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;person&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 但这里转化的age是由于是对象 所以还是保留原来的格式</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(result.age)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果不存在 返回null</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> result2 = <span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;person2&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(result2)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">deleteData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.removeItem(<span class="string">&#x27;name1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.removeItem(<span class="string">&#x27;name2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">clearData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.clear()</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>代码如下：只是替换了关键字<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>会话存储<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveData()&quot;</span>&gt;</span>点我保存一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;readData()&quot;</span>&gt;</span>点我读取一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteData()&quot;</span>&gt;</span>点我删除一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;clearData()&quot;</span>&gt;</span>点我清空数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>:<span class="string">&#x27;josefu&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>:<span class="number">70</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">saveData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        sessionStorage.setItem(<span class="string">&#x27;name1&#x27;</span>,<span class="string">&#x27;jostar&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        sessionStorage.setItem(<span class="string">&#x27;name2&#x27;</span>,<span class="string">&#x27;jotaro&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果是数字 自动转化为字符串</span></span></span><br><span class="line"><span class="javascript">        sessionStorage.setItem(<span class="string">&#x27;age&#x27;</span>,<span class="number">18</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果是对象 需要用JSON.stringify()方法将对象转化为json字符串</span></span></span><br><span class="line"><span class="javascript">        sessionStorage.setItem(<span class="string">&#x27;person&#x27;</span>,<span class="built_in">JSON</span>.stringify(person));</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">readData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(sessionStorage.getItem(<span class="string">&#x27;name1&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(sessionStorage.getItem(<span class="string">&#x27;name2&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(sessionStorage.getItem(<span class="string">&#x27;age&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果想读取到的格式是对象 就要把json转为对象 </span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(JSON.parse(sessionStorage.getItem(&#x27;person&#x27;)));</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> result = <span class="built_in">JSON</span>.parse(sessionStorage.getItem(<span class="string">&#x27;person&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 但这里转化的age是由于是对象 所以还是保留原来的格式</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(result.age)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果不存在 返回null</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> result2 = <span class="built_in">JSON</span>.parse(sessionStorage.getItem(<span class="string">&#x27;person2&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(result2)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">deleteData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        sessionStorage.removeItem(<span class="string">&#x27;name1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        sessionStorage.removeItem(<span class="string">&#x27;name2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">clearData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        sessionStorage.clear()</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220115141620.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-4"><p>todolist自然也会用到本地存储 思路就是监视app里面todoObj的改变 并且在一开始初始化todoObj的时候读取本地数据<br>踩坑的有两点<br>一是初始化的时候如果本地没有值会报错（因为myfooter里面的初始化要计算数组长度，如果是null是没有长度的）<br>解决方法是或运算<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    todoObj: JSON.parse(localStorage.getItem(&quot;todoObj&quot;)) || [],</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>二是在勾选完之后刷新会发现选项并没有勾选成功 因为监视属性中只监视了第一层 没有发现数组内部的变化<br>解决方法 使用深度监视<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  // 这里勾选的时候会不显示改变 因为不是深度监视 无法知道数组内容的改变</span><br><span class="line">  todoObj: &#123;</span><br><span class="line">    deep: true,</span><br><span class="line">    handler(value) &#123;</span><br><span class="line">      localStorage.setItem(&quot;todoObj&quot;, JSON.stringify(value));</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="组件自定义事件-绑定"><a href="#组件自定义事件-绑定" class="headerlink" title="组件自定义事件_绑定"></a>组件自定义事件_绑定</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>组件之间的通信前面学过 需要父组件定义函数 发送到子组件 子组件props之后调用<br>但现在用两种旧的方法来进行组件的通信 它们分别是直接自定义事件和挂载后自定义事件</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先要了解作用机制<br>自定义事件能够通信是因为 父组件在子组件身上定义了自定义事件，在子组件中通过某种方式触发该自定义事件 实现函数的调用 以此来通信<br>流程是 父组件先定义自定义事件 然后写该事件的函数 之后子组件用自己的需要的方式触发该自定义事件 并 传参<br>app部分代码如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1 ref=&quot;title&quot;&gt;这是app组件 现在要学习自定义事件&lt;/h1&gt;</span><br><span class="line">        &lt;JOJO @customEvent=&quot;getJOJO&quot;&gt;&lt;/JOJO&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JOJO from &quot;./components/JOJO.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        JOJO</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        getJOJO(name)&#123;</span><br><span class="line">            console.log(&#x27;JOJO的名字是&#x27;,name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>jojovue<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; name &#125;&#125;----&#123;&#123; age &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;sendJOJO&quot;&gt;点我发送jojoname&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;JOJO&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &quot;jotaro&quot;,</span><br><span class="line">      age: 18,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendJOJO()&#123;</span><br><span class="line">      this.$emit(&#x27;customEvent&#x27;,this.name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>第二种写法 是通过挂载自定义事件来写<br>流程是用ref定义子组件 然后书写回调函数 之后在mounted里面通过refs拿到子组件 之后通过<code>$on</code>指定在该自定义事件触发的时候调用上面的回调函数<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1 ref=&quot;title&quot;&gt;这是app组件 现在要学习自定义事件&lt;/h1&gt;</span><br><span class="line">        &lt;!-- &lt;JOJO @customEvent=&quot;getJOJO&quot;&gt;&lt;/JOJO&gt; --&gt;</span><br><span class="line">        &lt;JOJO ref=&quot;jojo&quot;&gt;&lt;/JOJO&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JOJO from &quot;./components/JOJO.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        JOJO</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        getJOJO(name)&#123;</span><br><span class="line">            console.log(&#x27;JOJO的名字是&#x27;,name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        this.$refs.jojo.$on(&#x27;customEvent&#x27;,this.getJOJO);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>这种方法的好处是灵活性强，可以通过延时函数设定什么时候触发这个自定义事件等</p><p>然后是一些细节上或者优化的问题<br>假如想要自定义事件只触发一次 前面用<code>v-on</code>的方法就是直接在事件后面加once<br><code>@customEvent.once=&quot;getJOJO&quot;</code><br>后者ref的就是<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">    this.$refs.jojo.$once(&#x27;customEvent&#x27;,this.getJOJO);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>以及如果想要在自定义事件中传入多个参数 则最好使用对象发送或者es6的剩余参数rest接收<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    <span class="function"><span class="title">getJOJO</span>(<span class="params">name,...params</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;JOJO的名字是&#x27;</span>,name,params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="解绑事件"><a href="#解绑事件" class="headerlink" title="解绑事件"></a>解绑事件</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>上面绑定事件之后如果要想进行事件的解绑操作 需要用到<code>$off</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>见代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; name &#125;&#125;----&#123;&#123; age &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;sendJOJO&quot;&gt;点我发送jojoname&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;unbind&quot;&gt;点我解绑jojoname&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;JOJO&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &quot;jotaro&quot;,</span><br><span class="line">      age: 18,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendJOJO()&#123;</span><br><span class="line">      this.$emit(&#x27;customEvent&#x27;,this.name);</span><br><span class="line">      this.$emit(&#x27;customEvent2&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">    unbind()&#123;</span><br><span class="line">      // 只解绑一个事件</span><br><span class="line">      // this.$off(&#x27;customEvent&#x27;);</span><br><span class="line">      // 解绑多个事件 数组的方式</span><br><span class="line">      // this.$off([&#x27;customEvent&#x27;,&#x27;customEvent2&#x27;]);</span><br><span class="line">      // 或者直接啥都不写</span><br><span class="line">      this.$off();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="自定义事件踩坑总结"><a href="#自定义事件踩坑总结" class="headerlink" title="自定义事件踩坑总结"></a>自定义事件踩坑总结</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>主要内容有 </p><ol><li>app组件获取自定义事件的结果渲染到页面</li><li>组件使用原生事件</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>综上所述 有两种方法自定义 一种是<code>v-on</code> 另外一种是<code>ref</code><br>前者代码 思路是在data中定义然后方法调用的时候赋值给定义的变量<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        jojoName:&#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">components:&#123;</span><br><span class="line">    JOJO</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">    getJOJO(name)&#123;</span><br><span class="line">        console.log(&#x27;JOJO的名字是&#x27;,name);</span><br><span class="line">        this.jojoName = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>后者<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1 ref=&quot;title&quot;&gt;这是app组件 jojo的名字是&#123;&#123;jojoName&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;!-- &lt;JOJO @customEvent=&quot;getJOJO&quot;&gt;&lt;/JOJO&gt; --&gt;</span><br><span class="line">        &lt;JOJO ref=&quot;jojo&quot;&gt;&lt;/JOJO&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JOJO from &quot;./components/JOJO.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            jojoName:&#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        JOJO</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        getJOJO(name)&#123;</span><br><span class="line">            console.log(&#x27;JOJO的名字是&#x27;,name);</span><br><span class="line">            this.jojoName = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        this.$refs.jojo.$on(&#x27;customEvent&#x27;,this.getJOJO);</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><br>但是后者如果直接将回调的具体内容写在on后面的话 会出现问题<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">    // 此处的function中的this指代的是触发该事件的对象 就是子组件 然鹅子组件里面没有jojoName所以不行</span><br><span class="line">  this.$refs.jojo.$on(&quot;customEvent&quot;, function (name) &#123;</span><br><span class="line">    console.log(&quot;JOJO的名字是&quot;, name);</span><br><span class="line">    this.jojoName = name;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>需要写成箭头函数的形式<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//箭头函数的this指向前面一个 即app的vm</span><br><span class="line">    this.$refs.jojo.$on(&quot;customEvent&quot;, (name)=&gt; &#123;</span><br><span class="line">      console.log(&quot;JOJO的名字是&quot;, name);</span><br><span class="line">      this.jojoName = name;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><br>组件正常来说 如果使用像<code>@click=&quot;show&quot;</code>这样的方法 那么他会判断该click是个自定义事件，要用自定义事件的方式去定义才行<br>那么组件如何使用原生事件呢？<br>只需要加个<code>.native</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;JOJO ref=&quot;jojo&quot; @click.native=&quot;show&quot;&gt;&lt;/JOJO&gt;</span><br></pre></td></tr></table></figure></p><p>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220115163213.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>全局事件总线用于处理子组件和子组件之间的通信。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>为了处理子组件之间的通信 要有一个中间人 当它被定义之后 如果有组件往里面挂载自定义事件用于得到信息，那么另外的组件就可以触发该事件发送信息 从此进行组件间的通信<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220115220953.png" alt=""><br>那么这个中间人有三点需求</p><ol><li>它可以被所有组件知道</li><li>它必须有<code>$on</code>，<code>$emit</code>和<code>$off</code></li></ol><p>首先第一点只要它在vue原型中出现就可以<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.x = &#123;a:1,b:2&#125;;</span><br><span class="line">//这样子组件直接打印是有数据的</span><br></pre></td></tr></table></figure><br>但是要满足第二点的时候 会发现它的对象不合法 因为对象上面并没有<code>$on</code>，<code>$emit</code>和<code>$off</code>这几个方法<br>解决这个问题 也很简单 要知道在vm或者vc上面才有这三个方法的存在 所以出发点就是这两个对象<br>对于vm来说 因为要创建vm实例对象就要接收 那么接收之后再赋值给原型上的x已经晚了 因为这个时候其他组件已经渲染完了<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//这是错误做法</span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    render:h=&gt;h(App)</span><br><span class="line">&#125;)</span><br><span class="line">Vue.prototype.x = vm;</span><br></pre></td></tr></table></figure><br>所以只能想到用vc 要用vc的话 之前学到要使用<code>const Demo = Vue.extend({});</code> 但是不能直接传给x 因为没有新建 之前的做法是直接使用这个标签<code>&lt;Demo/&gt;</code> 所以这里只能自己新建<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Demo = Vue.extend(&#123;&#125;);</span><br><span class="line">const d = new Demo();</span><br><span class="line">Vue.prototype.x = d;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    render:h=&gt;h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>这样做之后就满足要求了<br>其他组件的通信写法<br>jojovue 发送端<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  sendHello() &#123;</span><br><span class="line">    this.x.$emit(&quot;hello&quot;, this.msg);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>diovue接收端<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  this.x.$on(&#x27;hello&#x27;,(data)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;ko no DIO da!!!&#x27;,data);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>那么项目中肯定不是以这样的复杂的形式去定义x的 这里引出全局事件总线的写法<br>首先vm里面有个钩子叫做<code>beforeCreate()</code>这个是在模板解析之前做的操作 所以在这里面创建所谓的x是最好的 vue告诉我们这里的x应该叫做<code>$bus</code> 可以理解未公共汽车 都可以把东西往里面放<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    render:h=&gt;h(App),</span><br><span class="line">    beforeCreate()&#123;</span><br><span class="line">        // 安装全局事件总线</span><br><span class="line">        Vue.prototype.$bus = this </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>注意 最好在组件销毁之前解绑bus身上的相关事件 利用<code>beforeDestroy()</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeDestroy() &#123;</span><br><span class="line">  this.$bus.$off(&#x27;hello&#x27;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220116155551.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="消息订阅与发布"><a href="#消息订阅与发布" class="headerlink" title="消息订阅与发布"></a>消息订阅与发布</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>消息的订阅与发布是另外一种组件间通信的方法 一般引入<code>pubsub.js</code>来调用pubsub对象里面的方法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>安装pubsub<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i pubsub-js</span><br></pre></td></tr></table></figure></li><li>导入pubsub<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pubsub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br></pre></td></tr></table></figure></li><li>基本使用<br>消息的订阅 使用到的是subscribe 传入两个参数 一个是订阅的名字 一个是进来的数据<br>且注意因为每次订阅都会生成不同的id 所以最后取消订阅是要传入一个id的 这里用pubId来演示 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  this.pubId = pubsub.subscribe(&#x27;hello&#x27;,function(msgName,data)&#123;</span><br><span class="line">      console.log(&#x27;系内jojo&#x27;,msgName,data);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy() &#123;</span><br><span class="line">  pubsub.unsubscribe(this.pubId);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>消息的发布 使用到的是publish<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  sendHello() &#123;</span><br><span class="line">    pubsub.publish(&#x27;hello&#x27;,&#x27;欧拉欧拉欧拉欧拉！！！！！！！&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>直接在function里面输出this的话结果是undefined 这时候需要用到箭头函数来将this设置为vc<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  this.pubId = pubsub.subscribe(&quot;hello&quot;, (msgName, data) =&gt; &#123;</span><br><span class="line">    console.log(this);</span><br><span class="line">    console.log(&quot;系内jojo&quot;, msgName, data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>特别注意一点 如果订阅的功能是写在methods里面的 那么需要methods里面的方法的第一个参数用占位符代替 因为它第一个要传一个msgName<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220116193229.png" alt=""><br>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220116192934.png" alt=""></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="todolist编辑"><a href="#todolist编辑" class="headerlink" title="todolist编辑"></a>todolist编辑</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>讲一下todolist编辑这个功能的实现 运用到了动态添加属性<code>$set</code>, 事件总线，事件对象<code>$event</code> 显示指令<code>v-show</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先样式写好 编辑框和点击编辑之后出现的文本框<br>对于编辑框 需要的是1点击之后 出现文本框 2 出现文本框后 编辑框消失<br>对于文本框需要的是 1点击编辑框之后自动获取焦点 离开自动失去焦点并修改数据<br>所以先给编辑框绑定一个事件 叫isEdit 传入todo并添加响应式的edit 如果todo里面的edit为真 那么就显示文本框<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">      &lt;span v-show=&quot;!todo.edit&quot;&gt;&#123;&#123; todo.title &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;input v-show=&quot;todo.edit&quot; type=&quot;text&quot; :value=&quot;todo.title&quot; @blur=&quot;isBlur(todo,$event)&quot;/&gt;</span><br><span class="line">          &lt;button v-show=&quot;!todo.edit&quot; class=&quot;btn btn-danger&quot; @click=&quot;isEdit(todo)&quot;&gt;编辑&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">    isEdit(todo) &#123;</span><br><span class="line">      if (todo.edit !== undefined) &#123;</span><br><span class="line">        todo.edit = true;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.$set(todo, &quot;edit&quot;, true);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><br>然后文本框也需要编写一个isBlur函数 用于改变edit状态 来影响编辑框和title<br>由于失去焦点后要完成改变 需要在app里面编写update函数接收当前的todoid和title值<br>值得一提的是<code>@blur=&quot;isBlur(todo,$event)&quot;</code>传入event找到<code>e.target.value</code><br>（这里还没有写自动获取焦点）<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    isBlur(todo,e)&#123;</span><br><span class="line">      todo.edit = false;</span><br><span class="line">      this.$bus.$emit(&quot;updateTodo&quot;, todo.id,e.target.value);</span><br><span class="line">    &#125;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">    updateTodo(id,title) &#123;</span><br><span class="line">      this.todoObj.forEach((todo) =&gt; &#123;</span><br><span class="line">        if (todo.id === id) todo.title = title;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><br>关于自动获取焦点 由于函数里面的内容线执行完毕再去渲染dom 所以直接写focus是没有作用的<br>解决的办法有使用定时器和<code>$nextTick</code> 后者的原理是等dom渲染完后执行回调<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  this.$refs.edit.focus();</span><br><span class="line">&#125;, 200);</span><br><span class="line">// this.$nextTick(function () &#123;</span><br><span class="line">//   this.$refs.edit.focus();</span><br><span class="line">// &#125;);</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="vue动画"><a href="#vue动画" class="headerlink" title="vue动画"></a>vue动画</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供了几个动画类名和指令用于调用动画</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>如果自己写的话 还需要判断什么时候来什么时候去<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;现在学习vue动画&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;showMsg&quot;&gt;点我显示/隐藏&lt;/button&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;h1 v-show=&quot;isShow&quot; class=&quot;msg&quot;&gt;我不做人啦&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isShow:false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        showMsg()&#123;</span><br><span class="line">            this.isShow = !this.isShow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    @keyframes enter &#123;</span><br><span class="line">        from&#123;</span><br><span class="line">            transform:translateX(100%)</span><br><span class="line">        &#125;</span><br><span class="line">        to&#123;</span><br><span class="line">            transform: translateX(0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .come&#123;</span><br><span class="line">        animation: enter 1s linear;</span><br><span class="line">    &#125;</span><br><span class="line">    .go&#123;</span><br><span class="line">        animation: enter 1s reverse;</span><br><span class="line">    &#125;</span><br><span class="line">    .msg&#123;</span><br><span class="line">        background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>利用vue提供的transistion标签<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;现在学习vue动画&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;showMsg&quot;&gt;点我显示/隐藏&lt;/button&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;transition&gt;</span><br><span class="line">        &lt;h1 v-show=&quot;isShow&quot; class=&quot;msg&quot;&gt;我不做人啦&lt;/h1&gt;        </span><br><span class="line">        &lt;/transition&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isShow:false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        showMsg()&#123;</span><br><span class="line">            this.isShow = !this.isShow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    @keyframes enter &#123;</span><br><span class="line">        from&#123;</span><br><span class="line">            transform:translateX(100%)</span><br><span class="line">        &#125;</span><br><span class="line">        to&#123;</span><br><span class="line">            transform: translateX(0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /* 来的时候 */</span><br><span class="line">    .v-enter-active&#123;</span><br><span class="line">        animation: enter 1s linear;</span><br><span class="line">    &#125;</span><br><span class="line">    /* 去的时候 */</span><br><span class="line">    .v-leave-active&#123;</span><br><span class="line">        animation: enter 1s reverse;</span><br><span class="line">    &#125;</span><br><span class="line">    .msg&#123;</span><br><span class="line">        background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>如果有多个需要用到不同动画效果的时候 要给transistion标签一个name值 并且在下方样式中的v改成name值 并且如果想要一上来就执行动画 可以使用<code>appear</code>指令<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;现在学习vue动画&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;showMsg&quot;&gt;点我显示/隐藏&lt;/button&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;transition name=&quot;dio&quot; appear&gt;</span><br><span class="line">        &lt;h1 v-show=&quot;isShow&quot; class=&quot;msg&quot;&gt;我不做人啦&lt;/h1&gt;        </span><br><span class="line">        &lt;/transition&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isShow:true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        showMsg()&#123;</span><br><span class="line">            this.isShow = !this.isShow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    @keyframes enter &#123;</span><br><span class="line">        from&#123;</span><br><span class="line">            transform:translateX(100%)</span><br><span class="line">        &#125;</span><br><span class="line">        to&#123;</span><br><span class="line">            transform: translateX(0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /* 来的时候 */</span><br><span class="line">    .dio-enter-active&#123;</span><br><span class="line">        animation: enter 1s linear;</span><br><span class="line">    &#125;</span><br><span class="line">    /* 去的时候 */</span><br><span class="line">    .dio-leave-active&#123;</span><br><span class="line">        animation: enter 1s reverse;</span><br><span class="line">    &#125;</span><br><span class="line">    .msg&#123;</span><br><span class="line">        background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117101836.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117101907.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="配置代理-axios"><a href="#配置代理-axios" class="headerlink" title="配置代理(axios)"></a>配置代理(axios)</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>配置代理解决vue中发送请求的时候跨域的问题</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>安装axios<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i axios</span><br></pre></td></tr></table></figure><br>导入axios<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br></pre></td></tr></table></figure><br>实例代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;现在开始学习vue发送axios请求&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;sendAxios&quot;&gt;点我发送一个请求&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        sendAxios()&#123;</span><br><span class="line">            axios.get(&#x27;http://localhost:3000/timeout-server&#x27;).then(</span><br><span class="line">                response=&gt;&#123;</span><br><span class="line">                    console.log(&#x27;请求成功了&#x27;,response.data);</span><br><span class="line">                &#125;,</span><br><span class="line">                error=&gt;&#123;</span><br><span class="line">                    console.log(&#x27;请求失败了&#x27;,error.message)</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>注意跨域问题<br>之前在ajax学过 跨域就是违背了同源策略 同源策略规定协议 主机 端口号一致<br>如果要解决这个问题 可以在nodejs里配置 也可以直接使用代理服务器<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/9f479b0a038d8abb97e2f066ad255f6.png" alt=""><br>原理是前端网页访问代理服务器的时候 代理服务器的协议主机端口号是一致的 所以就可以请求 同时 代理服务器和保存结果的服务器直接又可以互相请求 就达成了效果<br>新建<code>vue.config.js</code>输入<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">pages</span>:&#123;</span><br><span class="line">        <span class="attr">index</span>:&#123;</span><br><span class="line">            <span class="attr">entry</span>:<span class="string">&#x27;src/main.js&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">        <span class="attr">proxy</span>:<span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>注意 里面的proxy的地址就是代理服务器请求的有结果的服务器的地址<br>然后改变axios的请求地址如下:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    sendAxios()&#123;</span><br><span class="line">        axios.get(&#x27;http://localhost:8080/timeout-server&#x27;).then(</span><br><span class="line">            response=&gt;&#123;</span><br><span class="line">                console.log(&#x27;请求成功了&#x27;,response.data);</span><br><span class="line">            &#125;,</span><br><span class="line">            error=&gt;&#123;</span><br><span class="line">                console.log(&#x27;请求失败了&#x27;,error.message)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>注意 这里就是往代理服务器8080发送了请求 让该代理服务器从端口号3000的timeoutserver拿结果过来<br>这里还涉及到一个问题 代理服务器并不是全部的请求都发给实际服务器 如果代理服务器发现public目录下有该资源 就直接返回该资源 不会往服务器请求数据<br>并且它的缺陷就是配置完只能转发给一个服务器 不能给多个<br>下面讲解另外一种方式 转发给多个服务器<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    devServer:&#123;</span><br><span class="line">        proxy:&#123;</span><br><span class="line">            &#x27;/jojo&#x27;:&#123;</span><br><span class="line">                target:&#x27;http://localhost:3000&#x27;,</span><br><span class="line">                changeOrigin:true,</span><br><span class="line">                pathRewrite:&#123;&#x27;^/jojo&#x27;:&#x27;&#x27;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">//请求端的vue</span><br><span class="line">    methods: &#123;</span><br><span class="line">        sendAxios()&#123;</span><br><span class="line">            axios.get(&#x27;http://localhost:8080/jojo/timeout-server&#x27;).then(</span><br><span class="line">                response=&gt;&#123;</span><br><span class="line">                    console.log(&#x27;请求成功了&#x27;,response.data);</span><br><span class="line">                &#125;,</span><br><span class="line">                error=&gt;&#123;</span><br><span class="line">                    console.log(&#x27;请求失败了&#x27;,error.message)</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><br>原理是当请求的地址中第一项是以jojo为名字的话 代理服务器就开始向目标服务器请求数据<br>前面的<code>&#39;/jojo&#39;</code>指的是代理的服务器请求路径 他会匹配所有以此为路径的地址<br>target 是目标服务器地址<br>changeOrigin为true的话 指的是请求目标服务器的时候 伪装自己的host为相同的host<br>pathRewrite的话 当代理服务器向目标服务器请求数据的时候 地址其实是<code>/jojo/timeout-server</code>但目标服务器中并没有这一项 所以要使用这个方法 以键值对的形式找到所有<code>&#39;/jojo&#39;</code>并改写成空<br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117143427.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117143454.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>slot插槽标签的功能主要是当组件需要传入单独的内容的时候，对该内容进行渲染。常用于组件复用。分为三类 默认插槽 具名插槽 作用域插槽</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>默认插槽 使用方法<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117193522.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117193625.png" alt=""><br>适用场景 只有一个需要独立渲染的内容的时候</p><p>具名插槽 适用场景 需要多个slot来渲染数据的时候<br>使用方法<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117193832.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117193848.png" alt=""><br>如果出现多个标签共享同样的slot的时候 如下<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117194043.png" alt=""><br>建议使用<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117194144.png" alt=""><br><code>v-slot</code>可以用#号代替<br>并且注意该指令只能使用在组件的标签上<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117194257.png" alt=""></p><p>作用域插槽<br>使用场景 当需要组件里面的相同数据进行不同的渲染的时候使用到该方法<br>比如同样的列表数据 想展示成有序列表 无序列表 两种方式<br>使用方法<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117195308.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117195502.png" alt=""><br>如果直接用插值语法输出scope的名字 会出现传递的数据<br>主要的概念是传给插槽的使用者<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117195756.png" alt=""><br>技巧<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117195919.png" alt=""><br>新的api是<code>slot-scope</code>功能和scope是一致的<br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117200048.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117200128.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117200144.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>全局事件总线<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117200729.png" alt=""><br>vuex<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117201111.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117201156.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>新建一个store文件夹 下面放indexjs<br>写入如下 注意Store要大写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import vuex from &#x27;vuex&#x27;</span><br><span class="line">Vue.use(vuex)</span><br><span class="line"></span><br><span class="line">// 准备actions 用于响应组件中的动作</span><br><span class="line">const actions = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">// 准备mutations 用于操作数据 state</span><br><span class="line">const mutations = &#123;&#125;</span><br><span class="line">// 准备state 用于存储数据</span><br><span class="line">const state = &#123;&#125;</span><br><span class="line"></span><br><span class="line">// 创建并暴露store</span><br><span class="line">export default new vuex.Store(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在mainjs里面导入 注意store后面的index不能省略<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App&#x27;</span><br><span class="line">import store from &#x27;./store/index&#x27;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    render:h=&gt;h(App),</span><br><span class="line">    store,</span><br><span class="line">    beforeCreate()&#123;</span><br><span class="line">        // 安装全局事件总线</span><br><span class="line">        Vue.prototype.$bus = this </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>注意这里在index里面写入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import vuex from &#x27;vuex&#x27;</span><br><span class="line">Vue.use(vuex)</span><br></pre></td></tr></table></figure><br>是因为cli脚手架它有个代码执行顺序的问题<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220118114954.png" alt=""><br>所以不能在mainjs里面使用vuex再引入store </p><p>查看vuex的数据<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220118150438.png" alt=""><br>还有一个案例再下一栏</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>加减法计算器<br>jisuanqivue<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;现在开始学习vuex 案例是加减&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;当前求和是:&#123;&#123; $store.state.sum &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;select v-model=&quot;n&quot;&gt;</span><br><span class="line">      &lt;option :value=&quot;1&quot;&gt;1&lt;/option&gt;</span><br><span class="line">      &lt;option :value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">      &lt;option :value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;button @click=&quot;increment&quot;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;decrement&quot;&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;incrementOdd&quot;&gt;当前求和为奇数再加&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;incrementWait&quot;&gt;等一等再加&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      n: 1,</span><br><span class="line">      sum: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment() &#123;</span><br><span class="line">      this.$store.commit(&quot;INCREMENT&quot;, this.n);</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement() &#123;</span><br><span class="line">      this.$store.commit(&quot;DECREMENT&quot;, this.n);    </span><br><span class="line">    &#125;,</span><br><span class="line">    incrementOdd() &#123;</span><br><span class="line">      this.$store.dispatch(&quot;incrementOdd&quot;, this.n);</span><br><span class="line">    &#125;,</span><br><span class="line">    incrementWait() &#123;</span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">        this.$store.dispatch(&quot;incrementWait&quot;, this.n);</span><br><span class="line">      &#125;, 500);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(this);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>indexjs<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line">Vue.use(vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备actions 用于响应组件中的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//context 上下文 value 传过来的值 </span></span><br><span class="line">    <span class="comment">// increment(context, value) &#123;</span></span><br><span class="line">    <span class="comment">//     context.commit(&#x27;INCREMENT&#x27;, value)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// decrement(context, value) &#123;</span></span><br><span class="line">    <span class="comment">//     context.commit(&#x27;DECREMENT&#x27;, value)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="function"><span class="title">incrementOdd</span>(<span class="params">context, value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (context.state.sum % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">            context.commit(<span class="string">&#x27;INCREMENT&#x27;</span>, value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">incrementWait</span>(<span class="params">context, value</span>)</span> &#123;</span><br><span class="line">        context.commit(<span class="string">&#x27;INCREMENT&#x27;</span>, value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 准备mutations 用于操作数据 state</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="function"><span class="title">INCREMENT</span>(<span class="params">state, value</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;mutation里面的INCREMENT被调用了&#x27;</span>, state, value)</span><br><span class="line">        state.sum += value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">DECREMENT</span>(<span class="params">state, value</span>)</span> &#123;</span><br><span class="line">        state.sum -= value;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 准备state 用于存储数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">sum</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>注意这里有比较细节的问题<br>整个流程是vc传递n值给action action做出判断之后传递给mutation加工 mutation加工之后将数据给到state state里面的值改变重新渲染vc<br>vc将n值传递给action这个part</p><ol><li>因为已经use了vux这个插件 且已经注册了store 所以vc中会出现<code>$store</code>并且里面的state中有想要的sum值 可以插值语法直接获取</li><li>vc如果先和action沟通 使用的是dispatch 并且第一个参数要和action里面的key对应</li><li>如果不需要action的业务逻辑判断 可以使用commit 直接发送给mutation进行加工 这里的加法和减法就是例子</li></ol><p>action判断部分</p><ol><li>action在这里接收两个参数 一个是context 上下文对象 这个上下文对象依然也包含state 所以可以拿到sum进行数据过滤 另外一个参数是value 就是传递来的值</li><li>action判断完之后需要传递两个参数 第一个和mutation里面的key相同 建议使用大写区分 第二个是value</li></ol><p>mutation部分</p><ol><li>加工数据 接收两个参数 一个是state 一个是value</li><li>没有发送 </li></ol><p>state部分</p><ol><li>初始化参数 </li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="getters配置项"><a href="#getters配置项" class="headerlink" title="getters配置项"></a>getters配置项</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>使用getters配置项可以想计算属性一样对state里面的数据进行操作</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先在store下面的indexjs里面定义getters<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="comment">// 类似计算属性 传入的是state</span></span><br><span class="line">    <span class="function"><span class="title">bigSum</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state.sum * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然后追加该配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">    getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>最后在组件中使用 注意此时是getters里面的xx 不是state<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;当前求和放大十倍是&#123;&#123; $store.getters.bigSum &#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220118193534.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="mapState和mapGetters"><a href="#mapState和mapGetters" class="headerlink" title="mapState和mapGetters"></a>mapState和mapGetters</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>主要是优化模板中插值语法<code>$store.state.xxx</code>的冗余写法 应用场景是需要用到vuex里面的数据并且不想写复杂的<code>$store.state.xxx</code>，用computed进行读取则可以用这种形式优化</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先需要import<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;mapState&#125; from &#x27;vuex&#x27;</span><br></pre></td></tr></table></figure><br>原理就是函数生成函数 这里mapState会把传进来的对象根据key生成函数 并返回从state里面找到的value值 巧妙的一点是用了拓展运算符<code>...</code>将全部对象展开<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220118194547.png" alt=""><br>在vue开发者工具中也可以知道这个它其实最后是隶属于computed的 但是vue把他独立出来显示<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220118195043.png" alt=""><br>简写方法 数组写法<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220118195326.png" alt=""><br>同理 mapGetters<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220118195453.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="mapMutations和mapActions"><a href="#mapMutations和mapActions" class="headerlink" title="mapMutations和mapActions"></a>mapMutations和mapActions</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>作用： 优化methods的写法 但需要导入和传参</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先导入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;mapActions, mapMutations&#125; from &#x27;vuex&#x27;</span><br></pre></td></tr></table></figure><br>在模板中传参<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;increment(n)&quot;&gt;+&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;decrement(n)&quot;&gt;-&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;incrementOdd(n)&quot;&gt;当前求和为奇数再加&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;incrementWait(n)&quot;&gt;等一等再加&lt;/button&gt;</span><br></pre></td></tr></table></figure><br>在methods中编写 key是模板中的方法 value是给mutations或者actions传递的信息 注意要写成字符串<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  //使用这种写法要注意模板里面的函数要传参 值要写成字符串</span><br><span class="line">  ...mapMutations(&#123;</span><br><span class="line">    increment:&#x27;INCREMENT&#x27;,</span><br><span class="line">    decrement:&#x27;DECREMENT&#x27;</span><br><span class="line">  &#125;),</span><br><span class="line">  ...mapActions(&#123;</span><br><span class="line">    incrementOdd:&#x27;incrementOdd&#x27;,</span><br><span class="line">    incrementWait:&#x27;incrementWait&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>常见错误 不传参<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220119112907.png" alt=""><br>点击一下加之后是1 1之后点奇数加（奇数加没有传参） 就会默认将事件event传进去给actions<br>在actions中完成拼接 就是这个结果<br>也有数组写法 不过个人感觉不太适合</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="vux模块化-namespaced"><a href="#vux模块化-namespaced" class="headerlink" title="vux模块化+namespaced"></a>vux模块化+namespaced</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>利用vuex模块化可以更加方便的维护数据 并且利用namespaced属性 可以使得methods和computed添加方法更方便</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>模块化配置 将所有的actions mutations getters state全部配置在一个options里面<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">const countOptions = &#123;</span><br><span class="line">    namespaced:true,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        incrementOdd(context, value) &#123;</span><br><span class="line">            if (context.state.sum % 2 !== 0) &#123;</span><br><span class="line">                context.commit(&#x27;INCREMENT&#x27;, value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        incrementWait(context, value) &#123;</span><br><span class="line">            setTimeout(() =&gt; &#123;</span><br><span class="line">                context.commit(&#x27;INCREMENT&#x27;, value)</span><br><span class="line">            &#125;, 500);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        INCREMENT(state, value) &#123;</span><br><span class="line">            console.log(&#x27;mutation里面的INCREMENT被调用了&#x27;, state, value)</span><br><span class="line">            state.sum += value;</span><br><span class="line">        &#125;,</span><br><span class="line">        DECREMENT(state, value) &#123;</span><br><span class="line">            state.sum -= value;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">        bigSum(state) &#123;</span><br><span class="line">            return state.sum * 10</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    state: &#123;</span><br><span class="line">        sum: 0,</span><br><span class="line">        school: &#x27;进击的鬼灭学园&#x27;,</span><br><span class="line">        name: &#x27;炭之狼&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>创建并暴露store的适合要引入模块 有多少就引入多少<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 创建并暴露store</span><br><span class="line">export default new vuex.Store(&#123;</span><br><span class="line">    modules:&#123;</span><br><span class="line">        countOptions</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>添加namespace属性为true<br>然后重写一下mapstate 以及其他mapxxx方法<br>注意 如果不配置namespace的话 mapxxx方法是找不到对应的模块的<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  ...mapState(&quot;countOptions&quot;, [&quot;school&quot;, &quot;name&quot;, &quot;sum&quot;]),</span><br><span class="line">  ...mapGetters(&quot;countOptions&quot;, [&quot;bigSum&quot;])</span><br><span class="line">&#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">  ...mapMutations(&quot;countOptions&quot;, &#123;</span><br><span class="line">    increment: &quot;INCREMENT&quot;,</span><br><span class="line">    decrement: &quot;DECREMENT&quot;,</span><br><span class="line">  &#125;),</span><br><span class="line">  ...mapActions(&quot;countOptions&quot;, &#123;</span><br><span class="line">    incrementOdd: &quot;incrementOdd&quot;,</span><br><span class="line">    incrementWait: &quot;incrementWait&quot;,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220119121619.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="技巧类"><a href="#技巧类" class="headerlink" title="技巧类"></a>技巧类</h1><p>iconfont<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220201143732.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端进阶" scheme="https://zlinni.github.io/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://zlinni.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>替身面板生成器</title>
    <link href="https://zlinni.github.io/posts/47a379b80246/"/>
    <id>https://zlinni.github.io/posts/47a379b80246/</id>
    <published>2022-01-03T09:18:44.000Z</published>
    <updated>2022-01-04T03:11:22.193Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>本文主要介绍如何给自己的替身匹配相应的面板</p></div><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220104105601.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/joji.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220104110655.png" alt=""></p><h1 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h1><div class="note warning flat"><p>鉴于在线版网址已经挂掉的情况下，建议使用离线版本，本质也是个echarts图表</p></div><p>在线版地址:<a href="http://dogend.tripleying.com/article/?id=1">点击</a><br>离线版地址:<a href="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/JOJO替身面板生成 _ Dogend.html">点击之后右键另存为html</a><br>使用方法：</p><ol><li>选择右边输入数值之后生成数据</li><li>之后右击图片另存为，注意是替身面板，不是整个图片<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220104110255.png" alt=""></li><li>下载以下任意图片 用ps工具覆盖刚刚的面板数值上去<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/standCharts2.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/standCharts.png" alt=""></li></ol><div class="note info flat"><p>下面介绍的是来自于b站up主木南工坊的pr替身教学</p></div><p>可以直接参考原视频的<a href="https://www.bilibili.com/video/BV1YJ411R768/?spm_id_from=333.788.recommend_more_video.0">地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="工具" scheme="https://zlinni.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="https://zlinni.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>JOJO石之海信封替换</title>
    <link href="https://zlinni.github.io/posts/f49019ed9855/"/>
    <id>https://zlinni.github.io/posts/f49019ed9855/</id>
    <published>2022-01-03T09:01:30.000Z</published>
    <updated>2022-01-03T09:14:48.121Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>本文用自建的jojo信封替换原akilar博客的蓝色信封，原帖地址:<a href="https://akilar.top/posts/e2d3c450/">akilar的信封留言板</a></p></div><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/jojo.gif" alt=""></p><h1 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h1><ol><li>在<code>[Blogroot]</code>运行指令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-envelope --save</span><br></pre></td></tr></table></figure></li><li>在站点配置文件或者主题配置文件添加配置项（对，两者任一均可。但不要都写）<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># envelope_comment</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/58900a8/</span></span><br><span class="line"><span class="attr">envelope_comment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#开关</span></span><br><span class="line">  <span class="attr">cover:</span> <span class="string">https://ae01.alicdn.com/kf/U5bb04af32be544c4b41206d9a42fcacfd.jpg</span> <span class="comment">#信笺封面图</span></span><br><span class="line">  <span class="attr">message:</span> <span class="comment">#信笺内容，支持多行</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">有什么想问的？</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">有什么想说的？</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">有什么想吐槽的？</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">哪怕是有什么想吃的，都可以告诉我哦~</span></span><br><span class="line">  <span class="attr">bottom:</span> <span class="string">自动书记人偶竭诚为您服务！</span> <span class="comment">#信笺结束语，只能单行</span></span><br><span class="line">  <span class="attr">height:</span> <span class="comment">#调整信笺划出高度，默认1050px</span></span><br><span class="line">  <span class="attr">path:</span> <span class="comment">#【可选】comments 的路径名称。默认为 comments，生成的页面为 comments/index.html</span></span><br><span class="line">  <span class="attr">front_matter:</span> <span class="comment">#【可选】comments页面的 front_matter 配置</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">留言板</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>新建js，导入以下内容<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//messageboard为你的信封所在位置</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.location.pathname.match(<span class="string">&#x27;messageboard&#x27;</span>)) &#123;</span><br><span class="line"><span class="keyword">var</span> fancybox = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;fancybox&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> beforeimg = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;beforeimg&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> afterimg = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;afterimg&#x27;</span>);</span><br><span class="line">beforeimg.setAttribute(<span class="string">&quot;data-lazy-src&quot;</span>,<span class="string">&quot;https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/beforenew.png&quot;</span>);</span><br><span class="line">afterimg.setAttribute(<span class="string">&quot;data-lazy-src&quot;</span>,<span class="string">&quot;https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/afternew.png&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="魔改" scheme="https://zlinni.github.io/categories/%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="魔改" scheme="https://zlinni.github.io/tags/%E9%AD%94%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>给Blog安排一个图床</title>
    <link href="https://zlinni.github.io/posts/ceb26206ef16/"/>
    <id>https://zlinni.github.io/posts/ceb26206ef16/</id>
    <published>2022-01-03T03:52:27.000Z</published>
    <updated>2022-01-11T13:17:20.085Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>初次尝试使用Typora编写上传博客的时候，发现图片居然都加载不出来，原因是使用软件截屏的时候直接cv到了文章内容里面，地址还是本地的地址，以下提供了两种方案对图片进行在线化处理。</p></div><div class="note warning flat"><p>自2021年12月开始jsdeliver不提供中国内部的加速服务，可以自行斟酌换cdn加速，笔者学校网络暂时没有影响。</p></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">PicGo图床</button></li><li class="tab"><button type="button" data-href="#test-2">本地插件</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><ol><li>安装PicGO图床 </li><li>打开github 右上角选择你的仓库<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103120101.png" alt=""></li><li>新建一个仓库<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103120201.png" alt=""></li><li>仓库名称为picgo 公开该仓库<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103120232.png" alt=""></li><li>回到右上角settings<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103120401.png" alt=""></li><li>选择Developer settings<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103120603.png" alt=""></li><li>选择Personal acess tokens 并创建新的token之后复制下来(只有一次)<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103120649.png" alt=""></li><li>回到PicGo 在图床设置里选择github图床 设为默认图床后确定<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103121026.png" alt=""><br>提供一下cdn加速的地址，cv即可: <a href="https://cdn.jsdelivr.net/gh/">https://cdn.jsdelivr.net/gh/</a> </li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>安装插件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></li><li>在<code>_config.yml</code>配置文件中，修改为<code>post_asset_folder: true</code>， 然后新建一篇文章<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">new</span> <span class="string">post</span> <span class="string">ceshi</span></span><br></pre></td></tr></table></figure></li><li>此时就会出现一个ceshi的文件夹和ceshi的md文件</li><li>最后只要把图片放到对应文件夹之后在对应md文件中引入即可</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="魔改" scheme="https://zlinni.github.io/categories/%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="工具" scheme="https://zlinni.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>主页动画处理</title>
    <link href="https://zlinni.github.io/posts/0368fe1c5ab9/"/>
    <id>https://zlinni.github.io/posts/0368fe1c5ab9/</id>
    <published>2022-01-02T09:06:07.000Z</published>
    <updated>2022-01-02T11:31:52.361Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip "><p>采用wowjs对主页进行动画效果处理，使得页面加载更加平滑流畅</p></div>     <details class="folding-tag" cyan><summary> 预览效果 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/index.gif" alt=""></p>              </div>            </details><h1 id="主要配置"><a href="#主要配置" class="headerlink" title="主要配置"></a>主要配置</h1><ol><li>引入<code>wow.min.js</code> 和 <code>animated.min.css</code><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css&quot;</span> <span class="string">media=&quot;defer&quot;</span> <span class="string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/gh/graingert/wow@1.3.0/dist/wow.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">data-pjax</span> <span class="string">src=&quot;/js/fadeIn.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li><li>新建<code>fadeIn.js</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给首页文章卡片套上动画</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;recent-post-item&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="comment">// 必填项 打上wow类名</span></span><br><span class="line">    arr[i].classList.add(<span class="string">&quot;wow&quot;</span>),</span><br><span class="line">    <span class="comment">// 必填项 打上动画类名</span></span><br><span class="line">    arr[i].classList.add(<span class="string">&quot;animate__zoomIn&quot;</span>),</span><br><span class="line">    <span class="comment">// 动画执行时间</span></span><br><span class="line">    arr[i].setAttribute(<span class="string">&quot;data-wow-duration&quot;</span>, <span class="string">&quot;1.5s&quot;</span>),</span><br><span class="line">    <span class="comment">// 动画延迟多久后执行</span></span><br><span class="line">    arr[i].setAttribute(<span class="string">&quot;data-wow-delay&quot;</span>, <span class="string">&quot;0&quot;</span>),</span><br><span class="line">    <span class="comment">// 动画执行次数</span></span><br><span class="line">    arr[i].setAttribute(<span class="string">&quot;data-wow-iteration&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//给侧边栏套动画</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;card-widget&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr2.length;i++)&#123;</span><br><span class="line">    arr2[i].classList.add(<span class="string">&quot;wow&quot;</span>);</span><br><span class="line">    arr2[i].classList.add(<span class="string">&quot;animate__zoomIn&quot;</span>);</span><br><span class="line">    arr2[i].setAttribute(<span class="string">&quot;data-wow-duration&quot;</span>, <span class="string">&quot;1.5s&quot;</span>),</span><br><span class="line">    arr2[i].setAttribute(<span class="string">&quot;data-wow-delay&quot;</span>, <span class="string">&quot;0&quot;</span>),</span><br><span class="line">    arr2[i].setAttribute(<span class="string">&quot;data-wow-iteration&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//初始化函数</span></span><br><span class="line">wow = <span class="keyword">new</span> WOW(&#123;</span><br><span class="line">  <span class="attr">boxClass</span>: <span class="string">&#x27;wow&#x27;</span>,</span><br><span class="line">  <span class="comment">// 当用户滚动时显示隐藏框的类名称</span></span><br><span class="line">  <span class="attr">animateClass</span>: <span class="string">&#x27;animated&#x27;</span>,</span><br><span class="line">  <span class="comment">// 触发 CSS 动画的类名称（动画库默认为&quot;animate.css&quot;库）</span></span><br><span class="line">  <span class="attr">offset</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="comment">// 定义浏览器视口底部与隐藏框顶部之间的距离。</span></span><br><span class="line">  <span class="comment">// 当用户滚动并到达此距离时，将显示隐藏的框。</span></span><br><span class="line">  <span class="attr">mobile</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 在移动设备上打开/关闭wow.js。</span></span><br><span class="line">  <span class="attr">live</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment">// 在页面上检查新的 wow.js元素。</span></span><br><span class="line">&#125;)</span><br><span class="line">wow.init();</span><br></pre></td></tr></table></figure></li></ol><h1 id="可能会遇到的问题"><a href="#可能会遇到的问题" class="headerlink" title="可能会遇到的问题"></a>可能会遇到的问题</h1><ol><li>初始化wow尽量不要改变 否则会出错</li><li>动画名称的类是双<code>_</code> 建议直接复制</li><li>使用了pjax的情况下可能出现图片残存一下再隐藏的情况 暂时无法解决 或者使用大背景遮住等待图片完全消失</li><li><code>wowjs</code>是基于<code>animatedcss</code>动画的 可以去官方文档查看动画种类</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="魔改" scheme="https://zlinni.github.io/categories/%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="魔改" scheme="https://zlinni.github.io/tags/%E9%AD%94%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>RGB头像魔改</title>
    <link href="https://zlinni.github.io/posts/08ebb908b528/"/>
    <id>https://zlinni.github.io/posts/08ebb908b528/</id>
    <published>2022-01-01T13:34:46.000Z</published>
    <updated>2022-01-02T11:33:33.657Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip "><p>本教程为rgb头像魔改，替换原先的头像，可以自定义颜色。</p></div><details class="folding-tag" cyan><summary> 预览效果 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/logosucai.gif" alt=""></p>              </div>            </details><h1 id="主要配置"><a href="#主要配置" class="headerlink" title="主要配置"></a>主要配置</h1><ol><li>引入rgbHead.css<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* rgb头像魔改 */</span></span><br><span class="line"><span class="selector-class">.avatar-img</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">overflow</span>: visible;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">55px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> black;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>, <span class="built_in">rgb</span>(<span class="number">1</span>, <span class="number">255</span>, <span class="number">234</span>), <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">251</span>, <span class="number">14</span>), <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">238</span>, <span class="number">255</span>));</span><br><span class="line">    <span class="attribute">animation</span>: color <span class="number">3s</span> linear infinite;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.avatar-img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> <span class="number">0</span> <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> <span class="attribute">color</span> &#123;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">filter</span>: <span class="built_in">hue-rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 隐藏掉原先的头像 */</span></span><br><span class="line"><span class="selector-class">.avatar-img</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.centerBox</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 引入新的头像 url是你的头像位置 */</span></span><br><span class="line"><span class="selector-class">.newheadBox</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">../img/head/boji.jpg</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 防止和上面的菜单冲突 添加一下zindex */</span></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.site-page</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.child</span>):after &#123;</span><br><span class="line">    z-index: <span class="number">23</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*头像旋转*/</span></span><br><span class="line"><span class="keyword">@keyframes</span> turn &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">25%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">75%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">270deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.newheadBox</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: turn linear <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>引入addEle.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cardinfoBox = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;card-info&#x27;</span>)[<span class="number">0</span>].children[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(cardinfoBox);</span><br><span class="line"><span class="keyword">var</span> newheadBox = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">newheadBox.classList.add(<span class="string">&#x27;newheadBox&#x27;</span>);</span><br><span class="line">cardinfoBox.classList.add(<span class="string">&#x27;centerBox&#x27;</span>);</span><br><span class="line">cardinfoBox.insertBefore(newheadBox,cardinfoBox.childNodes[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="魔改" scheme="https://zlinni.github.io/categories/%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="魔改" scheme="https://zlinni.github.io/tags/%E9%AD%94%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>Aplayer设置与优化</title>
    <link href="https://zlinni.github.io/posts/6327a1b7c765/"/>
    <id>https://zlinni.github.io/posts/6327a1b7c765/</id>
    <published>2021-12-19T04:00:30.000Z</published>
    <updated>2022-01-02T11:29:58.993Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip "><p>本教程分为两个版本，一个是插件版本，一个是修改源代码的版本。两个版本选择一个即可。</p></div><details class="folding-tag" cyan><summary> 预览效果 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/music.gif" alt=""></p>              </div>            </details><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">源代码版(个人使用)</button></li><li class="tab"><button type="button" data-href="#test-2">插件版</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><ol><li>引入aplayer.pug<br>打开<code>themes\hexo-theme-butterfly\layout\includes\head.pug</code>里面添加<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include ./third-party/aplayer.pug</span><br></pre></td></tr></table></figure></li><li>创建aplayer.pug<br>在<code>themes\hexo-theme-butterfly\layout\includes\third-party下创建aplayer.pug</code> 内容如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if theme.aplayer &amp;&amp; theme.aplayer.enable</span><br><span class="line">.aplayer(data-id=theme.aplayer.id data-server=theme.aplayer.server data-type=theme.aplayer.type data-fixed=theme.aplayer.fixed data-mini=theme.aplayer.mini data-listFolded=theme.aplayer.listFolded data-order=theme.aplayer.order data-preload=theme.aplayer.preload)</span><br><span class="line">each item in theme.aplayer.css</span><br><span class="line">link(rel=&#x27;stylesheet&#x27;, href=item)</span><br><span class="line">each item in theme.aplayer.js</span><br><span class="line">script(src=item)</span><br></pre></td></tr></table></figure></li><li>打开主题配置文件<code>themes\hexo-theme-butterfly\_config.yml</code>在最后加入</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">aplayer:</span><br><span class="line">  enable: true</span><br><span class="line">  js:</span><br><span class="line">    - https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.js</span><br><span class="line">    - https://cdn.jsdelivr.net/npm/meting@1.2.0/dist/Meting.min.js</span><br><span class="line">  css:</span><br><span class="line">    - https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.css</span><br><span class="line">  id: 2841149029</span><br><span class="line">  server: netease </span><br><span class="line">  type: playlist</span><br><span class="line">  fixed: &#x27;true&#x27;</span><br><span class="line">  order: random</span><br><span class="line">  preload: none</span><br><span class="line">  listFolded: &#x27;false&#x27;</span><br></pre></td></tr></table></figure><p>其中参数见下图</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211217200814.png"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><div class="note primary flat"><p>转自<a href="https://akilar.top/posts/3afa069a/">akilar的博客</a></p></div><ol><li><p>在博客根目录 <code>[Blogroot]</code> 下打开终端，运行以下指令安装 <a href="https://www.npmjs.com/package/hexo-tag-aplayer">hexo-tag-aplayer</a> 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexp-tag-aplayer --save</span><br></pre></td></tr></table></figure></li><li><p>在站点配置文件 <code>[Blogroot]\_config.yml</code> 中新增配置项，建议直接加在最底下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># APlayer</span></span><br><span class="line"><span class="comment"># https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md</span></span><br><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>修改主题配置文件 <code>[Blogroot]\_config.butterfly.yml</code> 中关于 Aplayer 的配置内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>在主题配置文件 <code>[Blogroot]\_config.butterfly.yml</code> 的 inject 配置项中添加 Aplayer 的容器。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> <span class="string">data-id=&quot;5183531430&quot;</span> <span class="string">data-server=&quot;netease&quot;</span> <span class="string">data-type=&quot;playlist&quot;</span> <span class="string">data-fixed=&quot;true&quot;</span> <span class="string">data-mini=&quot;true&quot;</span> <span class="string">data-listFolded=&quot;false&quot;</span> <span class="string">data-order=&quot;random&quot;</span> <span class="string">data-preload=&quot;none&quot;</span> <span class="string">data-autoplay=&quot;false&quot;</span> <span class="string">muted&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在博客根目录 <code>[Blogroot]</code> 下打开终端，运行以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></li><li><p>关于更换歌单的问题，大部分同学都因为只更改了 <code>data-id</code> 的值，所以出现歌单加载不出的情况，此处需要注意，<code>data-id</code>、<code>data-server</code>、<code>data-type</code> 分别对应了<code>歌单的</code>id<code>，歌单的服务商、歌单的类型,所以需要确认这三项是一一对应的。如图中所示，找到网易云歌单的url，</code><a href="https://music.163.com/#/playlist?id=4907060762`">https://music.163.com/#/playlist?id=4907060762`</a>, 此处的<code>palylist</code>对应的就是<code>data-type</code>的值，<code>id</code>就是<code>data-id</code>的值，而网易云的<code>data-server</code>为<code>netease</code>，这个可以通过Aplayer的插件文档查阅到。<strong>只有三个参数对应正确才能正常加载歌单。</strong></p></li><li><p>Aplayer的网易云歌单接口时不时的会挂掉，所以如果你确定你配置正确，但是歌单还是没有出现。不妨去看看其他人的站点是不是也没有Aplayer标签了来判断是Aplayer本身接口的问题还是自己配置出错的问题。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="收入侧边栏-修改配色和歌词"><a href="#收入侧边栏-修改配色和歌词" class="headerlink" title="收入侧边栏+修改配色和歌词"></a>收入侧边栏+修改配色和歌词</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">收入侧边栏</button></li><li class="tab"><button type="button" data-href="#test-2">配色和歌词</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span><span class="selector-class">.aplayer-narrow</span> <span class="selector-class">.aplayer-body</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">66px</span> <span class="meta">!important</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.aplayer-body</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span> <span class="meta">!important</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.aplayer.aplayer-fixed .aplayer-lrc &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    position: fixed;</span><br><span class="line">    bottom: 10px;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    margin: 0;</span><br><span class="line">    z-index: 98;</span><br><span class="line">    pointer-events: none;</span><br><span class="line">    text-shadow: -1px -1px 0 #fff;  </span><br><span class="line">&#125;</span><br><span class="line">.aplayer .aplayer-lrc p &#123;</span><br><span class="line">color: #0ff5ff !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="不间断播放"><a href="#不间断播放" class="headerlink" title="不间断播放"></a>不间断播放</h1><div class="tip "><p>刚开始以为设置了pjax之后就会切换页面连续播放，但后面发现还是有问题，随后找文章发现是aplayer每次在进入页面就会重载一次。</p></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">解决方法1</button></li><li class="tab"><button type="button" data-href="#test-2">解决方法2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>引入1.2的metingjs里面的no-destroy方法<br>1.2版本metingjs下载地址：<a href="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/Meting.min.zip">点击下载</a><br>修改主题配置文件<code>themes\hexo-theme-butterfly\_config.yml</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">aplayer:</span><br><span class="line">  enable: true</span><br><span class="line">  js:</span><br><span class="line">    - https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.js</span><br><span class="line">    - ./lib/Meting.min.js</span><br><span class="line">  css:</span><br><span class="line">    - https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.css</span><br><span class="line">  id: 7123261369 //这个是你的歌单id</span><br><span class="line">  server: netease </span><br><span class="line">  type: playlist</span><br><span class="line">  fixed: &#x27;true&#x27;</span><br><span class="line">  order: list</span><br><span class="line">  preload: none</span><br><span class="line">  listFolded: &#x27;false&#x27;</span><br><span class="line">  autoplay: true</span><br></pre></td></tr></table></figure><br>新建addnodestory.js，内容如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aplayer = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;aplayer&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">aplayer.classList.add(<span class="string">&#x27;no-destroy&#x27;</span>);</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>使用插件版</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="关于导入歌单"><a href="#关于导入歌单" class="headerlink" title="关于导入歌单"></a>关于导入歌单</h1><p>网易云右键你想要导入的歌单并复制链接，用网页打开<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211217204804.png" alt="此处id就是你的歌单id"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="魔改" scheme="https://zlinni.github.io/categories/%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="魔改" scheme="https://zlinni.github.io/tags/%E9%AD%94%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建+Github</title>
    <link href="https://zlinni.github.io/posts/7fffe8d5dfea/"/>
    <id>https://zlinni.github.io/posts/7fffe8d5dfea/</id>
    <published>2021-12-19T03:06:30.000Z</published>
    <updated>2022-01-01T05:54:21.798Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h1><div class="tip "><p>本博客使用Hexo框架搭建，Hexo是一款轻量级，高效的博客框架，可以使用markdown对文章进行编写，可以实现无后端评论系统，站内搜索等，以及支持一键部署到github或gitee等主流代码平台，让使用者更加专注于博客内容的更新，以下是<a href = 'https://hexo.io/zh-cn/'>hexo</a>的官网，内有使用文档以及其他教程，本篇视频资源参考自<a href='https://www.bilibili.com/video/BV1mU4y1j72n?from=search&seid=3952314687470919837&spm_id_from=333.337.0.0'>【2021最新版】保姆级Hexo+github搭建个人博客</a></p></div> <h2 id="基础工具git-nodejs"><a href="#基础工具git-nodejs" class="headerlink" title="基础工具git+nodejs"></a>基础工具git+nodejs</h2><ol><li><p><code>git</code>是一款强大的项目管理工具，可以用于自定义项目的管理，实现进度的上传以及拉去，安装<a href = 'https://git-scm.com/download'>git</a><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211215103045.png" alt="随后自行选择32位或者64位安装"/></div><span class="image-caption">随后自行选择32位或者64位安装</span></div></p></li><li><p>之后一路next，安装之后使用git -v验证是否安装成功</p></li><li><p><code>nodejs</code>，一款前端程序员必备的服务端语言，安装地址<a href='http://nodejs.cn/download/'>nodejs</a>，也是一路next安装，随后打开<code>cmd</code>输入<code>node -v</code>和<code>npm -v</code>验证是否安装成功</p></li></ol><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ol><li><p>新建一个项目文件夹，命名随意，用来放自己的博客内容，我的是<code>blog</code></p></li><li><p>进入该文件夹，右键<code>git bash</code>输入以下指令安装hexo（注意git的命令窗口不是使用<code>ctrl v</code>进行粘贴，建议右键<code>paste</code>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>验证安装 <code>hexo - v</code></p></li><li><p>输入以下指令生成静态网页并打开本地服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s -g</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211215104804.png" alt="点击复制上面的地址在浏览器打开"/></div><span class="image-caption">点击复制上面的地址在浏览器打开</span></div></li><li><p>如果以上步骤都成功，那么恭喜你已经构建好hexo了</p></li></ol><h2 id="注册github＋新建个人仓库-ssh"><a href="#注册github＋新建个人仓库-ssh" class="headerlink" title="注册github＋新建个人仓库+ssh"></a>注册github＋新建个人仓库+ssh</h2><div class="note info flat"><p>网上有很多关于github注册的内容，这里就不详细讲了</p></div><ol><li>新建个人仓库，命名为项目名字<code>.github.io</code>，勾选<code>readme</code>，</li></ol><p>注：必须这样命名，否则之后部署会识别不到</p><ol><li><p>右键<code>git bash</code>，输入下面指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure></li><li><p>检查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure></li><li><p>创建ssh，一路回车就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure></li><li><p>再输入，将输出的内容复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>打开github 右上角头像点击找到里面的<code>setting</code>，点开后找到<code>SSH and GPG keys</code><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211215111747.png"/></div></div></p></li><li><p>新建一个ssh，把你刚刚复制的内容放进去</p></li><li><p>检查ssh，如果出现你的用户名就成功了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li></ol><h2 id="正式部署"><a href="#正式部署" class="headerlink" title="正式部署"></a>正式部署</h2><ol><li><p>复制你的仓库的ssh地址<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211215123758.png"/></div></div></p></li><li><p>打开博客根目录下面的<code>_config.yml</code>文件，拉到最底配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">   type: git</span><br><span class="line">   repository: 刚刚复制的内容 </span><br><span class="line">   branch: main</span><br></pre></td></tr></table></figure><p>这里注意一点 现在github的默认分支是main 不是master</p><ol><li><p>安装<code>deploy-git</code> 这个是一个hexo部署命令的插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>讲一下主要的三个指令 一般情况下只会用到<code>hexo g</code> 和 <code>hexo d</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean //清除前面生成的东西 一般用于排错 简写hexo cl </span><br><span class="line">hexo generate //生成你的网页 简写 hexo g</span><br><span class="line">hexo deploy //部署文章 简写hexo d</span><br></pre></td></tr></table></figure></li><li><p>第一次deploy可能要输入一次用户名和密码</p></li></ol></li></ol><h2 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a>设置个人域名</h2><div class="note info flat"><p>因为个人还没有这方面的需求，所以暂时没有购买域名，需要了解的可以自行百度</p></div><h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><ol><li><p>进入根目录，找到<code>[blog\source\_posts]</code>，输入以下指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n xxx</span><br></pre></td></tr></table></figure></li><li><p>就可以看到生成了一个xxx.md文件，点开该文件，里面一般有两个属性，一个是title一个是date，前者是你显示在页面的文章标题，后者是创建该文章的日期，下面介绍一下文章的其他属性</p></li></ol><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td><td><a href="https://hexo.io/zh-cn/docs/configuration#文章"><code>config.default_layout</code></a></td></tr><tr><td><code>title</code></td><td>标题</td><td>文章的文件名</td></tr><tr><td><code>date</code></td><td>建立日期</td><td>文件建立日期</td></tr><tr><td><code>updated</code></td><td>更新日期</td><td>文件更新日期</td></tr><tr><td><code>comments</code></td><td>开启文章的评论功能</td><td>true</td></tr><tr><td><code>tags</code></td><td>标签（不适用于分页）</td><td></td></tr><tr><td><code>categories</code></td><td>分类（不适用于分页）</td><td></td></tr><tr><td><code>permalink</code></td><td>覆盖文章网址</td></tr></tbody></table></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="魔改" scheme="https://zlinni.github.io/categories/%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="魔改" scheme="https://zlinni.github.io/tags/%E9%AD%94%E6%94%B9/"/>
    
    <category term="hexo" scheme="https://zlinni.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Cyberpunk配色魔改</title>
    <link href="https://zlinni.github.io/posts/5531b9d5d73a/"/>
    <id>https://zlinni.github.io/posts/5531b9d5d73a/</id>
    <published>2021-12-19T01:34:51.000Z</published>
    <updated>2022-01-01T05:54:37.387Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip "><p>刚开始的主页没有啥个人风格，个人比较喜欢dark模式，但不喜欢它的反人类透明度，就直接改源码去掉了日间模式和透明度，之后发现还是不够满意，刚好就参考到了之前在永庆坊拍的照片配色风格</p></div><details class="folding-tag" cyan><summary> 点击查看图片 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/e3c965193ce3716899dda3c59c3b89b.jpg" alt="永庆坊电影院"><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211219095500.png" alt="原来的风格？"><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211219102444.png" alt="改了配色"></p>              </div>            </details><h1 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h1><ol><li>新建css 自行命名 需要注意的是，如果你自己注释 最好不要使用双斜杠，如果报错，建议你移除没有的部分 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 所有背景（包括首页卡片、文章页、页面页等） */</span></span><br><span class="line"><span class="selector-id">#aside_content</span> <span class="selector-class">.card-widget</span>, <span class="selector-id">#recent-posts</span>&gt;<span class="selector-class">.recent-post-item</span>, <span class="selector-class">.layout_page</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:first</span>-child<span class="selector-pseudo">:not</span>(<span class="selector-class">.recent-posts</span>), <span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#page</span>, <span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#post</span>, <span class="selector-class">.read-mode</span> <span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#post</span>&#123;</span><br><span class="line">    <span class="comment">/* 以下代表白色透明度为0.3 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">7</span>) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#0ff5ff</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">10px</span> <span class="number">#0ff5ff</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#git_container</span>,<span class="selector-id">#archive</span>,<span class="selector-id">#page</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.7</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#0ff5ff</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">20px</span> <span class="number">#0ff5ff</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*收藏博客的边框*/</span></span><br><span class="line"><span class="selector-class">.card-info</span> <span class="selector-id">#card-info-btn</span> &#123;</span><br><span class="line">   <span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#0ff5ff</span> <span class="meta">!important</span>;</span><br><span class="line">   <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">20px</span> <span class="number">#0ff5ff</span>  <span class="meta">!important</span>;</span><br><span class="line">   <span class="attribute">background-color</span>:transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button--animated</span>:before&#123;</span><br><span class="line">   background:<span class="number">#0ff5ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*所有的侧边栏边框*/</span></span><br><span class="line"><span class="selector-class">.card-widget</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.7</span>) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#ea03f8</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">20px</span> <span class="number">#ea03f8</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*主题下面的字体颜色*/</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span>&#123;</span><br><span class="line">--<span class="attribute">font</span>-<span class="attribute">color</span>:<span class="number">#fdeacc</span>;</span><br><span class="line">--text-highlight-<span class="attribute">color</span>:<span class="number">#fdeacc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*电子时钟的字体颜色*/</span></span><br><span class="line"><span class="selector-attr">[data-theme=dark]</span> <span class="selector-class">.clock-row</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fdeacc</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*标题和副标题*/</span></span><br><span class="line"><span class="selector-id">#subtitle</span>,<span class="selector-id">#site-title</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#e364d7</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>注入css，找到你的主题配置文件，<code>ctrl+f</code>查找inject，在head下面插入css<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/neonlight.css&quot;&gt;</span></span><br></pre></td></tr></table></figure>如果以上步骤都正确的话，那么恭喜你成功完成了配色魔改</li></ol><hr><div class="tip cogs"><p>当然还没有结束，主题怎么少的了炫酷的鼠标特效，那么鼠标特效怎么拿呢？</p></div><h1 id="鼠标特效"><a href="#鼠标特效" class="headerlink" title="鼠标特效"></a>鼠标特效</h1><p>找到了个非常好的<a href="https://custom-cursor.com/en">网站</a>啊,里面你想要的都有<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211219103840.png"/></div></div><br>那就选这个炫酷的<del>抖音特效</del><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211219104029.png"/></div></div><br>这个时候可能就不知道怎么操作了，但程序员还是有办法的</p><ol><li>打开f12，点击左上角选中元素，选择hoverme框框<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211219104403.png"/></div></div></li><li>点击hoverme外框 复制一份<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211219104529.png"/></div></div></li><li>点击hoverme内框 复制一份<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211219105400.png"/></div></div></li><li>新建css 将刚刚复制的两份 粘贴上去<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*这里放外框*/</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">cursor</span>:<span class="built_in">url</span>(<span class="string">https://cdn.custom-cursor.com/db/7248/32/starter-3d-effect-cursor-cursor.png</span>) , default<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*这里放内框*/</span></span><br><span class="line"><span class="selector-tag">a</span>,<span class="selector-tag">img</span>,<span class="selector-tag">button</span>&#123;</span><br><span class="line"><span class="attribute">cursor</span>:<span class="built_in">url</span>(<span class="string">https://cdn.custom-cursor.com/db/7247/32/starter-3d-effect-cursor-pointer.png</span>) , pointer<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>注入css</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="魔改" scheme="https://zlinni.github.io/categories/%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="魔改" scheme="https://zlinni.github.io/tags/%E9%AD%94%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>Butterfly魔改合集(日更状态)</title>
    <link href="https://zlinni.github.io/posts/2d51252021cb/"/>
    <id>https://zlinni.github.io/posts/2d51252021cb/</id>
    <published>2021-12-13T06:53:50.000Z</published>
    <updated>2022-01-04T03:14:19.206Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip "><p>本篇博客主要用于记录hexo butterfly主题魔改，涉及到部分css和js的添加和更改，基本没有对pug和styl进行修改，可以放心食用.<br>每天争取更新</p></div>     <details class="folding-tag" cyan false><summary> 开发日志 </summary>              <div class='content'>              <div class="timeline"><div class="timenode"><div class="meta"><p><p>2021-12-13</p></p></div><div class="body"><p>更新字体</p></div></div><div class="timenode"><div class="meta"><p><p>2021-12-14</p></p></div><div class="body"><p>更新本地搜索</p></div></div><div class="timenode"><div class="meta"><p><p>2021-12-15</p></p></div><div class="body"><ol><li>更新Hexo搭建</li><li>待更新网站音乐，snackbar，音乐css，pjax</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-12-16</p></p></div><div class="body"><p>更新网站aplayer，音乐css，pjax</p></div></div><div class="timenode"><div class="meta"><p><p>2021-12-18</p></p></div><div class="body"><p>更新插件版aplayer</p></div></div><div class="timenode"><div class="meta"><p><p>2021-12-19</p></p></div><div class="body"><p>重新修改了文章布局，发布了几篇教程</p></div></div><div class="timenode"><div class="meta"><p><p>2021-12-20</p></p></div><div class="body"><p>更新一个菜单栏魔改</p></div></div><div class="timenode"><div class="meta"><p><p>2022-1-2</p></p></div><div class="body"><ol><li>更新一个RGB头像魔改</li><li>更新了主页动画平滑处理</li><li>更新了git贡献日历</li><li>更新了电子时钟</li><li>更新了utools插件压缩功能</li><li>更新Typora</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2022-1-3</p></p></div><div class="body"><ol><li>更新一个picgo图床</li><li>更新jojo石之海信封</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2022-1-3</p></p></div><div class="body"><ol><li>更新替身生成器</li></ol></div></div></div>              </div>            </details><h1 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h1><div class="note primary flat"><p><a href="https://zlinni.github.io/posts/7fffe8d5dfea/">Hexo搭建+github</a></p></div><h1 id="Aplayer全局吸底-不间断播放-配色修改"><a href="#Aplayer全局吸底-不间断播放-配色修改" class="headerlink" title="Aplayer全局吸底+不间断播放+配色修改"></a>Aplayer全局吸底+不间断播放+配色修改</h1><div class="note primary flat"><p><a href="https://zlinni.github.io/posts/6327a1b7c765/">Aplayer的设置与优化</a></p></div><details class="folding-tag" cyan><summary> 预览效果 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/music.gif" alt=""></p>              </div>            </details><h1 id="配色魔改"><a href="#配色魔改" class="headerlink" title="配色魔改"></a>配色魔改</h1><div class="note primary flat"><p><a href="https://zlinni.github.io/posts/5531b9d5d73a/">Cyberpunk配色魔改</a></p></div><h1 id="RGB头像魔改"><a href="#RGB头像魔改" class="headerlink" title="RGB头像魔改"></a>RGB头像魔改</h1><div class="note primary flat"><p><a href="https://zlinni.github.io/posts/08ebb908b528/">RGB头像魔改</a></p></div><details class="folding-tag" cyan><summary> 预览效果 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/logosucai.gif" alt=""></p>              </div>            </details><h1 id="主页动画平滑处理"><a href="#主页动画平滑处理" class="headerlink" title="主页动画平滑处理"></a>主页动画平滑处理</h1><div class="note primary flat"><p><a href="https://zlinni.github.io/posts/0368fe1c5ab9/">主页动画平滑处理</a></p></div><details class="folding-tag" cyan><summary> 预览效果 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/index.gif" alt=""></p>              </div>            </details><h1 id="JOJO石之海信封替换"><a href="#JOJO石之海信封替换" class="headerlink" title="JOJO石之海信封替换"></a>JOJO石之海信封替换</h1><div class="note primary flat"><p><a href="https://zlinni.github.io/posts/f49019ed9855/">JOJO石之海信封替换</a></p></div><details class="folding-tag" cyan><summary> 预览效果 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/jojo.gif" alt=""></p>              </div>            </details><h1 id="picgo图床"><a href="#picgo图床" class="headerlink" title="picgo图床"></a>picgo图床</h1><div class="note primary flat"><p><a href="https://zlinni.github.io/posts/ceb26206ef16/">给Blog添加一个图床</a></p></div><h1 id="替身生成器"><a href="#替身生成器" class="headerlink" title="替身生成器"></a>替身生成器</h1><div class="note primary flat"><p><a href="https://zlinni.github.io/posts/47a379b80246/">替身生成器</a></p></div><h1 id="字体修改"><a href="#字体修改" class="headerlink" title="字体修改"></a>字体修改</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">配置参数</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><ol><li><p>从字体网上面测试字体，这里建议使用第一字体网<a href="http://www.diyiziti.com/">http://www.diyiziti.com/</a></p></li><li><p>再从另外一个字体网下载字体，一般是免费的，这里推荐方正字库官网<a href="https://www.foundertype.com/">https://www.foundertype.com/</a></p></li><li><p>在<span class='p cyan'>source</span>目录中新建fonts文件夹，这里使用<span class='p cyan'>【\themes\hexo-theme-butterfly\source】</span>，将字体文件放入</p></li><li><p>在<span class='p cyan'>css</span>目录新建<span class='p cyan'>custom.css</span>写入如下内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span>&#123;</span><br><span class="line">  <span class="attribute">font-family</span>:<span class="string">&#x27;fzfwqyt&#x27;</span>;  <span class="comment">/* 字体名自定义即可 */</span></span><br><span class="line">  <span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">&#x27;/fonts/fzfwqyt.TTF&#x27;</span>); <span class="comment">/* 字体文件路径 */</span></span><br><span class="line">  <span class="attribute">font-display</span> : swap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>注入css文件</li><li>在控制台调试你的字体，成功后将下面代码加入<code>css</code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"> <span class="attribute">font-family</span>:<span class="string">&#x27;fzfwqyt&#x27;</span>,-apple-system, BlinkMacSystemFont, <span class="string">&#x27;Segoe UI&#x27;</span>, <span class="string">&#x27;Helvetica Neue&#x27;</span>, Lato, Roboto, <span class="string">&#x27;PingFang SC&#x27;</span>, <span class="string">&#x27;Microsoft YaHei&#x27;</span>, sans-serif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">配置参数</button></li><li class="tab active"><button type="button" data-href="#test-2">样式预览</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><p>在你的博客根目录git bash输入以下指令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><br>在主题文件的_config.yml中找到localsearch并修改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Posts</span></span><br><span class="line">    <span class="attr">hits_empty:</span> <span class="string">&quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot;</span> <span class="comment"># 如果没有查到内容相关内容显示</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test-2"><p><strong> 成功后菜单栏最左侧会出现搜索icon </strong></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211214092101.png"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211214091732.png"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="菜单栏魔改"><a href="#菜单栏魔改" class="headerlink" title="菜单栏魔改"></a>菜单栏魔改</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">配置参数</button></li><li class="tab active"><button type="button" data-href="#test-2">样式预览</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><ol><li>修改主题配置文件，找到menu<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">闲言碎语||fas</span> <span class="attr">fa-heart:</span></span><br><span class="line">     <span class="string">日常吐槽:</span> <span class="string">/artitalk/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-comment-dots</span></span><br><span class="line">     <span class="string">留个说法:</span> <span class="string">/messageboard/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-comment-dots</span></span><br><span class="line">  <span class="string">分类||</span> <span class="attr">fa fa-folder-open:</span></span><br><span class="line">     <span class="string">前端基础:</span> <span class="string">/categories/前端基础/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-bookmark</span></span><br><span class="line">     <span class="string">前端进阶:</span> <span class="string">/categories/前端进阶/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-bookmark</span></span><br><span class="line">     <span class="string">程序员必修:</span> <span class="string">/categories/程序员必修/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-bookmark</span></span><br><span class="line">     <span class="string">面试:</span> <span class="string">/categories/面试/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-bookmark</span></span><br><span class="line">     <span class="string">魔改:</span> <span class="string">/categories/魔改/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-bookmark</span></span><br><span class="line">  <span class="string">镜像网站||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">     <span class="attr">gitee:</span> <span class="string">https://zlinni.gitee.io/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-link</span></span><br><span class="line">     <span class="attr">github:</span> <span class="string">https://zlinni.github.io/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于本站||</span> <span class="attr">fas fa-desktop:</span></span><br><span class="line">     <span class="string">和我无关:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-user-tag</span></span><br><span class="line">     <span class="string">友情链接:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-link</span></span><br></pre></td></tr></table></figure></li><li>注意多级目录的格式 而且必须要有对应的页面否则报错</li><li>你可以在<code>source/</code>里面新建页面 指令是<code>hexo new page xxx</code></li><li>icon也是可以更换的，这里提供<a href="https://fontawesome.com/v4.7/icons/">网站</a></li><li>彩色icon的话可能要引入具体的svg格式图片 暂时不做分析</li></ol><div class="note warning flat"><p>如果你设置了多级目录，可能会与魔改的头像冲突，注意修改zindex就可以解决问题</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test-2"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211220091127.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="github贡献日历"><a href="#github贡献日历" class="headerlink" title="github贡献日历"></a>github贡献日历</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">配置参数</button></li><li class="tab active"><button type="button" data-href="#test-2">样式预览</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><p>转自<a href="https://akilar.top/posts/1f9c68c9/">akilar的博客</a></p><ol><li>安装插件，在博客根目录 [Blogroot] 下打开终端，运行以下指令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-gitcalendar --save</span><br></pre></td></tr></table></figure></li><li>添加配置信息，以下为写法示例<br>在站点配置文件<code>_config.yml</code> 或者主题配置文件如<code>_config.butterfly.yml</code> 中添加<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-filter-gitcalendar</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/1f9c68c9/</span></span><br><span class="line"><span class="attr">gitcalendar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="comment"># butterfly挂载容器</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># volantis挂载容器</span></span><br><span class="line">  <span class="comment"># layout:</span></span><br><span class="line">  <span class="comment">#   type: class</span></span><br><span class="line">  <span class="comment">#   name: l_main</span></span><br><span class="line">  <span class="comment">#   index: 0</span></span><br><span class="line">  <span class="comment"># matery挂载容器</span></span><br><span class="line">  <span class="comment"># layout:</span></span><br><span class="line">  <span class="comment">#   type: id</span></span><br><span class="line">  <span class="comment">#   name: indexCard</span></span><br><span class="line">  <span class="comment">#   index: 0</span></span><br><span class="line">  <span class="comment"># mengd挂载容器</span></span><br><span class="line">  <span class="comment"># layout:</span></span><br><span class="line">  <span class="comment">#   type: class</span></span><br><span class="line">  <span class="comment">#   name: content</span></span><br><span class="line">  <span class="comment">#   index: 0</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">Akilarlxh</span> <span class="comment">#git用户名</span></span><br><span class="line">  <span class="attr">apiurl:</span> <span class="string">&#x27;https://gitcalendar.akilar.top&#x27;</span></span><br><span class="line">  <span class="attr">minheight:</span></span><br><span class="line">    <span class="attr">pc:</span> <span class="string">280px</span> <span class="comment">#桌面端最小高度</span></span><br><span class="line">    <span class="attr">mibile:</span> <span class="string">0px</span> <span class="comment">#移动端最小高度</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;[&#x27;#e4dfd7&#x27;, &#x27;#f9f4dc&#x27;, &#x27;#f7e8aa&#x27;, &#x27;#f7e8aa&#x27;, &#x27;#f8df72&#x27;, &#x27;#fcd217&#x27;, &#x27;#fcc515&#x27;, &#x27;#f28e16&#x27;, &#x27;#fb8b05&#x27;, &#x27;#d85916&#x27;, &#x27;#f43e06&#x27;]&quot;</span> <span class="comment">#橘黄色调</span></span><br><span class="line">  <span class="comment"># color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#fdcdec&#x27;, &#x27;#fc9bd9&#x27;, &#x27;#fa6ac5&#x27;, &#x27;#f838b2&#x27;, &#x27;#f5089f&#x27;, &#x27;#c4067e&#x27;, &#x27;#92055e&#x27;, &#x27;#540336&#x27;, &#x27;#48022f&#x27;, &#x27;#30021f&#x27;]&quot; #浅紫色调</span></span><br><span class="line">  <span class="comment"># color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#f0fff4&#x27;, &#x27;#dcffe4&#x27;, &#x27;#bef5cb&#x27;, &#x27;#85e89d&#x27;, &#x27;#34d058&#x27;, &#x27;#28a745&#x27;, &#x27;#22863a&#x27;, &#x27;#176f2c&#x27;, &#x27;#165c26&#x27;, &#x27;#144620&#x27;]&quot; #翠绿色调</span></span><br><span class="line">  <span class="comment"># color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#f1f8ff&#x27;, &#x27;#dbedff&#x27;, &#x27;#c8e1ff&#x27;, &#x27;#79b8ff&#x27;, &#x27;#2188ff&#x27;, &#x27;#0366d6&#x27;, &#x27;#005cc5&#x27;, &#x27;#044289&#x27;, &#x27;#032f62&#x27;, &#x27;#05264c&#x27;]&quot; #天青色调</span></span><br><span class="line">  <span class="attr">container:</span> <span class="string">.recent-post-item(style=&#x27;width:100%;height:auto;padding:10px;&#x27;)</span> <span class="comment">#父元素容器，需要使用pug语法</span></span><br><span class="line">  <span class="attr">gitcalendar_css:</span> <span class="string">https://unpkg.zhimg.com/hexo-filter-gitcalendar/lib/gitcalendar.css</span></span><br><span class="line">  <span class="attr">gitcalendar_js:</span> <span class="string">https://unpkg.zhimg.com/hexo-filter-gitcalendar/lib/gitcalendar.js</span></span><br></pre></td></tr></table></figure></li><li>参数释义<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220102220518.png" alt=""></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test-2"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220102220351.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="电子时钟"><a href="#电子时钟" class="headerlink" title="电子时钟"></a>电子时钟</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">配置参数</button></li><li class="tab active"><button type="button" data-href="#test-2">样式预览</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><p>转自<a href="https://akilar.top/posts/4e39cf4a/">akilar的博客</a></p><ol><li>安装插件,在博客根目录[Blogroot]下打开终端，运行以下指令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-clock --save</span><br></pre></td></tr></table></figure></li><li>添加配置信息，以下为写法示例<br>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># electric_clock</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/4e39cf4a/</span></span><br><span class="line"><span class="attr">electric_clock:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="comment"># - /posts/</span></span><br><span class="line">    <span class="comment"># - /about/</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">class</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sticky_layout</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">loading:</span> <span class="string">https://unpkg.zhimg.com/hexo-butterfly-clock/lib/loading.gif</span> <span class="comment">#加载动画自定义</span></span><br><span class="line">  <span class="attr">clock_css:</span> <span class="string">https://unpkg.zhimg.com/hexo-butterfly-clock/lib/clock.min.css</span></span><br><span class="line">  <span class="attr">clock_js:</span> <span class="string">https://unpkg.zhimg.com/hexo-butterfly-clock/lib/clock.min.js</span></span><br><span class="line">  <span class="attr">ip_api:</span> <span class="string">https://pv.sohu.com/cityjson?ie=utf-8</span></span><br></pre></td></tr></table></figure></li><li>参数示意<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220102221732.png" alt=""></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test-2"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220102221805.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="一键部署-上传脚本"><a href="#一键部署-上传脚本" class="headerlink" title="一键部署/上传脚本"></a>一键部署/上传脚本</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">配置参数</button></li><li class="tab active"><button type="button" data-href="#test-2">样式预览</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><p>两个批处理文件</p><ol><li>新建自动部署.txt<figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="function">C:</span></span><br><span class="line"><span class="function"><span class="title">cd</span> 你的<span class="title">blog</span>所在目录</span></span><br><span class="line"><span class="function"><span class="title">hexo</span> <span class="title">cl</span> &amp;&amp; <span class="title">hexo</span> <span class="title">g</span> &amp;&amp; <span class="title">hexo</span> <span class="title">s</span></span></span><br></pre></td></tr></table></figure></li><li>新建自动上传.txt<figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="function">C:</span></span><br><span class="line"><span class="function"><span class="title">cd</span> 你的<span class="title">blog</span>所在目录</span></span><br><span class="line"><span class="function"><span class="title">hexo</span> <span class="title">g</span> &amp;&amp; <span class="title">hexo</span> <span class="title">d</span></span></span><br></pre></td></tr></table></figure></li><li>修改两个txt的后缀名为bat</li><li>双击运行即可</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test-2"><p>暂无预览</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="utools压缩图片"><a href="#utools压缩图片" class="headerlink" title="utools压缩图片"></a>utools压缩图片</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">配置参数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>utools是一个功能非常强大的轻量级工具，下面使用到它的一键压缩功能</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>官网下载utools</li><li>在插件市场中搜索图片压缩第一个<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220102222913.png" alt=""></li><li>之后选择博客下面的图片文件夹，一键压缩<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220102223037.png" alt=""></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h1><div class="note warning flat"><p>Typora自2021年11月后开始收费，需不需要使用付费版本自行斟酌</p></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>Typora是一款轻量级的markdown编辑器，支持很多标签语法，本身相当于一个网页，非常的实用，本人也是用这款软件进行文章的撰写和学习的记录。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p><a href="https://blog.csdn.net/SIMBA1949/article/details/79001226">转自csdn</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="下面待更新"><a href="#下面待更新" class="headerlink" title="下面待更新"></a>下面待更新</h1><h1 id="闲言碎语部分"><a href="#闲言碎语部分" class="headerlink" title="闲言碎语部分"></a>闲言碎语部分</h1><h2 id="日常吐槽artitalk"><a href="#日常吐槽artitalk" class="headerlink" title="日常吐槽artitalk"></a>日常吐槽artitalk</h2><h1 id="镜像网站多线部署"><a href="#镜像网站多线部署" class="headerlink" title="镜像网站多线部署"></a>镜像网站多线部署</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="魔改" scheme="https://zlinni.github.io/categories/%E9%AD%94%E6%94%B9/"/>
    
    
    <category term="魔改" scheme="https://zlinni.github.io/tags/%E9%AD%94%E6%94%B9/"/>
    
  </entry>
  
  <entry>
    <title>ES6-11</title>
    <link href="https://zlinni.github.io/posts/66e2d24f7085/"/>
    <id>https://zlinni.github.io/posts/66e2d24f7085/</id>
    <published>2021-12-06T14:08:47.000Z</published>
    <updated>2021-12-17T07:47:13.938Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tip cogs"><p>本文主要用于记录es6-11的学习过程，参考视频<a href='https://www.bilibili.com/video/BV1uK411H7on?p=1'>【尚硅谷Web前端ES6教程，涵盖ES6-ES11】</a></p></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><ol><li>ECMA：<br>ECMA 欧洲计算机制造商协会</li><li>ECMAScript：<br>是ECMA国际通过ECMA-262标准化的脚本程序设计语言</li><li>ECMA-262：<br>它定制的一种标准</li><li>历史：<br>每年都会更新一个版本 截至写稿已经是第十二版 即es12</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="let"><a href="#let" class="headerlink" title="let"></a>let</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>和var类似 又有点不同</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ul><li><p>声明变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">521</span>,g = <span class="string">&#x27;dasda&#x27;</span>,h = [];</span><br><span class="line"><span class="comment">//可以一次声明多个</span></span><br></pre></td></tr></table></figure></li><li><p>变量不能重复声明，但var可以。作用 防止变量被污染  </p></li><li><p>块级作用域 es5 全局 函数 eval</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;casc&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="comment">//这里会出错，但var可以，因为let只能在这个块级作用域里面生效</span></span><br></pre></td></tr></table></figure></li><li><p>不存在变量提升   </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(song);</span><br><span class="line"><span class="keyword">var</span> song = <span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line"><span class="comment">//此时输出undefined 因为var声明的变量会提前赋一个undefined</span></span><br><span class="line"><span class="comment">//但let不行</span></span><br></pre></td></tr></table></figure></li><li><p>不影响作用域链</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ul><li><p>遍历绑定事件 假设数组长度为3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;items.length;i++)&#123;</span><br><span class="line">items[i].style.background = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果使用var修改 因为var没有块级作用域 它会一直执行下去，轮到里面的时候，i已经变成了3 而数组没有三的内容。</p></li><li><p>而let由于有块级作用域，里面的内容独立存在，所以不会有全局影响</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>用于定义常量</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ul><li><p>一定要赋初始值</p></li><li><p>常量的值不能被修改</p></li><li><p>块级作用域</p></li><li><p>对于数组和元素的修改不算作对常量的修改 不会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> team = [<span class="string">&#x27;scasc&#x27;</span>,<span class="string">&#x27;casca&#x27;</span>];</span><br><span class="line">team.push(<span class="string">&#x27;ascasc&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>es6允许用户按照一定模式从数组和对象中提取值</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>两种模式</p><ul><li><p>数组的解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shuzu = [<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;cssca&#x27;</span>,<span class="string">&#x27;casc&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [a,b,c] = shuzu;</span><br></pre></td></tr></table></figure></li><li><p>对象的解构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const obj = &#123;</span><br><span class="line">name:&#x27;zzl&#x27;,</span><br><span class="line">age:&#x27;20&#x27;,</span><br><span class="line">function()&#123;</span><br><span class="line">console.log(&quot;scasca&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">let &#123;name,age,f&#125; = obj;</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>引入新的声明字符方式 反引号`</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ul><li><p>一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`dadadada`</span>;</span><br></pre></td></tr></table></figure></li><li><p>内容中可以直接出现换行符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;aaaa&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span></span><br></pre></td></tr></table></figure></li><li><p>变量拼接 ${}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="string">`<span class="subst">$&#123;a&#125;</span>被引用了`</span></span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="简化对象"><a href="#简化对象" class="headerlink" title="简化对象"></a>简化对象</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>es6允许在大括号里面直接写入变量和函数作为对象的属性和方法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ul><li><p>es6允许在大括号里面直接写入变量和函数作为对象的属性和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;zzl&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> change = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;asca&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line"><span class="comment">//以前写法</span></span><br><span class="line"><span class="comment">//name:name;</span></span><br><span class="line"><span class="comment">//change:change;</span></span><br><span class="line"><span class="comment">//improve:function()&#123;</span></span><br><span class="line"><span class="comment">//do sth.</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//现在写法</span></span><br><span class="line">name,</span><br><span class="line">change,</span><br><span class="line"><span class="function"><span class="title">improve</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">cosole.log(<span class="string">&#x27;new method&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>允许使用箭头来定义函数=&gt;</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ul><li><p>允许使用箭头来定义函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//before </span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//do sth.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//now</span></span><br><span class="line"><span class="keyword">let</span> fn ()=&gt;&#123;</span><br><span class="line"><span class="comment">//do sth.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>区别</p><ol><li><p>this指向的是静态资源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getName1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> getName2 = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置window对象的name属性</span></span><br><span class="line"><span class="built_in">window</span>.name = <span class="string">&#x27;lalalla&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> schoolName = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;babababab&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接调用 此时输出一致</span></span><br><span class="line">getName1();</span><br><span class="line">getName2();</span><br><span class="line"></span><br><span class="line"><span class="comment">//call方法调用 此时 一输出babababab 二还是lalalal </span></span><br><span class="line">getName1.call(schoolName);</span><br><span class="line">getName2.call(schoolName);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>不能作为构造实例化对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = <span class="function">(<span class="params">name,age</span>) =&gt;</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>不能使用arguments变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function">() =&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure></li><li><p>箭头函数的简写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当形参只有一个的时候可以省略小括号</span></span><br><span class="line"><span class="keyword">let</span> add = <span class="function"><span class="params">n</span> =&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> n + n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">9</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//省略花括号 当代码体只有一条语句的时候 此时return必须省略</span></span><br><span class="line"><span class="comment">//而且语句的执行结果就是函数的返回值</span></span><br><span class="line"><span class="keyword">let</span> pow = <span class="function"><span class="params">n</span> =&gt;</span> n * n;</span><br><span class="line"><span class="built_in">console</span>.log(pow(<span class="number">2</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ul><li><p>需求1 点击div 2s之后变成粉色</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">case1 wrong</span><br><span class="line">&lt;div id = <span class="string">&quot;ad&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="keyword">let</span> ad = doucument.getElementById(<span class="string">&#x27;ad&#x27;</span>);</span><br><span class="line">ad.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.style.background = <span class="string">&#x27;pink&#x27;</span>;<span class="comment">//此时由于定时器的this指向window 所以不会变色</span></span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">case2 success</span><br><span class="line">&lt;div id = <span class="string">&quot;ad&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="keyword">let</span> ad = doucument.getElementById(<span class="string">&#x27;ad&#x27;</span>);</span><br><span class="line">ad.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> that = <span class="built_in">this</span>;<span class="comment">//提前存储this</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.style.background = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">case3 success</span><br><span class="line">&lt;div id = <span class="string">&quot;ad&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="keyword">let</span> ad = doucument.getElementById(<span class="string">&#x27;ad&#x27;</span>);</span><br><span class="line">ad.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.style.background = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line"><span class="comment">//使用箭头函数 会找到外面一级的对象</span></span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>需求二 从数组中返回偶数元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">33</span>,<span class="number">4342</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> result = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> item%<span class="number">2</span> ===<span class="number">0</span> );</span><br></pre></td></tr></table></figure></li></ul><p>总结</p><ul><li><p>箭头函数适合与this无关的回调，定时器，数组的方式回调</p></li><li><p>不适合与this有关的回调，比如事件回调，对象的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">getName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name);<span class="comment">//可以返回abc</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">getName:<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name);<span class="comment">//不可以返回abc，因为此时this指向了window</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>ES6允许给函数形参赋初始值</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ul><li><p>形参初始值具有默认值的参数 一般位置要靠后 （潜规则）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b,c=<span class="number">10</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>));<span class="comment">//此时如果不给c传值 那么c默认是10 </span></span><br><span class="line"></span><br><span class="line">结果：<span class="number">13</span></span><br></pre></td></tr></table></figure></li><li><p>与解构赋值结合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">connect(&#123;</span><br><span class="line"><span class="attr">host</span>:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line"><span class="attr">port</span>:<span class="number">3000</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params">&#123;host=<span class="string">&#x27;127.0.0.1&quot;,port&#125;)&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="params"><span class="function">console.log(host);</span></span></span></span><br><span class="line"><span class="string"><span class="params"><span class="function">console.log(port);</span></span></span></span><br><span class="line"><span class="string"><span class="params"><span class="function">&#125;</span></span></span></span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>ES6引入rest参数，用于获取函数的实参，用来代替arguments</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>获取实参的方式</p><ul><li><p>arguments 此时获取的是一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getShican</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">getShican(<span class="string">&#x27;leb&#x27;</span>,<span class="string">&#x27;zzl&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>rest 参数  三个点加args 此时获取的args是数组 意味着可以用数组的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getS</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;</span><br><span class="line">getS(<span class="string">&#x27;leb&#x27;</span>,<span class="string">&#x27;zzl&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>rest参数必须放到最后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getS</span>(<span class="params">a,b,...args</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;</span><br><span class="line">getS(<span class="string">&#x27;leb&#x27;</span>,<span class="string">&#x27;zzl&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">a=leb</span><br><span class="line">b=zzl</span><br><span class="line">args=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="spread拓展运算符"><a href="#spread拓展运算符" class="headerlink" title="spread拓展运算符"></a>spread拓展运算符</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>… 拓展运算符可以将数组转换为逗号分隔的参数序列</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>例子</p><ul><li><p>声明一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jojo = [<span class="string">&#x27;jotailang&#x27;</span>,<span class="string">&#x27;jolunuo&#x27;</span>,<span class="string">&#x27;jolin&#x27;</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getS</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">gets(...jojo);</span><br><span class="line"></span><br><span class="line">此时<span class="built_in">arguments</span>里面有三个参数：<span class="string">&#x27;jotailang&#x27;</span>,<span class="string">&#x27;jolunuo&#x27;</span>,<span class="string">&#x27;jolin&#x27;</span></span><br><span class="line">否则就是一个参数</span><br></pre></td></tr></table></figure></li></ul><p>和rest区别</p><ul><li>rest的声明放在函数声明的形参中，这个是放在函数调用的形参中</li></ul><p>拓展运算符的运用</p><ul><li><p>数组的合并</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jojo = [<span class="string">&#x27;jolin&#x27;</span>,<span class="string">&#x27;jostar&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> kingdomrank = [<span class="string">&#x27;boji&#x27;</span>,<span class="string">&#x27;kake&#x27;</span>];</span><br><span class="line"><span class="comment">//const theworld = jojo.contat(kingdomrank);</span></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="comment">//注意使用逗号分割</span></span><br><span class="line"><span class="keyword">const</span> theworld = [...jojo,...kingdomrank];</span><br></pre></td></tr></table></figure></li><li><p>数组的克隆</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jojo = [<span class="string">&#x27;saigouda&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> clonejojo = [...jojo];</span><br></pre></td></tr></table></figure></li><li><p>将伪数组转化为真正的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> divarr = [...divs];</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Symbol基本使用"><a href="#Symbol基本使用" class="headerlink" title="Symbol基本使用"></a>Symbol基本使用</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>ES6引入一种新的原始数据类型Symbol，表示独一无二的值，它是js语言中的第七种数据类型，是一种类似字符串的数据类型。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>特点</p><ul><li>它的值是唯一的，用来解决命名冲突的问题</li><li>不能和其他数据进行运算</li><li>它定义的对象属性不能使用for…in进行遍历，但是可以使用Reflect.ownkeys来获取对象的所有键名</li></ul><p>创建</p><ul><li><p>创建Symbol</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let s = Symbol();</span><br><span class="line"></span><br><span class="line">let s2 = Symbol(&#x27;jojo&#x27;);</span><br><span class="line">let s3 = Symbol(&#x27;jojo&#x27;);</span><br><span class="line">console.log(s2 === s3);</span><br><span class="line">//false</span><br><span class="line"></span><br><span class="line">//another way</span><br><span class="line">let s4 = Symbol.for(&#x27;jojo&#x27;);</span><br><span class="line">let s5 = Symbol.for(&#x27;jojo&#x27;);</span><br><span class="line">console.log(s4===s5);</span><br><span class="line">//true</span><br></pre></td></tr></table></figure></li><li><p>不能与其他数据进行运算</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ul><li><p>向对象中添加方法up down</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> game = &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> methods = &#123;</span><br><span class="line"><span class="attr">up</span>:<span class="built_in">Symbol</span>(),</span><br><span class="line"><span class="attr">down</span>:<span class="built_in">Symbol</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">game[methods.up] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;i can up&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">game[methods.down] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;i can down&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当想往对象中添加方法的时候，一般要了解对象中的参数，而且存在风险，用这种方式声明的方法，没有风险，可以不用看对象的内容就可以添加</p></li><li><p>方法2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> youxi = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;狼人杀&#x27;</span>,</span><br><span class="line">[<span class="built_in">Symbol</span>(<span class="string">&#x27;say&#x27;</span>)]: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;i can speak&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(youxi)</span><br></pre></td></tr></table></figure></li><li><p>Symbol内置值 </p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="JS的七种数据类型"><a href="#JS的七种数据类型" class="headerlink" title="JS的七种数据类型"></a>JS的七种数据类型</h1><details class="folding-tag" cyan><summary> USONB u are so niubility </summary>              <div class='content'>              <ul><li>u undefined</li><li>s string symbol</li><li>o object</li><li>n null number</li><li>b boolean</li></ul>              </div>            </details><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>迭代器(Iterator)是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署Iterator接口，就可以完成遍历操作。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ul><li><p>es6创造了一种新的遍历命令for…of循环，Iterator接口主要供其消费</p></li><li><p>原生具备iterator接口的数据(可以用for..of遍历)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a <span class="built_in">Array</span></span><br><span class="line">b Arguments</span><br><span class="line">c <span class="built_in">Set</span></span><br><span class="line">d <span class="built_in">Map</span></span><br><span class="line">e <span class="built_in">String</span></span><br><span class="line">f TypedArray</span><br><span class="line">g NodeList</span><br></pre></td></tr></table></figure></li></ul><p>工作原理</p><ul><li><p>首先创建一个指针对象，指向当前数据结构的起始位置</p></li><li><p>第一次调用对象的next方法，指针自动指向数据结构的第一个成员</p></li><li><p>接着不断调用next方法，指针一直往后移动，直到指到最后一个成员</p></li><li><p>每调用next方法返回一个包含==value和done==属性的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">value:当前成员的值</span><br><span class="line"><span class="attr">done</span>:布尔值 表示遍历是否结束 若未结束 返回<span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul><p>注意</p><ul><li>需要自定义遍历数据的时候，要想到迭代器</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><ol><li>生成器是一个特殊的函数</li><li>生成器目的是解决异步编程中的回调问题</li><li>回调函数 node fs ajax mongodb</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ul><li><p>写法上特殊</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello generator&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>输出上特殊</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iterator = gen();</span><br><span class="line">iterator.next();</span><br></pre></td></tr></table></figure></li><li><p>yield分割符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;111&#x27;</span>);</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;分割1&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;222&#x27;</span>);</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;分割2&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;333&#x27;</span>);</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;分割3&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = gen();</span><br><span class="line">iterator.next();</span><br><span class="line">iterator.next();</span><br><span class="line">iterator.next();</span><br></pre></td></tr></table></figure></li><li><p>输出yield的值 遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> gen())&#123;</span><br><span class="line"><span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>迭代器方法</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iterator = gen();</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br></pre></td></tr></table></figure></li></ul><p>生成器函数传参</p><ul><li><p>整体传参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(args);</span><br><span class="line"><span class="keyword">yield</span> <span class="number">111</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = gen(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"></span><br><span class="line">logout:</span><br><span class="line">aaa</span><br><span class="line"><span class="attr">value</span>:<span class="number">111</span> done:<span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>方法传参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(args);</span><br><span class="line"><span class="keyword">let</span> one = <span class="keyword">yield</span> <span class="number">111</span>;</span><br><span class="line"><span class="built_in">console</span>.log(one);</span><br><span class="line"><span class="keyword">yield</span> <span class="number">222</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = gen(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next(<span class="string">&#x27;bbb&#x27;</span>));</span><br><span class="line"></span><br><span class="line">logout:</span><br><span class="line">aaa (args)</span><br><span class="line">value <span class="number">111</span> done <span class="literal">false</span></span><br><span class="line">bbb (one)</span><br><span class="line">value <span class="number">222</span> done <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">注意 此时的bbb是第一个<span class="keyword">yield</span>的整体结果</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>对于异步编程的作用案例</p><ul><li><p>假如需要1s 输出aaa 2s输出bbb 3s输出ccc</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">常规操作 <span class="built_in">setTimeout</span>嵌套</span><br><span class="line">现在利用生成器</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line">iterator.next();</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;bbb&#x27;</span>);</span><br><span class="line">iterator.next();</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;ccc&#x27;</span>);</span><br><span class="line">iterator.next();</span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">yield</span> one();</span><br><span class="line"><span class="keyword">yield</span> two();</span><br><span class="line"><span class="keyword">yield</span> three();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = gen();</span><br><span class="line">iterator.next();</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>Promise是es6引入的异步编程的新解决方法，语法上他是一个构造函数，主要用来封装异步操作获取他失败或者成功的结果。（为了解决回调地狱的问题）</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>实例化Promise对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//使用异步操作</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&#x27;jojo&#x27;</span>;</span><br><span class="line">        <span class="comment">//调用resolve/reject来改变这个promise对象的状态 </span></span><br><span class="line">        resolve(data);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//调用promise对象的then方法</span></span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(reason)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>promise对象有三种状态</li></ul><ol><li>pending 进行中</li><li>fulfilled 已成功</li><li>rejected 已失败</li></ol><ul><li>then有两个形参，成功一般叫value 失败叫reason</li><li><p>只要执行了resolve 就会调用then函数里面的value方法，反之调用reason方法</p></li><li><p>调用then方法，then方法返回的结果是一个promise对象，对象有对象状态和对象值这两个参数，对象的状态由方法的的执行结果而定</p></li></ul><ol><li><p>如果回调函数中返回的结果是一个非promise类型的属性 则状态为成功，返回改属性值 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result =  p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;jojo&#x27;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="attr">logout</span>:</span><br><span class="line">promise.status:<span class="string">&#x27;resolve&#x27;</span>;</span><br><span class="line">promise.value:<span class="string">&#x27;jojo&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><ul><li>此外如果不写return 那么返回的是undefined 也是非promise类型的属性 所以也会成功 并且返回 undefind</li></ul><ol><li><p>如果回调函数中返回的结果是一个promise类型的属性，则该属性的状态决定then方法的状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result =  p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">resolve(<span class="string">&#x27;jojo&#x27;</span>); </span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>抛出错误 那么失败值就是抛出的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result =  p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>链式调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p.then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>promise-catch方法 作用原理和不写第一个value的then方法相同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于写错误情况</span></span><br><span class="line">p.catch(<span class="function">(<span class="params">reason</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.warn(reason);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ul><li><p>promise读取文件 注意err和data不要写反</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">&#x27;./lalala.md&#x27;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) reject(err);</span><br><span class="line">        resolve(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value.toString());</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(reason);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>promise封装ajax 在promise之前，所有成功或者失败的操作都要在事件里面操作，不方便阅读，现在使用promise封装，函数成功和失败的操作都在p.then()里面完成 </p></li><li><p>promise读取多个文件 下面以三个文件为例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</span><br><span class="line">    fs.readFile(<span class="string">&#x27;./a.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        resolve(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">p.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.readFile(<span class="string">&#x27;./b.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve([value,data]);<span class="comment">//将结果转化为数组的形式发送到下一个，因为这个数组的结果就是当前then方法的值</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.readFile(<span class="string">&#x27;./c.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            value.push(data);<span class="comment">//因为上一个传入的是数组 所以现在要读取这个数据需要将其压入数组</span></span><br><span class="line">            resolve(value);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value.join(<span class="string">&#x27;\r\n&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1>  <div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>ES6提供了新的数据结构set集合，类似于数组，但成员的值都是唯一的，集合实现了iterator接口，所以可以使用拓展运算符…和for..of进行遍历。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li><p>基本定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="built_in">console</span>.log(s, <span class="keyword">typeof</span> s);</span><br></pre></td></tr></table></figure></li><li><p>可以实现自动去重 但注意这里还不是数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s2 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;bbb&#x27;</span>,<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;ccc&#x27;</span>]);</span><br><span class="line"> log out: aaa,bbb,ccc</span><br></pre></td></tr></table></figure></li><li><p>size 返回集合的元素个数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2.size;</span><br></pre></td></tr></table></figure></li><li><p>add 增加一共新元素 返回当前集合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2.add(<span class="string">&#x27;ddd&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>delete 删除当前元素 返回boolean值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2.delete(<span class="string">&#x27;aaa&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>has 检测集合中是否包含某个元素，返回boolean值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2.has(<span class="string">&#x27;bbb&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>clear 清空元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2.clear();</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ol><li><p>数组去重 上面说到去重的办法，但是他还是集合的形式，要通过拓展运算符把他变成数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> result = [...new <span class="built_in">Set</span>(arr)];</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>交集 注意先去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="keyword">new</span> <span class="built_in">Set</span>(arr2);</span><br><span class="line"><span class="comment">//去重之后和arr2进行比对</span></span><br><span class="line"><span class="keyword">let</span> result = [...new <span class="built_in">Set</span>(arr)].filter(<span class="function"><span class="params">item</span>=&gt;</span> <span class="keyword">new</span> <span class="built_in">Set</span>(arr2).has(item));</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>并集 注意数组拼接之前需要转化，以及最后去重之后要转化为数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = [...new <span class="built_in">Set</span>([...arr,...arr2])];</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>差集 就是交集的取反</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="keyword">new</span> <span class="built_in">Set</span>(arr2);</span><br><span class="line"><span class="comment">//去重之后和arr2进行比对</span></span><br><span class="line"><span class="keyword">let</span> result = [...new <span class="built_in">Set</span>(arr)].filter(<span class="function"><span class="params">item</span>=&gt;</span> !(<span class="keyword">new</span> <span class="built_in">Set</span>(arr2).has(item));</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>ES6提供了Map数据结构，它类似于对象，也是键值对的集合，但是键的范围不仅限于字符串，各种类型的值，包括对象 都可以作为键。Map也实现了iterator接口，可以使用拓展运算符…和for..of遍历</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>基本方法</p><ol><li>size 返回map的元素个数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">m.size();</span><br></pre></td></tr></table></figure></li><li><p>set 增加一个新的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m.set(<span class="string">&#x27;jojo&#x27;</span>,<span class="string">&#x27;saigouda&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>get 返回键名对象的键值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m.get(<span class="string">&#x27;jojo&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>has 检测其中是否含有某个元素，返回boolean值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(m.has(<span class="string">&#x27;jojo&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li>clear 清空map    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m.clear();</span><br></pre></td></tr></table></figure></li><li>遍历<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> m)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>ES6提供了更接近传统的写法，引入了class类这个概念，作为对象的模板。通过class关键字，可以定义类，基本上，es6的class可以看作是一个语法糖，它的绝大部分功能es5都可以做到，新的class写法只是让对象原型的写法更加清晰，更像面向对象编程的语法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>之前es5的方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Phone</span>(<span class="params">brand,price</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.brand = brand;</span><br><span class="line"><span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加方法</span></span><br><span class="line">Phone.prototype.call = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;i can call&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> huawei = <span class="keyword">new</span> Phone(<span class="string">&#x27;huawei&#x27;</span>,<span class="string">&#x27;2999&#x27;</span>);</span><br><span class="line">huawei.call();</span><br><span class="line"><span class="built_in">console</span>.log(huawei)</span><br></pre></td></tr></table></figure><br>现在的方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JOJO</span></span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name,stand</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.stand = stand;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法必须使用该语法 不能使用es5的call:function()&#123;&#125;</span></span><br><span class="line"><span class="function"><span class="title">call</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;oraoraoraoraora!!!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> jotaro = <span class="keyword">new</span> JOJO(<span class="string">&quot;jotaro&quot;</span>,<span class="string">&quot;starplj&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(jotaro);</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ol><li>类的静态成员<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> name = <span class="string">&#x27;lalala&#x27;</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">change</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;cascacs&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> nokia = <span class="keyword">new</span> Phone();</span><br><span class="line"><span class="built_in">console</span>.log(nokia.name);</span><br><span class="line"><span class="comment">//此时会输出undefine 因为name是类的静态属性，不是实例对象的属性</span></span><br><span class="line"><span class="built_in">console</span>.log(Phone.name);</span><br><span class="line"><span class="comment">//logout:lalala</span></span><br></pre></td></tr></table></figure></li><li>类的继承<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先写一个父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Phone</span>(<span class="params">brand,price</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.brand = brand;</span><br><span class="line"><span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line">Phone.prototype.call = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我可以打电话&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SmartPhone</span>(<span class="params">brand,price,color,size</span>)</span>&#123;</span><br><span class="line">    Phone.call(<span class="built_in">this</span>,brand,price);</span><br><span class="line">    <span class="built_in">this</span>.color = color;</span><br><span class="line">    <span class="built_in">this</span>.size = size;</span><br><span class="line">&#125;</span><br><span class="line">SmartPhone.prototype = <span class="keyword">new</span> Phone;</span><br><span class="line">SmartPhone.prototype.constructor = SmartPhone;</span><br><span class="line"></span><br><span class="line">SmartPhone.prototype.photo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我可以拍照&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">SmartPhone.prototype.playGame = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我可以玩游戏&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chuizi = <span class="keyword">new</span> SmartPhone(<span class="string">&#x27;锤子&#x27;</span>,<span class="number">2499</span>,<span class="string">&#x27;黑色&#x27;</span>,<span class="string">&#x27;5.5inch&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(chuizi);</span><br></pre></td></tr></table></figure></li><li>类的继承2<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">brand,price</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.brand = brand;</span><br><span class="line"><span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">call</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;我可以打电话&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">brand,price,color,size</span>)</span>&#123;</span><br><span class="line"><span class="built_in">super</span>(brand,price);<span class="comment">//Phone.call(this,brand,price)</span></span><br><span class="line"><span class="built_in">this</span> color = color;</span><br><span class="line"><span class="built_in">this</span> size = size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">photo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;拍照&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">playGame</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;玩游戏&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> xiaomi  = <span class="keyword">new</span> SmartPhone(<span class="string">&#x27;小米&#x27;</span>,<span class="number">799</span>,<span class="string">&#x27;黑色&#x27;</span>,<span class="string">&#x27;4.22inch&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(xioami);</span><br><span class="line">xiaomi.call();</span><br><span class="line">xiaomi.photo();</span><br><span class="line">xiaomi.playGame();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>子类重写父类方法 重写方法 这个方法可以重写但不能调用父类的<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">brand,price</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.brand = brand;</span><br><span class="line"><span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">call</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;我可以打电话&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">brand,price,color,size</span>)</span>&#123;</span><br><span class="line"><span class="built_in">super</span>(brand,price);<span class="comment">//Phone.call(this,brand,price)</span></span><br><span class="line"><span class="built_in">this</span> color = color;</span><br><span class="line"><span class="built_in">this</span> size = size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">call</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> xiaomi  = <span class="keyword">new</span> SmartPhone(<span class="string">&#x27;小米&#x27;</span>,<span class="number">799</span>,<span class="string">&#x27;黑色&#x27;</span>,<span class="string">&#x27;4.22inch&#x27;</span>);</span><br><span class="line">xiaomi.call();</span><br></pre></td></tr></table></figure></li><li>get与set<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">     <span class="keyword">get</span> <span class="title">price</span>()&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&#x27;价格属性被读取了&#x27;</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&#x27;i love u&#x27;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">set</span> <span class="title">price</span>(<span class="params">newVal</span>)&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&#x27;价格属性被修改了&#x27;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Phone();</span><br><span class="line"><span class="comment">//console.log(s.price);</span></span><br><span class="line">s.price = <span class="string">&#x27;free&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="数值拓展"><a href="#数值拓展" class="headerlink" title="数值拓展"></a>数值拓展</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>ES6定义了几种数值拓展，对于数值检测很有帮助</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>Number.EPSILON 是js表示的最小精度，约等于2.2x10的-16次方<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">equal</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.abs(a-b)&lt;<span class="built_in">Number</span>.EPSILON;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(equal(<span class="number">0.1</span>+<span class="number">0.2</span>,<span class="number">0.3</span>));</span><br></pre></td></tr></table></figure></li><li>进制数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二进制</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">0b1010</span>;</span><br><span class="line"><span class="comment">// 八进制</span></span><br><span class="line"><span class="keyword">let</span> o = <span class="number">0o777</span>;</span><br><span class="line"><span class="comment">// 十进制</span></span><br><span class="line"><span class="keyword">let</span> d = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 十六进制</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">0xff</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure></li><li>Number.isFinite 检测一个数是否为有限数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="literal">Infinity</span>));</span><br><span class="line"><span class="comment">//返回false</span></span><br></pre></td></tr></table></figure></li><li>Number.isNaN 检测一个数值是否为NaN</li><li>Number.parseInt Number.parseFloat 字符串转整数</li><li>Number.isInteger() 判断整数</li><li>Number.trunc 将小数部分抹掉</li><li>Math.sign 判断是否为正数 负数 0 如果是正数为1 负数为-1 0为0</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="对象方法拓展"><a href="#对象方法拓展" class="headerlink" title="对象方法拓展"></a>对象方法拓展</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>Object.is 判断两个值是否完全相等 可以判断NaN这种特殊类型<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>,<span class="literal">NaN</span>));</span><br><span class="line"><span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>);</span><br><span class="line"><span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li>Object.assign 对象的合并 会覆盖原先对象有的属性 没有的属性不会覆盖</li><li>Object.setPrototypeOf Object.getPrototypeOf<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;广师大&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> cities = &#123;</span><br><span class="line">    <span class="attr">xiaoqu</span>:[<span class="string">&#x27;gz&#x27;</span>,<span class="string">&#x27;hy&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(school,cities);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(school));</span><br><span class="line"><span class="built_in">console</span>.log(school);</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>  <h1 id="ES6模块化"><a href="#ES6模块化" class="headerlink" title="ES6模块化"></a>ES6模块化</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>模块化是指将一个大的文件，拆分成许多小的文件，然后将小的文件组合起来<br>优点：</p><ol><li>防止命名冲突</li><li>代码复用</li><li>高维护性</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>模块功能主要由两个命令组成：export和import</p><ul><li>export用于规定模块的对外接口</li><li>import命令用于输入其他模块提供的功能<div class="note warning flat"><p>需要在vscode里面安装liveserver插件</p></div></li></ul><ol><li>export 分别暴露<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建一个new.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> jojo = <span class="string">&#x27;jojo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;balalalalnananan1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//再新建一个index.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script type=&quot;module&quot;&gt;</span><br><span class="line">        import * as m1 from &quot;./new.js&quot;;</span><br><span class="line">        console.log(m1);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>export 统一暴露</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jojo = <span class="string">&#x27;jojo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;balalalalnananan1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;jojo,change&#125;;</span><br></pre></td></tr></table></figure></li><li><p>export 默认暴露</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line"><span class="keyword">let</span> jojo = <span class="string">&#x27;jojo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;balalalalnananan1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解构赋值</p><ol><li>应对统一暴露 当已经有声明的对象的时候 可以采用取别名的方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;jojo,change&#125; <span class="keyword">from</span> <span class="string">&#x27;./newjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;jojo <span class="keyword">as</span> newjojo,change&#125; <span class="keyword">from</span> <span class="string">&#x27;./newnewjs&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>应对默认暴露 写法必须起别名<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> m3&#125; <span class="keyword">from</span> <span class="string">&#x27;./newjs&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><p>简便形式 只能应对默认暴露<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> m3 <span class="keyword">from</span> <span class="string">&#x27;./newjs&#x27;</span></span><br></pre></td></tr></table></figure></p><p>以上的方法如果在多个模块的时候很不方便 可以使用下面的方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建一个app.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m1 <span class="keyword">from</span> <span class="string">&#x27;./m1.js&#x27;</span>;</span><br><span class="line"><span class="comment">//在html中引入</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;./app.js&#x27;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>一款代码兼容性转化软件/网站。可以将新特性的代码转化为兼容性的代码</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>需要安装三个工具</p><ol><li>babel-cli babel的一个命令行工具</li><li>babel-preset-env 预设包 可以将最新的es特性转化为es5的语法</li><li>browserify 一个打包工具 （比较简单）</li></ol><p>流程</p><ol><li>初始化<code>npm init --yes</code></li><li><code>npm i babel-cli babel-preset-env browserify -D</code></li><li>局部安装使用<code>npx</code> 全局安装使用<code>babel</code></li><li><code>npx babel js路径 -d 转移到新js路径 --presets=babel-preset-env</code></li><li>打包<code>npx browserify dist/js/app.js -o dist/bundle.js</code>(前者入口js，后者保存路径)</li><li>总结 先编译 再打包</li></ol><p>引入NPM包</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="ES7新特性"><a href="#ES7新特性" class="headerlink" title="ES7新特性"></a>ES7新特性</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端进阶" scheme="https://zlinni.github.io/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="es6" scheme="https://zlinni.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>Vue核心</title>
    <link href="https://zlinni.github.io/posts/74c7a4e0dbbc/"/>
    <id>https://zlinni.github.io/posts/74c7a4e0dbbc/</id>
    <published>2021-12-06T12:15:11.000Z</published>
    <updated>2022-01-26T06:07:51.594Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tip cogs"><p>本文主要用于记录Vue2.0的核心功能，参考视频<a href='https://www.bilibili.com/video/BV1Zy4y1K7SH?p=1'>【尚硅谷Vue2.0+Vue3.0全套教程丨vuejs从入门到精通】</a></p></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>一套用户构建用户界面的渐进式JavaScript框架</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="渐进式"><a href="#渐进式" class="headerlink" title="渐进式"></a>渐进式</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue可以自上而下的逐层进行应用，一个简单的应用只需要一个核心库即可，复杂的应用需要引入各式各样的Vue插件，所谓渐进式就是它能从这样简单的应用变成复杂的应用</p><p>大哥</p><ul><li>🐂 <img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/3f0c7c610b78f81c421629d4c8e815c.png" alt="大哥"></li></ul><p>特点</p><ol><li><p>采用组件化模式，提高代码复用率，让代码更好维护  如：组件为xxx.vue 里面包含了html，css以及js 当需要使用到的时候直接引入。维护：改变不会影响别的组件</p></li><li><p>声明式编码，让编码人员无需直接操作DOM，提高开发效率<img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211206214621.png" alt=""></p></li><li><p>使用虚拟DOM＋优秀的Diff算法，尽量复用DOM节点<br>常规的js如果有新的数据它会继续使用，没有过滤，如果要维护数据量大的对象之类的，每次都会重新渲染到dom<br>而vue采用了虚拟dom，当数据发生改变的时候，使用diff算法，对上一次采用的dom进行数据对比，如果一样，则只渲染新的数据</p></li><li><p>学习vue之前要掌握的js基础知识<br>es6语法规范<br>es6模块化<br>包管理器 会一个 npm or cnpm<br>原型 原型链<br>数组常用方法<br>axios<br>promise</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><details class="folding-tag" cyan><summary> 安装步骤 </summary>              <div class='content'>              <ol><li>进入vue官网<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211217162154.png" alt="点击右上角学习中的教程"><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211217162335.png" alt="点击左侧安装，找到两个版本，选开发"><br>前者用于开发，有提示和警告，后者用于上线生产。</li><li>引入之后控制台输入Vue如果有下面的显示则成功<img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211217212011.png" alt=""></li><li><code>Vue-devtools</code>,下载地址:<a href="https://devtools.vuejs.org/guide/installation.html#chrome">https://devtools.vuejs.org/guide/installation.html#chrome</a></li></ol>              </div>            </details><h1 id="初识vue"><a href="#初识vue" class="headerlink" title="初识vue"></a>初识vue</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">食用前小知识</button></li><li class="tab"><button type="button" data-href="#test-3">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>demo1 用于介绍vue的容器使用以及数据绑定</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>去提示 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.productionTip = false;//阻止vue在启动时生产提示</span><br></pre></td></tr></table></figure></li><li>强制刷新 shift加刷新，一般刷新可能发现这个错误就略过了</li><li>找不到icon404 根路径加入icon</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 插值语法，用两组括号写上一个name --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hi,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;h2&gt;年龄是：18&lt;/h2&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>; <span class="comment">//阻止vue在启动时生产提示</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建vue实例 里面是个配置对象 key不可以改 值的数据类型不能改 但值可以改（axios</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>, <span class="comment">//el用于指定当前vue为哪个容器服务，值通常为css选择器字符串</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>:<span class="string">&#x27;jojo&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//另类写法 document.getElementById(&#x27;root&#x27;);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 发现x不用接受实例，可以直接删除const x = new Vue(&#123;</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>vue实例和容器只能一一对应，不能一对多和多对一</p><p>注意区分js表达式 和 js代码（语句）</p><ol><li>js表达式 都有个共同的特点：可以返回值 可以被接收<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> a</span><br><span class="line"><span class="number">2.</span> a+b</span><br><span class="line"><span class="number">3.</span> x === y ？<span class="number">1</span> : <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li>js语句<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">if</span>()&#123;&#125;</span><br><span class="line"><span class="number">2.</span> <span class="keyword">for</span>()&#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><p>使用vuedevtools</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211218160248.png"/></div></div><p>总结：</p><ol><li>想让vue工作，就必须创建一个vue实例，而且要传入一个配置对象</li><li>root容器里面的代码依然符合html规范，只不过混入了一些特殊的vue语法</li><li>root容器里的代码呗称为vue模板</li><li>Vue实例和容器是一一对应的</li><li>在真实开发中只会有一个vue实例，配合组件一起使用</li><li>其中括号括号要写js表达式，且xxx可以自动读取到data中的所有属性</li><li>一旦data的数据发生改变，那么页面中用到该数据的地方也会自动更新</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">常见问题</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>分插值语法和指令语法，为vue动态绑定数据提供帮助</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>插值语法：<br>常用于指定标签体的内容，且该内容必须要写js表达式，会从data中读到相应的属性更新</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;xxx&#125;&#125;</span><br></pre></td></tr></table></figure><p>指令语法：<br>常用于指定标签属性，可以简写成: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&#x27;xxxx&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&#x27;xxxx&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ol><li>如果data中的两个属性重复，虽然不会报错，但它会以你最后写的属性内容作为插值或者指令的内容</li></ol><p>解决办法是：新命名一个属性 或者 新命名属性，让他以对象的形式存在，里面包含这个属性<br>eg</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;xxx&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">name:&#x27;jojo&#x27;,</span><br><span class="line">school:&#123;</span><br><span class="line">name,</span><br><span class="line">age</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">//使用 school.name</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">注意事项</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>单向数据绑定和双向数据绑定</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p><code>v-bind</code>单向数据绑定 注意它可以将里面绑定的内容进行js代码运算 参见后续使用props配置项的时候 传入的数据使用v-bind进行运算<img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211218164328.png" alt=""><br><code>v-model:value</code>双向数据绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">//简写</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211218164657.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p><code>v-bind</code>基本算全能把，但<code>v-model</code>只能用于绑定表单类型的数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:x</span>=<span class="string">&quot;name&quot;</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">//此时如果是vue实例给值 是可以显示出x的 但v-model就会报错</span><br></pre></td></tr></table></figure><p>表单类型数据（输入类 有value值）</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="el与data的两种写法-mount-data的两种写法"><a href="#el与data的两种写法-mount-data的两种写法" class="headerlink" title="el与data的两种写法 mount data的两种写法"></a>el与data的两种写法 mount data的两种写法</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供两种方式连接我们的容器，一种是mount<br>data也一样</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> v = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="comment">//el:&#x27;#root&#x27;</span></span><br><span class="line"><span class="comment">//对象式</span></span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数式</span></span><br><span class="line"><span class="attr">data</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span>&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">v.$mount(<span class="string">&#x27;#root&#x27;</span>);</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>当需要组件复用的时候，data需要写成函数否则报错</li><li>data的函数不要写成箭头函数，否则this指向的对象就是window（es6学到）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211218203628.png" alt="MVVM模型图"><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211218204055.png" alt="代码详解"><br>总结：<br>MVVM模型</p><ol><li>M 模型Model data中的数据</li><li>V 视图View 模板代码</li><li>VM 视图模型ViewModel Vue实例</li><li>data中的所有属性 最后都会出现在vm身上</li><li>vm身上所有属性以及vue原型上的所有属性 在vue模板中都可以使用</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>数据代理，操作一个对象为另外一个对象修改属性值（读/写）</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>回顾<code>Object.defineproperty</code>方法 给对象添加属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&quot;jojo&quot;</span>,</span><br><span class="line">            <span class="attr">height</span>:<span class="number">198</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(person,<span class="string">&quot;age&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">value</span>:<span class="number">18</span></span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(person);</span><br></pre></td></tr></table></figure><br>注意 该方法添加的属性 是不可以遍历出来的 就是不可枚举<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该方法可以把对象的属性遍历成数组，由结果见 不会出现新增的age</span></span><br><span class="line">        <span class="comment">// console.log(Object.keys(person));</span></span><br><span class="line">        <span class="comment">//该方法可以遍历person里面属性的值 也是不会出现age的值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> person)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(person[key]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// console.log(person);</span></span><br></pre></td></tr></table></figure><br>而且该方法，还对属性有很多限制<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(person,<span class="string">&quot;age&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">enumerable</span>:<span class="literal">true</span>, <span class="comment">//设置成可以枚举 默认是false</span></span><br><span class="line">    <span class="attr">writable</span>:<span class="literal">true</span>, <span class="comment">//设置成可以修改，默认是false</span></span><br><span class="line">    <span class="attr">configurable</span>:<span class="literal">true</span> <span class="comment">//设置成可以删除，默认是false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>现在有个需求 修改对象中新增的属性，就需要用到该方法的get<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(person,<span class="string">&quot;age&quot;</span>,&#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;<span class="comment">//每次查询这个新增的值就会触发get方法实时更新</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;有人修改了value&#x27;</span>);</span><br><span class="line">        number = value;<span class="comment">//如果不添加这个 整体还是没有被修改到</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>数据代理<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">x</span>:<span class="number">100</span>&#125;;</span><br><span class="line">      <span class="keyword">let</span> obj2 = &#123;<span class="attr">y</span>:<span class="number">200</span>&#125;;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(obj2,<span class="string">&#x27;x&#x27;</span>,&#123;</span><br><span class="line">          <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              <span class="keyword">return</span> obj1.x;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">              obj1.x = value;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211219201708.png" alt="控制台操作结果"></p><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211219203157.png" alt="图解原理"><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211219203327.png" alt="图解原理2"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;button v-on:click=&quot;showInfo&quot;&gt;点击我提示信息&lt;/button&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点击我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 需求传参进去，读参出来 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo2($event,666)&quot;</span>&gt;</span>点我提示信息2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 虽然方法可以写在data里面，但一般方法不需要作数据代理和劫持，所以不要写data里面</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>:<span class="string">&#x27;jojo&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//默认传入event</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">showInfo</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&#x27;lalalal&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(event)</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">showInfo2</span>(<span class="params">event,number</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(event);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(number);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：<br>事件的基本使用:</p><ol><li>使用<code>v-on:xxx</code> 或者 <code>@xxx</code>绑定事件 其中xxx是事件名</li><li>事件的回调需要配置在methods对象中，最终会在vm上</li><li>methods中配置的函数，建议不用箭头函数，否则指向window</li><li>methods中配置的函数，都是被vue所管理的函数，this指向的是vm或者组件实例对象</li><li><code>&#39;@click=&quot;demo&quot;&#39;</code> 和 <code>&#39;@click=&quot;demo($event)&quot;&#39;</code>效果一致，但后者可以传参</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>阻止默认事件 正常写法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.preventDefault();</span><br></pre></td></tr></table></figure><br>vue写法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;xxx&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>啦啦啦啦<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><br>阻止冒泡 正常写法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.stopPropagation();</span><br></pre></td></tr></table></figure><br>vue写法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;xxx&quot;</span> @<span class="attr">click.stop</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>啦啦啦啦<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><br>汇总：<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211220095810.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>使用@事件.修饰符进行检测<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>:<span class="string">&#x27;jojo&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">showInfo</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;jojo&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>总结：<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211220191628.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>计算属性只有在其依赖的值发生改变的时候才会出发进行再次计算，相当于一个缓存的作用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>三个案例计算全名来演示计算属性的作用</p><ol><li>用插值语法计算属性<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    全名：&#123;&#123;firstName+&#x27;-&#x27;+lastName&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>用methods写<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- //注意如果是调用methods 需要写函数名加（） --&gt;</span></span><br><span class="line">    全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName()&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">fullName</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 要写this指代vm 否则取不到对应的属性值</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.lastName</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>用computed计算属性写<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此处是计算属性里面的属性 不是方法 而且他会自动调用get 所以不能写fullName.get --&gt;</span></span><br><span class="line">    全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// computed对象里面的 是属性 不是函数/方法 使用的时候需要像属性一样使用它</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// computed里面的方法 自动执行 </span></span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">fullName</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// return this.firstName + &#x27;-&#x27; + this.lastName 不可以这样写 因为它是计算属性 不是methods里面的方法</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.lastName;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>总结<br><img src="C:\Users\Zlinni\AppData\Roaming\Typora\typora-user-images\image-20211220203739262.png" alt="image-20211220203739262"></li></ol><p>附简写形式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    fullName: function () &#123;</span><br><span class="line">        return this.firstName + &#x27;-&#x27; + this.lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>第一种写法:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">    <span class="attr">isHot</span>:&#123;</span><br><span class="line">        <span class="attr">immediate</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="function"><span class="title">handler</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;被修改了&#x27;</span>,newValue,oldValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>第二种写法 注意前面必须有实例化对象 且isHot要双引号<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;被修改了&#x27;</span>, newValue, oldValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>第三种写法 简写方法 里面其实就是handler<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">numbers</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;numbers发生了改变&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总结</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211220215830.png"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="深度监视"><a href="#深度监视" class="headerlink" title="深度监视"></a>深度监视</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">总结全篇</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>Vue采用了深度监视，让用户可以监视多级结构下的所有属性</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>代码概览，包括了对多级结构下某个属性的监视和对多级结构下所有属性的监视(deep)\<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;numbers.a&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;numbers.a++&#x27;</span>&gt;</span>点我发生改变<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;numbers.b&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;numbers.b++&#x27;</span>&gt;</span>点我发生改变<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">numbers</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">a</span>:<span class="number">111</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">b</span>:<span class="number">222</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 监视多级结构中某个属性的变化</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#x27;numbers.a&#x27;:&#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     handler()&#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         console.log(&quot;numbers.a发生了改变&quot;);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 监视多级结构中所有属性的变化</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">numbers</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">deep</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">handler</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;numbers发生了改变&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>深度监视：</p><ol><li>vue中的<code>watch</code>默认不监视对象内部属性值的改变 （一层）</li><li>配置了<code>deep:true</code>可以检测对象内部值的改变 （多层）</li></ol><p>注：</p><ol><li>vue自身可以检测对象内部值的改变（参考控制台的直接输入改变） 但它提供的<code>watch</code>默认不行</li><li>使用<code>watch</code>时，根据自身的结构判断是否需要用到<code>deep</code></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="绑定class"><a href="#绑定class" class="headerlink" title="绑定class"></a>绑定class</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue可以通过绑定class动态改变class</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>第一种方法 字符串写法 适用于样式的类名不确定 需要动态绑定<br><code>:class=&quot;xxx&quot;</code><br>xxx为类名 冒号是省略了<code>v-bind</code></p><p>第二种方法 数组写法 适用于要绑定的样式个数不确定，类名也不确定<br><code>:class=&#39;arr&#39;</code><br>下面自己在data里面定义arr 就可以拿取很多情况的类 </p><p>第三种方法 对象写法 适用于要绑定的样式个数确定，名字也确定，但要动态决定用不用<br><code>:class=&#39;classObj&#39;</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">classObj:&#123;</span><br><span class="line"><span class="attr">aaa</span>:<span class="literal">false</span>,</span><br><span class="line"><span class="attr">bbb</span>:<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="绑定样式"><a href="#绑定样式" class="headerlink" title="绑定样式"></a>绑定样式</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue可以通过绑定样式动态改变样式</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>第一种方法 直接指定 注意样式要驼峰命名<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;fontSize:fsize+&#x27;px&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">new vue(&#123;</span><br><span class="line">data:&#123;</span><br><span class="line">fsize:50</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>第二种方法 对象指定 适用于改变多种样式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">new vue(&#123;</span><br><span class="line">data:&#123;</span><br><span class="line">styleObj:&#123;</span><br><span class="line">fontSize:&#x27;40px&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>第三种方法 数组写法 同时应用多个样式对象<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;[styleObj1,styleObj2]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">new vue(&#123;</span><br><span class="line">data:&#123;</span><br><span class="line">styleObj1:&#123;</span><br><span class="line">fontSize:&#x27;40px&#x27;,</span><br><span class="line">&#125;,</span><br><span class="line">styleObj2:&#123;</span><br><span class="line">backgroundColor:&#x27;red&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue使用条件渲染指令对显示的元素进行动态处理</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p><code>v-show</code>相当于<code>display:none</code> 当它的值为<code>false</code>的时候隐藏 为<code>true</code>的时候显示<br><code>v-if</code> 也是显示和隐藏 为<code>false</code>隐藏 为<code>true</code>显示<br>区别：</p><ol><li><code>v-show</code>隐藏的元素还在dom中，<code>v-if</code>隐藏的元素不存在了</li></ol><p>还有<code>v-else-if</code>和<code>elseif</code>的作用差不多<br>以及<code>v-else</code>但它的后面不需要跟表达式 直接显示结果<br>且它不能被打断</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211226154035.png"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>当需要页面在特定条件下显示多个元素的时候 使用如下几种方法</p><ol><li>直接写多个<code>v-if</code>or <code>v-show</code>  缺点 多次判断很浪费</li><li>直接在多个元素上面包裹<code>div</code> 再写<code>v-if</code>or <code>v-show</code> 缺点：可能会造成样式出错</li><li>最终办法 直接用<code>template</code>标签包括多个元素再写<code>v-if</code>or <code>v-show</code> 因为它是模板标签 不会影响css</li></ol><p>注意：<code>&lt;template&gt;</code>标签只能配合<code>v-if</code> 不能配合<code>v-show</code><br>总结<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211226154745.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h1><h2 id="基本列表"><a href="#基本列表" class="headerlink" title="基本列表"></a>基本列表</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue可以使用<code>v-for</code>对数组or对象进行遍历然后渲染 </p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>对数组遍历  可以用in 或者 of<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- p是形参 自己命名 index是序列号 从0开始 ：key是标识，以便后面渲染 一定要写个id或者index否则无法实现 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这里可以直接用p写插值语法 --&gt;</span></span><br><span class="line">            &#123;&#123;p.name&#125;&#125;---&#123;&#123;p.age&#125;&#125;---&#123;&#123;index&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">persons</span>:[</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;jonasan&#x27;</span>,<span class="attr">age</span>:<span class="string">&#x27;??&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;josefu&#x27;</span>,<span class="attr">age</span>:<span class="string">&#x27;??&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;jotaro&#x27;</span>,<span class="attr">age</span>:<span class="string">&#x27;??&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">            ]</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>对对象遍历<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- p是形参 自己命名 index是序列号 从0开始 ：key是标识， 一定要写个id或者index否则无法实现 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这里可以直接用p写插值语法 --&gt;</span></span><br><span class="line">            &#123;&#123;p.name&#125;&#125;---&#123;&#123;p.age&#125;&#125;---&#123;&#123;index&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>遍历对象<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里要键值对对应 k是键 value是值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,k) in jojo&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;k&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;k&#125;&#125;---&#123;&#123;value&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">persons</span>:[</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;jonasan&#x27;</span>,<span class="attr">age</span>:<span class="string">&#x27;??&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;josefu&#x27;</span>,<span class="attr">age</span>:<span class="string">&#x27;??&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;jotaro&#x27;</span>,<span class="attr">age</span>:<span class="string">&#x27;??&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">            ],</span></span><br><span class="line"><span class="javascript">            <span class="attr">jojo</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>:<span class="string">&#x27;jotaro&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">height</span>:<span class="number">195</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">stand</span>:<span class="string">&#x27;star platinum&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>遍历字符串<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211226161939.png" alt=""><br>遍历指定次数</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="key的作用与原理"><a href="#key的作用与原理" class="headerlink" title="key的作用与原理"></a>key的作用与原理</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>讲解key的主要作用和原理 方便于理解index和id</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>结论：</p><ol><li>index适用于仅对列表进行渲染 不会破坏排序</li><li>id则都可以 因为它是唯一的标识</li></ol><p>除此之外还涉及到diff算法的对比问题</p><ol><li>用index 的话 如果是倒叙插入（插到最前面）首先它会新建新的虚拟dom和旧的虚拟dom对比 然后对比到不一致的就替换，虽然可以替换，但它只判断两个虚拟dom的内容，所以如果真实dom写了东西（比如对话框 文本框） 它不会识别 </li></ol><p>图例：<img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211227105926.png" alt=""></p><p>最后图文总结<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211227105042.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>使用列表过滤 实现模糊搜索之类的功能</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>两种方法 一种使用watch 一种使用computed</p><ol><li>使用<code>watch</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>列表过滤<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    search：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;p of filterperson&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;p.name&#125;&#125;---&#123;&#123;p.age&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">keyWord</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">persons</span>:[</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&#x27;承太郎&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&#x27;东方杖助&#x27;</span>,<span class="attr">age</span>:<span class="number">17</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">&#x27;乔瑟夫&#x27;</span>,<span class="attr">age</span>:<span class="number">40</span>&#125;,</span></span><br><span class="line"><span class="javascript">            ],</span></span><br><span class="line"><span class="javascript">            <span class="attr">filterperson</span>:[]</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">keyWord</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 使用immediate让函数立刻执行 就可以达到显示效果</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">immediate</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">handler</span>(<span class="params">val</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 做到这一步发现需要新建一个数组接收这些过滤的数据</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.filterperson = <span class="built_in">this</span>.persons.filter(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> p.name.indexOf(val) !== -<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;)      </span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>使用<code>computed</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    filterperson()&#123;</span><br><span class="line">        return this.persons.filter((p)=&gt;&#123;</span><br><span class="line">            return p.name.indexOf(this.keyWord)!==-1;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>略</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>这里要讲一下sort方法 如果返回形参1-形参2 就是升序 反之就是降序<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>列表过滤<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    search：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 2&quot;</span>&gt;</span>升序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 1&quot;</span>&gt;</span>降序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 0&quot;</span>&gt;</span>原顺序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;p of filterperson&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;p.name&#125;&#125;---&#123;&#123;p.age&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">keyWord</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">sortType</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">persons</span>: [&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">name</span>: <span class="string">&#x27;承太郎&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">age</span>: <span class="number">18</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">name</span>: <span class="string">&#x27;东方杖助&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">age</span>: <span class="number">17</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">name</span>: <span class="string">&#x27;乔瑟夫&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">age</span>: <span class="number">40</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">            ],</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">filterperson</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> arr =  <span class="built_in">this</span>.persons.filter(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> p.name.indexOf(<span class="built_in">this</span>.keyWord)!==-<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(<span class="built_in">this</span>.sortType)&#123;</span></span><br><span class="line"><span class="javascript">                    arr.sort(<span class="function">(<span class="params">p1,p2</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="built_in">this</span>.sortType ===<span class="number">1</span> ? p2.age - p1.age : p1.age-p2.age;</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> arr;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="更新时遇到的一个问题"><a href="#更新时遇到的一个问题" class="headerlink" title="更新时遇到的一个问题"></a>更新时遇到的一个问题</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供一个<code>watch</code> 也自带了一个类似<code>watch</code> 的方法 会自动改值 下面引入一个案例的两种做法分析vue是怎么检测数据的</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>分析检测数据的原理<br>需求：添加一个按钮更新 第一个li的信息<br>方法1<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220101132857.png" alt=""><br>这样做是奏效的<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220101132946.png" alt=""><br>方法2<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220101133033.png" alt=""><br>不奏效<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220101133045.png" alt=""><br>从代码层面是改了 但vue没有检测到 参考下面的vue检测数组改变<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220101133136.png" alt=""></p><p>回到数据处理部分分析<br>vue会把<code>vm.data</code>加工成<code>vm._data</code><br>给他添加了<code>get</code>和<code>set</code>方法<br>这样就形成了响应式页面<br>以name为例子 如果改变了name 就会引起<code>set name</code> 的改变 从而解析模板 页面数据用到name的 也会发生改变 生成虚拟dom 新旧dom对比 再渲染</p><p>尝试写一下vue的get 和 set方法 （错误实例）<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220101134233.png" alt=""><br>会导致无限调用 栈溢出<br>vue的写法类似<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> data = &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;jojo&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建一个监视的实例对象</span></span><br><span class="line">    <span class="keyword">const</span> obs = <span class="keyword">new</span> observer(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 准备一个vm实例对象</span></span><br><span class="line">    <span class="keyword">let</span> vm = &#123;&#125;;</span><br><span class="line">    vm.data = data = obs;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">observer</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 获取key值</span></span><br><span class="line">        <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(obj);</span><br><span class="line">        <span class="comment">// 遍历key值</span></span><br><span class="line">        keys.forEach(<span class="function">(<span class="params">k</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(<span class="built_in">this</span>,k,&#123;</span><br><span class="line">                <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> obj[k];</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="function"><span class="title">set</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;k&#125;</span>被修改了`</span>)</span><br><span class="line">                    obj[k] = val;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>上面只考虑了一层对象 没有考虑多层情况 vue就可以做到</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="set方法-动态添加data属性"><a href="#set方法-动态添加data属性" class="headerlink" title="set方法 动态添加data属性"></a>set方法 动态添加data属性</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>set方法用于动态添加响应式的data属性，其中<br>如果模板中值是<code>undefined</code> vue是不会解析的<br>且后添加的数据（不是set方法）生成的 也不是响应式的<br>所以就需要set方法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p><code>Vue.set(target,key,value)</code><br><code>target</code>是对象 可以写的是<code>vm.student</code><br><code>key</code> 键<br><code>value</code>值<br>or<br><code>vm.$set(target,key,value)</code><br>但这个方法有局限。<br>该方法只能添加到data对象的对象里面，不能直接添加到data对象里面。</p><p>注意 结合<code>v-if</code>标签使用更好<br>如果要动态添加的数据显示到页面的某个标签的时候 记得先定义该标签，然后使用<code>v-if</code>决定标签是否显示</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="vue检测数组改变"><a href="#vue检测数组改变" class="headerlink" title="vue检测数组改变"></a>vue检测数组改变</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">总结一图流</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>前面提到不能直接改变整个数组的某个对象 只能分开改变对象的值<br>现在学习如何检测数组改变</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>vue没有为数组里面的每个元素匹配get 和set方法 所以 不是响应式的<br>数据可以直接改变 但vue没有检测到<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220101173247.png" alt=""></p><p>vue操作数组的方法<br>方法1<br>vue对数组的操作有以下的类型 和原生js的方法功能一致 但方法不太相同<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220101173614.png" alt=""><br><code>push</code>在数组最后新增一个元素<br><code>pop</code> 删除最后一个元素<br><code>shift</code>删除第一个元素<br><code>unshift</code> 在数组最前面加一个元素<br><code>splice</code> 在数组的指定位置 添加/修改/删除某个元素<br><code>sort</code>对数组进行排序<br><code>reverse</code> 对数组进行反转</p><p>方法2 用到前面讲的set方法<br><code>Vue.set(vm._data.student.hobby,1,&#39;打台球&#39;)</code><br>直接通过set方法 定位索引值 修改</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220101175232.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="表单收集"><a href="#表单收集" class="headerlink" title="表单收集"></a>表单收集</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>讲解vue怎么对form表单操作进行数据收集以及一些小技巧</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220101204401.png" alt=""><br>比较关键的是单选框和多选框<br>如果你要点击返回xx数据 那就必须在里面配置value值<br>多选框的道理也是一样 如果没有配置那么就是返回checked的值<br>且要注意如果data中有关多选框的属性如果初始值是非数组 那么也是收集checked值，是数组 才收集的是value值<br>以及一些小技巧 修饰符<br><code>lazy</code>等用户输入完了再收集<br><code>number</code>输入的必须是数字<br><code>trim</code>去掉首尾的空格</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供过滤器用于过滤数据，并增加管道的用法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>过滤器实现的工作原理<br>首先获取time到timeFormater 然后timeFormater过滤之后，将过滤的结果重新渲染到模板<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103214849.png" alt=""><br>其次它这个模板里面可以传参也可以不传参，不传参默认也会把前者传过去<br>下面是filter 相当于一个函数<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103215120.png" alt=""></li><li>之后说一下传参的形式<br>传参的话，看上去好像只是传了一个值 但是实际上是传递了两个值 第一个默认传进来的time 用value去接收 第二个是格式字符串 用str来接收 此处用到了es6的新特性 如果有参传进来就用它的值 没有就用默认的值<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103215303.png" alt=""></li><li>多个过滤器可以串联<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103220612.png" alt=""></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>格式化日期dayjs<br><code>dayjs(this.time).format(&#39;YYYY-MM-DD HH:mm:ss&#39;)</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="v-text指令"><a href="#v-text指令" class="headerlink" title="v-text指令"></a>v-text指令</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供<code>v-text</code>指令向标签中渲染指定文本内容</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>总结<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103221027.png" alt=""><br>插值语法可以穿插别的东西 但<code>v-text</code>不行<br><code>v-text</code>把给定的内容当成字符串 替换 内容 所以如果写标签是不会替换的</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="v-html指令"><a href="#v-html指令" class="headerlink" title="v-html指令"></a>v-html指令</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供<code>v-html</code>指令进行结构的解析 但涉及到安全性问题</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>总结<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103222059.png" alt=""><br>浏览器的cookie可以通过js代码获取，如果获取到全部的cookie 导入到自己的浏览器相当于盗号免验证登陆，是借助用户之手操作的严重安全问题</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="v-clock指令"><a href="#v-clock指令" class="headerlink" title="v-clock指令"></a>v-clock指令</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供<code>v-clock</code>方法，配合css使得vue容器在被接管之后再渲染模板标签，解决网速过慢的情况下模板标签先显示出来的问题</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>总结:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220104114706.png" alt=""><br>注意它是没有初始值的</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="v-once指令"><a href="#v-once指令" class="headerlink" title="v-once指令"></a>v-once指令</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供<code>v-once</code>方法，使得有该方法的标签中模板数值只有第一次渲染之后就不变了</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>总结:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220104115458.png" alt=""><br>注意它是没有初始值的</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="v-pre指令"><a href="#v-pre指令" class="headerlink" title="v-pre指令"></a>v-pre指令</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供<code>v-pre</code>方法，可以自定义不被vue容器渲染的静态标签数据，加快编译</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>总结:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220104115716.png" alt=""><br>注意它是没有初始值的</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="vue的自定义方法"><a href="#vue的自定义方法" class="headerlink" title="vue的自定义方法"></a>vue的自定义方法</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供自定义方法，让用户去封装指令的方法并且调用。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>函数式<br>需求：创建一个<code>v-big</code>方法 将n值放大十倍<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是n：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是n放大十倍后的值：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">directives</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 有两种声明方法，一种是对象式 一种是函数式</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">big</span>(<span class="params">element,binding</span>)</span>&#123; <span class="comment">//有两个参数 一个是绑定的标签元素 一个是绑定的内容</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(element);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(binding);</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 现在要把数值放大十倍 而且也获得了dom元素 那么直接使用innerText改变n值</span></span></span><br><span class="line"><span class="javascript">                element.innerText = binding.value*<span class="number">10</span>;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 自定义的方法 当模板重新解析的时候会调用方法 不能单说所在的值被修改的时候</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>千万注意 这个新创建的指令并不是<code>return xxx</code>的形式来返回值</li><li>对象式<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是n：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是n放大十倍后的值：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- fbind让其所绑定的input元素默认获取焦点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-fbind:value</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">n</span>: <span class="number">1</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 有两种声明方法，一种是对象式 一种是函数式</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">big</span>(<span class="params">element, binding</span>)</span> &#123; <span class="comment">//有两个参数 一个是绑定的标签元素 一个是绑定的内容</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(element);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(binding);</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 现在要把数值放大十倍 而且也获得了dom元素 那么直接使用innerText改变n值</span></span></span><br><span class="line"><span class="javascript">                element.innerText = binding.value * <span class="number">10</span>;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 自定义的方法 当模板重新解析的时候会调用方法 不能单说所在的值被修改的时候</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">/*                 fbind(element,binding)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                                element.value = binding.value;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                                // 如果这样写 就会发现第一次不绑定 点击之后的都绑定</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                                // 原因是出在了input还没有被渲染到页面上就被绑定了这个事件 所以不会聚焦</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                                // 解决方法 使用对象式来写</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                                element.focus();</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                            &#125; */</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">fbind</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 指令与元素成功绑定时</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">bind</span>(<span class="params">element, binding</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    element.value = binding.value;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 指令所在元素被插入页面时</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">inserted</span>(<span class="params">element, binding</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    element.focus();</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 指令所在的模板被重新解析时</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">update</span>(<span class="params">element, binding</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    element.value = binding.value; </span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>总结<br>它可以写成多个字符串的形式 但要用-连接起来 比如<code>v-big-number</code><br><code>directives</code>里面同时也要写成<code>&#39;big-number&#39;:{}</code><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220104191642.png" alt=""></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="mounted生命周期函数"><a href="#mounted生命周期函数" class="headerlink" title="mounted生命周期函数"></a>mounted生命周期函数</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue在它的执行过程中会执行很多函数，mounted就是其中一个当vue容器挂载完后执行的函数，这些函数统称为生命周期函数</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>见代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 需求 欢迎来到vue透明度从1到0 再到1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;opacity&#125;&quot;</span>&gt;</span>欢迎来到vue<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">opacity</span>:<span class="number">1</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// vue在挂载完之后会执行一个函数叫mounted</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// vue在生命周期中会执行很多函数 这些函数叫做生命周期函数</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.opacity-=<span class="number">0.01</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(<span class="built_in">this</span>.opacity&lt;=<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.opacity = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;, <span class="number">16</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>总结:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220104193907.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="vue生命周期-8个钩子"><a href="#vue生命周期-8个钩子" class="headerlink" title="vue生命周期 8个钩子"></a>vue生命周期 8个钩子</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue生命周期使用了8个钩子来提供给用户不同阶段的需求</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>一图流：<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220107102008.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220107102036.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220107102114.png" alt=""><br>常用的生命周期钩子<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220107103006.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端进阶" scheme="https://zlinni.github.io/categories/%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://zlinni.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>第一次秋招面试杂谈</title>
    <link href="https://zlinni.github.io/posts/8a2953565bdb/"/>
    <id>https://zlinni.github.io/posts/8a2953565bdb/</id>
    <published>2021-12-03T02:47:39.000Z</published>
    <updated>2021-12-14T06:30:54.547Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tip cogs"><p>&#160; &#160; &#160; &#160;今天参加了学校最新一轮的大型面试会，作为大三的学生写一点面试的收获。</p></div><h2 id="找面试"><a href="#找面试" class="headerlink" title="找面试"></a>找面试</h2><p>&#160; &#160; &#160; &#160;首先进去的第一方面就是逛完所有的校招摊位，找到适合自己的岗位面试。我个人是往前端开发方面走的，所以找的都是这个方面的内容。但基本上走了一圈，发现对技术栈有要求的面试摊位并不多，大多数是挂羊头卖狗肉，有的hr甚至对于这个方面的内容不熟悉，比较像是收打杂的。另外比较标准的就是一个hr和一个技术人员，技术人员专门负责问技术方面的问题，hr根据结果进行分析筛选是否通过第一次面试。</p><h2 id="问问题"><a href="#问问题" class="headerlink" title="问问题"></a>问问题</h2><p>&#160; &#160; &#160; &#160;今天一共找了三个摊位，对其中两个对技术栈有要求的摊位进行询问。大概问了这几个方面的问题，一是对技术栈的知识会有什么具体的提问，二是对于简历上的内容，会比较看重哪个点，三是根据我自身情况，询问面试官的建议。</p><h3 id="技术栈知识"><a href="#技术栈知识" class="headerlink" title="技术栈知识"></a>技术栈知识</h3><p>&#160; &#160; &#160; &#160;总结一下就是基础知识要牢固，但不限于需求上面的知识，有拓展更好，比如了解过后端spring全家桶方面的知识，或者运维上面的内容。另外就是针对技术栈知识会有些基础性的提问，比如js，vue等框架内容的提问。面试之后正常还有一轮笔试，但可能要求没有太高，不会考数据结构之类的问题，这个根据公司自身情况而定。</p><h3 id="简历内容"><a href="#简历内容" class="headerlink" title="简历内容"></a>简历内容</h3><p>&#160; &#160; &#160; &#160;首先问了对于一份简历，hr会侧重于看什么。得到的答案就是基础知识牢固的情况下，个人的项目经历很重要，比如个人博客，各种管理系统之类的，虽然看起来是烂大街的，但要在烂大街的东西中找到自己有用的。面试官说个人项目最好写上去是根据xxx技术开发，然后自身要了解做这个项目会遇到的问题，要有自己的总结和提炼，以及对于这个项目是否有自己创新的地方，好比根据xx技术做xx项目，然后自己换yy技术做xx项目，简而言之就是学以致用。</p><h3 id="自身方面"><a href="#自身方面" class="headerlink" title="自身方面"></a>自身方面</h3><p>&#160; &#160; &#160; &#160;最后是问了自身方面的一些内容，因为自己的学习进度还没到框架，但现在不管是哪个it前端都至少必备一门框架技术，所以vue/react的学习也要提上日程,以及八股文，计网，数据结构，操作系统等等。除此之外还有比赛方面，因为学校开设的前端比赛是真的少之又少，曾经参加过一个后面又被主办方鸽了，现在准备参加蓝桥杯的web比赛，问道hr如果简历上面只有一项比赛经历是否应该写的时候，他建议是先把自己优势的方面写在前面，如果简历的篇幅不够，就可以继续写在后面当作一项内容。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&#160; &#160; &#160; &#160;上面写的只是个人看法，也不能一概而谈。本次秋招也没有问关于五险一金，工作制度之类的问题，主要的还是了解了一下面试流程。个人感觉基础的东西还是需要去复习与巩固，打好基础才能拓展更多的新知识。虽然学习是反人类的过程，但为了有更好的前景，只能变得更卷。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="面试" scheme="https://zlinni.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="面试" scheme="https://zlinni.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript(未完结)</title>
    <link href="https://zlinni.github.io/posts/df2fc0ed9242/"/>
    <id>https://zlinni.github.io/posts/df2fc0ed9242/</id>
    <published>2021-11-30T11:58:03.000Z</published>
    <updated>2021-12-14T04:43:20.595Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tip cogs"><p>本文主要用于记录JavaScript的学习过程，参考视频<a href='https://www.bilibili.com/video/BV1Sy4y1C7ha?from=search&seid=3987261351855349832&spm_id_from=333.337.0.0'>【尚硅谷Web前端ES6教程，涵盖ES6-ES11】</a></p></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">主要运用</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>一种高级编程语言</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>表单动态校验</li><li>网页特效</li><li>服务端开发 node.js</li><li>Electron</li><li>App Cordova</li><li>控制硬件 物联网Ruff</li><li>游戏开发 cocos2d.js</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="浏览器执行js的过程"><a href="#浏览器执行js的过程" class="headerlink" title="浏览器执行js的过程"></a>浏览器执行js的过程</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><ul><li>浏览器分为渲染引擎和js引擎</li><li>其中渲染引擎负责HTML和CSS解析，JS引擎负责解析js代码（逐行解析）</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="ECMA-script"><a href="#ECMA-script" class="headerlink" title="ECMA script"></a>ECMA script</h1><h2 id="js的书写位置"><a href="#js的书写位置" class="headerlink" title="js的书写位置"></a>js的书写位置</h2><ol><li>行内式</li></ol><ul><li>编写在行内的js代码 可读性差 在特殊情况下使用</li><li>规定HTML中使用双引号，js中使用单引号</li></ul><ol><li>内嵌式</li></ol><ul><li>script标签中使用，可以写入多行代码，学习常用</li></ul><ol><li>外部js</li></ol><ul><li>引入方式<script src = "js name"></script>&gt;</li><li>标签中不能再写其他信息</li></ul><h2 id="js输入输出语句"><a href="#js输入输出语句" class="headerlink" title="js输入输出语句"></a>js输入输出语句</h2><ol><li>alert(msg) 浏览器弹出提示框</li><li>console.log(msg) 浏览器控制台打印输入信息</li><li>prompt(info) 浏览器弹出输入框，用户可以输入</li></ol><h2 id="js变量"><a href="#js变量" class="headerlink" title="js变量"></a>js变量</h2><ul><li><p>总类型 var 其数据类型是在运行过程中由等号右边的值来确定的</p></li><li><p>声明变量的特殊情况：</p><ol><li><p>只声明不赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sex;</span><br><span class="line"><span class="built_in">console</span>.log(sex);<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></li><li><p>不声明不赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(xxx);<span class="comment">//error</span></span><br></pre></td></tr></table></figure></li><li><p>不声明只赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age);<span class="comment">//10</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="js数据类型"><a href="#js数据类型" class="headerlink" title="js数据类型"></a>js数据类型</h2><ul><li><p>简单数据类型 Number, String, Boolean, Undefined, Null</p></li><li><p>复杂数据类型 Object</p><ul><li>Number:</li></ul><ol><li><p>可以直接输入进制数字 eg 八进制012</p></li><li><p>可以打印数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">最大值<span class="built_in">Number</span>.MAX_VALUE</span><br><span class="line">最小值<span class="built_in">Number</span>.MIN_VALUE</span><br><span class="line">无穷大<span class="built_in">Number</span>.MAX_VALUE*<span class="number">2</span></span><br><span class="line">无穷小-<span class="built_in">Number</span>.MIN_VALUE</span><br><span class="line">不是数字<span class="literal">NaN</span> <span class="string">&#x27;sda&#x27;</span>-<span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p>方法IsNaN() 判断是否为数字，若不是返回false</p></li></ol><ul><li>String：</li></ul><ol><li><p>字符串引号嵌套 单引号嵌套双引号 双引号嵌套单引号</p></li><li><p>字符串转义符\ eg\b 空格</p></li><li><p>字符串长度 str.length</p></li><li><p>字符串拼接 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;str1&#x27;</span>+<span class="string">&#x27;str2&#x27;</span> = str1str2</span><br><span class="line"><span class="string">&#x27;pink&#x27;</span>+<span class="number">18</span> = pink18</span><br><span class="line"><span class="string">&#x27;pink&#x27;</span>+<span class="literal">true</span> = pinktrue</span><br><span class="line"> <span class="number">12</span>+<span class="number">12</span> = <span class="number">24</span></span><br><span class="line"><span class="string">&#x27;12&#x27;</span>+<span class="number">12</span> = <span class="number">1212</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><ul><li>Boolean, Undefined, Null</li></ul><ol><li><p>true参与加法运算视为1 false视为0</p></li><li><p>如果一个变量声明未赋值 则视为Undefined未定义数据类型 注意 undefined + 1 视为NaN</p></li><li><p>null + 1 = 1</p></li><li><p>typeof返回数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num)<span class="comment">//number</span></span><br><span class="line"><span class="comment">/*注意 与null使用 返回object</span></span><br><span class="line"><span class="comment">作用：与prompt结合使用 获取输入的数据类型*/</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><p>数据类型转换</p><ol><li><p>转换为字符型 toString()或者字符串拼接 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> + <span class="string">&#x27;&#x27;</span><span class="comment">//5</span></span><br></pre></td></tr></table></figure></li><li><p>转化为数字型 parseInt parseFloat 或者 利用 Number() 或者算术运算符 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;12&#x27;</span> - <span class="number">0</span><span class="comment">//12</span></span><br></pre></td></tr></table></figure></li><li><p>转化为布尔型 Boolean() 代表空 否定的值将被转化为false </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span> , <span class="string">&quot;&quot;</span> , <span class="number">0</span> ,<span class="literal">NaN</span> ,<span class="literal">null</span> , <span class="literal">undefined</span> </span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="js运算符-略"><a href="#js运算符-略" class="headerlink" title="js运算符 略"></a>js运算符 略</h2><h2 id="arguments使用"><a href="#arguments使用" class="headerlink" title="arguments使用"></a>arguments使用</h2><ul><li>利用其可以按索引顺序传递实参</li></ul><h2 id="函数声明的两种方式"><a href="#函数声明的两种方式" class="headerlink" title="函数声明的两种方式"></a>函数声明的两种方式</h2><ol><li><p>利用函数关键字自定义函数(命名函数)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure></li><li><p>函数表达式 l</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="js作用域"><a href="#js作用域" class="headerlink" title="js作用域"></a>js作用域</h2><ol><li><p>全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在全局作用域下声明的变量叫做全局变量</span><br><span class="line">特殊情况下 函数内不使用<span class="keyword">var</span>声明的变量也是全局变量</span><br></pre></td></tr></table></figure></li><li><p>局部变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">局部变量只能在函数内部使用</span><br><span class="line">在函数内部<span class="keyword">var</span>声明的变量是局部变量</span><br><span class="line">函数的形参实际上是局部变量</span><br></pre></td></tr></table></figure></li><li><p>区别</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">全局变量在任何情况下都可以使用 but只有在浏览器关闭才销毁 比较占用内存</span><br><span class="line">局部变量只在函数内部使用 当程序执行完就销毁 节省内存空间</span><br></pre></td></tr></table></figure></li><li><p>作用域链 ==就近原则==</p><h2 id="js预解析"><a href="#js预解析" class="headerlink" title="js预解析"></a>js预解析</h2></li></ol><ul><li>js引擎运行js分为两步 预解析 代码执行<ol><li>预解析 js引擎会把js里面所有的var和function提升到当前作用域的最前面</li><li>代码执行 按照代码书写的顺序由上往下执行 </li></ol></li><li>预解析分为变量预解析(变量提升)和函数预解析(函数提升)<ol><li>变量提升就是把所有变量声明提升到当前作用域最前面 不提升赋值操作</li><li>函数提升就是把所有函数声明提升到当前作用域的最前面 不调用函数</li></ol></li></ul><h2 id="js对象"><a href="#js对象" class="headerlink" title="js对象"></a>js对象</h2><ul><li><p>对象简介 略</p></li><li><p>创建对象的三种方式</p><ol><li><p>利用字面量创建一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;; 此处创建了一个空对象</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>:<span class="string">&#x27;arer&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="string">&#x27;female&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHi</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(‘hi~’);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a 内部的属性名采用键对值的方式 键 属性名:值 属性值</span><br><span class="line">b 多个属性或者方法中间用逗号隔开</span><br><span class="line">c 方法冒号后面跟一个匿名函数</span><br></pre></td></tr></table></figure></li><li><p>利用构造函数创建对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname,age,sex</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = uname;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    <span class="built_in">this</span>.方法 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">&#x27;ldh&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;man&#x27;</span>);</span><br><span class="line">注意 构造函数名字的首字母要大写 调用函数返回的是一个对象</span><br><span class="line">构造对象 抽取了对象的公共部分 封装到函数里 泛指某一大类<span class="class"><span class="keyword">class</span> 好比汽车设计图 </span></span><br><span class="line"><span class="class">创建对象 特指某一个 通过<span class="title">new</span>关键字创建对象的过程称之为对象实例化 好比汽车本身 </span></span><br></pre></td></tr></table></figure></li><li><p>利用new Object 创建对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="function"><span class="title">Obeject</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">obj.uname = <span class="string">&#x27;arer&#x27;</span>;</span><br><span class="line">obj.age = <span class="number">20</span>;</span><br><span class="line">obj.sex = <span class="string">&#x27;man&#x27;</span>;</span><br><span class="line">obj.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hi~&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">a 利用等号 = 赋值的方法 添加对象的属性和方法</span><br><span class="line">b 每个属性和方法之间用分号结束</span><br></pre></td></tr></table></figure></li></ol></li><li><p>使用对象</p><ol><li>调用对象的属性 对象名.属性名</li><li>or 对象名[‘属性名’]<ol><li>调用对象的方法 对象名.方法名()</li></ol></li></ol></li><li><p>变量 属性 函数 方法的区别</p><ul><li><p>变量和属性都是用来存储数据的 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">变量单独声明并赋值 使用的时候直接写变量名;</span><br><span class="line">属性在对象里面不用声明 使用时必须是对象.属性</span><br></pre></td></tr></table></figure></li><li><p>函数和方法都是用来实现某种功能 做某件事</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数单独声明并且调用的函数名() 单独存在;</span><br><span class="line">方法是在对象里面调用的时候 对象.方法()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>遍历对象的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(变量 <span class="keyword">in</span> 对象)&#123;</span><br><span class="line">    <span class="comment">//假设此处变量为k 对象为obj</span></span><br><span class="line">    <span class="built_in">console</span>.log(k);</span><br><span class="line">    <span class="built_in">console</span>.lo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="js内置对象"><a href="#js内置对象" class="headerlink" title="js内置对象"></a>js内置对象</h2><ul><li><p>内置对象简介：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">js中的对象分为三种 自定义对象 内置对象 浏览器对象</span><br><span class="line">前两者是js基础内容 属于ECMAscript 第三个浏览器对象是js独有的，在js API中讲解</span><br><span class="line">内置对象是是js自带的一些对象用于实现一些常用的或者最基本的功能和方法</span><br><span class="line">最大的优点是帮助快速开发</span><br><span class="line">eg </span><br><span class="line"><span class="built_in">Math</span>,<span class="built_in">Date</span>,<span class="built_in">Array</span>,<span class="built_in">String</span> etc</span><br></pre></td></tr></table></figure></li><li><p>Math 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">直接调用 不需要<span class="keyword">new</span></span><br><span class="line">常用方法</span><br><span class="line"><span class="built_in">Math</span>.PI <span class="comment">//圆周率</span></span><br><span class="line"><span class="built_in">Math</span>.floor() <span class="comment">//向下取整</span></span><br><span class="line"><span class="built_in">Math</span>.cell() <span class="comment">//向上取整</span></span><br><span class="line"><span class="built_in">Math</span>.round() <span class="comment">//四舍五入 就近取整 attention -3.5结果是3</span></span><br><span class="line"><span class="built_in">Math</span>.abs() <span class="comment">//绝对值</span></span><br><span class="line"><span class="built_in">Math</span>.max()/<span class="built_in">Math</span>.min() <span class="comment">//求最大值 最小值</span></span><br></pre></td></tr></table></figure></li><li><p>Date 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取当前时间必须实例化</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(now);</span><br><span class="line"><span class="comment">//常用方法</span></span><br><span class="line">getFullyear()</span><br><span class="line">getMonth() <span class="comment">//0-11</span></span><br><span class="line">getDate()</span><br><span class="line">getDay() <span class="comment">//0-6</span></span><br><span class="line">getHours()</span><br><span class="line">getMinutes()</span><br><span class="line">getSeconds()</span><br><span class="line">拓展： 格式化日期时分秒 见“格式化日期时分秒.html”</span><br></pre></td></tr></table></figure></li><li><p>Array 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">i 创建数组的两种方式</span><br><span class="line">利用数组字面量 eg <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">利用<span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line">eg1 <span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>) 表示数组长度为<span class="number">2</span> 里面有两个空元素</span><br><span class="line">eg2 <span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>,<span class="number">3</span>) 等价于[<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">ii 利用<span class="keyword">instanceof</span> <span class="built_in">Array</span> 来检测是否为数组 eg <span class="keyword">var</span> arr = []; <span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>);</span><br><span class="line">利用 <span class="built_in">Array</span>.isArray(arr); H5新增的方法 ie9以上才支持</span><br><span class="line"></span><br><span class="line">iii 添加/删除元素方法 方法加.即可使用</span><br><span class="line">push() 在数组末尾添加一个元素 返回新的长度</span><br><span class="line">unshift() 在数组开头添加一个或多个元素 返回新的长度</span><br><span class="line">pop() 删除数组最后一个元素 返回它删除元素的值</span><br><span class="line">shift() 删除数组的第一个元素 返回第一个元素的值</span><br><span class="line"></span><br><span class="line">iv 数组排序</span><br><span class="line">reverse() 翻转数组</span><br><span class="line">sort() 排序</span><br><span class="line"></span><br><span class="line">v 数组索引</span><br><span class="line">indexOf(数组元素) 数组中查找给定元素的第一个索引 找不到则返回-<span class="number">1</span></span><br><span class="line">lastIndexOf(数组元素) 从后面开始找数组元素</span><br><span class="line">作用：数组去重 遍历旧数组，拿旧数组的元素去查询新数组，如果该元素没有在新数组出现则添加</span><br><span class="line">利用indexOf() 如果返回-<span class="number">1</span>说明新数组没有存在该元素</span><br><span class="line"></span><br><span class="line">vi 数组转化为字符串</span><br><span class="line">toString() 结果用逗号分隔</span><br><span class="line">join(<span class="string">&#x27;分隔符&#x27;</span>) 结果用输入的分隔符分隔，不输入默认逗号</span><br></pre></td></tr></table></figure></li><li><p>String 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i 简单数据类型为什么能用length？ 因为<span class="keyword">new</span>将他封装成复杂数据类型</span><br><span class="line">ii 字符串的不可变性？ 改变字符串实际上是地址指向的改变 每次改变都要开辟新空间 浪费资源</span><br><span class="line">iii 未完待续</span><br></pre></td></tr></table></figure></li></ul><h2 id="js简单类型和复杂类型"><a href="#js简单类型和复杂类型" class="headerlink" title="js简单类型和复杂类型"></a>js简单类型和复杂类型</h2><ul><li><p>值类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">简单数据类型/基本数据类型 在存储时变量中存储的是值本身 因此叫值类型</span><br></pre></td></tr></table></figure></li><li><p>引用类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">复杂数据类型，在存储时变量中存储的仅仅是地址，因此叫做引用数据类型，通过<span class="keyword">new</span>关键字创建的对象 比如<span class="built_in">Object</span> <span class="built_in">Array</span> <span class="built_in">Date</span> etc</span><br></pre></td></tr></table></figure></li></ul><h1 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h1><ul><li>API是一些预先定义的函数 目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码或者理解内部工作机制的细节</li><li>简单来说 API是给程序员提供的一组工具 以便能够轻松实现想要完成的功能 </li><li>Web API 是浏览器提供的一套操作浏览器功能和页面元素的API(BOM和DOM)</li></ul><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><ul><li>Document Object Model 简称DOM 文档对象模型</li><li>处理HTML的标准接口</li></ul><h2 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h2><ul><li><p>一个页面就是一个文档 用document表示<img src="image-20210324154900183.png" alt="image-20210324154900183"></p></li><li><p>元素 页面的标签都是元素 用element表示</p></li><li>节点 页面的所有内容都是节点 用node表示</li></ul><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><ul><li><p>id</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(id);</span><br></pre></td></tr></table></figure></li><li><p>标签名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;tag&#x27;</span>); </span><br></pre></td></tr></table></figure></li><li><p>class</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;classname&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>选择器 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line">返回指定选择器的第一个对象</span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line">返回指定选择器的所有对象</span><br></pre></td></tr></table></figure></li><li><p>body</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body;</span><br></pre></td></tr></table></figure></li><li><p>html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement;</span><br></pre></td></tr></table></figure></li></ul><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul><li><p>事件三要素 事件源 事件类型 事件处理程序</p></li><li><p>事件源 事件被触发的对象 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>事件类型 如何触发 什么事件 比如onclick</p></li><li><p>事件处理程序 通过一个函数赋值的方式完成</p></li></ul><h2 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h2><ul><li><p>改变元素内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">element.innerText;</span><br><span class="line">不识别html标签</span><br><span class="line">从起始位置到终止位置的内容 但是它除去html</span><br><span class="line">element.innerHTML;</span><br><span class="line">识别html标签</span><br><span class="line">起始位置到终止位置的全部内容 包括html标签 同时保留空格和换行</span><br></pre></td></tr></table></figure></li><li><p>表单属性操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> iv = input.value;</span><br></pre></td></tr></table></figure></li><li><p>样式属性操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.style 行内样式操作</span><br><span class="line">element.className 类名样式操作</span><br></pre></td></tr></table></figure></li><li><p>H5自定义属性</p><ol><li><p>自定义属性目的：<br>为了保存并使用数据，有些数据可以保存到页面中而不用保存到数据库中</p></li><li><p>获取方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.getAttribute(<span class="string">&#x27;属性&#x27;</span>)；</span><br></pre></td></tr></table></figure><p>H5新增</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">element.dataset.index;</span><br><span class="line">element.dataset[<span class="string">&#x27;index&#x27;</span>];</span><br><span class="line">前提必须是data-xxx</span><br><span class="line">如果是data-list-name</span><br><span class="line">则获取为</span><br><span class="line">element.dataset.listName：/(驼峰命名法)</span><br></pre></td></tr></table></figure></li><li><p>命名方式:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-index</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>也可以通过js进行设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.setAttribute(<span class="string">&#x27;data-index&#x27;</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><ul><li><p>节点概述 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">一般地 节点至少拥有三个属性</span><br><span class="line">nodeType 节点类型</span><br><span class="line">nodeName 节点名称</span><br><span class="line">nodeValue 节点值</span><br><span class="line">* 元素节点 nodeType为<span class="number">1</span></span><br><span class="line">* 属性节点为<span class="number">2</span></span><br><span class="line">* 文本节点为<span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>节点层级 </p></li></ul><h1 id="事件高级"><a href="#事件高级" class="headerlink" title="事件高级"></a>事件高级</h1><h2 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传统方式注册事件</span></span><br><span class="line">btn[<span class="number">0</span>].click = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//事件侦听注册事件</span></span><br><span class="line"><span class="comment">//里面的事件类型是字符串，必定加引号，而且不用on</span></span><br><span class="line"><span class="comment">//同个事件可以添加多个事件侦听器</span></span><br><span class="line">btn[<span class="number">1</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="解绑事件"><a href="#解绑事件" class="headerlink" title="解绑事件"></a>解绑事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当点击之后不需要该事件了，则可以使用解绑</span></span><br><span class="line"><span class="comment">//传统方式</span></span><br><span class="line">btn[<span class="number">0</span>].click = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">    btn[<span class="number">0</span>].onclick = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//事件侦听删除</span></span><br><span class="line">btn[<span class="number">1</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>,fn);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">    btn[<span class="number">1</span>].removeEventListener(<span class="string">&#x27;click&#x27;</span>,fn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p>简介</p><ul><li>事件流描述的是从页面中接受事件的顺序</li><li>事件发生时会在元素节点之间按照特定的顺序传播 这个传播过程叫做dom事件流 </li><li>分为三个阶段：1.捕获阶段 2.当前目标阶段 3.冒泡阶段</li></ul><p>注意</p><ul><li>js代码中只能执行捕获或者冒泡其中一个阶段</li><li>onclick和attachEvent（ie）只能得到冒泡阶段     </li><li>事件捕获由上往下，父盒子到子盒子 </li><li>事件冒泡则由下往上，子盒子到父盒子</li></ul><p>如何使用事件捕获/冒泡？</p><ul><li><p>事件捕获</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//addEventListener的第三个参数，true则是事件捕获，不写或者是false则是冒泡</span></span><br><span class="line">div[<span class="number">0</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>,fn,<span class="literal">true</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>有些事件是没有冒泡的 比如onblur onfocus onmouseenter onmouseleave</li></ul><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>简介</p><ul><li>事件对象就是事件的一系列相关数据的集合 跟事件相关 比如鼠标点击里面就包含了鼠标的相关信息 鼠标坐标等 如果是键盘事件就包含了当前键盘事件的信息 比如 判断用户按下了某个按键</li><li>在div.onclick = function(event){}中 event就是一个事件对象 写到我们监听函数的小括号里面 当形参来看</li></ul><p>注意</p><ul><li><p>事件对象只有有了事件才会存在，他是系统给我们自动创建的，不需要我们传递参数</p></li><li><p>可以自己命名 比如event ，evt，e</p></li><li><p>事件对象也有兼容性问题 比如ie678里面只能通过 window.event来写</p></li><li><p>写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e = e || <span class="built_in">window</span>.event</span><br><span class="line">当浏览器认识e的时候 直接赋值为e</span><br><span class="line">当浏览器不认识这个e的时候 e是<span class="literal">undefined</span> 就是<span class="literal">false</span> 然后执行后面的 </span><br></pre></td></tr></table></figure></li></ul><p>常见事件对象属性和方法</p><ul><li>e.target 返回当前触发的对象 this返回的是绑定事件的对象 （元素）</li></ul><p>返回事件类型</p><ul><li>e,type </li></ul><p>阻止默认行为 让链接不跳转 或者 按钮不提交</p><ul><li>e.preventDefault();  dom标准写法</li><li>低版本浏览器 使用e.returnValue </li><li>直接使用return false 也能阻止默认行为  但注意后面的代码不会执行了</li></ul><p>阻止冒泡 面试基本必考 两种方式</p><ul><li><p>e.stopPropagation()</p></li><li><p>兼容性 e.cancelBubble = true; </p></li><li><p>兼容性解决方案</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(e&amp;&amp;e.stopPropagation)&#123;</span><br><span class="line">e.stopPropagation();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意该方法只能阻止一级  所以后面的冒泡还要加方法</p></li></ul><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>简介</p><ul><li>事件冒泡本身的特性 如果盒子比较多的时候 一个一个冒泡时间响应就会很久 使用事件委托能解决这个委托</li><li>事件委托也叫事件代理 jquery里面叫做事件委派</li></ul><p>原理</p><ul><li>不是每个子节点单独设置监听器，而是事件监听器设置在父节点上，然后利用冒泡原理影响设置每个子节点</li><li>eg 给ul注册点击事件 然后利用事件对象中的target来找到当前触发的对象li 因为点击li 事件冒泡触发到ul上 而ul又有注册事件 就会触发事件监听器</li></ul><p>作用</p><ul><li>只操作了一次DOM 提高了程序性能</li></ul><h2 id="常用的鼠标事件"><a href="#常用的鼠标事件" class="headerlink" title="常用的鼠标事件"></a>常用的鼠标事件</h2><p>禁止选中文字和禁止右键菜单</p><ul><li><p>禁止鼠标右键菜单 contextmenu 主要控制应该合适显示上下文菜单  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;contextmenu&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">e.preventDefault();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>禁止鼠标选中 selectstart</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;selectstart&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">e.preventDefault();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>鼠标事件对象</p><ul><li>MouseEvent<img src="C:\Users\Zlinni\AppData\Roaming\Typora\typora-user-images\image-20211205112133180.png" alt="image-20211205112133180"></li><li>KeyboardEvent<img src="C:\Users\Zlinni\AppData\Roaming\Typora\typora-user-images\image-20211205112254166.png" alt="image-20211205112254166"></li><li>注意 onkeydown和up不区分字母大小写 onkeypress区分大小写</li><li>键盘事件对象e.keyCode可以打印asii码</li></ul><p>案例 jd搜索</p><ul><li>检测用户是否按下s 如果按下s 就把光标定位到搜索框里面</li><li>使用keyCode判断按下的是不是s</li><li>搜索框获得焦点 使用js里面的focus()方法</li></ul><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><p>简介</p><ul><li>浏览器对象模型 Browser Object Model 提供了独立于内容而与浏览器窗口进行交互的对象 核心是window</li><li>BOM由一系列相关的对象构成 并且每个对象都提供了很多方法和属性</li><li>但BOM缺乏标准 js语法标准化组织是ECMA DOM的标准化组织是W3C </li></ul><p>和DOM区别</p><ul><li>如下<img src="C:\Users\Zlinni\AppData\Roaming\Typora\typora-user-images\image-20211205113328066.png" alt="image-20211205113328066"></li></ul><p>BOM的构成</p><ul><li>window对象是浏览器的顶级对象 它具有双重角色</li><li>它是js访问浏览器窗口的一个接口</li><li>它是一个全局对象。定义在全局作用域中的变量，函数都会变成window对象的属性和方法</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端基础" scheme="https://zlinni.github.io/categories/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="前端" scheme="https://zlinni.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="js" scheme="https://zlinni.github.io/tags/js/"/>
    
  </entry>
  
</feed>
