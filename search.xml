<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/2021/12/10/test/"/>
      <url>/2021/12/10/test/</url>
      
        <content type="html"><![CDATA[<p>测试双线</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6-11</title>
      <link href="/2021/12/06/ES6-11/"/>
      <url>/2021/12/06/ES6-11/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6-11"><a href="#ES6-11" class="headerlink" title=" ES6-11"></a><div align="center"> ES6-11</h1><p>什么是ECMA</p><ul><li>ECMA 欧洲计算机制造商协会</li></ul><p>什么是ECMAScript</p><ul><li>是ECMA国际通过ECMA-262标准化的脚本程序设计语言</li></ul><p>什么是ECMA-262</p><ul><li>它定制的一种标准</li></ul><p>历史</p><ul><li>每年都会更新一个版本 截至写稿已经是第十二版 即es12</li></ul><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>和var类似 又有点不同</p><ul><li><p>声明变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">521</span>,g = <span class="string">&#x27;dasda&#x27;</span>,h = [];</span><br><span class="line"><span class="comment">//可以一次声明多个</span></span><br></pre></td></tr></table></figure></li><li><p>变量不能重复声明，但var可以。作用 防止变量被污染  </p></li><li><p>块级作用域 es5 全局 函数 eval</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;casc&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="comment">//这里会出错，但var可以，因为let只能在这个块级作用域里面生效</span></span><br></pre></td></tr></table></figure></li><li><p>不存在变量提升   </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(song);</span><br><span class="line"><span class="keyword">var</span> song = <span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line"><span class="comment">//此时输出undefined 因为var声明的变量会提前赋一个undefined</span></span><br><span class="line"><span class="comment">//但let不行</span></span><br></pre></td></tr></table></figure></li><li><p>不影响作用域链</p></li></ul><p>案例</p><ul><li><p>遍历绑定事件 假设数组长度为3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;items.length;i++)&#123;</span><br><span class="line">items[i].style.background = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果使用var修改 因为var没有块级作用域 它会一直执行下去，轮到里面的时候，i已经变成了3 而数组没有三的内容。</p></li><li><p>而let由于有块级作用域，里面的内容独立存在，所以不会有全局影响</p></li></ul><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>简介</p><ul><li>定义常量</li></ul><p>内容</p><ul><li><p>一定要赋初始值</p></li><li><p>常量的值不能被修改</p></li><li><p>块级作用域</p></li><li><p>对于数组和元素的修改不算作对常量的修改 不会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> team = [<span class="string">&#x27;scasc&#x27;</span>,<span class="string">&#x27;casca&#x27;</span>];</span><br><span class="line">team.push(<span class="string">&#x27;ascasc&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><p>简介</p><ul><li>es6允许用户按照一定模式从数组和对象中提取值</li></ul><p>两种模式</p><ul><li><p>数组的解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shuzu = [<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;cssca&#x27;</span>,<span class="string">&#x27;casc&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [a,b,c] = shuzu;</span><br></pre></td></tr></table></figure></li><li><p>对象的解构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const obj = &#123;</span><br><span class="line">name:&#x27;zzl&#x27;,</span><br><span class="line">age:&#x27;20&#x27;,</span><br><span class="line">function()&#123;</span><br><span class="line">console.log(&quot;scasca&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">let &#123;name,age,f&#125; = obj;</span><br></pre></td></tr></table></figure></li></ul><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>简介</p><ul><li>引入新的声明字符方式 反引号`</li></ul><p>声明</p><ul><li><p>一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`dadadada`</span>;</span><br></pre></td></tr></table></figure></li><li><p>内容中可以直接出现换行符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;aaaa&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span></span><br></pre></td></tr></table></figure></li><li><p>变量拼接 ${}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="string">`<span class="subst">$&#123;a&#125;</span>被引用了`</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="简化对象"><a href="#简化对象" class="headerlink" title="简化对象"></a>简化对象</h2><p>简介</p><ul><li><p>es6允许在大括号里面直接写入变量和函数作为对象的属性和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;zzl&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> change = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;asca&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line"><span class="comment">//以前写法</span></span><br><span class="line"><span class="comment">//name:name;</span></span><br><span class="line"><span class="comment">//change:change;</span></span><br><span class="line"><span class="comment">//improve:function()&#123;</span></span><br><span class="line"><span class="comment">//do sth.</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//现在写法</span></span><br><span class="line">name,</span><br><span class="line">change,</span><br><span class="line"><span class="function"><span class="title">improve</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">cosole.log(<span class="string">&#x27;new method&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>简介</p><ul><li><p>允许使用箭头来定义函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//before </span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//do sth.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//now</span></span><br><span class="line"><span class="keyword">let</span> fn ()=&gt;&#123;</span><br><span class="line"><span class="comment">//do sth.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>区别</p><ol><li><p>this指向的是静态资源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getName1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> getName2 = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置window对象的name属性</span></span><br><span class="line"><span class="built_in">window</span>.name = <span class="string">&#x27;lalalla&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> schoolName = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;babababab&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接调用 此时输出一致</span></span><br><span class="line">getName1();</span><br><span class="line">getName2();</span><br><span class="line"></span><br><span class="line"><span class="comment">//call方法调用 此时 一输出babababab 二还是lalalal </span></span><br><span class="line">getName1.call(schoolName);</span><br><span class="line">getName2.call(schoolName);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>不能作为构造实例化对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = <span class="function">(<span class="params">name,age</span>) =&gt;</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>不能使用arguments变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function">() =&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure></li><li><p>箭头函数的简写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当形参只有一个的时候可以省略小括号</span></span><br><span class="line"><span class="keyword">let</span> add = <span class="function"><span class="params">n</span> =&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> n + n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">9</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//省略花括号 当代码体只有一条语句的时候 此时return必须省略</span></span><br><span class="line"><span class="comment">//而且语句的执行结果就是函数的返回值</span></span><br><span class="line"><span class="keyword">let</span> pow = <span class="function"><span class="params">n</span> =&gt;</span> n * n;</span><br><span class="line"><span class="built_in">console</span>.log(pow(<span class="number">2</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>实例</p><ul><li><p>需求1 点击div 2s之后变成粉色</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">case1 wrong</span><br><span class="line">&lt;div id = <span class="string">&quot;ad&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="keyword">let</span> ad = doucument.getElementById(<span class="string">&#x27;ad&#x27;</span>);</span><br><span class="line">ad.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.style.background = <span class="string">&#x27;pink&#x27;</span>;<span class="comment">//此时由于定时器的this指向window 所以不会变色</span></span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">case2 success</span><br><span class="line">&lt;div id = <span class="string">&quot;ad&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="keyword">let</span> ad = doucument.getElementById(<span class="string">&#x27;ad&#x27;</span>);</span><br><span class="line">ad.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> that = <span class="built_in">this</span>;<span class="comment">//提前存储this</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.style.background = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">case3 success</span><br><span class="line">&lt;div id = <span class="string">&quot;ad&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="keyword">let</span> ad = doucument.getElementById(<span class="string">&#x27;ad&#x27;</span>);</span><br><span class="line">ad.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.style.background = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line"><span class="comment">//使用箭头函数 会找到外面一级的对象</span></span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>需求二 从数组中返回偶数元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">33</span>,<span class="number">4342</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> result = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> item%<span class="number">2</span> ===<span class="number">0</span> );</span><br></pre></td></tr></table></figure></li></ul><p>总结</p><ul><li><p>箭头函数适合与this无关的回调，定时器，数组的方式回调</p></li><li><p>不适合与this有关的回调，比如事件回调，对象的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">getName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name);<span class="comment">//可以返回abc</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">getName:<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name);<span class="comment">//不可以返回abc，因为此时this指向了window</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h2><p>ES6允许给函数形参赋初始值</p><ul><li> 形参初始值具有默认值的参数 一般位置要靠后 （潜规则）</li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b,c=<span class="number">10</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>));<span class="comment">//此时如果不给c传值 那么c默认是10 </span></span><br><span class="line"></span><br><span class="line">结果：<span class="number">13</span></span><br></pre></td></tr></table></figure><ul><li><p>与解构赋值结合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">connect(&#123;</span><br><span class="line"><span class="attr">host</span>:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line"><span class="attr">port</span>:<span class="number">3000</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params">&#123;host=<span class="string">&#x27;127.0.0.1&quot;,port&#125;)&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="params"><span class="function">console.log(host);</span></span></span></span><br><span class="line"><span class="string"><span class="params"><span class="function">console.log(port);</span></span></span></span><br><span class="line"><span class="string"><span class="params"><span class="function">&#125;</span></span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h2><p>介绍</p><ul><li>ES6引入rest参数，用于获取函数的实参，用来代替arguments</li></ul><p>获取实参的方式</p><ul><li><p>arguments 此时获取的是一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getShican</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">getShican(<span class="string">&#x27;leb&#x27;</span>,<span class="string">&#x27;zzl&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>rest 参数  三个点加args 此时获取的args是数组 意味着可以用数组的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getS</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;</span><br><span class="line">getS(<span class="string">&#x27;leb&#x27;</span>,<span class="string">&#x27;zzl&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>rest参数必须放到最后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getS</span>(<span class="params">a,b,...args</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;</span><br><span class="line">getS(<span class="string">&#x27;leb&#x27;</span>,<span class="string">&#x27;zzl&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">a=leb</span><br><span class="line">b=zzl</span><br><span class="line">args=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure></li></ul><h2 id="spread拓展运算符"><a href="#spread拓展运算符" class="headerlink" title="spread拓展运算符"></a>spread拓展运算符</h2><p>简介</p><ul><li>… 拓展运算符可以将数组转换为逗号分隔的参数序列</li></ul><p>例子</p><ul><li><p>声明一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jojo = [<span class="string">&#x27;jotailang&#x27;</span>,<span class="string">&#x27;jolunuo&#x27;</span>,<span class="string">&#x27;jolin&#x27;</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getS</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">gets(...jojo);</span><br><span class="line"></span><br><span class="line">此时<span class="built_in">arguments</span>里面有三个参数：<span class="string">&#x27;jotailang&#x27;</span>,<span class="string">&#x27;jolunuo&#x27;</span>,<span class="string">&#x27;jolin&#x27;</span></span><br><span class="line">否则就是一个参数</span><br></pre></td></tr></table></figure></li></ul><p>和rest区别</p><ul><li>rest的声明放在函数声明的形参中，这个是放在函数调用的形参中</li></ul><p>拓展运算符的运用</p><ul><li> 数组的合并</li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jojo = [<span class="string">&#x27;jolin&#x27;</span>,<span class="string">&#x27;jostar&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> kingdomrank = [<span class="string">&#x27;boji&#x27;</span>,<span class="string">&#x27;kake&#x27;</span>];</span><br><span class="line"><span class="comment">//const theworld = jojo.contat(kingdomrank);</span></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="comment">//注意使用逗号分割</span></span><br><span class="line"><span class="keyword">const</span> theworld = [...jojo,...kingdomrank];</span><br></pre></td></tr></table></figure><ul><li><p>数组的克隆</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jojo = [<span class="string">&#x27;saigouda&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> clonejojo = [...jojo];</span><br></pre></td></tr></table></figure></li><li><p>将伪数组转化为真正的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> divarr = [...divs];</span><br></pre></td></tr></table></figure></li></ul><h2 id="Symbol基本使用"><a href="#Symbol基本使用" class="headerlink" title="Symbol基本使用"></a>Symbol基本使用</h2><p>简介</p><ul><li>ES6引入一种新的原始数据类型Symbol，表示独一无二的值，它是js语言中的第七种数据类型，是一种类似字符串的数据类型。</li></ul><p>特点</p><ul><li>它的值是唯一的，用来解决命名冲突的问题</li><li>不能和其他数据进行运算</li><li>它定义的对象属性不能使用for…in进行遍历，但是可以使用Reflect.ownkeys来获取对象的所有键名</li></ul><p>创建</p><ul><li><p>创建Symbol</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let s = Symbol();</span><br><span class="line"></span><br><span class="line">let s2 = Symbol(&#x27;jojo&#x27;);</span><br><span class="line">let s3 = Symbol(&#x27;jojo&#x27;);</span><br><span class="line">console.log(s2 === s3);</span><br><span class="line">//false</span><br><span class="line"></span><br><span class="line">//another way</span><br><span class="line">let s4 = Symbol.for(&#x27;jojo&#x27;);</span><br><span class="line">let s5 = Symbol.for(&#x27;jojo&#x27;);</span><br><span class="line">console.log(s4===s5);</span><br><span class="line">//true</span><br></pre></td></tr></table></figure></li><li><p>不能与其他数据进行运算</p></li></ul><p>案例</p><ul><li>  向对象中添加方法up down</li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> game = &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> methods = &#123;</span><br><span class="line"><span class="attr">up</span>:<span class="built_in">Symbol</span>(),</span><br><span class="line"><span class="attr">down</span>:<span class="built_in">Symbol</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">game[methods.up] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;i can up&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">game[methods.down] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;i can down&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当想往对象中添加方法的时候，一般要了解对象中的参数，而且存在风险，用这种方式声明的方法，没有风险，可以不用看对象的内容就可以添加</li></ul><h2 id="JS的七种数据类型"><a href="#JS的七种数据类型" class="headerlink" title="JS的七种数据类型"></a>JS的七种数据类型</h2><ul><li>USONB u are so niubility</li><li>u undefined</li><li>s string symbol</li><li>o object</li><li>n null number</li><li>b boolean</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2021/12/06/Vue/"/>
      <url>/2021/12/06/Vue/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue2-Vue3"><a href="#Vue2-Vue3" class="headerlink" title="Vue2+Vue3"></a><div align="center">Vue2+Vue3</h1><p>简介</p><ul><li>一套用户构建用户界面的渐进式JavaScript框架</li></ul><p>渐进式</p><ul><li>vue可以自上而下的逐层进行应用，一个简单的应用只需要一个核心库即可，复杂的应用需要引入各式各样的Vue插件，所谓渐进式就是它能从这样简单的应用变成复杂的应用</li></ul><p>大哥</p><ul><li>🐂 <img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/3f0c7c610b78f81c421629d4c8e815c.png" alt="大哥"></li></ul><p>特点</p><ol><li><p>采用组件化模式，提高代码复用率，让代码更好维护  如：组件为xxx.vue 里面包含了html，css以及js 当需要使用到的时候直接引入。维护：改变不会影响别的组件</p></li><li><p>声明式编码，让编码人员无需直接操作DOM，提高开发效率<img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211206214621.png"></p></li><li><p>使用虚拟DOM＋优秀的Diff算法，尽量复用DOM节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">常规的js如果有新的数据它会继续使用，没有过滤，如果要维护数据量大的对象之类的，每次都会重新渲染到dom</span><br><span class="line">而vue采用了虚拟dom，当数据发生改变的时候，使用diff算法，对上一次采用的dom进行数据对比，如果一样，则只渲染新的数据</span><br></pre></td></tr></table></figure></li><li><p>学习vue之前要掌握的js基础知识</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">es6语法规范</span><br><span class="line">es6模块化</span><br><span class="line">包管理器 会一个 npm or cnpm</span><br><span class="line">原型 原型链</span><br><span class="line">数组常用方法</span><br><span class="line">axios</span><br><span class="line">promise</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次秋招面试杂谈</title>
      <link href="/2021/12/03/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E6%94%B6%E8%8E%B7/"/>
      <url>/2021/12/03/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%A7%8B%E6%8B%9B%E9%9D%A2%E8%AF%95%E6%94%B6%E8%8E%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="2021年末校招"><a href="#2021年末校招" class="headerlink" title=" 2021年末校招"></a><div align="center"> 2021年末校招</h1><p>&#160; &#160; &#160; &#160;今天参加了学校最新一轮的大型面试会，作为大三的学生写一点面试的收获。</p><h2 id="找面试"><a href="#找面试" class="headerlink" title="找面试"></a>找面试</h2><p>&#160; &#160; &#160; &#160;首先进去的第一方面就是逛完所有的校招摊位，找到适合自己的岗位面试。我个人是往前端开发方面走的，所以找的都是这个方面的内容。但基本上走了一圈，发现对技术栈有要求的面试摊位并不多，大多数是挂羊头卖狗肉，有的hr甚至对于这个方面的内容不熟悉，比较像是收打杂的。另外比较标准的就是一个hr和一个技术人员，技术人员专门负责问技术方面的问题，hr根据结果进行分析筛选是否通过第一次面试。</p><h2 id="问问题"><a href="#问问题" class="headerlink" title="问问题"></a>问问题</h2><p>&#160; &#160; &#160; &#160;今天一共找了三个摊位，对其中两个对技术栈有要求的摊位进行询问。大概问了这几个方面的问题，一是对技术栈的知识会有什么具体的提问，二是对于简历上的内容，会比较看重哪个点，三是根据我自身情况，询问面试官的建议。</p><h3 id="技术栈知识"><a href="#技术栈知识" class="headerlink" title="技术栈知识"></a>技术栈知识</h3><p>&#160; &#160; &#160; &#160;总结一下就是基础知识要牢固，但不限于需求上面的知识，有拓展更好，比如了解过后端spring全家桶方面的知识，或者运维上面的内容。另外就是针对技术栈知识会有些基础性的提问，比如js，vue等框架内容的提问。面试之后正常还有一轮笔试，但可能要求没有太高，不会考数据结构之类的问题，这个根据公司自身情况而定。</p><h3 id="简历内容"><a href="#简历内容" class="headerlink" title="简历内容"></a>简历内容</h3><p>&#160; &#160; &#160; &#160;首先问了对于一份简历，hr会侧重于看什么。得到的答案就是基础知识牢固的情况下，个人的项目经历很重要，比如个人博客，各种管理系统之类的，虽然看起来是烂大街的，但要在烂大街的东西中找到自己有用的。面试官说个人项目最好写上去是根据xxx技术开发，然后自身要了解做这个项目会遇到的问题，要有自己的总结和提炼，以及对于这个项目是否有自己创新的地方，好比根据xx技术做xx项目，然后自己换yy技术做xx项目，简而言之就是学以致用。</p><h3 id="自身方面"><a href="#自身方面" class="headerlink" title="自身方面"></a>自身方面</h3><p>&#160; &#160; &#160; &#160;最后是问了自身方面的一些内容，因为自己的学习进度还没到框架，但现在不管是哪个it前端都至少必备一门框架技术，所以vue/react的学习也要提上日程,以及八股文，计网，数据结构，操作系统等等。除此之外还有比赛方面，因为学校开设的前端比赛是真的少之又少，曾经参加过一个后面又被主办方鸽了，现在准备参加蓝桥杯的web比赛，问道hr如果简历上面只有一项比赛经历是否应该写的时候，他建议是先把自己优势的方面写在前面，如果简历的篇幅不够，就可以继续写在后面当作一项内容。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&#160; &#160; &#160; &#160;上面写的只是个人看法，也不能一概而谈。本次秋招也没有问关于五险一金，工作制度之类的问题，主要的还是了解了一下面试流程。个人感觉基础的东西还是需要去复习与巩固，打好基础才能拓展更多的新知识。虽然学习是反人类的过程，但为了有更好的前景，只能变得更卷。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript(未完结)</title>
      <link href="/2021/11/30/JavaScript/"/>
      <url>/2021/11/30/JavaScript/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title=" JavaScript"></a><div align="center"> JavaScript</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>一种高级编程语言</li><li>JavaScript的运用</li></ul><ol><li>表单动态校验</li><li>网页特效</li><li>服务端开发 node.js</li><li>Electron</li><li>App Cordova</li><li>控制硬件 物联网Ruff</li><li>游戏开发 cocos2d.js</li></ol><h2 id="浏览器执行js的过程"><a href="#浏览器执行js的过程" class="headerlink" title="浏览器执行js的过程"></a>浏览器执行js的过程</h2><ul><li>浏览器分为渲染引擎和js引擎</li><li>其中渲染引擎负责HTML和CSS解析，JS引擎负责解析js代码（逐行解析）</li></ul><h2 id="ECMA-script"><a href="#ECMA-script" class="headerlink" title="ECMA script"></a>ECMA script</h2><h3 id="js的书写位置"><a href="#js的书写位置" class="headerlink" title="js的书写位置"></a>js的书写位置</h3><ol><li>行内式</li></ol><ul><li>编写在行内的js代码 可读性差 在特殊情况下使用</li><li>规定HTML中使用双引号，js中使用单引号</li></ul><ol start="2"><li>内嵌式</li></ol><ul><li>script标签中使用，可以写入多行代码，学习常用</li></ul><ol start="3"><li>外部js</li></ol><ul><li>引入方式<script src = "js name"></script>&gt;</li><li>标签中不能再写其他信息</li></ul><h3 id="js输入输出语句"><a href="#js输入输出语句" class="headerlink" title="js输入输出语句"></a>js输入输出语句</h3><ol><li>alert(msg) 浏览器弹出提示框</li><li>console.log(msg) 浏览器控制台打印输入信息</li><li>prompt(info) 浏览器弹出输入框，用户可以输入</li></ol><h3 id="js变量"><a href="#js变量" class="headerlink" title="js变量"></a>js变量</h3><ul><li><p>总类型 var 其数据类型是在运行过程中由等号右边的值来确定的</p></li><li><p>声明变量的特殊情况：</p><ol><li><p>只声明不赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sex;</span><br><span class="line"><span class="built_in">console</span>.log(sex);<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></li><li><p>不声明不赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(xxx);<span class="comment">//error</span></span><br></pre></td></tr></table></figure></li><li><p>不声明只赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age);<span class="comment">//10</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="js数据类型"><a href="#js数据类型" class="headerlink" title="js数据类型"></a>js数据类型</h3><ul><li><p>简单数据类型 Number, String, Boolean, Undefined, Null</p></li><li><p>复杂数据类型 Object</p><ul><li>Number:</li></ul><ol><li><p>可以直接输入进制数字 eg 八进制012</p></li><li><p>可以打印数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">最大值<span class="built_in">Number</span>.MAX_VALUE</span><br><span class="line">最小值<span class="built_in">Number</span>.MIN_VALUE</span><br><span class="line">无穷大<span class="built_in">Number</span>.MAX_VALUE*<span class="number">2</span></span><br><span class="line">无穷小-<span class="built_in">Number</span>.MIN_VALUE</span><br><span class="line">不是数字<span class="literal">NaN</span> <span class="string">&#x27;sda&#x27;</span>-<span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p>方法IsNaN() 判断是否为数字，若不是返回false</p></li></ol><ul><li>String：</li></ul><ol><li><p>字符串引号嵌套 单引号嵌套双引号 双引号嵌套单引号</p></li><li><p>字符串转义符\ eg\b 空格</p></li><li><p>字符串长度 str.length</p></li><li><p>字符串拼接 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;str1&#x27;</span>+<span class="string">&#x27;str2&#x27;</span> = str1str2</span><br><span class="line"><span class="string">&#x27;pink&#x27;</span>+<span class="number">18</span> = pink18</span><br><span class="line"><span class="string">&#x27;pink&#x27;</span>+<span class="literal">true</span> = pinktrue</span><br><span class="line"> <span class="number">12</span>+<span class="number">12</span> = <span class="number">24</span></span><br><span class="line"><span class="string">&#x27;12&#x27;</span>+<span class="number">12</span> = <span class="number">1212</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><ul><li>Boolean, Undefined, Null</li></ul><ol><li><p>true参与加法运算视为1 false视为0</p></li><li><p>如果一个变量声明未赋值 则视为Undefined未定义数据类型 注意 undefined + 1 视为NaN</p></li><li><p>null + 1 = 1</p></li><li><p>typeof返回数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num)<span class="comment">//number</span></span><br><span class="line"><span class="comment">/*注意 与null使用 返回object</span></span><br><span class="line"><span class="comment">作用：与prompt结合使用 获取输入的数据类型*/</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><p>数据类型转换</p><ol><li><p>转换为字符型 toString()或者字符串拼接 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> + <span class="string">&#x27;&#x27;</span><span class="comment">//5</span></span><br></pre></td></tr></table></figure></li><li><p>转化为数字型 parseInt parseFloat 或者 利用 Number() 或者算术运算符 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;12&#x27;</span> - <span class="number">0</span><span class="comment">//12</span></span><br></pre></td></tr></table></figure></li><li><p>转化为布尔型 Boolean() 代表空 否定的值将被转化为false </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span> , <span class="string">&quot;&quot;</span> , <span class="number">0</span> ,<span class="literal">NaN</span> ,<span class="literal">null</span> , <span class="literal">undefined</span> </span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="js运算符-略"><a href="#js运算符-略" class="headerlink" title="js运算符 略"></a>js运算符 略</h3><h3 id="arguments使用"><a href="#arguments使用" class="headerlink" title="arguments使用"></a>arguments使用</h3><ul><li>利用其可以按索引顺序传递实参</li></ul><h3 id="函数声明的两种方式"><a href="#函数声明的两种方式" class="headerlink" title="函数声明的两种方式"></a>函数声明的两种方式</h3><ol><li><p>利用函数关键字自定义函数(命名函数)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure></li><li><p>函数表达式 l</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br></pre></td></tr></table></figure></li></ol><h3 id="js作用域"><a href="#js作用域" class="headerlink" title="js作用域"></a>js作用域</h3><ol><li><p>全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在全局作用域下声明的变量叫做全局变量</span><br><span class="line">特殊情况下 函数内不使用<span class="keyword">var</span>声明的变量也是全局变量</span><br></pre></td></tr></table></figure></li><li><p>局部变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">局部变量只能在函数内部使用</span><br><span class="line">在函数内部<span class="keyword">var</span>声明的变量是局部变量</span><br><span class="line">函数的形参实际上是局部变量</span><br></pre></td></tr></table></figure></li><li><p>区别</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">全局变量在任何情况下都可以使用 but只有在浏览器关闭才销毁 比较占用内存</span><br><span class="line">局部变量只在函数内部使用 当程序执行完就销毁 节省内存空间</span><br></pre></td></tr></table></figure></li><li><p>作用域链 ==就近原则==</p></li></ol><h3 id="js预解析"><a href="#js预解析" class="headerlink" title="js预解析"></a>js预解析</h3><ul><li>js引擎运行js分为两步 预解析 代码执行<ol><li>预解析 js引擎会把js里面所有的var和function提升到当前作用域的最前面</li><li>代码执行 按照代码书写的顺序由上往下执行 </li></ol></li><li>预解析分为变量预解析(变量提升)和函数预解析(函数提升)<ol><li>变量提升就是把所有变量声明提升到当前作用域最前面 不提升赋值操作</li><li>函数提升就是把所有函数声明提升到当前作用域的最前面 不调用函数</li></ol></li></ul><h3 id="js对象"><a href="#js对象" class="headerlink" title="js对象"></a>js对象</h3><ul><li><p>对象简介 略</p></li><li><p>创建对象的三种方式</p><ol><li><p>利用字面量创建一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;; 此处创建了一个空对象</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>:<span class="string">&#x27;arer&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="string">&#x27;female&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHi</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(‘hi~’);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a 内部的属性名采用键对值的方式 键 属性名:值 属性值</span><br><span class="line">b 多个属性或者方法中间用逗号隔开</span><br><span class="line">c 方法冒号后面跟一个匿名函数</span><br></pre></td></tr></table></figure></li><li><p>利用构造函数创建对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname,age,sex</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = uname;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    <span class="built_in">this</span>.方法 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">&#x27;ldh&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;man&#x27;</span>);</span><br><span class="line">注意 构造函数名字的首字母要大写 调用函数返回的是一个对象</span><br><span class="line">构造对象 抽取了对象的公共部分 封装到函数里 泛指某一大类<span class="class"><span class="keyword">class</span> 好比汽车设计图 </span></span><br><span class="line"><span class="class">创建对象 特指某一个 通过<span class="title">new</span>关键字创建对象的过程称之为对象实例化 好比汽车本身 </span></span><br></pre></td></tr></table></figure></li><li><p>利用new Object 创建对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="function"><span class="title">Obeject</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">obj.uname = <span class="string">&#x27;arer&#x27;</span>;</span><br><span class="line">obj.age = <span class="number">20</span>;</span><br><span class="line">obj.sex = <span class="string">&#x27;man&#x27;</span>;</span><br><span class="line">obj.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hi~&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">a 利用等号 = 赋值的方法 添加对象的属性和方法</span><br><span class="line">b 每个属性和方法之间用分号结束</span><br></pre></td></tr></table></figure></li></ol></li><li><p>使用对象</p><ol><li>调用对象的属性 对象名.属性名</li><li>or 对象名[‘属性名’]</li><li>调用对象的方法 对象名.方法名()</li></ol></li><li><p>变量 属性 函数 方法的区别</p><ul><li><p>变量和属性都是用来存储数据的 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">变量单独声明并赋值 使用的时候直接写变量名;</span><br><span class="line">属性在对象里面不用声明 使用时必须是对象.属性</span><br></pre></td></tr></table></figure></li><li><p>函数和方法都是用来实现某种功能 做某件事</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数单独声明并且调用的函数名() 单独存在;</span><br><span class="line">方法是在对象里面调用的时候 对象.方法()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>遍历对象的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(变量 <span class="keyword">in</span> 对象)&#123;</span><br><span class="line">    <span class="comment">//假设此处变量为k 对象为obj</span></span><br><span class="line">    <span class="built_in">console</span>.log(k);</span><br><span class="line">    <span class="built_in">console</span>.lo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="js内置对象"><a href="#js内置对象" class="headerlink" title="js内置对象"></a>js内置对象</h3><ul><li><p>内置对象简介：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">js中的对象分为三种 自定义对象 内置对象 浏览器对象</span><br><span class="line">前两者是js基础内容 属于ECMAscript 第三个浏览器对象是js独有的，在js API中讲解</span><br><span class="line">内置对象是是js自带的一些对象用于实现一些常用的或者最基本的功能和方法</span><br><span class="line">最大的优点是帮助快速开发</span><br><span class="line">eg </span><br><span class="line"><span class="built_in">Math</span>,<span class="built_in">Date</span>,<span class="built_in">Array</span>,<span class="built_in">String</span> etc</span><br></pre></td></tr></table></figure></li><li><p>Math 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">直接调用 不需要<span class="keyword">new</span></span><br><span class="line">常用方法</span><br><span class="line"><span class="built_in">Math</span>.PI <span class="comment">//圆周率</span></span><br><span class="line"><span class="built_in">Math</span>.floor() <span class="comment">//向下取整</span></span><br><span class="line"><span class="built_in">Math</span>.cell() <span class="comment">//向上取整</span></span><br><span class="line"><span class="built_in">Math</span>.round() <span class="comment">//四舍五入 就近取整 attention -3.5结果是3</span></span><br><span class="line"><span class="built_in">Math</span>.abs() <span class="comment">//绝对值</span></span><br><span class="line"><span class="built_in">Math</span>.max()/<span class="built_in">Math</span>.min() <span class="comment">//求最大值 最小值</span></span><br></pre></td></tr></table></figure></li><li><p>Date 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取当前时间必须实例化</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(now);</span><br><span class="line"><span class="comment">//常用方法</span></span><br><span class="line">getFullyear()</span><br><span class="line">getMonth() <span class="comment">//0-11</span></span><br><span class="line">getDate()</span><br><span class="line">getDay() <span class="comment">//0-6</span></span><br><span class="line">getHours()</span><br><span class="line">getMinutes()</span><br><span class="line">getSeconds()</span><br><span class="line">拓展： 格式化日期时分秒 见“格式化日期时分秒.html”</span><br></pre></td></tr></table></figure></li><li><p>Array 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">i 创建数组的两种方式</span><br><span class="line">利用数组字面量 eg <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">利用<span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line">eg1 <span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>) 表示数组长度为<span class="number">2</span> 里面有两个空元素</span><br><span class="line">eg2 <span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>,<span class="number">3</span>) 等价于[<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">ii 利用<span class="keyword">instanceof</span> <span class="built_in">Array</span> 来检测是否为数组 eg <span class="keyword">var</span> arr = []; <span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>);</span><br><span class="line">利用 <span class="built_in">Array</span>.isArray(arr); H5新增的方法 ie9以上才支持</span><br><span class="line"></span><br><span class="line">iii 添加/删除元素方法 方法加.即可使用</span><br><span class="line">push() 在数组末尾添加一个元素 返回新的长度</span><br><span class="line">unshift() 在数组开头添加一个或多个元素 返回新的长度</span><br><span class="line">pop() 删除数组最后一个元素 返回它删除元素的值</span><br><span class="line">shift() 删除数组的第一个元素 返回第一个元素的值</span><br><span class="line"></span><br><span class="line">iv 数组排序</span><br><span class="line">reverse() 翻转数组</span><br><span class="line">sort() 排序</span><br><span class="line"></span><br><span class="line">v 数组索引</span><br><span class="line">indexOf(数组元素) 数组中查找给定元素的第一个索引 找不到则返回-<span class="number">1</span></span><br><span class="line">lastIndexOf(数组元素) 从后面开始找数组元素</span><br><span class="line">作用：数组去重 遍历旧数组，拿旧数组的元素去查询新数组，如果该元素没有在新数组出现则添加</span><br><span class="line">利用indexOf() 如果返回-<span class="number">1</span>说明新数组没有存在该元素</span><br><span class="line"></span><br><span class="line">vi 数组转化为字符串</span><br><span class="line">toString() 结果用逗号分隔</span><br><span class="line">join(<span class="string">&#x27;分隔符&#x27;</span>) 结果用输入的分隔符分隔，不输入默认逗号</span><br></pre></td></tr></table></figure></li><li><p>String 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i 简单数据类型为什么能用length？ 因为<span class="keyword">new</span>将他封装成复杂数据类型</span><br><span class="line">ii 字符串的不可变性？ 改变字符串实际上是地址指向的改变 每次改变都要开辟新空间 浪费资源</span><br><span class="line">iii 未完待续</span><br></pre></td></tr></table></figure></li></ul><h3 id="js简单类型和复杂类型"><a href="#js简单类型和复杂类型" class="headerlink" title="js简单类型和复杂类型"></a>js简单类型和复杂类型</h3><ul><li><p>值类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">简单数据类型/基本数据类型 在存储时变量中存储的是值本身 因此叫值类型</span><br></pre></td></tr></table></figure></li><li><p>引用类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">复杂数据类型，在存储时变量中存储的仅仅是地址，因此叫做引用数据类型，通过<span class="keyword">new</span>关键字创建的对象 比如<span class="built_in">Object</span> <span class="built_in">Array</span> <span class="built_in">Date</span> etc</span><br></pre></td></tr></table></figure></li></ul><h2 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h2><ul><li>API是一些预先定义的函数 目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码或者理解内部工作机制的细节</li><li>简单来说 API是给程序员提供的一组工具 以便能够轻松实现想要完成的功能 </li><li>Web API 是浏览器提供的一套操作浏览器功能和页面元素的API(BOM和DOM)</li></ul><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><ul><li>Document Object Model 简称DOM 文档对象模型</li><li>处理HTML的标准接口</li></ul><h3 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h3><ul><li><p>一个页面就是一个文档 用document表示<img src="image-20210324154900183.png" alt="image-20210324154900183"></p></li><li><p>元素 页面的标签都是元素 用element表示</p></li><li><p>节点 页面的所有内容都是节点 用node表示</p></li></ul><h3 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h3><ul><li><p>id</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(id);</span><br></pre></td></tr></table></figure></li><li><p>标签名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;tag&#x27;</span>); </span><br></pre></td></tr></table></figure></li><li><p>class</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;classname&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>选择器 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line">返回指定选择器的第一个对象</span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line">返回指定选择器的所有对象</span><br></pre></td></tr></table></figure></li><li><p>body</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body;</span><br></pre></td></tr></table></figure></li><li><p>html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement;</span><br></pre></td></tr></table></figure></li></ul><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><ul><li><p>事件三要素 事件源 事件类型 事件处理程序</p></li><li><p>事件源 事件被触发的对象 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>事件类型 如何触发 什么事件 比如onclick</p></li><li><p>事件处理程序 通过一个函数赋值的方式完成</p></li></ul><h3 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h3><ul><li><p>改变元素内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">element.innerText;</span><br><span class="line">不识别html标签</span><br><span class="line">从起始位置到终止位置的内容 但是它除去html</span><br><span class="line">element.innerHTML;</span><br><span class="line">识别html标签</span><br><span class="line">起始位置到终止位置的全部内容 包括html标签 同时保留空格和换行</span><br></pre></td></tr></table></figure></li><li><p>表单属性操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> iv = input.value;</span><br></pre></td></tr></table></figure></li><li><p>样式属性操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.style 行内样式操作</span><br><span class="line">element.className 类名样式操作</span><br></pre></td></tr></table></figure></li><li><p>H5自定义属性</p><ol><li><p>自定义属性目的：<br>为了保存并使用数据，有些数据可以保存到页面中而不用保存到数据库中</p></li><li><p>获取方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.getAttribute(<span class="string">&#x27;属性&#x27;</span>)；</span><br></pre></td></tr></table></figure><p>H5新增</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">element.dataset.index;</span><br><span class="line">element.dataset[<span class="string">&#x27;index&#x27;</span>];</span><br><span class="line">前提必须是data-xxx</span><br><span class="line">如果是data-list-name</span><br><span class="line">则获取为</span><br><span class="line">element.dataset.listName：/(驼峰命名法)</span><br></pre></td></tr></table></figure></li><li><p>命名方式:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-index</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>也可以通过js进行设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.setAttribute(<span class="string">&#x27;data-index&#x27;</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h3><ul><li><p>节点概述 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">一般地 节点至少拥有三个属性</span><br><span class="line">nodeType 节点类型</span><br><span class="line">nodeName 节点名称</span><br><span class="line">nodeValue 节点值</span><br><span class="line">* 元素节点 nodeType为<span class="number">1</span></span><br><span class="line">* 属性节点为<span class="number">2</span></span><br><span class="line">* 文本节点为<span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>节点层级 </p></li></ul><h2 id="事件高级"><a href="#事件高级" class="headerlink" title="事件高级"></a>事件高级</h2><h3 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传统方式注册事件</span></span><br><span class="line">btn[<span class="number">0</span>].click = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//事件侦听注册事件</span></span><br><span class="line"><span class="comment">//里面的事件类型是字符串，必定加引号，而且不用on</span></span><br><span class="line"><span class="comment">//同个事件可以添加多个事件侦听器</span></span><br><span class="line">btn[<span class="number">1</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="解绑事件"><a href="#解绑事件" class="headerlink" title="解绑事件"></a>解绑事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当点击之后不需要该事件了，则可以使用解绑</span></span><br><span class="line"><span class="comment">//传统方式</span></span><br><span class="line">btn[<span class="number">0</span>].click = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">    btn[<span class="number">0</span>].onclick = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//事件侦听删除</span></span><br><span class="line">btn[<span class="number">1</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>,fn);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">    btn[<span class="number">1</span>].removeEventListener(<span class="string">&#x27;click&#x27;</span>,fn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h3><p>简介</p><ul><li>事件流描述的是从页面中接受事件的顺序</li><li>事件发生时会在元素节点之间按照特定的顺序传播 这个传播过程叫做dom事件流 </li><li>分为三个阶段：1.捕获阶段 2.当前目标阶段 3.冒泡阶段</li></ul><p>注意</p><ul><li>js代码中只能执行捕获或者冒泡其中一个阶段</li><li>onclick和attachEvent（ie）只能得到冒泡阶段     </li><li>事件捕获由上往下，父盒子到子盒子 </li><li>事件冒泡则由下往上，子盒子到父盒子</li></ul><p>如何使用事件捕获/冒泡？</p><ul><li><p>事件捕获</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//addEventListener的第三个参数，true则是事件捕获，不写或者是false则是冒泡</span></span><br><span class="line">div[<span class="number">0</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>,fn,<span class="literal">true</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>有些事件是没有冒泡的 比如onblur onfocus onmouseenter onmouseleave</p></li></ul><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><p>简介</p><ul><li>事件对象就是事件的一系列相关数据的集合 跟事件相关 比如鼠标点击里面就包含了鼠标的相关信息 鼠标坐标等 如果是键盘事件就包含了当前键盘事件的信息 比如 判断用户按下了某个按键</li><li>在div.onclick = function(event){}中 event就是一个事件对象 写到我们监听函数的小括号里面 当形参来看</li></ul><p>注意</p><ul><li><p>事件对象只有有了事件才会存在，他是系统给我们自动创建的，不需要我们传递参数</p></li><li><p>可以自己命名 比如event ，evt，e</p></li><li><p>事件对象也有兼容性问题 比如ie678里面只能通过 window.event来写</p></li><li><p>写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e = e || <span class="built_in">window</span>.event</span><br><span class="line">当浏览器认识e的时候 直接赋值为e</span><br><span class="line">当浏览器不认识这个e的时候 e是<span class="literal">undefined</span> 就是<span class="literal">false</span> 然后执行后面的 </span><br></pre></td></tr></table></figure></li></ul><p>常见事件对象属性和方法</p><ul><li>e.target 返回当前触发的对象 this返回的是绑定事件的对象 （元素）</li></ul><p>返回事件类型</p><ul><li>e,type </li></ul><p>阻止默认行为 让链接不跳转 或者 按钮不提交</p><ul><li>e.preventDefault();  dom标准写法</li><li>低版本浏览器 使用e.returnValue </li><li>直接使用return false 也能阻止默认行为  但注意后面的代码不会执行了</li></ul><p>阻止冒泡 面试基本必考 两种方式</p><ul><li><p>e.stopPropagation()</p></li><li><p>兼容性 e.cancelBubble = true; </p></li><li><p>兼容性解决方案</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(e&amp;&amp;e.stopPropagation)&#123;</span><br><span class="line">e.stopPropagation();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意该方法只能阻止一级  所以后面的冒泡还要加方法</p></li></ul><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p>简介</p><ul><li>事件冒泡本身的特性 如果盒子比较多的时候 一个一个冒泡时间响应就会很久 使用事件委托能解决这个委托</li><li>事件委托也叫事件代理 jquery里面叫做事件委派</li></ul><p>原理</p><ul><li>不是每个子节点单独设置监听器，而是事件监听器设置在父节点上，然后利用冒泡原理影响设置每个子节点</li><li>eg 给ul注册点击事件 然后利用事件对象中的target来找到当前触发的对象li 因为点击li 事件冒泡触发到ul上 而ul又有注册事件 就会触发事件监听器</li></ul><p>作用</p><ul><li>只操作了一次DOM 提高了程序性能</li></ul><h3 id="常用的鼠标事件"><a href="#常用的鼠标事件" class="headerlink" title="常用的鼠标事件"></a>常用的鼠标事件</h3><p>禁止选中文字和禁止右键菜单</p><ul><li><p>禁止鼠标右键菜单 contextmenu 主要控制应该合适显示上下文菜单  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;contextmenu&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">e.preventDefault();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>禁止鼠标选中 selectstart</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;selectstart&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">e.preventDefault();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>鼠标事件对象</p><ul><li>MouseEvent<img src="C:\Users\Zlinni\AppData\Roaming\Typora\typora-user-images\image-20211205112133180.png" alt="image-20211205112133180"></li><li>KeyboardEvent<img src="C:\Users\Zlinni\AppData\Roaming\Typora\typora-user-images\image-20211205112254166.png" alt="image-20211205112254166"></li><li>注意 onkeydown和up不区分字母大小写 onkeypress区分大小写</li><li>键盘事件对象e.keyCode可以打印asii码</li></ul><p>案例 jd搜索</p><ul><li>检测用户是否按下s 如果按下s 就把光标定位到搜索框里面</li><li>使用keyCode判断按下的是不是s</li><li>搜索框获得焦点 使用js里面的focus()方法</li></ul><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p>简介</p><ul><li>浏览器对象模型 Browser Object Model 提供了独立于内容而与浏览器窗口进行交互的对象 核心是window</li><li>BOM由一系列相关的对象构成 并且每个对象都提供了很多方法和属性</li><li>但BOM缺乏标准 js语法标准化组织是ECMA DOM的标准化组织是W3C </li></ul><p>和DOM区别</p><ul><li>如下<img src="C:\Users\Zlinni\AppData\Roaming\Typora\typora-user-images\image-20211205113328066.png" alt="image-20211205113328066"></li></ul><p>BOM的构成</p><ul><li>window对象是浏览器的顶级对象 它具有双重角色</li><li>它是js访问浏览器窗口的一个接口</li><li>它是一个全局对象。定义在全局作用域中的变量，函数都会变成window对象的属性和方法</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb</title>
      <link href="/2021/11/30/JavaWeb/"/>
      <url>/2021/11/30/JavaWeb/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVAWEB"><a href="#JAVAWEB" class="headerlink" title=" JAVAWEB"></a><div align="center"> JAVAWEB</h1><h2 id="javaweb概述"><a href="#javaweb概述" class="headerlink" title="javaweb概述"></a>javaweb概述</h2><h3 id="HTTP概述"><a href="#HTTP概述" class="headerlink" title="HTTP概述"></a>HTTP概述</h3><ul><li>全称 HyperText Transfer Protocol 超文本传输协议</li><li>请求/响应式</li><li>特点</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">支持客户端eg浏览器</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>请求方式get post</p></li><li><p>http1.0 每次只能处理一个http请求 影响网页的访问速度</p></li><li><p>http1.1 处理多请求和响应</p></li><li><p>浏览器向服务器传送请求 = http请求消息</p></li><li><p>服务器将处理后的数据发回给客户端（浏览器） = http响应消息</p></li><li><p>统称http消息</p></li></ul><h3 id="HTTP请求消息"><a href="#HTTP请求消息" class="headerlink" title="HTTP请求消息"></a>HTTP请求消息</h3><ul><li><p>请求行位于请求消息的第一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /index.html HTTP/1.1</span><br><span class="line">get 是请求方式</span><br><span class="line">后面接的是资源路径</span><br><span class="line">最后跟的是请求协议版本</span><br></pre></td></tr></table></figure></li><li><p>http请求方式有八种</p></li><li><p>常见的 两种是==get==和==post==</p></li><li><p>get方式获得的参数直接在url地址后面 但传输的数据量有限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://www.itcast.cn/javaForum?name=youjun&amp;pwd=123</span><br><span class="line">网址后面跟问号 有多个信息则在信息间跟&amp;</span><br></pre></td></tr></table></figure></li><li><p>post方式传输的大小没有限制 且 更安全 实际开发用</p></li><li><p>请求头在请求行之后 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host: localhost:8080</span><br><span class="line">格式</span><br><span class="line">请求头字段 冒号 空格 内容</span><br></pre></td></tr></table></figure></li><li><p>常用的请求头字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Accept-Charset 字符集</span><br><span class="line">Accept-Encoding 编码方式</span><br><span class="line">Accept-Language 返回的语言</span><br><span class="line">User-Agent 浏览器版本等浏览器信息</span><br></pre></td></tr></table></figure></li></ul><h3 id="HTTP响应消息"><a href="#HTTP响应消息" class="headerlink" title="HTTP响应消息"></a>HTTP响应消息</h3><ul><li><p>包括 响应状态行 响应消息头 和 实体内容</p></li><li><p>响应状态行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">包括 </span><br><span class="line">http版本 状态吗 对状态码的描述信息</span><br></pre></td></tr></table></figure></li><li><p>状态码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1xx 表示请求已经接受 需要继续处理</span><br><span class="line">2xx 表示请求已成功被服务器接受，理解，并接受</span><br><span class="line">3xx 为了完成请求 客户端需要进一步细化请求</span><br><span class="line">4xx 客户端的请求有错误</span><br><span class="line">5xx 服务器端出现错误</span><br></pre></td></tr></table></figure></li><li><p>常见状态码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">200 表示服务器成功接受了客户端的请求</span><br><span class="line">302 表示请求的资源临时从不同的url响应请求</span><br><span class="line">304 表示客户端缓存的版本是最新的</span><br><span class="line">404 表示服务器找不到请求的资源</span><br><span class="line">500 表示服务器发生错误</span><br></pre></td></tr></table></figure></li><li><p>响应消息头略</p></li></ul><h3 id="Web应用的介绍和配置"><a href="#Web应用的介绍和配置" class="headerlink" title="Web应用的介绍和配置"></a>Web应用的介绍和配置</h3><ul><li><p>Tomcat路径下目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bin 放可执行文件和脚本文件</span><br><span class="line">conf 放webxml和serverxml</span><br><span class="line">lib 放jar</span><br><span class="line">webapps web应用程序主要发布目录</span><br></pre></td></tr></table></figure></li><li><p>为什么startup.bat一闪而过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">端口被占用</span><br><span class="line">没有配置好jdk环境</span><br></pre></td></tr></table></figure></li></ul><h2 id="Servlet基础"><a href="#Servlet基础" class="headerlink" title="Servlet基础"></a>Servlet基础</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>用java语言来编写动态资源的开发技术</li></ul><h3 id="servlet继承结构"><a href="#servlet继承结构" class="headerlink" title="servlet继承结构"></a>servlet继承结构</h3><p><img src="image-20210313152227462.png" alt="image-20210313152227462"></p><h4 id="sevlet接口"><a href="#sevlet接口" class="headerlink" title="sevlet接口"></a>sevlet接口</h4><ol><li>init() 初始化</li><li>service() 服务</li><li>destroy() 销毁</li><li>getServletConfig() 获取servletconfig对象，是容器向servlet传递参数的载体</li><li>getServletInfo() 获取servlet相关信息</li></ol><h4 id="servlet的生命周期"><a href="#servlet的生命周期" class="headerlink" title="servlet的生命周期"></a>servlet的生命周期</h4><ul><li>由Web容器（Tomcat）管理，经历三个阶段init→service→destroy</li></ul><h4 id="serializable接口"><a href="#serializable接口" class="headerlink" title="serializable接口"></a>serializable接口</h4><ul><li>Java.IO包中的可序列化接口，用于标识作用</li></ul><h4 id="servletConfig接口"><a href="#servletConfig接口" class="headerlink" title="servletConfig接口"></a>servletConfig接口</h4><ul><li>用于封装tomcat初始化servlet时的配置信息</li></ul><h4 id="GenericServlet实现类"><a href="#GenericServlet实现类" class="headerlink" title="GenericServlet实现类"></a>GenericServlet实现类</h4><ul><li>为抽象类</li><li>设计目的 与应用层协议解耦</li></ul><h4 id="HttpServlet类"><a href="#HttpServlet类" class="headerlink" title="HttpServlet类"></a>HttpServlet类</h4><ul><li>将service中的==servletrequest==和==servletresponse==转为==httpservletrequest==和==httpservletresponse==</li><li>实际开发直接继承该类并重写doxx（）方法 </li></ul><h4 id="HttpServletRequest对象"><a href="#HttpServletRequest对象" class="headerlink" title="HttpServletRequest对象"></a>HttpServletRequest对象</h4><ul><li>用于获取请求数组</li><li>通过对request</li><li>请求方式/url/协议版本</li></ul><h4 id="attention"><a href="#attention" class="headerlink" title="attention"></a>attention</h4><ul><li>get/post post在实体内容中返回 get的信息在链接uri后面生成</li><li>contain()方法匹配字符串</li><li>“hobit”.equals(key);</li></ul><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><ul><li><p>手机平板电脑等设备存储数据的格式不同，但它们之间可以用xml实现数据的交换</p></li><li><p>xml是Extensible Markup Language的缩写 是一种类似于html的标记语言 称为可拓展标记语言</p></li><li><p>xml是一种通用的数据交换格式</p></li><li><p>与html的区别</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line">html标记用来显示数据</span><br><span class="line">xml标记用来描述信息</span><br><span class="line"><span class="number">2.</span></span><br><span class="line">html不区分大小写</span><br><span class="line">xml严格区分</span><br><span class="line"><span class="number">3.</span></span><br><span class="line">html可以有很多根元素</span><br><span class="line">格式良好的xml只能有一个</span><br><span class="line"><span class="number">4.</span></span><br><span class="line">html中空格会自动过滤</span><br><span class="line">xml中空格不会自动删除</span><br><span class="line"><span class="number">5.</span></span><br><span class="line">html标记是预定义的</span><br><span class="line">xml是可随便定义的</span><br><span class="line"><span class="number">6.</span></span><br><span class="line">html中的属性可用可不用</span><br><span class="line">xml的属性必须放在引号里</span><br></pre></td></tr></table></figure></li></ul><h3 id="xml语法"><a href="#xml语法" class="headerlink" title="xml语法"></a>xml语法</h3><ul><li>在一个完整的xml文档中 必须包含一个xml文档声明<img src="image-20210328143759285.png" alt="image-20210328143759285"></li><li>命名规则<img src="image-20210328143929798.png" alt="image-20210328143929798"></li><li>注释的细节<img src="image-20210328144031516.png" alt="image-20210328144031516"></li></ul><h3 id="DTD约束"><a href="#DTD约束" class="headerlink" title="DTD约束"></a>DTD约束</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>早期出现的xml约束模式语言，根据其语法文件创建的是DTD文件</p><h4 id="DTD约束文档"><a href="#DTD约束文档" class="headerlink" title="DTD约束文档"></a>DTD约束文档</h4><ul><li>如下<img src="image-20210328153559582.png" alt="image-20210328153559582"></li></ul><h4 id="引入DTD"><a href="#引入DTD" class="headerlink" title="引入DTD"></a>引入DTD</h4><ul><li>如下<img src="image-20210328153739807.png" alt="image-20210328153739807"></li></ul><h4 id="DTD语法"><a href="#DTD语法" class="headerlink" title="DTD语法"></a>DTD语法</h4><ul><li><p>格式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ELEMENT 元素名称 &gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Schema约束"><a href="#Schema约束" class="headerlink" title="Schema约束"></a>Schema约束</h3><ul><li>同前者 但功能更加强大 相应的语法也复杂很多</li></ul><h2 id="TOMCAT"><a href="#TOMCAT" class="headerlink" title="TOMCAT"></a>TOMCAT</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></p><p><img src="image-20210305202437206.png" alt="image-20210305202437206"></p><p><img src="image-20210305202452493.png" alt="image-20210305202452493"></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ol><li>bin目录里面找到startup.bat/ linux下使用startup.sh</li><li>打开浏览器 输入127.0.0.1:8080;</li></ol><h4 id="启动问题"><a href="#启动问题" class="headerlink" title="启动问题"></a>启动问题</h4><ol><li>未正确配置jdk</li><li>端口号修改</li><li>startup乱码： 修改conf下的logging.properties，其所有utf-8改为GBK</li></ol><h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><ol><li>点击bin目录内的shutdown.bat</li><li>在命令窗口输入ctrl+C</li><li>强制关闭 直接点x</li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="部署项目的方式"><a href="#部署项目的方式" class="headerlink" title="部署项目的方式"></a>部署项目的方式</h4><ol><li>直接将项目放在tomcat的webapps下面</li><li>打开浏览器之后输入127.0.0.1/项目文件夹/项目</li><li>简化部署：将项目打包成war包 放置在webapps下面 会自动解压缩并且删除的时候会自动去掉源文件</li><li>在 </li></ol><h3 id="标准访问格式"><a href="#标准访问格式" class="headerlink" title="标准访问格式"></a>标准访问格式</h3><ul><li>协议://域名:端口/资源路径/资源名称</li></ul><h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><ul><li>当用户多次访问这个资源时，其源代码永远不会改变</li><li>会动的静态资源</li></ul><h3 id="动态资源"><a href="#动态资源" class="headerlink" title="动态资源"></a>动态资源</h3><ul><li>当用户多次访问这个资源时，其源代码可能发生改变</li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序员必修 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> javaweb </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu_Linux</title>
      <link href="/2021/11/30/Ubuntu-Linux/"/>
      <url>/2021/11/30/Ubuntu-Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu-Linux"><a href="#Ubuntu-Linux" class="headerlink" title=" Ubuntu Linux"></a><div align="center"> Ubuntu Linux</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>略</li></ul><h2 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h2><ol><li><p>全屏显示<img src="image-20210304150047242.png" alt="image-20210304150047242">：进入全屏模式</p></li><li><p>挂起/冻结<img src="image-20210304143956297.png" alt="image-20210304143956297"></p><p>由于开关机的不便性 使用挂起/冻结可以保存linux系统状态</p></li><li><p>硬件参数设置 </p><p>先关机后设置    </p></li><li><p>右下角有状态栏：显示当前硬件状态</p></li></ol><h2 id="快照与系统恢复"><a href="#快照与系统恢复" class="headerlink" title="快照与系统恢复"></a>快照与系统恢复</h2><ol><li><p>右键ubuntulinux 有快照</p></li><li><p>点击拍摄快照之后会保存当前系统状态</p></li><li><p>在虚拟机目录下就会有后缀为snapshot字样的文件</p></li><li><p>当系统出问题的时候可以快速还原到快照状态</p></li></ol><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><ul><li>对于Linux来说 使用统一的目录树结构，且没有盘符这个概念</li><li>. 代表当前目录 ..代表上级目录</li><li>bin</li></ul><h2 id="用户目录"><a href="#用户目录" class="headerlink" title="用户目录"></a>用户目录</h2><ul><li><p>Linux系统上支持多个用户，每个用户一个目录</p></li><li><p>权限机制：对于普通用户操作的范围只有用户目录，对于root用户可以操作所有范围</p></li></ul><h2 id="常用命令行"><a href="#常用命令行" class="headerlink" title="常用命令行"></a>常用命令行</h2><h3 id="列出子项-ls"><a href="#列出子项-ls" class="headerlink" title="列出子项 ls"></a>列出子项 ls</h3><ul><li><p>查看根目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /</span><br></pre></td></tr></table></figure></li><li><p>查看详细信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /home </span><br></pre></td></tr></table></figure></li><li><p>要点与细节：按住tab键可以自动补全输入的命令和路径</p></li><li><p>输入历史可以按↑↓箭头翻阅</p></li><li><p>宿主机与虚拟机之间可以拷贝粘贴，例如图片和文字</p></li></ul><h3 id="目录切换-pwd"><a href="#目录切换-pwd" class="headerlink" title="目录切换 pwd"></a>目录切换 pwd</h3><ul><li><p>print working directory</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd </span><br></pre></td></tr></table></figure></li></ul><h3 id="切换目录-cd"><a href="#切换目录-cd" class="headerlink" title="切换目录 cd"></a>切换目录 cd</h3><ul><li><p>change directory</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home/zlinni</span><br></pre></td></tr></table></figure></li><li><p>几个特殊的目录：</p><ul><li>~ 主目录</li><li>. 当前目录</li><li>.. 上一级目录</li></ul></li><li><p>绝对路径 从根节点开始 /</p></li><li><p>相对路径 从当前路径开始  ./dir==dir</p></li></ul><h3 id="新建文件-touch"><a href="#新建文件-touch" class="headerlink" title="新建文件 touch"></a>新建文件 touch</h3><ul><li><p>touch</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch 文件名</span><br></pre></td></tr></table></figure></li></ul><h3 id="输入内容-cat"><a href="#输入内容-cat" class="headerlink" title="输入内容 cat"></a>输入内容 cat</h3><ul><li><p>cat 文件名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat files</span><br><span class="line">#查看files中内容</span><br><span class="line">cat -n files</span><br><span class="line">#查看n行内容</span><br></pre></td></tr></table></figure></li><li><p>cat&gt;用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat&gt;files</span><br><span class="line">#往cat中输入内容 以ctrl+d结束</span><br></pre></td></tr></table></figure></li><li><p>其他方式输入 &gt; (输出重定向)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date &gt; file</span><br><span class="line">#往file中输入date</span><br></pre></td></tr></table></figure></li></ul><h3 id="创建目录-mkdir"><a href="#创建目录-mkdir" class="headerlink" title="创建目录 mkdir"></a>创建目录 mkdir</h3><ul><li><p>make directory</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir abc</span><br></pre></td></tr></table></figure></li><li><p>使用-p参数可以将路径的层次目录全部创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p abc/123/test</span><br></pre></td></tr></table></figure></li></ul><h3 id="删除目录-rmdir"><a href="#删除目录-rmdir" class="headerlink" title="删除目录 rmdir"></a>删除目录 rmdir</h3><ul><li><p>remove directory,如果目录非空 操作失败</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir abc</span><br></pre></td></tr></table></figure></li></ul><h3 id="删除文件或者目录-rm"><a href="#删除文件或者目录-rm" class="headerlink" title="删除文件或者目录 rm"></a>删除文件或者目录 rm</h3><ul><li><p>remove</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rfabc</span><br></pre></td></tr></table></figure><p>删除abc目录连同子项一起删除，r表示recursive，f表示force</p></li></ul><h3 id="复制文件或者目录-cp"><a href="#复制文件或者目录-cp" class="headerlink" title="复制文件或者目录 cp"></a>复制文件或者目录 cp</h3><ul><li><p>copy</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp -rf example example2</span><br><span class="line">cp -b example example2 #备份</span><br></pre></td></tr></table></figure></li></ul><h3 id="移到文件或目录-mv"><a href="#移到文件或目录-mv" class="headerlink" title="移到文件或目录 mv"></a>移到文件或目录 mv</h3><ul><li><p>move</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv hello helloworld #把文件a移到b中</span><br><span class="line">mv simply.txt simply2.txt #改变名字 </span><br></pre></td></tr></table></figure></li></ul><h3 id="归档-tar"><a href="#归档-tar" class="headerlink" title="归档 tar"></a>归档 tar</h3><ul><li><p>tape archive 档 案打包</p></li><li><p>创建档案包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf example.tar example</span><br></pre></td></tr></table></figure></li><li><p>c means create</p></li><li><p>v means verbose 显示详情 </p></li><li><p>f means file</p></li><li><p>多目录打包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf xxx.tar file1 file2 file3</span><br></pre></td></tr></table></figure></li><li><p>还原档案包 （解压）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar .xvf example.tar</span><br><span class="line">tar -xvf example.tar -C outdir</span><br><span class="line"># -C参数指定目标目录，默认解压到当前目录下</span><br></pre></td></tr></table></figure></li><li><p>归档并压缩</p></li><li><p>前面的tar没压缩体积大</p></li><li><p>并档并压缩</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf example.tar.gz example</span><br></pre></td></tr></table></figure></li><li><p>解压缩</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf example.tar.gz</span><br><span class="line">tar -zxvf example.tar.gz -C outdir</span><br></pre></td></tr></table></figure></li></ul><h3 id="软链接-ln"><a href="#软链接-ln" class="headerlink" title="软链接 ln"></a>软链接 ln</h3><ul><li><p>即Windows下的“快捷方式”</p></li><li><p>ln link</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ln -s source link</span><br><span class="line">#-s 表示soft软链接（默认为硬）</span><br><span class="line">eg：</span><br><span class="line">ln -s example example2</span><br><span class="line">#便创建了一个名为example2的快捷方式，内部是example的内容</span><br></pre></td></tr></table></figure></li><li><p>特点：</p></li></ul><ol><li><p>删除软链接对源文件不会有影响</p></li><li><p>删除源文件则软链接失效</p></li><li><p>使用ls -l 可以清楚的看到快捷方式<img src="image-20210310104651162.png" alt="image-20210310104651162"></p></li><li><p>直接看颜色<img src="image-20210310104620892.png" alt="image-20210310104620892"></p></li><li><p>可以看出/bin指向的是user/bin目录</p></li></ol><h3 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h3><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><ul><li><p>添加一个用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -m test1</span><br></pre></td></tr></table></figure></li><li><p>修改用户密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd test1</span><br></pre></td></tr></table></figure></li><li><p>删除用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo userdel test1</span><br></pre></td></tr></table></figure></li></ul><h3 id="超级用户"><a href="#超级用户" class="headerlink" title="超级用户"></a>超级用户</h3><ul><li><p>首次使用时，需要给root设置密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure></li><li><p>切换到root用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line"># switch user</span><br></pre></td></tr></table></figure></li><li><p>退出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure></li></ul><h3 id="用户和组"><a href="#用户和组" class="headerlink" title="用户和组"></a>用户和组</h3><ul><li><p>创建组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd boys</span><br></pre></td></tr></table></figure></li><li><p>创建用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -m -g boys ming</span><br><span class="line"># -g表示添加用户 同时将用户加到boys组</span><br></pre></td></tr></table></figure></li><li><p>修改现有用户到新的组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -g boys Zlinni</span><br></pre></td></tr></table></figure></li><li><p>查看用户和组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/group</span><br><span class="line">#每一行表示一个group消息，名字+id</span><br></pre></td></tr></table></figure></li><li><p>查看用户列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br><span class="line">#每一行表示一个用户的信息</span><br></pre></td></tr></table></figure></li></ul><h3 id="文件的权限"><a href="#文件的权限" class="headerlink" title="文件的权限"></a>文件的权限</h3><ul><li><p>-owner 文件的属主</p></li><li><p>-r 文件是否可读 read</p></li><li><p>-w 文件是否可写 write</p></li><li><p>-x 文件是否可执行 excute</p></li><li><p>使用ls -l查看：</p></li><li><ul><li>第一个字符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d 表示目录</span><br><span class="line">l 表示link软链接</span><br><span class="line">- 表示为一个文件</span><br></pre></td></tr></table></figure><ul><li><p>剩下的九个字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r w - r - - r - - </span><br><span class="line">#权限分为三部分 自己 | 同组 | 别人</span><br><span class="line"># r 可读</span><br><span class="line"># w 可写</span><br><span class="line"># x 可执行</span><br></pre></td></tr></table></figure></li></ul></li><li><p>直接在图形界面上看属性 </p></li></ul><h3 id="修改文件权限-chmod"><a href="#修改文件权限-chmod" class="headerlink" title="修改文件权限 chmod"></a>修改文件权限 chmod</h3><ul><li><p>change file mode </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod o+w simply.txt</span><br><span class="line"># o 表示other</span><br><span class="line"># +w 表示增加write权限</span><br></pre></td></tr></table></figure></li><li><p>more</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">chmod a+w simple.txt</span><br><span class="line">#所有人all添加w权限</span><br><span class="line">chmod a-w simple.txt</span><br><span class="line">#所有人减去w权限</span><br><span class="line">chmod u+w simple.txt</span><br><span class="line">#仅用户user自己的权限 +w</span><br><span class="line">chmod o-w simple.txt</span><br><span class="line">#修改别人的other权限-w</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改文件属主-chown"><a href="#修改文件属主-chown" class="headerlink" title="修改文件属主 chown"></a>修改文件属主 chown</h3><ul><li>change owner</li><li>在/opt</li></ul><h3 id="打印-echo"><a href="#打印-echo" class="headerlink" title="打印 echo"></a>打印 echo</h3><ul><li><p>echo </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;helloworld&#x27;</span><br><span class="line">#打印出helloworld</span><br><span class="line">var1 = 22;</span><br><span class="line">echo $var1</span><br><span class="line">#打印出22</span><br></pre></td></tr></table></figure></li></ul><h3 id="指令使用说明-man"><a href="#指令使用说明-man" class="headerlink" title="指令使用说明 man"></a>指令使用说明 man</h3><ul><li><p>manual </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man 指令名</span><br></pre></td></tr></table></figure></li></ul><h3 id="历史指令-history"><a href="#历史指令-history" class="headerlink" title="历史指令 history"></a>历史指令 history</h3><ul><li><p>history</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">history 10</span><br><span class="line">#查询最近的十条</span><br></pre></td></tr></table></figure></li></ul><h3 id="文本编辑器-vim"><a href="#文本编辑器-vim" class="headerlink" title="文本编辑器 vim"></a>文本编辑器 vim</h3><ul><li><p>三种模式</p></li><li><p>命令模式 按键i转化为输入模式 输入冒号进入底线模式  </p></li><li><p>输入模式 按键esc转化为命令模式 先esc再冒号进入底线模式</p></li><li><p>底线模式 最下面一行输入指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#退出命令</span><br><span class="line">:wq 保存并退出</span><br><span class="line">:wq! 保存并强制退出</span><br><span class="line">:q 直接退出</span><br><span class="line">:q 直接强制退出</span><br></pre></td></tr></table></figure></li><li><p>输入到光标左边是i input </p></li><li><p>输入到光标右边是a after the cursor</p></li><li><p>最左边 大写I </p></li><li><p>最右边 大写A</p></li><li><p>输入到光标上边是大写O</p></li><li><p>输入到光标下边是小写o</p></li><li><p>替换字母 r replace</p></li><li><p>剪切一个字母 x</p></li><li><p>剪切一个单词 dw</p></li><li><p>剪切一行 dd</p></li><li><p>粘贴 p paste</p></li><li><p>复制 y </p></li><li><p>复制一个单词 yw</p></li><li><p>复制一行 yy</p></li><li><p>在底线模式输入set number显示行号</p></li><li><p>查找单词 /单词 按下n就到下一行</p></li><li><p>替换单词 :s/旧单词/新单词 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">替换前三行</span><br><span class="line">:1,3 s/old/new</span><br><span class="line">第一行到最后一行</span><br><span class="line">:1,$ s/old/new</span><br></pre></td></tr></table></figure></li><li><p>移动 :1 move 4 把第一行和第四行进行交换</p></li><li><p>复制 :1 copy 4 把第一行复制到第四行后面 </p></li><li><p>删除 :1 d</p></li></ul><h3 id="查找grep"><a href="#查找grep" class="headerlink" title="查找grep"></a>查找grep</h3><ul><li><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">grep ‘查找内容’ 查找文件</span><br><span class="line">grep -i ‘查找内容’ 查找文件 </span><br><span class="line">#可以忽视大小写 ignore</span><br><span class="line">grep -e ‘查找内容’ 查找文件</span><br><span class="line">#用表达式expression去反映查找的内容</span><br><span class="line">grep -v ‘查找内容’ 查找文件</span><br><span class="line">#显示不匹配的内容 versus</span><br><span class="line">grep -n ‘查找内容’ 查找文件</span><br><span class="line">#显示行号</span><br><span class="line">grep -e &#x27;\(hello\)\&#123;2,3\&#125;&#x27; 搜索出现2-3次hello的那行</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">. 一个字符</span><br><span class="line">* 若干个字符 前面一个字符出现若干次</span><br><span class="line">^ 行的开头</span><br><span class="line">$ 行的结尾</span><br><span class="line">[abc] abc其中一个</span><br><span class="line">[a-c] a到c</span><br><span class="line">^#</span><br><span class="line">^$ 空行</span><br><span class="line">! 否定</span><br><span class="line">[[:upper:]]</span><br><span class="line">[[:lower:]]</span><br><span class="line">[[:blank:]]</span><br><span class="line">[[:digit:]]</span><br></pre></td></tr></table></figure><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><ul><li>指令1 |  2 | 3</li></ul><h2 id="Shell-编程基础"><a href="#Shell-编程基础" class="headerlink" title="Shell 编程基础"></a>Shell 编程基础</h2><ul><li><p>程序编译 </p></li><li><p>程序解释</p></li><li><p>编辑一个 文本文件 保存为xxx.sh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">echo &quot;hello,world&quot;</span><br></pre></td></tr></table></figure></li><li><p>添加可执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x xxx.sh</span><br></pre></td></tr></table></figure></li><li><p>执行程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello.sh</span><br></pre></td></tr></table></figure></li></ul><h3 id="shell中的变量"><a href="#shell中的变量" class="headerlink" title="shell中的变量"></a>shell中的变量</h3><ul><li><p>shell是一个脚本编程语言</p></li><li><p>定义变量</p></li><li><p>执行命令</p></li><li><p>if判断逻辑 while循环逻辑 </p></li><li><p>自定义函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">定义变量</span><br><span class="line">OUTDIR = /opt</span><br><span class="line"></span><br><span class="line">使用变量</span><br><span class="line">echo &quot;output to : $&#123;OUTDIR&#125;&quot;</span><br><span class="line">ls $&#123;OUTDIR&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><ul><li>定义环境变量<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">定义环境变量</span><br><span class="line">export OUTDIR = /opt</span><br><span class="line">显示环境变量</span><br><span class="line">echo $&#123;OUTDIR&#125;</span><br><span class="line">查看所有环境变量</span><br><span class="line">printenv  </span><br></pre></td></tr></table></figure></li><li>可分为全局环境变量和局部环境变量<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">全局环境变量由系统预定义且使用在bash进程</span><br><span class="line">一般使用大写字母表示全局 小写表示局部</span><br></pre></td></tr></table></figure></li></ul><h4 id="环境变量的赋值和访问"><a href="#环境变量的赋值和访问" class="headerlink" title="环境变量的赋值和访问"></a>环境变量的赋值和访问</h4><ul><li><p>赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count=0,等号左右没有空格</span><br></pre></td></tr></table></figure></li><li><p>访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$count</span><br></pre></td></tr></table></figure></li><li><p>使用export命令让局部变量变成全局变量</p></li></ul><h4 id="变量的赋值和运算"><a href="#变量的赋值和运算" class="headerlink" title="变量的赋值和运算"></a>变量的赋值和运算</h4><ul><li><p>字符串长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">expr length &quot;$str&quot;</span><br><span class="line">若要传值 使用反引号</span><br><span class="line">c = `expr length &quot;$str&quot;`</span><br></pre></td></tr></table></figure></li><li><p>查找字符串位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">expr index $str a (要查找的字符串)</span><br><span class="line">* 注意 从1开始</span><br><span class="line">* 有多个字符进行匹配则返回索引最小的值</span><br></pre></td></tr></table></figure></li><li><p>字符串截断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">expr substr $str 2 3</span><br><span class="line">2 开始位置</span><br><span class="line">3 结束位置</span><br></pre></td></tr></table></figure></li><li><p>字符串匹配</p></li><li><p>使用expr必须在运算符前面添加 \ 进行转义，且数字与运算符中间需要腾出空格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">计算（1+2）*5</span><br><span class="line">expr \( 1 \+ 2 \) \* 5</span><br></pre></td></tr></table></figure></li><li><p>使用$[]做运算不需要</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = $[(1+2)*5]</span><br></pre></td></tr></table></figure></li></ul><h3 id="输入输出重定向"><a href="#输入输出重定向" class="headerlink" title="输入输出重定向"></a>输入输出重定向</h3><h4 id="输出重定向和附加输出重定向"><a href="#输出重定向和附加输出重定向" class="headerlink" title="输出重定向和附加输出重定向"></a>输出重定向和附加输出重定向</h4><ul><li><p>输出重定向 覆写原来的内容 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date &gt; file1</span><br></pre></td></tr></table></figure></li><li><p>附加输出重定向 添加的内容在原先的结尾后面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date &gt;&gt; file1</span><br></pre></td></tr></table></figure></li></ul><h4 id="输入重定向和附加输入重定向"><a href="#输入重定向和附加输入重定向" class="headerlink" title="输入重定向和附加输入重定向"></a>输入重定向和附加输入重定向</h4><ul><li><p>原理同上</p></li><li><p>输入重定向</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参数 &lt; file1</span><br></pre></td></tr></table></figure></li><li><p>附加输入重定向 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参数 &lt;&lt; file1</span><br></pre></td></tr></table></figure></li><li><p>特别的 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat &lt; file &gt; file2</span><br><span class="line">等同于</span><br><span class="line">cat &gt; file2 &lt; file</span><br><span class="line">都是先输入重定向获取file的内容再输出到file2</span><br></pre></td></tr></table></figure></li></ul><h4 id="错误输出重定向和附加错误输出重定向"><a href="#错误输出重定向和附加错误输出重定向" class="headerlink" title="错误输出重定向和附加错误输出重定向"></a>错误输出重定向和附加错误输出重定向</h4><ul><li><p>错误输出重定向</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;error message&#125; 2 &gt; file</span><br></pre></td></tr></table></figure></li><li><p>附加错误输出重定向</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;error message&#125; 2 &gt;&gt; file</span><br></pre></td></tr></table></figure></li><li><p>eg</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lsls</span><br><span class="line">得到错误信息 bash:lsls:command is not found</span><br><span class="line">lsls 2 &gt; file</span><br><span class="line">cat file</span><br><span class="line">得到错误信息</span><br></pre></td></tr></table></figure></li></ul><h3 id="管道功能"><a href="#管道功能" class="headerlink" title="管道功能"></a>管道功能</h3><ul><li><p>第一个命令的结果作为第二个命令的输入以此类推</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令1 | 命令2 | 命令3</span><br></pre></td></tr></table></figure></li><li><p>eg 由于/etc里面的文件很多 可以通过管道将列表结果传输到more显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /etc | more</span><br></pre></td></tr></table></figure></li></ul><h3 id="shell编程"><a href="#shell编程" class="headerlink" title="shell编程"></a>shell编程</h3><h4 id="创建和执行shell脚本"><a href="#创建和执行shell脚本" class="headerlink" title="创建和执行shell脚本"></a>创建和执行shell脚本</h4><ul><li><p>创建的格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!bin/sh</span><br><span class="line">echo hello world！</span><br></pre></td></tr></table></figure></li><li><p>执行 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">. hello.sh(假设刚刚创建的文件是这个)</span><br><span class="line">且注意.之后跟空格</span><br></pre></td></tr></table></figure></li><li><p>执行2 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">先赋予权限</span><br><span class="line">chmod u+x hello</span><br><span class="line">./hello.sh</span><br></pre></td></tr></table></figure></li><li><p>两种执行方式的区别 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">. hello.sh其实是执行了source hello.sh 不会创建新的进程</span><br><span class="line">./hello.sh则是执行了bash hello.sh 创建新的进程</span><br></pre></td></tr></table></figure></li></ul><h3 id="分支选择结构"><a href="#分支选择结构" class="headerlink" title="分支选择结构"></a>分支选择结构</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if 条件</span><br><span class="line">then </span><br><span class="line">命令</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li><p>如果将if和then写在同一行 需要在then前面加;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if 条件; then</span><br><span class="line">命令</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li><p>如果有两个分支，就可以使用if-else语句，格式为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if 条件</span><br><span class="line">then </span><br><span class="line">命令1</span><br><span class="line">else </span><br><span class="line">命令2</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ul><h4 id="case-in"><a href="#case-in" class="headerlink" title="case-in"></a>case-in</h4><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">case 表达式 in</span><br><span class="line">条件1)</span><br><span class="line">命令1</span><br><span class="line">;;</span><br><span class="line">条件2)</span><br><span class="line">命令2</span><br><span class="line">;;</span><br><span class="line">...</span><br><span class="line">*)</span><br><span class="line">命令n</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></li><li><p>eg</p><p><img src="image-20210609203750536.png" alt="image-20210609203750536"></p></li></ul><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while 条件</span><br><span class="line">do </span><br><span class="line">命令</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li></ul><h4 id="until循环"><a href="#until循环" class="headerlink" title="until循环"></a>until循环</h4><ul><li></li></ul><h1 id="考试"><a href="#考试" class="headerlink" title="考试"></a>考试</h1><h2 id="单选"><a href="#单选" class="headerlink" title="单选"></a>单选</h2><p>20道 </p><h2 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h2><p>基础指令</p><h2 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h2><p>基础指令</p><ul><li>三道 加起来20分</li></ul><h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><p>单独做个脚本</p><ul><li><p>两道 加起来20分</p></li><li><p>考察内容2-4</p></li><li><p>基础知识和课后习题部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!bin/sh</span><br><span class="line">index = `expr length &quot;&quot;$1&quot;`</span><br><span class="line">whle($index&gt;0)</span><br><span class="line">do</span><br><span class="line">str = $str`expr substr &quot;$1&quot; $index 1`</span><br><span class="line">index = $[$index-1]</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h3><ul><li><p>ls -l 第一个字母代表和后面三个字母代表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-a 列出所有项目</span><br><span class="line">-l 以列表形式写出文件</span><br><span class="line">-R 用于递归列出子目录中的的内容</span><br><span class="line">-d 只列出目录</span><br></pre></td></tr></table></figure></li><li><p>cd 熟悉两种路径跳转 当前文件夹和上级文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd .该级</span><br><span class="line">cd ..上级</span><br><span class="line">cd ~主目录root</span><br></pre></td></tr></table></figure></li><li><p>新建文件和新建文件目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch file</span><br><span class="line">mkdir 文件名</span><br></pre></td></tr></table></figure></li><li><p>删除文件 rm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm 文件名</span><br></pre></td></tr></table></figure></li><li><p>删除空的文件夹 rm dir</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir 文件夹</span><br></pre></td></tr></table></figure></li><li><p>如果文件夹非空 rm </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -r </span><br><span class="line">强制删除 实质是递归删除</span><br></pre></td></tr></table></figure></li><li><p>分页指令 more、less</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more 文件名</span><br></pre></td></tr></table></figure></li><li><p>关机方法 shutdown halt 还有？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poweroff 断电</span><br></pre></td></tr></table></figure></li><li><p>重启 reboot shutdown -r 还有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">？</span><br></pre></td></tr></table></figure></li><li><p>输出echo</p></li><li><p>l输入变量在脚本里read</p></li><li><p>通配符 字母数量未定用*  一个字母用？ 代表a-j中间一个数 [a-j]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls /etc/???.conf 列出etc下面由三个字母构成的文件</span><br><span class="line">ls /etc/[a-c]*.conf 列出etc下面由a-c其中一个字母开头的文件</span><br></pre></td></tr></table></figure></li><li><p>命令后面加取地址符号&amp; p48 代表放入后台执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代表该指令放入后台执行</span><br></pre></td></tr></table></figure><p><img src="image-20210610211429412.png" alt="image-20210610211429412"></p></li><li><p>grep查找 文本的查找 使用通配符 开头^ 结尾$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">grep ‘查找内容’ 查找文件</span><br><span class="line">grep -i ‘查找内容’ 查找文件 </span><br><span class="line">#可以忽视大小写 ignore</span><br><span class="line">grep -e ‘查找内容’ 查找文件</span><br><span class="line">#用表达式expression去反映查找的内容</span><br><span class="line">grep -v ‘查找内容’ 查找文件</span><br><span class="line">#显示不匹配的内容 versus</span><br><span class="line">grep -n ‘查找内容’ 查找文件</span><br><span class="line">#显示行号</span><br><span class="line">grep -e &#x27;\(hello\)\&#123;2,3\&#125;&#x27; 搜索出现2-3次hello的那行</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>通过文件名查询文件 find +name  -t 查找类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p>输出重定向 &gt; &gt;&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参见笔记</span><br></pre></td></tr></table></figure></li><li><p>管道 |</p></li><li><p>第四章p60脚本编程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参见笔记</span><br></pre></td></tr></table></figure></li><li><p>x执行权限 chmod u+x file</p></li><li><p>默认bash 解释器 source解释器 区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash 会创建新的进程</span><br><span class="line">source 不会</span><br></pre></td></tr></table></figure></li><li><p>变量代表输入参数的个数 $# 所有输入参数放到什么变量 第一个参数用什么表示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命令行的参数个数$#</span><br><span class="line">所有输出参数保留在$*</span><br><span class="line">第一个参数用$1表示</span><br></pre></td></tr></table></figure></li><li><p>变量的运算 数值类型和字符类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参见笔记</span><br></pre></td></tr></table></figure></li><li><p>数字的加减乘除 expr 注意*前面加 \ 转义</p></li><li><p>bc计算器</p></li><li><p>expr的好处是可以将结果赋值给其他变量·``</p></li><li><p>长度 、  抽取子字符串</p></li><li><p>p77 条件的判断</p></li><li><p>数字方面的a》b </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-eq =</span><br><span class="line">-ge &gt;=</span><br><span class="line">-le &lt;=</span><br><span class="line">-gt &gt;</span><br><span class="line">-lt &lt;</span><br><span class="line">-ne ≠</span><br></pre></td></tr></table></figure></li><li><p>字符串的比较 两个字符串是否相等 包括长度判断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">=</span><br><span class="line">！=</span><br><span class="line">&lt;&gt;</span><br><span class="line">-n 长度是否大于0 是否为空</span><br><span class="line">-z 长度是否=0 </span><br></pre></td></tr></table></figure></li><li><p>文件的判断 判断是否为文件 文件夹</p></li><li><p>以上都是单个 </p></li><li><p>多个判断自己看</p></li><li><p>循环结构 for 依次输出五个单词等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!bin/sh</span><br><span class="line"></span><br><span class="line">for(i=0;i&lt;5;i++)</span><br><span class="line">do</span><br><span class="line">echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p>while</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!bin/sh</span><br><span class="line"></span><br><span class="line">while 条件</span><br><span class="line">do</span><br><span class="line">xxx</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p>加两个(())等同于c的环境</p></li><li><p>用户管理 知道怎么新建更改删除用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">useradd 新增用户</span><br><span class="line">选项：</span><br><span class="line">-e 该选项后面给出的是日期参数</span><br><span class="line">-c commit 该选项后面给出的是注释参数</span><br><span class="line">-d directory 该选项后面给出的是路径参数</span><br><span class="line">-g 该选项后面给出组群id或组群名称参数 用于指定用户所属的初始组群</span><br><span class="line">-G 附加组群</span><br><span class="line">-u 数字参数 指定uid</span><br><span class="line">-r 说明创建的是系统用户</span><br><span class="line">useradd -G study -u 1000  testuser</span><br><span class="line"></span><br><span class="line">passwd -S testuser 查看用户密码状态</span><br><span class="line">passwd testuser 修改testuser的密码</span><br><span class="line">ctrl+d结束输入</span><br><span class="line"></span><br><span class="line">usermod 修改用户账号设置</span><br><span class="line">和useradd选项相同，新增一条：</span><br><span class="line">-l 后面给出的是新用户名参数</span><br><span class="line">usermod -c &quot;user for test&quot; testuser</span><br><span class="line">usermod -l tuser testuser</span><br><span class="line"></span><br><span class="line">userdel 删除命令</span><br><span class="line">userdel -r tuser</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>包括用户组的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupadd</span><br><span class="line">groupmod</span><br><span class="line">groupdel</span><br></pre></td></tr></table></figure></li><li><p>p102 切换到另外一个用户的命令 su</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su study</span><br><span class="line">切换到study用户</span><br></pre></td></tr></table></figure></li><li><p>文件管理第七章 当ls -l 哪个代表他的类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ls -l/xxx</span><br><span class="line">- 普通文件</span><br><span class="line">d 目录</span><br><span class="line">c 字符设备文件（鼠标键盘</span><br><span class="line">b 块设备文件block（硬盘</span><br><span class="line">l 符号链接文件link</span><br><span class="line">s 套接字</span><br><span class="line">p 管道pipe</span><br></pre></td></tr></table></figure></li><li><p>块状的设备文件 b</p></li><li><p>字符类型的 c</p></li><li><p>链接文件 l</p></li><li><p>一个是硬链接 一个是软连接的创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">硬链接是目标文件的一个副本 软连接符号链接类似快捷方式记录文件所在路径</span><br><span class="line">ln命令创建链接文件</span><br><span class="line">默认创建硬链接</span><br><span class="line">-s 创建符号链接</span><br><span class="line">touch target</span><br><span class="line">ln -s target symtarget</span><br><span class="line">ls -l symtarget</span><br></pre></td></tr></table></figure></li><li><p>文件权限 增加和减少权限 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rwx</span><br><span class="line">r 4</span><br><span class="line">w 2</span><br><span class="line">x 1</span><br><span class="line">read write execute执行</span><br><span class="line"></span><br><span class="line">分三部分 文件所有者 属组组员 其他用户</span><br><span class="line">eg</span><br><span class="line">-rw-r--r--</span><br><span class="line">root用户对其有可读可写权限 其他用户均只有可读权限</span><br><span class="line"></span><br><span class="line">chmod u+x</span><br></pre></td></tr></table></figure></li><li><p>针对三类人 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root用户 属组用户 和其他用户</span><br></pre></td></tr></table></figure></li><li><p>权限管理的两种模式 字母的数字的如何转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p>第八章 硬盘的文件系统</p></li><li><p>开机的时候以哪一种文件格式去挂载盘ext4</p></li><li><p>系统盘是ext4 </p></li><li><p>fat32是单个文件不能过4g </p></li><li><p>ntfs就可以</p></li><li><p>/etc/fstab p133</p></li><li><p>挂载一个硬盘的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创建一个空节点</span><br><span class="line">mkdir /mnt/usb</span><br><span class="line">mount -t ext4 /dev/sda /mnt/usb</span><br><span class="line">mount -t 类型 挂载区 挂载位置</span><br></pre></td></tr></table></figure></li><li><p>卸载盘的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount</span><br></pre></td></tr></table></figure></li><li><p>挂载盘之前 格式化的命令 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext3/dev/sdc1</span><br></pre></td></tr></table></figure></li><li><p>普通使用的是什么格式 （linux下）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p>分区工具 p151 查询分区的具体信息的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure></li><li><p>更改盘的分区命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t</span><br></pre></td></tr></table></figure></li><li><p>硬盘的配额限制命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quotacheck</span><br></pre></td></tr></table></figure></li><li><p>查看当前的盘 打开所有的配额功能 关闭配额功能 更改配额信息 更改配额信息的时候是哪两种配额 针对大小和针对信息的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">quotaon 打开全部配额功能</span><br><span class="line">quotaoff 关闭配额功能</span><br><span class="line">-u user</span><br><span class="line">-g group组群</span><br><span class="line">-v 详细信息</span><br><span class="line">-a 全部扫描</span><br><span class="line">-avug</span><br><span class="line">quota 报告配额使用情况</span><br><span class="line">repquota 报告</span><br></pre></td></tr></table></figure></li><li><p>逻辑卷 为什么需要逻辑卷</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">四个1gb 形成一个4gb</span><br></pre></td></tr></table></figure></li><li><p>怎么样建立一个逻辑卷 使得这个逻辑卷随时可以增加随时可以减少 三个步骤 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pvcreate xxx</span><br><span class="line">将分区转换为物理卷</span><br><span class="line">vgcreate juanzu xxx</span><br><span class="line">指定物理卷用于卷组创建</span><br><span class="line">lvcreate juanzu luojijuan</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>新建和删除的功能对应的指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序员必修 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js</title>
      <link href="/2021/11/30/Node-js/"/>
      <url>/2021/11/30/Node-js/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js"><a href="#Node-js" class="headerlink" title=" Node.js"></a><div align="center"> Node.js</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>nodejs是一个js运行环境runtime 让js可以开发后端程序 几乎能实现其他后端语言能实现的所有function</li><li>nodejs基于googlev8引擎 原用于chrome的js解释部分，但后来被搬到服务器上用于做服务器的软件</li><li>优点 处理高并发 可以实现的功能多</li></ul><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><ul><li>略</li></ul><h2 id="第一次运行nodejs"><a href="#第一次运行nodejs" class="headerlink" title="第一次运行nodejs"></a>第一次运行nodejs</h2><ul><li>建立app.js，然后console一段信息，打开终端输入node app.js(确保你的终端打开路径正确)，有输出则为配置成功</li></ul><h2 id="创建第一个应用"><a href="#创建第一个应用" class="headerlink" title="创建第一个应用"></a>创建第一个应用</h2><h3 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h3><ul><li><p>创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>用于创建服务器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">http.createServer(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    设置响应头</span><br><span class="line">    状态码是<span class="number">200</span> 文件类型是html 字符集是utf-<span class="number">8</span> </span><br><span class="line">    res.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-type&quot;</span>:<span class="string">&quot;text/html;charset=utf-8&quot;</span>&#125;);</span><br><span class="line">  解决乱码</span><br><span class="line">    res.write(<span class="string">&quot;&lt;head&gt;&lt;meta charset=&#x27;UTF-8&#x27;&gt;&lt;/head&gt;&quot;</span>);</span><br><span class="line">    必写结束响应</span><br><span class="line">    res.end();</span><br><span class="line">    </span><br><span class="line">&#125;).listen(<span class="number">3000</span>);端口</span><br><span class="line">箭头函数是es6新增的特性和<span class="function"><span class="keyword">function</span>差不多</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="url模块"><a href="#url模块" class="headerlink" title="url模块"></a>url模块</h3><ul><li><p>创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>获取地址栏里面的其他属性 解析url  get可以用 post要用第三方中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url.parse(req.url,<span class="literal">true</span>).query;</span><br><span class="line"><span class="literal">true</span>转换为一个对象</span><br><span class="line">返回一个json数组类型</span><br></pre></td></tr></table></figure></li></ul><h3 id="热刷新supervisor"><a href="#热刷新supervisor" class="headerlink" title="热刷新supervisor"></a>热刷新supervisor</h3><ul><li>输入cnpm找到对应网址进行安装指令 注意权限问题</li><li>再安装supervisor 注意权限问题</li><li>然后 将vscode 的默认终端从powershell转化成cmd</li><li>接着 输入supervisor app.js</li><li>便可以进行热更新 每次保存都会重启对应的js</li><li>注意如果报错会一直反复运行</li></ul><h3 id="commandjs-自定义模块"><a href="#commandjs-自定义模块" class="headerlink" title="commandjs 自定义模块"></a>commandjs 自定义模块</h3><ul><li><p>将部分功能性js封装到一个模块里面并且使用 的一种方式</p></li><li><p>下面以模块tools.js为例  看index.js如何调用模块的方法并使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;tools.js</span><br><span class="line">参见nodejs学习/demo3/<span class="built_in">module</span>/tools.js</span><br><span class="line"></span><br><span class="line">&gt;&gt;command02.js</span><br><span class="line">参见nodejs学习/demo3/command02.js</span><br></pre></td></tr></table></figure></li><li><p>暴露方法 分为三类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">单个方法暴露</span><br><span class="line">一个对象多个方法暴露</span><br><span class="line">直接暴露</span><br></pre></td></tr></table></figure></li></ul><h3 id="node-modules"><a href="#node-modules" class="headerlink" title="node_modules"></a>node_modules</h3><ul><li>nodejs的标准库，里面放module的js</li><li>在导入的时候可以直接require(‘模块名/模块.js’)，其中.js可以省略</li></ul><h4 id="生成package-json"><a href="#生成package-json" class="headerlink" title="生成package.json"></a>生成package.json</h4><ul><li>读取路径的时候默认是读取node_modules下面的模块的index.js，而如果想要省略的写法 即直接读取单个模块下面单个js的路径 可以使用package.json将下面的单个js路径改为默认路径</li><li>方法 找到模块文件路径下的单个js 在地址栏输入cmd打开cmd窗口</li><li>之后输入 npm init –yes 就可以生成相关的package.json<img src="image-20211123140552158.png" alt="image-20211123140552158"></li></ul><h4 id="第三方模块导入"><a href="#第三方模块导入" class="headerlink" title="第三方模块导入"></a>第三方模块导入</h4><p>用md5加密模块举例</p><ol><li>网址里面下包</li><li>npm install md5 –save 这样别人就知道你项目里面导入了哪些依赖，然后使用 npm i就可以导入依赖</li><li>var md5 = require(‘md5’);</li><li>md5(‘123132’);</li></ol><h3 id="关于依赖"><a href="#关于依赖" class="headerlink" title="关于依赖"></a>关于依赖</h3><ul><li>如下<img src="image-20211123160511823.png" alt="image-20211123160511823"></li></ul><h2 id="npm指令"><a href="#npm指令" class="headerlink" title="npm指令"></a>npm指令</h2><ul><li>npm -v 看npm版本号</li><li>npm -i 导入依赖</li><li>npm install xx –save 导入xx包并将依赖文件保存</li><li>npm uninstall xx</li><li>npm list 查看当前目录下已经安装的node包</li><li>npm info 模块 查看模块的版本</li><li>npm install <a href="mailto:&#x78;&#120;&#120;&#64;&#x31;&#x2e;&#x32;&#46;&#x30;">&#x78;&#120;&#120;&#64;&#x31;&#x2e;&#x32;&#46;&#x30;</a> 安装指定版本的xx包</li><li>npm init 或者 npm init –yes 生成package.json</li></ul><h3 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h3><ul><li><p>1.fs.stat 检测是文件还是目录</p><p>2.fs.mkdir 创建目录</p><p>3.fs.writeFile 创建写入文件</p><p>4.fs.appendFile 追加文件</p><p>5.fs.readFile 读取文件</p><p>6.fs.readdir 读取目录</p><p>7.fs.rename 重命名</p><p>8.fs.rmdir 删除目录</p><p>9.fs.unlink 删除文件</p></li></ul><h5 id="数据流-管道流"><a href="#数据流-管道流" class="headerlink" title="数据流 管道流"></a>数据流 管道流</h5><ul><li><p>数据流读取数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> readStream = fs.createReadStream(<span class="string">&#x27;./data/output.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line">readStream.on(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    str+=data;</span><br><span class="line">    count++;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">readStream.on(<span class="string">&#x27;end&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">    <span class="built_in">console</span>.log(count);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">readStream.on(<span class="string">&#x27;error&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>数据流写入数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入数据到文件流</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">500</span>;i++)&#123;</span><br><span class="line">    str+=<span class="string">&#x27;数据流xxxxxxxxxxxxx&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> writeStream = fs.createWriteStream(<span class="string">&#x27;./data/output.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line">writeStream.write(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标记写入完成</span></span><br><span class="line">writeStream.end();</span><br><span class="line"> </span><br><span class="line">writeStream.on(<span class="string">&#x27;finish&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;写入完成&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>管道流 复制文件之类的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 管道流 可以进行数据交换</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> readStream = fs.createReadStream(<span class="string">&#x27;./demo8.zip&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> writeStream = fs.createWriteStream(<span class="string">&#x27;./data/demo8.zip&#x27;</span>);</span><br><span class="line"></span><br><span class="line">readStream.pipe(writeStream);</span><br></pre></td></tr></table></figure></li></ul><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><ul><li><p>async 异步函数 await 等待异步函数执行完毕</p></li><li><p>同步就是根据代码全部流程一步一步执行</p></li><li><p>而异步就是遇到异步函数 先将其放到任务栈 然后等待所有其他函数执行完毕 之后再执行异步函数</p></li><li><p>关于js的异步同步执行顺序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">流程如下</span><br><span class="line">先执行同步</span><br><span class="line">再执行全部微任务</span><br><span class="line">再执行第一项宏任务</span><br></pre></td></tr></table></figure></li><li><p>延迟函数类似于异步 </p></li><li><p>异步的一个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> name = <span class="string">&#x27;zhangsan222&#x27;</span>;</span><br><span class="line">            resolve(name);</span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">await</span> test();</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br><span class="line">main();</span><br></pre></td></tr></table></figure></li></ul><h2 id="利用http模块，fs模块，url模块，path模块-创建一个静态web服务器"><a href="#利用http模块，fs模块，url模块，path模块-创建一个静态web服务器" class="headerlink" title="利用http模块，fs模块，url模块，path模块 创建一个静态web服务器"></a>利用http模块，fs模块，url模块，path模块 创建一个静态web服务器</h2><ol><li><p>http模块</p><ol><li><p>首先一个网页的基本请求和响应需要用到http模块</p></li><li><p>导入http模块 创建服务器</p></li><li><p>设置响应头</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res.writeHead(<span class="number">200</span>,&#123;</span><br><span class="line"><span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html;charset=&#x27;utf-8&#x27;&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line">注意设置状态码和文件类型</span><br></pre></td></tr></table></figure></li><li><p>注意写结束响应 和 端口</p></li></ol></li><li><p>fs模块</p><ol><li>作用是读取本地中的静态资源</li><li>一般用到fs.readFile</li><li>注意写err</li></ol></li><li><p>path模块</p><ol><li><p>作用是将地址中的后缀名给分离出来 (此时使用到path.extname())，传给getMime函数</p></li><li><p>getMime函数的作用是根据后缀名 返回相应的文件类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.getMime = (<span class="function">(<span class="params">extname</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (extname)&#123;</span><br><span class="line"><span class="attr">case</span>: <span class="string">&#x27;.html&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;text/html&#x27;</span>;</span><br><span class="line"><span class="keyword">case</span>: <span class="string">&#x27;.css&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;text/css&#x27;</span>;</span><br><span class="line"><span class="keyword">case</span>: ....</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>url模块</p><ol><li><p>通过url.parse()方法解析req.url里面的pathname</p></li><li><p>原因是使用json的时候 getMime无法将他返回相关的文件类型</p></li><li><p>使用json的时候 不需要地址栏后面的数字</p></li><li><p>所以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pathname = url.parse(req.url).pathname;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>command.js</p><ol><li><p>modules下面新建的js 暴露一个getFIleMime方法使其根据path模块的extname方法传来的后缀名 返回相应的文件类型</p></li><li><p>自定义 自定义比较有限</p></li><li><p>通过mime.json文件（该json文件内部写了很多的文件类型 以键值对的形式存在</p></li><li><p>那么就需要读取mime.json文件 需要用到fs模块中的readFile方法</p><ol><li>如果使用../data/mime.json’会找不到该json文件 原因是他是基于app.js的路径来读取的 所以应该使用./data/mime.json</li><li>其次 输出readFile里面的data值的时候 直接输出是一个buffer流十六进制 需要将其转换成String 此处使用到data.toString()</li><li>之后 我们的根本目的是通过json数组键值对 获取对应的文件类型 所以还要将得到的String字符串转换成json数组 此处使用到 JSON.parse(STRING)</li><li>接着 将json数组传递给Obj类型变量举例mimeObj 但此时如果直接打印mineObj.extname是无法识别的 因为变量属性名只能通过方括号的形式访问 此处用到 mimeObj[extname]</li><li>然后 因为fs.readFile是异步方法 不能直接获取到值 需要使用promise来封装 此处使用到return new Promise((resolve,reject)=&gt;{     异步函数      })，使用里面的参数resolve输出</li><li>最后 app.js中调用该方法的时候 注意在接收传递来的值之前使用await 并且记得await需要在异步函数中使用 即函数要加async</li></ol></li><li><p>或者使用fs模块里面的readFileSync方法 同步读取方法</p></li></ol></li></ol><h2 id="Ejs模板引擎"><a href="#Ejs模板引擎" class="headerlink" title="Ejs模板引擎"></a>Ejs模板引擎</h2><ul><li><p>ejs属于后台模板 可以将数据库和文件读取的数据显示到html页面上，他是一个第三方模块 需要用npm安装</p></li><li><p>npm install ejs –save</p></li><li><p>nodejs中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ejs.renderFile(<span class="string">&#x27;./views/login.ejs&#x27;</span>,&#123;</span><br><span class="line"><span class="attr">msg</span>:msg</span><br><span class="line">传入的数据</span><br><span class="line">&#125;,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">回调内容一般必写响应头和结束响应</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>ejs里面传参的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">假设需要传入msg给h3标签</span><br><span class="line">&lt;h3&gt;&lt;%=msg%&gt;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">假设需要用到for循环传输一个obj数组到li中</span><br><span class="line">&lt;%for(var i=0;i&lt;obj.length;i++)&#123;%&gt;</span><br><span class="line">&lt;li&gt;&lt;%=obj.属性%&gt;&lt;/li&gt;</span><br><span class="line">&lt;%&#125;%&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Get-Post-Put-Delete"><a href="#Get-Post-Put-Delete" class="headerlink" title="Get Post Put Delete"></a>Get Post Put Delete</h2><ul><li><p>获取get传值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line">vargetData = url.parse(req.url).query;</span><br></pre></td></tr></table></figure></li><li><p>获取post传值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> postData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">req.on(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">postData+=chunk;</span><br><span class="line">&#125;);</span><br><span class="line">req.on(<span class="string">&#x27;end&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">        postData = <span class="built_in">JSON</span>.parse(postData);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        req.query = postData;</span><br><span class="line">        <span class="built_in">console</span>.log(queryString.parse(postData));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>put主要用于修改数据 可以用postman软件模拟</p></li><li><p>delete主要用于删除数据</p></li></ul><h2 id="Express框架"><a href="#Express框架" class="headerlink" title="Express框架"></a>Express框架</h2><ul><li><p>简单来说就是一个路由框架 封装了很多路由方法</p></li><li><p>引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>实例化框架 然后通过app.get / app.post 配置路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">res.send(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">app.post(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">res.send(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>具体封装的方法 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4定义一个全局变量</span></span><br><span class="line"><span class="keyword">let</span> G = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;调用app方法&#x27;);</span></span><br><span class="line">    <span class="keyword">if</span> (G[<span class="string">&#x27;/login&#x27;</span>]) &#123;</span><br><span class="line">        <span class="comment">// console.log(&quot;1&quot;);</span></span><br><span class="line">        <span class="comment">// console.log(G[&#x27;./login&#x27;]);</span></span><br><span class="line">        G[<span class="string">&#x27;/login&#x27;</span>](req, res); <span class="comment">//6执行方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">1现在使用express的方法 并理解其原理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 3注册</span></span><br><span class="line">app.get = <span class="function"><span class="keyword">function</span> (<span class="params">str, cb</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//5注册方法 将回调函数传给str </span></span><br><span class="line">    G[str] = cb;</span><br><span class="line">    <span class="comment">// console.log(str);</span></span><br><span class="line">    <span class="comment">// console.log(cb);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.get(&quot;/login&quot;,(req,res)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     // res.send(&#x27;hello world&#x27;);</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;执行login方法&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line">app.get(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// res.send(&#x27;hello world&#x27;)</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;执行login方法&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2要想使用这个方法 需要给他绑定方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    app(<span class="string">&#x27;req&#x27;</span>, <span class="string">&#x27;res&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li><li><p>支持多级路由配置方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/admin/user/add&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>动态路由 可以获取下一级目录的名字 当匹配到改动态路由的时候，不会再往下继续匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&quot;./article/:id&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">var</span> id = req.param[<span class="string">&quot;id&quot;</span>];</span><br><span class="line">res.end(<span class="string">&quot;动态路由&quot;</span>+id);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>配置路由的时候还需要注意顺序的问题 以静态路由优先 随后配置动态</p></li></ul><h3 id="获取get传值"><a href="#获取get传值" class="headerlink" title="获取get传值"></a>获取get传值</h3><ul><li><p>以前是要通过url模块的url.parse(req,url).query来获取 很麻烦</p></li><li><p>现在可以直接使用req.query</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/product&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> query = req.query;</span><br><span class="line"><span class="built_in">console</span>.log(query);</span><br><span class="line">res.end(<span class="string">&quot;product&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="express中使用ejs"><a href="#express中使用ejs" class="headerlink" title="express中使用ejs"></a>express中使用ejs</h3><ul><li><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install ejs --save</span><br></pre></td></tr></table></figure></li><li><p>配置模板引擎</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.set(<span class="string">&quot;view engine&quot;</span>,<span class="string">&quot;ejs&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>express中已经集成了ejs 所以不用引入</p></li><li><p>默认在views文件夹下面，但也要自己新建一个</p></li><li><p>使用的时候</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.render(<span class="string">&quot;ejs名字&quot;</span>,&#123;传入的数据&#125;);</span><br><span class="line">ejs名字可以不用写后缀</span><br></pre></td></tr></table></figure></li><li><p> 绑定数据</p></li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%=shuju%&gt;</span><br></pre></td></tr></table></figure><ul><li><p>输出内容的时候解析其中的 html 标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-&lt;h3&gt;lebpig&lt;/h3&gt;%&gt;</span><br></pre></td></tr></table></figure></li><li><p>条件判断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%语句%&gt;</span><br></pre></td></tr></table></figure></li><li><p>在一个ejs里面引入其他ejs<img src="C:\Users\Zlinni\AppData\Roaming\Typora\typora-user-images\image-20211204160943445.png" alt="image-20211204160943445"></p></li><li><p>ejs后缀修改为html 略</p></li></ul><h3 id="利用express-static托管静态文件"><a href="#利用express-static托管静态文件" class="headerlink" title="利用express.static托管静态文件"></a>利用express.static托管静态文件</h3><ul><li><p>如果你的静态资源存放在多个目录下面 可以多次调用express.static 中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(<span class="string">&#x27;public&#x27;</span>));</span><br></pre></td></tr></table></figure></li><li><p>虚拟静态目录 略</p></li></ul><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>简介</p><ul><li>通俗的讲就是匹配路由之前或者匹配路由完成所做的一系列操作 中间件如果想向下匹配的化 需要些 next()</li></ul><p>express可以使用如下几种中间件</p><ul><li>应用级中间件</li><li>路由级中间件</li><li>错误处理中间件</li><li>内置中间件</li><li>第三方中间件、</li></ul><p>其中讲解部分</p><ul><li><p>内置中间件 之前学的托管静态文件↑</p></li><li><p>应用级别中间件 通常用于权限判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line"><span class="comment">//操作</span></span><br><span class="line">next(); <span class="comment">//表示完成匹配后这个中间件之后的程序继续向下执行 如果不写 会停止</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>错误处理中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">res.status(<span class="number">404</span>).send(<span class="string">&quot;404&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">当页面没有对应的路由的时候 跳转<span class="number">404</span></span><br></pre></td></tr></table></figure></li><li><p>第三方中间件 获取post传值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>安装body-parser</span><br><span class="line">cnpm install body-parser --save</span><br><span class="line"><span class="number">2.</span>配置</span><br><span class="line"><span class="keyword">const</span> bodyparser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">    <span class="attr">extended</span>: <span class="literal">false</span></span><br><span class="line">&#125;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line"><span class="number">3.</span>使用</span><br><span class="line">app.post(<span class="string">&#x27;/doLogin&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body = req.body;</span><br><span class="line">    res.writeHead(<span class="number">200</span>,&#123;</span><br><span class="line">        <span class="string">&quot;Content-type&quot;</span>:<span class="string">&quot;text/html;charset=utf-8&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    res.end(<span class="string">&#x27;执行提交&#x27;</span>+body.username);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><ul><li><p>安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install cookie-parser --save</span><br></pre></td></tr></table></figure></li><li><p>配置中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(cookieParser())</span><br></pre></td></tr></table></figure></li><li><p>设置cookie</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">res.cookie(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>,&#123;<span class="attr">maxAge</span>:<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>&#125;)</span><br><span class="line"><span class="comment">//代表获取了username张三 并且存放一小时</span></span><br><span class="line"><span class="comment">//maxAge是最大存放时间</span></span><br><span class="line">res.cookie(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>,&#123;<span class="attr">maxAge</span>:<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>,<span class="attr">path</span>:<span class="string">&quot;/article&quot;</span>&#125;)</span><br><span class="line"><span class="comment">//path代表只有xxx能获取cookie</span></span><br><span class="line">&#123;<span class="attr">domin</span>:<span class="string">&#x27;.itying.com&#x27;</span>&#125;</span><br><span class="line"><span class="comment">//domin可以实现多域共享cookie</span></span><br></pre></td></tr></table></figure></li><li><p>cookie的加密</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置中间件的时候传入加密的参数</span></span><br><span class="line">app.use(cookieParser(<span class="string">&quot;suibianxie&quot;</span>));</span><br><span class="line"><span class="comment">//写他的属性</span></span><br><span class="line">res.cookie(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>,&#123;<span class="attr">maxAge</span>:<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>,<span class="attr">signed</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"><span class="comment">//需要得到他的时候 写</span></span><br><span class="line">req.signedCookies</span><br></pre></td></tr></table></figure></li></ul><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>简介</p><ul><li>session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而session保存在服务器上</li><li>session相比cookie要更加安全，由于session保存到服务器上，所以当访问量增多的时候，会比较占用服务器的性能。单个cookie保存的数据大小不能超过4k，很多浏览器限制一个站点最多保存20个cookie。而session没有这方面的限制。session是基于cookie进行工作的。</li></ul><p>session的工作流程</p><ul><li>当浏览器访问服务器并发送第一次请求的时候，服务器会创建一个session对象，生成类似于key value的键值对，然后将key（cookie）返回到浏览器中，浏览器下次再访问时候，携带key（cookie）找到对应的session</li></ul><p>express-session的使用</p><ul><li><p>安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install express-session --save</span><br></pre></td></tr></table></figure></li><li><p>引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>设置官方文档提供的中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.use(session(&#123;</span><br><span class="line"><span class="attr">secret</span>:<span class="string">&#x27;keyboard cat&#x27;</span>, <span class="comment">//服务器端生成session的签名</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;xxx&#x27;</span>, <span class="comment">//修改session对应cookie的名称</span></span><br><span class="line"><span class="attr">resave</span>: <span class="literal">true</span>, <span class="comment">//强制存储session 即使它没有变化 默认是false</span></span><br><span class="line"><span class="attr">saveUninitialized</span>: <span class="literal">true</span>, <span class="comment">//强制将未初始化的session存储</span></span><br><span class="line">    <span class="attr">cookie</span>:&#123;</span><br><span class="line">        <span class="attr">maxAge</span>: <span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span> <span class="comment">//true表示只有https协议才能访问cookie  </span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rolling</span>:<span class="literal">true</span> <span class="comment">//在每次请求时强制设置cookie 将重置cookie过期时间，默认false</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置值 req.session.username = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line">获取值 req.session.username;</span><br></pre></td></tr></table></figure></li></ul><h4 id="负载均衡配置"><a href="#负载均衡配置" class="headerlink" title="负载均衡配置"></a>负载均衡配置</h4><ul><li>分布式架构中session保存到数据库的流程<img src="C:\Users\Zlinni\AppData\Roaming\Typora\typora-user-images\image-20211205160754719.png" alt="image-20211205160754719"></li></ul><p>如何使用</p><ul><li><p>安装express-session 和 connect-mongo模块</p></li><li><p>引入模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> MongoStore = <span class="built_in">require</span>(<span class="string">&#x27;connect-mongo&#x27;</span>)(session);</span><br></pre></td></tr></table></figure></li><li><p>配置中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app.use(session(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;xxx&#x27;</span>, <span class="comment">//修改session对应cookie的名称</span></span><br><span class="line"><span class="attr">resave</span>: <span class="literal">true</span>, <span class="comment">//强制存储session 即使它没有变化 默认是false</span></span><br><span class="line"><span class="attr">saveUninitialized</span>: <span class="literal">true</span>, <span class="comment">//强制将未初始化的session存储</span></span><br><span class="line">    <span class="attr">cookie</span>:&#123;</span><br><span class="line">        <span class="attr">maxAge</span>: <span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span> <span class="comment">//true表示只有https协议才能访问cookie  </span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rolling</span>:<span class="literal">true</span> <span class="comment">//在每次请求时强制设置cookie 将重置cookie过期时间，默认false</span></span><br><span class="line">    <span class="attr">store</span>: <span class="keyword">new</span> MongoStore(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;mongodb://127.0.0.1:27017/xxx&#x27;</span> <span class="comment">//xx代表地址 可以直接用cmd输入mongo找到mongodb对应的地址</span></span><br><span class="line">    <span class="attr">touchAfter</span>: <span class="number">24</span>*<span class="number">3600</span> <span class="comment">//不管发出了多少次请求 24h内只更新一次session 除非你改变session</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></li></ul><h3 id="路由模块化"><a href="#路由模块化" class="headerlink" title="路由模块化"></a>路由模块化</h3><p>简介 </p><ul><li>express中允许我们通过express.Router创建模块化的 可挂载的路由处理程序</li></ul><h3 id="应用程序生成器"><a href="#应用程序生成器" class="headerlink" title="应用程序生成器"></a>应用程序生成器</h3><p>简介</p><ul><li>通过应用程序生成器可以快速创建一个应用的股价</li></ul><p>指令</p><ul><li><p>如下</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g express-generator</span><br></pre></td></tr></table></figure></li><li><p>验证安装成功</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express -h</span><br></pre></td></tr></table></figure></li><li><p>生成方法</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express --view=ejs 目录</span><br></pre></td></tr></table></figure></li></ul><h3 id="图片上传Multer"><a href="#图片上传Multer" class="headerlink" title="图片上传Multer"></a>图片上传Multer</h3><p>简介</p><ul><li>是nodejs一个中间件，用于处理multpart/form-data类型的表单数据，主要用于上传文件</li><li>注意它不会处理除了上述数据类型的数据</li><li>一般上传图片识别不了 所以需要用到它</li></ul><p>安装</p><ul><li><p>指令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save multer</span><br></pre></td></tr></table></figure></li><li><p>引入模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> upload = multer(&#123;<span class="attr">dest</span>:<span class="string">&#x27;static/upload&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">//上传目录 一定要存在</span></span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">&quot;/doAdd&quot;</span>,upload.single(<span class="string">&quot;pic&quot;</span>),<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line"> xxx</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//此处pic是对应的表单的name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//并且form表单要设置类型</span></span><br><span class="line">&lt;form enctype=<span class="string">&#x27;multpart/form-data&#x27;</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="MongoDb数据库"><a href="#MongoDb数据库" class="headerlink" title="MongoDb数据库"></a>MongoDb数据库</h2><h3 id="NoSql介绍"><a href="#NoSql介绍" class="headerlink" title="NoSql介绍"></a>NoSql介绍</h3><ul><li><p>是not only sql的意思 指的是非关系型数据库 是以key-value形式存储的数据库 键值对</p></li><li><p>解决大数据查询问题</p></li><li><p>和传统数据库的简单对比</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">非结构型数据库 没有行列的概念 用json来存储数据，集合相当于“表” 文档相当于“行”</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>图例<img src="C:\Users\Zlinni\AppData\Roaming\Typora\typora-user-images\image-20211203141522995.png" alt="image-20211203141522995"></p></li></ul><h3 id="MongoDb介绍"><a href="#MongoDb介绍" class="headerlink" title="MongoDb介绍"></a>MongoDb介绍</h3><ul><li>是介于关系型数据库和非关系型数据库之间的产品 他 的查询语言非常强大，几乎可以实现类似于关系型数据库表单查询的大多数功能</li><li>特点是高性能 易部署 易使用 存储非常方便</li><li>安装略</li><li>注意配置环境变量</li><li>cmd输入mongo可以开启</li></ul><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><ul><li><p>创建数据库 已经创建则切换到这个数据库，如果想要创建成功需要插入一条数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use xxx</span><br><span class="line">db.user.insert(&#123;&quot;name&quot;:&quot;leb&quot;&#125;);</span><br></pre></td></tr></table></figure></li><li><p>查看数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure></li><li><p>插入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.insert(&#123;&quot;name&quot;:&quot;leb&quot;&#125;);</span><br></pre></td></tr></table></figure></li><li><p>删除集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.drop();</span><br></pre></td></tr></table></figure></li><li><p>删除数据库 需切换到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropDatabase();</span><br></pre></td></tr></table></figure></li><li><p>查找数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find();</span><br></pre></td></tr></table></figure></li><li><p>查找去掉当前聚集集合中的某列的重复数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.distinct(&quot;xxx&quot;);</span><br></pre></td></tr></table></figure></li><li><p>查询age =22 的记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;age:22&#125;);</span><br></pre></td></tr></table></figure></li><li><p>大于22 小于22 大于等于 小于等于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;age:&#123;$gt:22&#125;&#125;);</span><br><span class="line">db.user.find(&#123;age:&#123;$lt:22&#125;&#125;);</span><br><span class="line">db.user.find(&#123;age:&#123;$gte:22&#125;&#125;);</span><br><span class="line">db.user.find(&#123;age:&#123;$lte:22&#125;&#125;);</span><br></pre></td></tr></table></figure></li><li><p>大于22小于26</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;age:&#123;$gt:22,$lt:26&#125;&#125;);</span><br></pre></td></tr></table></figure></li><li><p>查询name中包含mongo的数据 模糊查询用于搜索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;name:/mongo/&#125;);</span><br></pre></td></tr></table></figure></li><li><p>查询指定列name age数据,age&gt;25</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;age:&#123;$gt:25&#125;&#125;,&#123;name:1,age:1&#125;)</span><br><span class="line">相当于</span><br><span class="line">select name,age from user where age&gt;25</span><br></pre></td></tr></table></figure></li><li><p>按照年龄升序 降序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">升序</span><br><span class="line">db.user.find().sort(&#123;age:1&#125;);</span><br><span class="line">降序</span><br><span class="line">db.user.find().sort(&#123;age:-1&#125;);</span><br></pre></td></tr></table></figure></li><li><p>查询前五条数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find().limit(5);</span><br></pre></td></tr></table></figure></li><li><p>查询十条以后的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find().skip(10);</span><br></pre></td></tr></table></figure></li><li><p>修改数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.student.update(&#123;&quot;name&quot;:&quot;小明&quot; &#125;)</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.collectionsNames.remove(&#123;&quot;borough&quot;:&quot;xxzxc&quot;&#125;)</span><br><span class="line">db.users.remove(&#123;age:132&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="索引基础"><a href="#索引基础" class="headerlink" title="索引基础"></a>索引基础</h4><ul><li><p>创建索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.ensureIndex(&#123;&quot;username&quot;:1&#125;)</span><br></pre></td></tr></table></figure></li><li><p>获取当前集合的索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.getIndexes()</span><br></pre></td></tr></table></figure></li><li><p>删除索引的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.dropIndex(&#123;&quot;username&quot;:1&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Nodejs操作Mongodb"><a href="#Nodejs操作Mongodb" class="headerlink" title="Nodejs操作Mongodb"></a>Nodejs操作Mongodb</h2><ul><li><p>安装指令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongodb --save</span><br></pre></td></tr></table></figure></li><li><p>连接数据库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入mongodb</span></span><br><span class="line"><span class="keyword">const</span> &#123;MongoClient&#125; = <span class="built_in">require</span>(<span class="string">&#x27;mongodb&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数据库连接地址</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;mongodb://127.0.0.1:27017&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义要操作的数据库</span></span><br><span class="line"><span class="keyword">const</span> dbName = <span class="string">&#x27;itying&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化MongoClient 传入数据库连接地址</span></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> MongoClient(url,&#123;<span class="attr">useUnifiedTopology</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line">client.connect(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;sjk connect successful&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> db = client.db(dbName);<span class="comment">//切换到这个数据库</span></span><br><span class="line">        client.close();<span class="comment">//关闭数据库</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p> 查找数据</p></li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.collection(<span class="string">&quot;user&quot;</span>).find(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;leb&quot;</span>&#125;).toArray(<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">            client.close();<span class="comment">//关闭数据库</span></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><ul><li><p>增加数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.collection(<span class="string">&quot;user&quot;</span>).insertOne(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zzl&quot;</span>&#125;,<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;add successful&#x27;</span>)</span><br><span class="line">                <span class="built_in">console</span>.log(result);</span><br><span class="line">                client.close();<span class="comment">//关闭数据库</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></li><li><p>修改数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.collection(<span class="string">&quot;user&quot;</span>).updateOne(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;leb&quot;</span>&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;lebpig&quot;</span>&#125;&#125;,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;modify successful&#x27;</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(data);</span><br><span class="line">                client.close();<span class="comment">//关闭数据库</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.collection(<span class="string">&quot;user&quot;</span>).deleteOne(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zzl&quot;</span>&#125;,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">           <span class="keyword">if</span>(err)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&#x27;delete successful&#x27;</span>);</span><br><span class="line">               <span class="built_in">console</span>.log(data);</span><br><span class="line">               client.close();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> nodejs </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax(未完结)</title>
      <link href="/2021/11/30/Ajax/"/>
      <url>/2021/11/30/Ajax/</url>
      
        <content type="html"><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title=" Ajax"></a><div align="center"> Ajax</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>ajax全称asynchronous JavaScript and XML 异步的JavaScript和xml</li><li>是一种无需在加载整个网页的情况下能够更新部分网页的技术</li><li>ajax不是一种新的编程语言 而是一种用于创建更好更快以及交互性更强的web应用程序的技术</li><li>eg 当你在谷歌的搜索框输入关键字的时候 js会把这些字符串发送到服务器然后服务器会返回一个搜索建议的列表 like国内百度</li><li>核心：ajax的核心是XMLHttpRequest对象，XHR为服务器发送请求和解析服务器响应提供了接口，能够用异步的方式从服务器获取新的数据</li><li>通过jquery ajax方法 可以使用httpget和httppost从远程服务器上面请求文本 html xml 或者json 同时还能将这些外部数据直接载入网页的被选元素中 </li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Echarts</title>
      <link href="/2021/11/30/Echarts/"/>
      <url>/2021/11/30/Echarts/</url>
      
        <content type="html"><![CDATA[<h1 id="Echarts"><a href="#Echarts" class="headerlink" title=" Echarts"></a><div align="center"> Echarts</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><p>是基于js实现的开源可视化库，可以定制多种多样的个性化图表</p></li><li><p>官网地址</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://echarts.apache.org/zh/index.html</span><br></pre></td></tr></table></figure></li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ul><li>使用五部曲<img src="image-20211121093831494.png" alt="image-20211121093831494"></li><li>官网下载可以直接点击github下载 找到echarts.min.js点击之后右上方row点击进行copy</li><li>导入js</li><li>初始化一个dom容器 使其具备类名或者id并设置宽高</li><li>找到相应的案例 复制其中的option 并声明他</li><li>将option分配给echarts实例对象</li></ul><h2 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h2><ul><li>见官方文档</li></ul><h2 id="适配方案分析"><a href="#适配方案分析" class="headerlink" title="适配方案分析"></a>适配方案分析</h2><ul><li><p>总方案一图流<img src="image-20211121094229851.png" alt="image-20211121094229851"></p></li><li><p>为了实现浏览器内容自适应 首先使用flexible.js进行浏览器宽度的检测并修改其中的html文字大小</p></li><li><p>再配合cssrem插件 页面元素会根据rem适配大小</p></li><li><p>最后 再使用flex布局 将页面进行快速布局</p></li></ul><h2 id="flexible-js和cssrem插件"><a href="#flexible-js和cssrem插件" class="headerlink" title="flexible.js和cssrem插件"></a>flexible.js和cssrem插件</h2><ul><li><p>首先要确定屏幕需要用flexible分成多少份，份数越多越精细</p></li><li><p>其次要看pc端给的效果图宽度是多少</p></li><li><p>举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">假如要用flexiblejs把屏幕分成<span class="number">24</span>份</span><br><span class="line">其中pc端效果图是1920px</span><br><span class="line">那么cssrem插件的基准值就要设置为<span class="number">1920</span>/<span class="number">24</span>=80px</span><br><span class="line">且记得重启vscode使其生效</span><br></pre></td></tr></table></figure></li><li><p>并且 如果对最大最小宽度有所要求 那么设置可以参考如下<img src="image-20211121102128005.png" alt="image-20211121102128005"></p></li></ul><h2 id="边框图片"><a href="#边框图片" class="headerlink" title="边框图片"></a>边框图片</h2><ul><li><p>边框图片运用在特殊的使用场景 盒子样式不同但边框相同</p></li><li><p>边框图片的切图原理：把四个角切出去（九宫格）的由来，中间部分可以铺排拉伸或者环绕<img src="image-20211121144014486.png" alt="image-20211121144014486"></p></li><li><p>边框图片的几个语法<img src="image-20211121144125322.png" alt="image-20211121144125322"></p></li><li><p>边框图片的几个效果<img src="image-20211121144206836.png" alt="image-20211121144206836"></p></li><li><p>边框图片实操举例</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">现在有已经得到切割完数值的上右下左分别为<span class="number">51</span> <span class="number">38</span> <span class="number">20</span> <span class="number">132</span>的边框图片</span><br><span class="line">第一步定义<span class="attribute">border</span>大小</span><br><span class="line"><span class="attribute">border</span>:<span class="number">15px</span> solid red</span><br><span class="line">第二部书写边框宽度 注意是边框宽度而不是边框图片宽度</span><br><span class="line">border-width: <span class="number">51px</span> <span class="number">38px</span> <span class="number">20px</span> <span class="number">132px</span></span><br><span class="line">第三步指定边框图片</span><br><span class="line">border-image-source:<span class="built_in">url</span>(<span class="string">&#x27;imagesrc&#x27;</span>)</span><br><span class="line">第四步切割边框图片 注意不带单位</span><br><span class="line">border-image-slice:<span class="number">51</span> <span class="number">38</span> <span class="number">20</span> <span class="number">132</span></span><br></pre></td></tr></table></figure></li><li><p>由于边框图片已经裁剪的原因 内容盒子出现的位置会在九宫格中心黄色部分<img src="image-20211121153829064.png" alt="image-20211121153829064"></p></li><li><p>解决办法 将子盒子进行定位，调整四个方向的值拉伸盒子</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.panel</span> &#123; </span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">15px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-image-source</span>: url(<span class="string">&#x27;../images/border.png&#x27;</span>);</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">0.6375rem</span> <span class="number">0.475rem</span> <span class="number">0.25rem</span> <span class="number">1.65rem</span>;</span><br><span class="line">    <span class="attribute">border-image-slice</span>: <span class="number">51</span> <span class="number">38</span> <span class="number">20</span> <span class="number">132</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0.25rem</span>;</span><br><span class="line">    <span class="selector-class">.inner</span>&#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: -<span class="number">0.6375rem</span>;</span><br><span class="line">        <span class="attribute">left</span>: -<span class="number">1.65rem</span>;</span><br><span class="line">        <span class="attribute">right</span>: -<span class="number">0.475rem</span>;</span><br><span class="line">        <span class="attribute">bottom</span>: -<span class="number">0.25rem</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0.3rem</span> <span class="number">0.45rem</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery</title>
      <link href="/2021/11/30/Jquery/"/>
      <url>/2021/11/30/Jquery/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery"><a href="#jQuery" class="headerlink" title=" jQuery"></a><div align="center"> jQuery</h1><h2 id="jQuery概述"><a href="#jQuery概述" class="headerlink" title="jQuery概述"></a>jQuery概述</h2><ul><li>jQuery是一个js库，封装了很多方法和函数</li><li>j是JavaScript；Query是查询，意思是查询js，把js中的dom做封装可以快速使用里面的功能</li></ul><h2 id="jQuery的基本使用"><a href="#jQuery的基本使用" class="headerlink" title="jQuery的基本使用"></a>jQuery的基本使用</h2><h3 id="jQuery的入口函数"><a href="#jQuery的入口函数" class="headerlink" title="jQuery的入口函数"></a>jQuery的入口函数</h3><ul><li><p>基本语法$(‘xxx’).xxx</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).hide();</span><br></pre></td></tr></table></figure></li><li><p>页面执行代码的顺序DOM→js，两种方法解决</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">会等待页面DOM加载完之后在执行js</span><br><span class="line">第一种</span><br><span class="line">$(<span class="built_in">document</span>).reday(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    xxx;</span><br><span class="line">&#125;) </span><br><span class="line">第二种</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  xxx;   </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="jQuery的顶级对象"><a href="#jQuery的顶级对象" class="headerlink" title="jQuery的顶级对象"></a>jQuery的顶级对象</h3><ul><li>$是jQuery的顶级对象</li><li>可以代表jQuery 简而言之写的时候两者可以互换</li></ul><h3 id="jQuery对象和DOM对象"><a href="#jQuery对象和DOM对象" class="headerlink" title="jQuery对象和DOM对象"></a>jQuery对象和DOM对象</h3><ul><li><p>用原生js获取过来的对象叫做dom对象，dom对象只能使用原生的js方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsduixiang = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>用jQuery方法获取过来的对象是jQuery对象，本质是通过$把dom元素进行了包装，且也只能使用jQuery方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>dom对象转换成jQuery对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">直接调用</span><br><span class="line">$(dom对象)</span><br><span class="line">$(<span class="string">&#x27;video&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>jQuery对象转换成dom对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">方法<span class="number">1</span> $(xxx)[index]</span><br><span class="line">原因是他是伪数组</span><br><span class="line">$(<span class="string">&#x27;video&#x27;</span>)[<span class="number">0</span>].play()</span><br><span class="line">方法<span class="number">2</span> $(xxx).get(<span class="number">0</span>).play()</span><br></pre></td></tr></table></figure></li></ul><h2 id="jQuery-常用API"><a href="#jQuery-常用API" class="headerlink" title="jQuery 常用API"></a>jQuery 常用API</h2><h3 id="jQuery基础选择器"><a href="#jQuery基础选择器" class="headerlink" title="jQuery基础选择器"></a>jQuery基础选择器</h3><ul><li><p>获取标准 $(‘选择器’) 里面选择器直接写css选择器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">id选择器 $(<span class="string">&quot;#id&quot;</span>)</span><br><span class="line">全选择器 $(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">类选择器 $(<span class="string">&quot;.class&quot;</span>)</span><br><span class="line">标签选择器 $(<span class="string">&quot;div&quot;</span>)</span><br><span class="line">并集选择器 $(<span class="string">&quot;div,p,li&quot;</span>)</span><br><span class="line">交集选择器 $(<span class="string">&quot;li.current&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="jQuery层级选择器"><a href="#jQuery层级选择器" class="headerlink" title="jQuery层级选择器"></a>jQuery层级选择器</h3><ul><li><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">子代选择器 $(<span class="string">&quot;ul&gt;li&quot;</span>)</span><br><span class="line">后代选择器 $(<span class="string">&quot;ul li&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="jQuery设置样式"><a href="#jQuery设置样式" class="headerlink" title="jQuery设置样式"></a>jQuery设置样式</h3><ul><li><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).css(<span class="string">&#x27;属性&#x27;</span>,<span class="string">&#x27;值&#x27;</span>)</span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="隐式迭代"><a href="#隐式迭代" class="headerlink" title="隐式迭代"></a>隐式迭代</h3><ul><li>遍历内部的DOM元素的过程叫做隐式迭代</li></ul><h3 id="jQuery筛选选择器"><a href="#jQuery筛选选择器" class="headerlink" title="jQuery筛选选择器"></a>jQuery筛选选择器</h3><ul><li><p>例子</p><table><thead><tr><th>语法</th><th>用法</th><th>描述</th></tr></thead><tbody><tr><td>:first</td><td>$(‘li:first’)</td><td>获取第一个li元素</td></tr><tr><td>:last</td><td>$(‘li:last’)</td><td>获取最后一个li元素</td></tr><tr><td>:eq(index)</td><td>$(‘li:eq(2)’)</td><td>获取到的li元素中选择引号为2的元素，索引从0开始</td></tr><tr><td>:odd</td><td>$(‘li:odd’)</td><td>获取到索引号为奇数的元素</td></tr><tr><td>:even</td><td>$(‘li:even’)</td><td>获取到索引号为偶数的元素</td></tr></tbody></table></li><li><p>注意 其中的：first是获取第一个xx元素 而不是yy元素下面第一个xx元素</p></li></ul><h3 id="jQuery筛选方法"><a href="#jQuery筛选方法" class="headerlink" title="jQuery筛选方法"></a>jQuery筛选方法</h3><ul><li><p>例子</p><table><thead><tr><th>语法</th><th>用法</th><th>说明</th></tr></thead><tbody><tr><td>parent()</td><td>$(“li”).parent()</td><td>查找父级</td></tr><tr><td>children(selector)</td><td>$(“ul”).children(“li”)</td><td>相当于$(“ul&gt;li”)最近一级亲儿子</td></tr><tr><td>find(selector)</td><td>$(“ul”).find(“li”)</td><td>相当于$(“ul li”) 后代选择器</td></tr><tr><td>siblings(selector)</td><td>$(“.first”).siblings(“li”)</td><td>查找兄弟节点不包括自己本身</td></tr><tr><td>nextAll([expr])</td><td>$(“.first”).nextAll()</td><td>查找当前元素之后的所有同辈元素</td></tr><tr><td>prevAll([expr])</td><td>$(“.last”).prevAll()</td><td>查找当前元素之前的所有同辈元素</td></tr><tr><td>hasClass(class)</td><td>$(“div”).hasClass(“protected”)</td><td>检查当前元素是否有某个特定的类名 如果有则返回true</td></tr><tr><td>eq(index)</td><td>$(“li”).eq(2)</td><td>相当于$(“li:eq(2)”) index从0开始</td></tr></tbody></table></li></ul><h3 id="jQuery排他思想"><a href="#jQuery排他思想" class="headerlink" title="jQuery排他思想"></a>jQuery排他思想</h3><ul><li>通过隐式迭代的方式省去循环遍历以及循环绑定事件</li><li>例子<img src = image-20211112170315535.png></li><li>案例淘宝服饰精品 点击哪个 哪个显示 其余的不显示<img src = image-20211112200614264.png></li><li>代码<img src = image-20211112200649688.png></li></ul><h3 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h3><ul><li><p>为了方便写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现功能：点击其中一个按钮，点中的按钮变色，其他不变</span></span><br><span class="line">      <span class="comment">// 隐式迭代</span></span><br><span class="line">      <span class="comment">// 新增链式编程 </span></span><br><span class="line">      $(<span class="string">&#x27;button&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;            $(<span class="built_in">this</span>).css(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>).siblings().css(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="jQuery修改css样式方法"><a href="#jQuery修改css样式方法" class="headerlink" title="jQuery修改css样式方法"></a>jQuery修改css样式方法</h3><ul><li><p>参数只写属性名字则返回属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>).css(<span class="string">&quot;color&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p>参数的值如果是数字可以不用加引号</p></li><li><p>参数可以是对象形式 采用中括号的方法 方便设置多组样式 使用的时候属性名和属性值要用引号隔开，且属性名可以不用加引号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">方式一</span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).css(&#123;<span class="attr">width</span>:<span class="number">100</span>,<span class="attr">height</span>:<span class="number">100</span>,<span class="attr">background</span>:<span class="string">&quot;pink&quot;</span>&#125;);</span><br><span class="line">方式二</span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).css(&#123;</span><br><span class="line"><span class="attr">width</span>:<span class="number">200</span>,</span><br><span class="line"><span class="attr">height</span>:<span class="number">500</span>,</span><br><span class="line"><span class="attr">backgroundColor</span>:<span class="string">&quot;blue&quot;</span></span><br><span class="line">注意如果是复合属性参考原生js采用驼峰命名法，而且此时的属性值记得双引号</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="设置类样式"><a href="#设置类样式" class="headerlink" title="设置类样式"></a>设置类样式</h3><ul><li><p>方法作用等同于以前的classList ，可以用来操作类样式，注意里面的参数不要加点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>添加类</span><br><span class="line">$(<span class="built_in">this</span>).addClass(<span class="string">&quot;current&quot;</span>)</span><br><span class="line"><span class="number">2.</span>移除类</span><br><span class="line">$(<span class="built_in">this</span>).removeClass(<span class="string">&quot;current&quot;</span>)</span><br><span class="line"><span class="number">3.</span>切换类</span><br><span class="line">$(<span class="built_in">this</span>).toggleClass(<span class="string">&quot;current&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>add和remove都是在原先的基础上追加/删除</p></li></ul><h3 id="动画方法"><a href="#动画方法" class="headerlink" title="动画方法"></a>动画方法</h3><ul><li><p>show() hide() toggle()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.点击缓慢显示</span></span><br><span class="line">       $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           $(<span class="string">&quot;div&quot;</span>).show(<span class="number">1000</span>);</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="comment">//2.点击缓慢隐藏</span></span><br><span class="line">       $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           $(<span class="string">&quot;div&quot;</span>).hide(<span class="number">1000</span>);</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="comment">//3.点击缓慢切换</span></span><br><span class="line">       $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           $(<span class="string">&quot;div&quot;</span>).toggle(<span class="number">1000</span>);</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure></li><li><p>slideUp() slideDown() slideToggle()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.上拉</span></span><br><span class="line">      $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">3</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          $(<span class="string">&quot;div&quot;</span>).slideUp(<span class="number">1000</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">//5.下拉</span></span><br><span class="line">      $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">4</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          $(<span class="string">&quot;div&quot;</span>).slideDown(<span class="number">1000</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">     <span class="comment">//  6.切换拉</span></span><br><span class="line">     $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">5</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          $(<span class="string">&quot;div&quot;</span>).slideToggle(<span class="number">1000</span>);</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure></li><li><p>mouseover鼠标经过 mouseout鼠标离开</p></li><li><p>事件切换hover(function(){},function(){}) 两个function相当于mouseover和mouseout，如果只写一个函数则鼠标经过和离开都会触发这个函数</p></li><li><p>淡入淡出效果fadeIn fadeOut fadeToggle </p></li><li><p>变化到透明度fadeTo 注意写透明度 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              $(<span class="string">&quot;div&quot;</span>).fadeIn(<span class="number">1000</span>);</span><br><span class="line">          &#125;)</span><br><span class="line">          $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              $(<span class="string">&quot;div&quot;</span>).fadeOut(<span class="number">1000</span>);</span><br><span class="line">          &#125;)</span><br><span class="line">          $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              $(<span class="string">&quot;div&quot;</span>).fadeToggle(<span class="number">1000</span>);</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure></li><li><p>高亮显示案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> <span class="title">gaoliang</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;.container div&quot;</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            $(<span class="built_in">this</span>).siblings().stop().fadeTo(<span class="number">1000</span>,<span class="number">0.5</span>);</span><br><span class="line">        &#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            $(<span class="built_in">this</span>).siblings().stop().fadeTo(<span class="number">1000</span>,<span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="动画停止"><a href="#动画停止" class="headerlink" title="动画停止"></a>动画停止</h3><ul><li><p>动画效果一旦触发就会执行 但如果多次触发就会造成多个动画或者效果排队执行</p></li><li><p>停止排队的方法stop() 需要写在动画或者效果前面 这样的话相当于停止上一次动画 就不会造成资源上的浪费</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">this</span>).stop().slideToggle(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="animate使用"><a href="#animate使用" class="headerlink" title="animate使用"></a>animate使用</h3><ul><li><p>animate({属性名,属性值},时间)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       $(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           $(<span class="string">&quot;div&quot;</span>).animate(&#123;</span><br><span class="line">               <span class="attr">left</span>:<span class="number">500</span>,</span><br><span class="line">               <span class="attr">top</span>:<span class="number">500</span>,</span><br><span class="line">               <span class="attr">opacity</span>:<span class="number">.4</span></span><br><span class="line">           &#125;,<span class="number">500</span>)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="获取元素属性值"><a href="#获取元素属性值" class="headerlink" title="获取元素属性值"></a>获取元素属性值</h3><ul><li><p>获取元素固有属性prop()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取a的固有属性值</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;a&quot;</span>).prop(<span class="string">&quot;href&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p>给元素的固有属性赋值prop(“属性名”,”属性值”)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;a&quot;</span>).prop(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;bbb&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>获取元素的自定义属性attr()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>).attr(<span class="string">&quot;index&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p>给元素的自定义属性赋值(“属性名”,”属性值”)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).attr(<span class="string">&quot;index&quot;</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure></li><li><p>数据缓存data()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">假设有</span><br><span class="line">&lt;span&gt;<span class="number">111</span>&lt;/span&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-index</span>=<span class="string">&quot;1&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;span&quot;</span>).data(<span class="string">&quot;bianliang&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;span&quot;</span>).data(<span class="string">&quot;bianliang&quot;</span>));</span><br><span class="line">则打印出aaa</span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>).data(<span class="string">&quot;index&quot;</span>));</span><br><span class="line">则打印出<span class="number">1</span></span><br><span class="line"></span><br><span class="line">data()方法可以缓存数据 但dom里面不会显示出来</span><br><span class="line">data()方法可以直接读取h5的属性 并且参数不用写成data- 读出来的变量也是数字型</span><br></pre></td></tr></table></figure></li><li><p>案例全选按钮</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">点击全选按钮 其他三个按钮的状态随之变化</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;&quot;</span> id=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;selectAll&quot;</span>&gt;全选</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;&quot;</span> id=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;j-check&quot;</span>&gt;商品<span class="number">1</span></span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;&quot;</span> id=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;j-check&quot;</span>&gt;商品<span class="number">2</span></span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;&quot;</span> id=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;j-check&quot;</span> &gt;商品<span class="number">3</span></span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;&quot;</span> id=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;selectAll&quot;</span>&gt;全选</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    要想获取checked属性 必须伴随着按钮状态的变化</span><br><span class="line">$(<span class="string">&quot;.selectAll&quot;</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        利用并集选择器将其他的selectAll也给绑定上</span><br><span class="line">        $(<span class="string">&quot;j-checked, .selectAll&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>,$(<span class="built_in">this</span>).prop(<span class="string">&quot;checked&quot;</span>));</span><br><span class="line">    &#125;)</span><br><span class="line">    情况<span class="number">2</span> 如果此时除了全选框之外的复选框都被勾上，全选框也应该变化成为勾上</span><br><span class="line">    找出页面中所有选择框的数量</span><br><span class="line">    <span class="keyword">var</span> jchecknum = $(<span class="string">&quot;.j-check&quot;</span>).length;</span><br><span class="line">    $(<span class="string">&quot;.j-check&quot;</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>($(<span class="string">&quot;.j-check:checked&quot;</span>).length == jchecknum)&#123;</span><br><span class="line">             $(<span class="string">&quot;.selectAll&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             $(<span class="string">&quot;.selectAll&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改元素文本内容"><a href="#修改元素文本内容" class="headerlink" title="修改元素文本内容"></a>修改元素文本内容</h3><ul><li><p>获取设置元素内容html()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">获取设置元素内容html()</span><br><span class="line">     html()方法是直接修改里面的元素内容并且覆盖原先的</span><br><span class="line">     <span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>).html());</span><br><span class="line">     $(<span class="string">&quot;div&quot;</span>).html(<span class="string">&quot;leb猪啊&quot;</span>);</span><br><span class="line">     $(<span class="string">&quot;div&quot;</span>).html(<span class="string">&quot;&lt;span&gt;aaa&lt;/span&gt;&quot;</span>);</span><br><span class="line">     $(<span class="string">&quot;div&quot;</span>).html(<span class="string">&quot;&lt;span&gt;aaa&lt;/span&gt;&quot;</span>);</span><br><span class="line">     覆盖了 只会输出一个</span><br><span class="line">     </span><br><span class="line">     <span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>).html());</span><br></pre></td></tr></table></figure></li><li><p>获取设置元素文本内容text()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>).text());</span><br><span class="line">     $(<span class="string">&quot;div&quot;</span>).text(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">     $(<span class="string">&quot;div&quot;</span>).text(<span class="string">&quot;&lt;p&gt;aa&lt;/p&gt;&quot;</span>);<span class="comment">//无法添加标签 只能对文本进行改变</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p>获取设置表单值val()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;input&quot;</span>).val());</span><br><span class="line">      $(<span class="string">&quot;input&quot;</span>).val(<span class="string">&quot;leb dsb&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>案例增减商品数量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">       <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;jianhao&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">       <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;count&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;jiahao&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   &lt;div&gt;</span><br><span class="line">       &lt;button class=&quot;jianhao&quot;&gt;-&lt;/button&gt;</span><br><span class="line">       &lt;input type=&quot;text&quot; class=&quot;count&quot; value=&quot;1&quot;&gt;</span><br><span class="line">       &lt;button class=&quot;jiahao&quot;&gt;+&lt;/but&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       // 要点 只增加本商品的数量，就是点击加号之后兄弟文本框count的值</span><br><span class="line">       $(function()&#123;</span><br><span class="line">           $(&quot;.jiahao&quot;).click(function()&#123;</span><br><span class="line">               var countnum = $(this).siblings(&quot;.count&quot;).val();</span><br><span class="line">               console.log(countnum);</span><br><span class="line">               countnum++;</span><br><span class="line">               $(this).siblings(&quot;.count&quot;).val(countnum);</span><br><span class="line">           &#125;)</span><br><span class="line">           $(&quot;.jianhao&quot;).click(function()&#123;</span><br><span class="line">               var countnum = $(this).siblings(&quot;.count&quot;).val();</span><br><span class="line">               countnum--;</span><br><span class="line">               if(countnum&lt;1)&#123;</span><br><span class="line">                   countnum=1;</span><br><span class="line">               &#125;</span><br><span class="line">               $(this).siblings(&quot;.count&quot;).val(countnum);</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;)</span><br><span class="line">       </span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>案例修改商品小计</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;singalprice&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>单价:<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2.13<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;jianhao&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;count&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;jiahao&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;totalprice&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>总价:<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2.13<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;ul class=&quot;singalprice&quot;&gt;</span><br><span class="line">        &lt;li&gt;单价:&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;22.1&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;button class=&quot;jianhao&quot;&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; class=&quot;count&quot; value=&quot;1&quot;&gt;</span><br><span class="line">    &lt;button class=&quot;jiahao&quot;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;ul class=&quot;totalprice&quot;&gt;</span><br><span class="line">        &lt;li&gt;总价:&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;22.1&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">     </span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 要点 只增加本商品的数量，就是点击加号之后兄弟文本框count的值</span><br><span class="line">    $(function()&#123;</span><br><span class="line">        $(&quot;.jiahao&quot;).click(function()&#123;</span><br><span class="line">            var countnum = $(this).siblings(&quot;.count&quot;).val();</span><br><span class="line">            var sprice = $(this).siblings(&quot;.singalprice&quot;).find(&quot;li&quot;).eq(1).text();</span><br><span class="line">            countnum++;</span><br><span class="line">            sprice *= countnum;</span><br><span class="line">            console.log(sprice);</span><br><span class="line">            $(this).siblings(&quot;.count&quot;).val(countnum);</span><br><span class="line">            $(this).siblings(&quot;.totalprice&quot;).find(&quot;li&quot;).eq(1).text(sprice);</span><br><span class="line">  </span><br><span class="line">        &#125;)</span><br><span class="line">        $(&quot;.jianhao&quot;).click(function()&#123;</span><br><span class="line">            var countnum = $(this).siblings(&quot;.count&quot;).val();</span><br><span class="line">            var sprice = $(this).siblings(&quot;.singalprice&quot;).find(&quot;li&quot;).eq(1).text();</span><br><span class="line">            countnum--;</span><br><span class="line">            if(countnum&lt;1)&#123;</span><br><span class="line">                countnum=1;</span><br><span class="line">            &#125;</span><br><span class="line">            sprice *= countnum;</span><br><span class="line">            $(this).siblings(&quot;.count&quot;).val(countnum);</span><br><span class="line">            $(this).siblings(&quot;.totalprice&quot;).find(&quot;li&quot;).eq(1).text(sprice);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="祖先选择器"><a href="#祖先选择器" class="headerlink" title="祖先选择器"></a>祖先选择器</h3><ul><li><p>$(“xxx”).parents(“.zuxian”) 返回指定祖先</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;one&quot;</span>&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;three&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;four&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    </span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log($(<span class="string">&quot;.four&quot;</span>).parents(<span class="string">&quot;.one&quot;</span>));</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="保留小数"><a href="#保留小数" class="headerlink" title="保留小数"></a>保留小数</h3><ul><li><p>toFix(位数)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">33.336</span>.toFixed(<span class="number">2</span>);</span><br><span class="line">answer = <span class="number">33.34</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="遍历元素"><a href="#遍历元素" class="headerlink" title="遍历元素"></a>遍历元素</h3><ul><li><p>each(index,dom)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">var</span> arr = [<span class="string">&quot;red&quot;</span>,<span class="string">&quot;green&quot;</span>,<span class="string">&quot;blue&quot;</span>];</span><br><span class="line">           $(<span class="string">&quot;div&quot;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i,dom</span>)</span>&#123;</span><br><span class="line">               $(dom).css(<span class="string">&quot;color&quot;</span>,arr[i]);</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure></li><li><p>each()遍历数组，遍历对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  each遍历数组</span></span><br><span class="line">          $.each(arr,<span class="function"><span class="keyword">function</span>(<span class="params">i,ele</span>)</span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(i);</span><br><span class="line">              <span class="built_in">console</span>.log(ele);</span><br><span class="line">          &#125;)</span><br><span class="line">         <span class="comment">//  each遍历对象</span></span><br><span class="line">         $.each(&#123;</span><br><span class="line">             <span class="attr">name</span>:<span class="string">&quot;leb&quot;</span>,</span><br><span class="line">             <span class="attr">sex</span>:<span class="string">&quot;female&quot;</span>,</span><br><span class="line">             <span class="attr">hobbies</span>:<span class="string">&quot;balabababababa&quot;</span></span><br><span class="line">         &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">i,ele</span>)</span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(i+<span class="string">&quot;:&quot;</span>+ele);</span><br><span class="line">         &#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="添加和删除元素"><a href="#添加和删除元素" class="headerlink" title="添加和删除元素"></a>添加和删除元素</h3><ul><li><p>添加元素 两种方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">在节点内部添加</span><br><span class="line"><span class="keyword">var</span> li = $(&lt;li&gt;aa&lt;/li&gt;);</span><br><span class="line">在节点内部的前面添加</span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).prepend(li);</span><br><span class="line">在节点内部的后面添加</span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).append(li);</span><br><span class="line"></span><br><span class="line">在节点外部添加</span><br><span class="line"><span class="keyword">var</span> div = $(<span class="string">&quot;&lt;div&gt;我是div&lt;/div&gt;&quot;</span>);</span><br><span class="line">在节点外部的前面添加</span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).before(div);</span><br><span class="line">在节点外部的后面添加</span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).after(div);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>删除元素的三种方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">remove() 自杀法</span><br><span class="line">empty() 杀掉除了自己之外的</span><br><span class="line">html(<span class="string">&quot;&quot;</span>) 同上</span><br></pre></td></tr></table></figure></li></ul><h3 id="获取元素大小i"><a href="#获取元素大小i" class="headerlink" title="获取元素大小i"></a>获取元素大小i</h3><ul><li><p>width() 和 height()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以直接获取</span><br><span class="line">也可以在里面输入数字设置 不用带单位</span><br></pre></td></tr></table></figure></li><li><p>innerWidth() innerHeight() 获取除自身之外的padding</p></li><li><p>outerWidth() outerHeight() 获取除了自身之外的border</p></li><li><p>outerWidth(true) outerHeight(true) 获取除自身之外的 padding margin border</p></li><li><p>参数为空返回数字型 参数为数字修改相应值</p></li></ul><h3 id="元素位置"><a href="#元素位置" class="headerlink" title="元素位置"></a>元素位置</h3><ul><li><p>offset() 获取设置距离文档的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;.son&quot;</span>).offset());</span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;.son&quot;</span>).offset().top);</span><br></pre></td></tr></table></figure></li><li><p>设置偏移量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.son&quot;</span>).offset(&#123;</span><br><span class="line">          <span class="attr">top</span>:<span class="number">200</span>,</span><br><span class="line">          <span class="attr">left</span>:<span class="number">200</span></span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure></li><li><p>获取距离带有定位父级位置的偏移 position 如果没有定位则以文档为准，且该方法只能获取 不能改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;.son&quot;</span>).position());</span><br></pre></td></tr></table></figure></li></ul><h3 id="被卷去的头部"><a href="#被卷去的头部" class="headerlink" title="被卷去的头部"></a>被卷去的头部</h3><ul><li><p>页面滚动事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>被卷去的头部与被卷去的左侧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scrollTop();</span><br><span class="line">scrollLeft();</span><br><span class="line">可以直接设置数字 那么在页面打开的时候就会直接滑动到指定的位置</span><br></pre></td></tr></table></figure></li><li><p>设置一个小功能 当页面移动到某个位置时候显示返回顶部的盒子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">var</span> boxTop = $(<span class="string">&quot;.container&quot;</span>).offset().top;</span><br><span class="line">           $(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log($(<span class="built_in">document</span>).scrollTop());</span><br><span class="line">               <span class="keyword">if</span>($(<span class="built_in">document</span>).scrollTop()&gt;=boxTop)&#123;</span><br><span class="line">                   <span class="comment">//此时container已经在最顶部</span></span><br><span class="line">                   $(<span class="string">&quot;.back&quot;</span>).fadeIn();</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   $(<span class="string">&quot;.back&quot;</span>).fadeOut();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;) </span><br></pre></td></tr></table></figure></li><li><p>注意 window是整个滚动事件的对象 而scrollTop的对象是document</p></li><li><p>再做个点击返回顶部的功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.back&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="comment">// $(document).scrollTop(0);</span></span><br><span class="line">               <span class="comment">//这样可以实现回到顶部的功能但是没有动画效果</span></span><br></pre></td></tr></table></figure></li><li><p>于是想到使用animate做动画 但animate是针对==元素==进行操作的方法，所以对象不是document而是body和html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;body,html&quot;</span>).stop().animate(&#123;</span><br><span class="line">                  <span class="attr">scrollTop</span>:<span class="number">0</span></span><br><span class="line">              &#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="on绑定事件"><a href="#on绑定事件" class="headerlink" title="on绑定事件"></a>on绑定事件</h3><ul><li><p>利用on绑定多个事件 其输入格式为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.example&quot;</span>).on(&#123;</span><br><span class="line">    <span class="attr">mouseenter</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; $(<span class="built_in">this</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>相反的触发方式执行同一函数的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.example&quot;</span>).on(<span class="string">&quot;mouseenter mouseleave&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">xxx</span><br><span class="line">&#125;)</span><br><span class="line">注意两个事件之间加空格</span><br></pre></td></tr></table></figure></li></ul><h3 id="on事件委派"><a href="#on事件委派" class="headerlink" title="on事件委派"></a>on事件委派</h3><ul><li><p>on还可以实现事件委派：给父元素绑定一个事件，在操作其某个子元素时生效 且this指代的是委托的子元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法格式是$(<span class="string">&quot;父元素&quot;</span>).on(<span class="string">&quot;事件类型&quot;</span>,<span class="string">&quot;子元素&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">xxx;</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="string">&quot;li&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                alert(<span class="number">111</span>);</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure></li><li><p>与此同时 on委派的事件还可以对动态生成的元素进行操作</p></li></ul><h3 id="off解绑事件"><a href="#off解绑事件" class="headerlink" title="off解绑事件"></a>off解绑事件</h3><ul><li><p>解除某个元素上面的触发事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;元素&quot;</span>).off(<span class="string">&quot;click&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>解除事件委托</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="string">&quot;li&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).off(<span class="string">&quot;click&quot;</span>,<span class="string">&quot;li&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="one只触发一次事件"><a href="#one只触发一次事件" class="headerlink" title="one只触发一次事件"></a>one只触发一次事件</h3><ul><li><p>和on差不多 但只触发一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;li&quot;</span>).one(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">&quot;xxxxxxx&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="自动触发事件trigger"><a href="#自动触发事件trigger" class="headerlink" title="自动触发事件trigger"></a>自动触发事件trigger</h3><ul><li><p>自动触发事件的前提是事件有绑定</p></li><li><p>方式一 元素.事件 会触发元素的默认行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).click()</span><br></pre></td></tr></table></figure></li><li><p>方式二 元素.trigger(“触发事件”) 会触发元素的默认行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).trigger(<span class="string">&quot;click&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>方式三 元素.triggerHandler(“触发事件”) 不会触发元素的默认行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).triggerHandler(<span class="string">&quot;click&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><ul><li><p>事件触发就会有事件对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(event);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>阻止事件冒泡 stopPropagation()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    cl(<span class="string">&quot;点击了xxx&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    cl(<span class="string">&quot;点击了div&quot;</span>);</span><br><span class="line">    event.stopPropagation();</span><br><span class="line">&#125;)</span><br><span class="line">此时只会cl “点击了div”</span><br><span class="line">而不会cl 点击了xxx</span><br><span class="line">因为阻止了事件冒泡</span><br></pre></td></tr></table></figure></li></ul><h3 id="对象拷贝"><a href="#对象拷贝" class="headerlink" title="对象拷贝"></a>对象拷贝</h3><ul><li><p>浅拷贝 $.extend(“目标对象”,”拷贝对象”)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;andy&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">$.extend(obj1,obj2);</span><br></pre></td></tr></table></figure></li><li><p>浅拷贝会将原来对象里面的复杂数据类型地址拷贝给目标对象</p></li><li><p>所以如果修改了目标对象的属性 原来对象中的属性也会随之修改</p></li><li><p>深拷贝$.extend(true,”目标对象”,”拷贝对象”)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">msg</span>: &#123;</span><br><span class="line">            <span class="attr">sex</span>:<span class="string">&quot;男&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;andy&quot;</span>,</span><br><span class="line">    <span class="attr">msg</span>: &#123;</span><br><span class="line">            <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line">$.extend(<span class="literal">true</span>,obj1,obj2);</span><br><span class="line">obj1.msg.age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line"><span class="built_in">console</span>.log(obj1);</span><br></pre></td></tr></table></figure></li><li><p>深拷贝会将原来对象的属性完全拷贝一份给目标对象</p></li><li><p>但如果目标对象中有不冲突的属性 则会合并该属性</p></li></ul><h3 id="多库共存"><a href="#多库共存" class="headerlink" title="多库共存"></a>多库共存</h3><ul><li><p>因为$符号有时候会导致冲突 所以jquery提供一种方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将所有的$符号替换成 jQuery</span><br><span class="line">eg</span><br><span class="line">jQuery(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>第二种方法 jquery释放对$的控制权 让用户自己决定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xx = $.noConflict();</span><br></pre></td></tr></table></figure></li></ul><h3 id="jQuery插件"><a href="#jQuery插件" class="headerlink" title="jQuery插件"></a>jQuery插件</h3><ul><li>ex<img src = image-20211119204501828.png></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/2021/11/30/CSS/"/>
      <url>/2021/11/30/CSS/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title=" CSS"></a><div align="center"> CSS</h1><ul><li>该笔记用百度脑图制作而成，图片如下：<img src="naotu.png" alt="naotu"><br>参考链接: <a href="http://naotu.baidu.com/file/ffff52457c20c717cc7b21def7361808?token=8fbc79fd5c6cc578">http://naotu.baidu.com/file/ffff52457c20c717cc7b21def7361808?token=8fbc79fd5c6cc578</a><br>若链接失效 建议私信</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/2021/11/30/HTML/"/>
      <url>/2021/11/30/HTML/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title=" HTML"></a><div align="center"> HTML</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>Hyper Text Makeup Language 超文本标记语言</li><li>加入了图片，声音，动画，多媒体等内容</li><li>从一个文件跳转到另一个文件，与世界各地主机的文件连接</li></ul><h2 id="文件连接"><a href="#文件连接" class="headerlink" title="文件连接"></a>文件连接</h2><ul><li>不是编程语言 而是一种标记语言 makeup language</li><li>标记语言也是一套标记标签</li></ul><h2 id="常用浏览器"><a href="#常用浏览器" class="headerlink" title="常用浏览器"></a>常用浏览器</h2><ul><li>ie 火狐 谷歌 edge safari opera 被称为五大浏览器</li><li>浏览器内核： 一种渲染引擎，读取网页内容，整理讯息，计算网页的显示方式并显示页面</li></ul><h2 id="Web标准"><a href="#Web标准" class="headerlink" title="Web标准"></a>Web标准</h2><ul><li>Web标准是由W3C组织和其他标准化组织定制的一系列标准的的集合</li><li>为什么需要Web标准？<br>浏览器不同，显示的页面和排版就有差异</li><li>Web标准的构成<br>结构：整理和分类网页元素，主要是HTML<br>表现：设置网页的版式，颜色，大小等外观格式，主要是CSS<br>行为：网页模型的定义以及交互的编写，主要是JavaScript</li><li>因此，结构写进HTML文件中，表现写到CSS文件中，行为写到Javascript文件中</li></ul><h2 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h2><h3 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h3><ul><li>基本语法概述</li></ul><ol><li>HTML标签是由尖括号包围的关键词 eg <html></li><li>HTML标签通常是成对出现的 eg <html></html>称为双标签，第一个是开始标签，第二个是结束标签</li><li>特殊标签 eg </br> 称之为单标签</li></ol><ul><li>标签关系</li></ul><ol><li>包含关系</li><li>并列关系</li></ol><h3 id="基本结构标签"><a href="#基本结构标签" class="headerlink" title="基本结构标签"></a>基本结构标签</h3><ul><li> 每一个网页都有一个基本标签结构，称为骨架标签；HTML页面也称为HTML文档</li></ul><ol><li><html></html>页面中最大的标签，称为根标签</li><li><p>文档的头部，注意在其中必须设置的标签是title</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><title></title>让页面有属于自己的网页标题</li><li><body></body>文档的主题 元素包含文档的所有内容，页面的内容基本都是放进body里面</li></ol><h3 id="网页开发工具"><a href="#网页开发工具" class="headerlink" title="网页开发工具"></a>网页开发工具</h3><ul><li>字符集</li></ul><ol><li>在head标签内，可以通过meta标签的charset属性规定HTML文档应该使用哪种字符编码</li><li>UTF-8 万国码，基本包括了全世界所有国家所需要的字符</li><li>&lt;! DOCTYPE html&gt;文档声明类型标签，告诉浏览器这个页面采取html5版本来显示页面</li><li><html lang="en">告诉浏览器或者搜索引擎这个是一个英文网站，本页面将采用英文来显示</li><li><mata charset="UTF-8">必须写，否则乱码。</li></ol><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><h4 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h4><ol><li><p>格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>-<span class="tag">&lt;<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>为head缩写，在标签内的字体会变大变粗</p></li><li><p>由1-6大小逐渐递减</p></li></ol><h4 id="段落和换行标签"><a href="#段落和换行标签" class="headerlink" title="段落和换行标签"></a>段落和换行标签</h4><ol><li><p>标签用于定义段落 paragraph</li><li><p></br>换行标签 break row</p></li></ol><h4 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h4><ol><li>加粗<strong></strong>或者<b></b></li><li>倾斜<em></em>或者<i></i></li><li>删除线<del></del>或者<s></s></li><li>下划线<ins></ins>或者<u></u></li></ol><h4 id="div和span标签"><a href="#div和span标签" class="headerlink" title="div和span标签"></a>div和span标签</h4><ol><li><p>没有语义，只是一个盒子，用来装内容的</p></li><li><p>division表示分割 分区 span表示跨度 跨距</p></li><li><div>标签用来布局，但是现在一行只能放一个div大盒子</li><li><p><span>标签用来布局，一行上面可以放多个span小盒子</p></li></ol><h4 id="图像标签和路径"><a href="#图像标签和路径" class="headerlink" title="图像标签和路径"></a>图像标签和路径</h4><ul><li>图像标签</li></ul><ol><li><p><img>标签用于定义HTML页面中的图像:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;url&quot;</span>/&gt;</span> </span><br><span class="line">其中src是img标签的必须属性，他用于指定图像文件路径和文件名</span><br></pre></td></tr></table></figure></li><li><p>图像标签的其他属性</p><table><thead><tr><th>属性</th><th>含义</th><th>描述</th></tr></thead><tbody><tr><td>src</td><td>图片路径</td><td>必须属性</td></tr><tr><td>alt</td><td>文本</td><td>替换文本，当图像不能显示时 用文本代替</td></tr><tr><td>title</td><td>文本</td><td>提示文本 鼠标放到上面时显示的文字</td></tr><tr><td>width</td><td>像素</td><td>设置图像的宽度</td></tr><tr><td>height</td><td>像素</td><td>设置图像的高度</td></tr><tr><td>border</td><td>像素</td><td>设置图片的边框粗细</td></tr></tbody></table></li></ol><ol start="3"><li>图像标签的路径<ul><li>相对路径 文件夹下地址</li><li>绝对路径 绝对地址 带盘符 在default browser里面打开才能显示</li></ul></li></ol><h4 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h4><ul><li><p><a>标签用于定义超链接，从一个页面链接跳转到另一个</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;跳转目标&quot;</span> <span class="attr">target</span>=<span class="string">&quot;目标窗口的弹出方式&quot;</span>&gt;</span>文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>超链接标签的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">anchor 锚</span><br><span class="line">href 用于指定链接目标url地址</span><br><span class="line">target 用于指定页面的打开方式</span><br><span class="line">      self 为默认值</span><br><span class="line">      blank 为在新窗口中打开</span><br></pre></td></tr></table></figure></li><li><p>链接的分类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">外部链接</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">内部链接</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;index.html&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">空链接</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;#&quot;</span>&gt;</span>公司地址<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">下载链接</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;img.zip&quot;</span>&gt;</span>下载文件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">网页元素链接</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>  = <span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">&quot;img.jpg&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">定位到某个位置</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;#two&quot;</span>&gt;</span>第二集<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 或者 <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span>&gt;</span>第二集介绍<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h4><ul><li><p>总览</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span>用于定义表格</span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>用于定义表格中的行，必须嵌套在<span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span>中</span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>用于定义表格中的单元格 必须嵌套在<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>中</span><br></pre></td></tr></table></figure></li><li><p>表头单元格标签 <th></th></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">表格属性                    align(left,right,center)规定表格相对周围元素的对齐方式</span><br><span class="line">border(1 or &quot;&quot;)规定表格是否拥有边框</span><br><span class="line">cellpadding(像素值)规定单元边沿预期内容之间的空白，默认1像素</span><br><span class="line">cellspacing(像素值)规定单元格之间的空白，默认2像素</span><br><span class="line">width(像素 or 百分比)规定表格的宽度</span><br></pre></td></tr></table></figure></li><li><p>表格结构标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span>标签控制表格的头部区域</span><br><span class="line"><span class="tag">&lt;<span class="name">thbody</span>&gt;</span>标签控制表格的主体区域</span><br><span class="line">作用:更好的分清楚结构</span><br></pre></td></tr></table></figure></li><li><p>合并单元格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">跨行合并：rowspan = &quot;合并单元格的个数&quot;</span><br><span class="line">跨列合并：colspan = &quot;合并单元格的个数&quot;</span><br><span class="line">记得删除多余的单元格</span><br></pre></td></tr></table></figure></li></ul><h4 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h4><ul><li><p>无序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>标签下面嵌套<span class="tag">&lt;<span class="name">li</span>&gt;</span>标签</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>标签不能嵌入其他无关标签</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>里面可以放任何标签</span><br></pre></td></tr></table></figure></li><li><p>有序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span>标签</span><br></pre></td></tr></table></figure></li><li><p>自定义列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span>标签，与<span class="tag">&lt;<span class="name">dt</span>&gt;</span>(定义项目 or 名字)和<span class="tag">&lt;<span class="name">dd</span>&gt;</span>(描述每一个项目 or 名字)一起使用</span><br></pre></td></tr></table></figure></li></ul><h4 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h4><ul><li><p>表单由表单域，表单控件（元素）和提示信息三个部分构成</p></li><li><p>表单域 <form></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">action = &quot;url&quot;用于指定接收并处理表单数据的服务器程序的url地址</span><br><span class="line">method = &quot;get/post&quot;用于设置表单的提交方式</span><br><span class="line">name = &quot;表单域名称&quot;</span><br></pre></td></tr></table></figure></li><li><p>表单控件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">type = &quot;属性值&quot;</span><br><span class="line">单标签</span><br><span class="line">其他属性：</span><br><span class="line">name 自定义 定义input元素名称</span><br><span class="line">value 自定义 定义input元素的值</span><br><span class="line">checked checked 规定此元素首次加载时应当被选用</span><br><span class="line">maxlength 正整数 规定输入字段字符的最大长度</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">用于绑定一个表单元素 当点击label标签中的文本时，浏览器会自动将焦点转到对应元素上</span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span>,记得加id</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">定义下拉列表</span><br><span class="line">格式为<span class="tag">&lt;<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">option</span>&gt;</span>选项<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">可以在option里面加selected 表示当前项为默认选中项</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2021/11/29/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2021/11/29/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title=" 数据库"></a><div align="center"> 数据库</h1><h2 id="数据库安装"><a href="#数据库安装" class="headerlink" title="数据库安装"></a>数据库安装</h2><ol><li><p>下载地址：<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p></li><li><p>解压到相应目录 并在目录下配置my.ini文件，信息如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"> </span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 设置3306端口</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=C:\\web\\mysql-<span class="number">8.0</span>.<span class="number">11</span></span><br><span class="line"><span class="comment"># 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错</span></span><br><span class="line"><span class="comment"># datadir=C:\\web\\sqldata</span></span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">20</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br></pre></td></tr></table></figure></li><li><p>启动数据库</p><p>使用管理员身份开启cmd，切换目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd C:\.....\bin</span><br></pre></td></tr></table></figure><p>初始化数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize --console</span><br></pre></td></tr></table></figure><p>得到密码：（记得保存）</p><p>安装命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql install</span><br></pre></td></tr></table></figure><p>启动命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure></li><li><p>登陆数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h localhost -u username -p</span><br></pre></td></tr></table></figure></li></ol><h2 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h2><ol><li><p>查看当前所有的数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases</span><br></pre></td></tr></table></figure></li><li><p>打开指定的库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 库名</span><br></pre></td></tr></table></figure></li><li><p>查看当前库的所有表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables</span><br></pre></td></tr></table></figure></li><li><p>查看其他库的所有表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables from 库名</span><br></pre></td></tr></table></figure></li><li><p>创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table 表名（</span><br><span class="line"> 列名 列类型,</span><br><span class="line"> 列名 列类型,</span><br><span class="line"> ）</span><br></pre></td></tr></table></figure></li><li><p>查看表结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表名</span><br></pre></td></tr></table></figure></li><li><p>查看服务器的版本</p><ul><li><p>方式一：登录到mysql服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select version()</span><br></pre></td></tr></table></figure></li><li><p>方式二：没有登陆到mysql服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></figure></li><li><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --V</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h2><ol><li><p>不区分大小写，但建议关键字大写，表名，列名小写</p></li><li><p>每条命令最好用分号结尾</p></li><li><p>每条命令根据需要换行</p></li><li><p>注释 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">单行注释 #注释文字</span><br><span class="line">单行注释 -- 注释文字</span><br><span class="line">多行注释 /* 注释文字 */</span><br></pre></td></tr></table></figure></li></ol><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ol><li>ctrl + enter 执行当前语句</li></ol><h2 id="DQL语言的学习"><a href="#DQL语言的学习" class="headerlink" title="DQL语言的学习"></a>DQL语言的学习</h2><h3 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 查询列表 from 表名</span><br></pre></td></tr></table></figure><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li><p>查询的结果集 是一个虚拟表</p></li><li><p>select 查询列表 类似于system.out.println()</p></li><li><p>select后面跟的查询列表，可以有多个部分组成，中间用逗号隔开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段1,字段2,表达式 from 表</span><br></pre></td></tr></table></figure></li></ol><h4 id="查询常量"><a href="#查询常量" class="headerlink" title="查询常量"></a>查询常量</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 100;</span><br></pre></td></tr></table></figure><h4 id="查询表达式"><a href="#查询表达式" class="headerlink" title="查询表达式"></a>查询表达式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 100%3;</span><br></pre></td></tr></table></figure><h4 id="查询单个字段"><a href="#查询单个字段" class="headerlink" title="查询单个字段"></a>查询单个字段</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#x27;last_name&#x27; from &#x27;employees&#x27;; 引号注意</span><br></pre></td></tr></table></figure><h4 id="查询所有字段"><a href="#查询所有字段" class="headerlink" title="查询所有字段"></a>查询所有字段</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from &#x27;employees&#x27;; 引号注意</span><br></pre></td></tr></table></figure><h4 id="查询函数"><a href="#查询函数" class="headerlink" title="查询函数"></a>查询函数</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select databases();</span><br><span class="line">select version();</span><br><span class="line">select user();</span><br></pre></td></tr></table></figure><h4 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h4><p>方式一 使用as关键字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select user() as 用户名;</span><br><span class="line">select user() as &quot;用户名&quot;;</span><br><span class="line">select user() as &#x27;用户名&#x27;;</span><br></pre></td></tr></table></figure><p>方式二使用空格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select user() 用户名;</span><br><span class="line">select last_name &quot;姓 名&quot; from employee;</span><br></pre></td></tr></table></figure><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>查询first_name 和 last_name 拼接成的全名 ==不一致==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select first_name + last_name as &quot;姓名&quot; from employees;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select concat(first_name,last_name) as &quot;姓 名&quot; from employees;</span><br></pre></td></tr></table></figure><p>==特别注意== concat中的字段有null值 后续整个连接的字段都是null</p><p>解决办法： 使用ifnull</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT IFNULL(commission_pct,&#x27;空&#x27;) FROM employees;</span><br><span class="line"># 若该字段为null，则输出“空” 若不为null 原样输出</span><br></pre></td></tr></table></figure><h4 id="distinct的使用"><a href="#distinct的使用" class="headerlink" title="distinct的使用"></a>distinct的使用</h4><p>查询员工涉及到的部门编号有哪些 使用distinct关键词达成去重的效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT department_id FROM employees;</span><br></pre></td></tr></table></figure><h4 id="查看表的结构"><a href="#查看表的结构" class="headerlink" title="查看表的结构"></a>查看表的结构</h4><p>两种方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DESC employees;</span><br><span class="line">SHOW COLUMNS FROM employees;</span><br></pre></td></tr></table></figure><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 查询列表</span><br><span class="line">FROM 表名</span><br><span class="line">WHERE 筛选条件;</span><br></pre></td></tr></table></figure><h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><ol><li>from字句</li><li>where字句</li><li>select字句</li></ol><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ol><li><p>按关系表达式筛选 ==注意== 在mysql中使用&lt;&gt;作为不等于号</p></li><li><p>逻辑运算符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">and</span><br><span class="line">or</span><br><span class="line">not</span><br></pre></td></tr></table></figure></li><li><p>mysql特有的 模糊查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">like</span><br><span class="line">in</span><br><span class="line">between and</span><br><span class="line">is null</span><br></pre></td></tr></table></figure></li></ol><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><h5 id="like"><a href="#like" class="headerlink" title="like"></a>like</h5><ul><li><p>功能: 一般和通配符搭配使用，对字符型数据进行部分匹配查询</p></li><li><p>常见的通配符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_ 任意单个字符</span><br><span class="line">% 任意多个字符</span><br></pre></td></tr></table></figure></li><li><p>案例一 查询姓名中包含字符a的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees WHERE last_name LIKE &#x27;%a%&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>案例二 查询姓名中包含最后一个字符为e的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees WHERE last_name LIKE &#x27;%e&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>案例三 查询姓名中包含第一个字符为e的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees WHERE last_name LIKE &#x27;e%&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>案例四 查询姓名中包含第三个字符为x的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees WHERE last_name LIKE &#x27;__x%&#x27;;</span><br><span class="line">#此处两个下划线</span><br></pre></td></tr></table></figure></li><li><p>案例五 查询姓名中包含第三个字符为_的员工信息 使用转义字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees WHERE last_name LIKE &#x27;__\_%&#x27;;</span><br><span class="line">SELECT * FROM employees WHERE last_name LIKE &#x27;__$_%&#x27; ESCAPE &#x27;$&#x27;;</span><br><span class="line">#设置$为转义字符 </span><br></pre></td></tr></table></figure></li></ul><h5 id="in"><a href="#in" class="headerlink" title="in"></a>in</h5><ul><li><p>功能: 查询某字段的值是否属于指定的列表之内</p></li><li><p>语法： in(常量值1，常量值2，常量值3….)</p></li><li><p>案例一 查询部门编号是30/50/90的员工名，部门编号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select last_name,department_id </span><br><span class="line">from employees</span><br><span class="line">where department_id in(30,50,90);</span><br></pre></td></tr></table></figure></li></ul><h5 id="between-and"><a href="#between-and" class="headerlink" title="between and"></a>between and</h5><ul><li><p>function: 判断某个字段的值是否介于xx之间</p></li><li><p>grammar: between and/not between and</p></li><li><p>case1 查询部门编号是30-90之间的部门编号，员工姓名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select department_id,last_name</span><br><span class="line">from employees</span><br><span class="line">where department_id between 30 and 90</span><br></pre></td></tr></table></figure></li></ul><h5 id="is-null"><a href="#is-null" class="headerlink" title="is null"></a>is null</h5><ul><li><p>function:判断某个字段的数值是否为空</p></li><li><p>case1 查询没有奖金的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select *</span><br><span class="line">from employees</span><br><span class="line">where commission_pct is null</span><br></pre></td></tr></table></figure></li><li><p>特点：= 能判断普通的内容，is只能判断null值</p></li></ul><h3 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h3><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT 查询列表</span><br><span class="line">FROM 表名</span><br><span class="line">WHERE 筛选条件</span><br><span class="line">ORDER BY 排序列表</span><br></pre></td></tr></table></figure><h4 id="执行顺序-1"><a href="#执行顺序-1" class="headerlink" title="执行顺序"></a>执行顺序</h4><ol><li>from</li><li>where</li><li>select</li><li>order by</li></ol><h4 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h4><ul><li>排序列表可以是单个字段，多个字段，表达式，函数，列数，以及以上的组合</li><li>升序 通过asc 默认</li><li>降序 通过 desc </li><li>根据执行顺序可以用别名排序</li></ul><h4 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h4><ul><li><p>LENGTH 获取字节长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ORDER BY LENGTH(last_name);</span><br></pre></td></tr></table></figure></li><li><p>CHAR_LENGTH 获取字符个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ORDER BY CHAR_LENGTH(&#x27;&#x27;);</span><br></pre></td></tr></table></figure></li><li><p>SUBSTR 拼接字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUBSTR(&#x27;xxx&#x27;,起始索引,截取的字符长度);</span><br><span class="line">起始索引从1开始 </span><br><span class="line">可以不写截取的字符长度 代表后续全部</span><br></pre></td></tr></table></figure></li><li><p>INSTR 获取字符第一次出现的索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT INSTR(&#x27;AAAAAXCCACACACC&#x27;,&#x27;X&#x27;);</span><br></pre></td></tr></table></figure></li><li><p>TRIM 去前后指定的字符 默认去掉空格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT TRIM(&#x27;   a  &#x27;) AS b</span><br><span class="line">SELECT TRIM(&#x27;X&#x27; FORM &#x27;XXXXXXXAXXXXXXXXX&#x27;) AS a</span><br></pre></td></tr></table></figure></li><li><p>LPAD/RPAD 左填充/右填充</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LPAD(&#x27;XXX&#x27;,10,&#x27;A&#x27;);</span><br></pre></td></tr></table></figure></li><li><p>STRCMP 比较两个字符大小 大就返回1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT STRCMP(&#x27;abc&#x27;,&#x27;afc&#x27;);</span><br></pre></td></tr></table></figure></li><li><p>UPPER/LOWER 变大写/小写</p></li></ul><h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><ul><li>ABS 绝对值</li><li>CELL 向上取整 返回≥该参数的最小整数</li><li>FLOOR 向下取整</li><li>ROUND 四舍五入</li><li>TRUNCATE 截断</li><li>MOD 取余 </li></ul><h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><ul><li>NOW() 现在的时间</li><li>CURDATE</li><li>CURTIME</li><li>DATEDIFF 日期差</li><li>DATE_FORMAT() 转换日期格式</li><li>STR_TO_DATE </li></ul><h4 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h4><ul><li><p>IF</p></li><li><p>CASE </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE 表达式</span><br><span class="line">WHEN X THEN 结果1 </span><br><span class="line">WHEN X THEN 结果2</span><br><span class="line">...</span><br><span class="line">ELSE 结果n</span><br><span class="line">END</span><br></pre></td></tr></table></figure></li></ul><h4 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h4><ul><li>sum</li><li>avg</li><li>max</li><li>min</li><li>count</li><li>分组前筛选 where</li><li>分组后筛选 having</li></ul><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><ul><li><p>内连接 INNER JOIN ON</p></li><li><p>外连接(左连接，右连接)</p></li><li><p>图解<img src="image-20210419152356373.png" alt="image-20210419152356373"><img src="image-20210419152900682.png" alt="image-20210419152900682"></p></li><li><p>自我关联</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查询广东省的所有区域</span><br><span class="line">先找出市</span><br><span class="line">select a.id,a.area,a.pid from area as a join area as b on a.pid = b.id where b.area = &#x27;广东&#x27;;</span><br><span class="line">再根据市找出区</span><br><span class="line">select c.id,c.area,c.pid from area as c join () as d on c.pid = d.id </span><br></pre></td></tr></table></figure></li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><ul><li><p>查询语句中嵌套另一个select</p></li><li><p>in</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sno,sname from student where sno in(select sno from sc where cno = &#x27;C001&#x27;)</span><br></pre></td></tr></table></figure></li><li><p>exists(重点)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">返回的是true/false</span><br><span class="line">select 之后加什么都可以</span><br><span class="line">与in的区别是</span><br><span class="line">in 会遍历整个表 </span><br><span class="line">exist 找到就返回</span><br></pre></td></tr></table></figure></li><li><p>not exists(重点)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h3><p>表中的每一行叫做一个记录，每个记录包含此行中所有信息</p><h3 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h3><p>表的列称之为字段</p><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><ul><li><p>表格的字段抽象的是共性的内容，以及共同的属性，这种方式称之为实体</p></li><li><p>用矩形表示实体（对应表名），椭圆表示属性（对应字段），菱形代表关系</p></li><li><p><img src="image-20210309185356772.png" alt="image-20210309185356772"></p></li></ul><h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><p>用于添加索引，加快搜索效率</p><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><ul><li><p>用于引用主键的内容</p></li><li><p>经常是多的那一方设置外键</p></li><li><p>设置方法：</p><ol><li><p>在表中添加外键的字段</p><p><img src="image-20210316214817698.png" alt="image-20210316214817698"></p></li><li><p>将该字段设置为外键</p><p><img src="image-20210316214659649.png" alt="image-20210316214659649"></p></li></ol></li><li><p>删除时 更新时</p></li></ul><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><p><img src="image-20210309185737919.png" alt="image-20210309185737919"></p><h3 id="网页系统"><a href="#网页系统" class="headerlink" title="网页系统"></a>网页系统</h3><ul><li>三步骤：</li><li>原型设计</li><li>数据库建模</li><li>编写前后台程序</li></ul><h4 id="数据库建模"><a href="#数据库建模" class="headerlink" title="数据库建模"></a>数据库建模</h4><ul><li>确定实体和关系</li><li>完善整体实体关系图</li><li>根据实体关系图构建表格</li></ul><h2 id="DDL语言"><a href="#DDL语言" class="headerlink" title="DDL语言"></a>DDL语言</h2><h3 id="创建语句create"><a href="#创建语句create" class="headerlink" title="创建语句create"></a>创建语句create</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">列名1 数据类型 约束,</span><br><span class="line">    name varchar(255) unique,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="修改语句Alter"><a href="#修改语句Alter" class="headerlink" title="修改语句Alter"></a>修改语句Alter</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名(</span><br><span class="line">add column 列名 类型 #添加新的字段</span><br><span class="line">    change column 旧列名 新列名 新列类型 #更改字段名称</span><br><span class="line">    modify column 列名 类型 #修改字段类型</span><br><span class="line">    drop column 列名 #删除字段</span><br><span class="line">    rename to 新表名 #表格重命名</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="删除语句Drop"><a href="#删除语句Drop" class="headerlink" title="删除语句Drop"></a>删除语句Drop</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table 表名</span><br></pre></td></tr></table></figure><h3 id="清除语句Truncate"><a href="#清除语句Truncate" class="headerlink" title="清除语句Truncate"></a>清除语句Truncate</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate table 表名</span><br></pre></td></tr></table></figure><ul><li>删除表中的所有记录单表结构保留</li></ul><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><ul><li><p>约束的实质就是表中数据的限制条件，为了报纸表中的记录<strong>完整和有效</strong></p></li><li><p>分为五种约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">非空约束 not null 后面加</span><br><span class="line">唯一性约束 unique 后面加</span><br><span class="line">主键约束 primary key 后面加</span><br><span class="line">外键约束 foreign key </span><br><span class="line">eg</span><br><span class="line">foregin key(外键字段) references 表名(主键字段) </span><br><span class="line">默认 default</span><br><span class="line">eg</span><br><span class="line">name varchar(20) default &#x27;zhangsan&#x27;</span><br></pre></td></tr></table></figure></li></ul><h3 id="约束分类"><a href="#约束分类" class="headerlink" title="约束分类"></a>约束分类</h3><ul><li>表级约束和列级约束 非空约束不能用于表级约束</li></ul><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><ul><li>略</li></ul><h2 id="DML数据操作语句"><a href="#DML数据操作语句" class="headerlink" title="DML数据操作语句"></a>DML数据操作语句</h2><h3 id="增加语句insert"><a href="#增加语句insert" class="headerlink" title="增加语句insert"></a>增加语句insert</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名 (字段1,字段2) values (值1,值2);</span><br></pre></td></tr></table></figure><h3 id="删除语句delete"><a href="#删除语句delete" class="headerlink" title="删除语句delete"></a>删除语句delete</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from 表名</span><br></pre></td></tr></table></figure><h3 id="更新语句update"><a href="#更新语句update" class="headerlink" title="更新语句update"></a>更新语句update</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update 表名 set 列名=值</span><br></pre></td></tr></table></figure><h2 id="DTL事务控制语句"><a href="#DTL事务控制语句" class="headerlink" title="DTL事务控制语句"></a>DTL事务控制语句</h2><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><ul><li><p>什么是事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">—事务（Transaction）是访问和更新数据库的程序执行单元；事务中可能包含一个或多个sql语句，这些语句要么都执行，要么都不执行。</span><br></pre></td></tr></table></figure></li><li><p>事务的基本要素ACID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原子性 </span><br><span class="line">一致性</span><br><span class="line">隔离性</span><br><span class="line">持久性</span><br></pre></td></tr></table></figure></li></ul><h3 id="事务控制语句"><a href="#事务控制语句" class="headerlink" title="事务控制语句"></a>事务控制语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start transaction开启事务</span><br><span class="line">commit 提交事务</span><br><span class="line">rollback 回滚事务</span><br><span class="line">set transaction 设置事务隔离级别</span><br></pre></td></tr></table></figure><h3 id="事务的隔离性"><a href="#事务的隔离性" class="headerlink" title="事务的隔离性"></a>事务的隔离性</h3><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><ul><li><p>指读到了其他事务未提交的数据</p><p><img src="image-20210612110516345.png" alt="image-20210612110516345"></p></li></ul><h4 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h4><p><img src="image-20210612110553199.png" alt="image-20210612110553199"></p><h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><p><img src="image-20210612110618411.png" alt="image-20210612110618411"></p><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global transaction isolation level read uncommitted;</span><br></pre></td></tr></table></figure><p><img src="image-20210612110853429.png" alt="image-20210612110853429"></p><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><h3 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create procedure 函数名(参数)</span><br><span class="line">eg</span><br><span class="line">delimiter //</span><br><span class="line">create procedure proc1()</span><br><span class="line">begin </span><br><span class="line">select * from user;</span><br><span class="line">end //</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">declare c int default 0;定义一个局部变量c初始值为0</span><br><span class="line">set c=a+b 赋值</span><br><span class="line">如果是字符串类型要给出长度</span><br><span class="line">declare var1 varchar(32) default &quot;&quot;;</span><br><span class="line">且局部变量声明要放在存储过程的最开始否则出错</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@varname</span><br><span class="line">两种创建方式：</span><br><span class="line">set @num = 1;或 set @num:=1;</span><br><span class="line">select @num:=1; 或 select @num:=字段名 from 表名 where </span><br><span class="line">用select必须用:=</span><br><span class="line"></span><br><span class="line">输出用户变量：select</span><br><span class="line"></span><br><span class="line">如果直接写 select @name:=password from user;</span><br><span class="line">则是@name变量的值是最后一条记录的值</span><br></pre></td></tr></table></figure><h3 id="存储过程的参数"><a href="#存储过程的参数" class="headerlink" title="存储过程的参数"></a>存储过程的参数</h3><p>三种存储类型in out inout</p><ul><li><p>IN 输入参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line">create proceduce demo1(IN p_in int)</span><br><span class="line">BEGIN</span><br><span class="line">SELECT p_in;</span><br><span class="line">SET p_in = 2;</span><br><span class="line">SELECT p_in;</span><br><span class="line">END //</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure></li><li><p>OUT 输出参数</p></li><li><p>INOUT 输入输出参数</p></li></ul><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><ul><li><p>call</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call procedure(参数)</span><br></pre></td></tr></table></figure></li></ul><h3 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h3><ul><li><p>drop</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop procedure 存储过程名称</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改存储过程"><a href="#修改存储过程" class="headerlink" title="修改存储过程"></a>修改存储过程</h3><ul><li><p>alter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter procedure 存储过程名称 [特征]</span><br></pre></td></tr></table></figure></li></ul><h3 id="存储过程的控制语句"><a href="#存储过程的控制语句" class="headerlink" title="存储过程的控制语句"></a>存储过程的控制语句</h3><ul><li><p>if-then-else</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if condition1 then&#123;&#125;</span><br><span class="line">elseif condition2 then</span><br><span class="line">else</span><br><span class="line">end if;</span><br></pre></td></tr></table></figure></li><li><p>例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line">CREATE PROCEDURE IncomeLevel (IN monthly_value INT, OUT income_level VARCHAR(32))</span><br><span class="line">BEGIN</span><br><span class="line">   IF monthly_value &lt;= 4000 THEN</span><br><span class="line">      SET income_level = &#x27;Low Income&#x27;;</span><br><span class="line">   ELSEIF monthly_value &gt; 4000 AND monthly_value &lt;= 7000 THEN</span><br><span class="line">      SET income_level = &#x27;Avg Income&#x27;;</span><br><span class="line">   ELSE</span><br><span class="line">      SET income_level = &#x27;High Income&#x27;;</span><br><span class="line">   END IF;</span><br><span class="line">   SELECT income_level;</span><br><span class="line">END; //</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure></li><li><p>case when</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">case case_value </span><br><span class="line">when xxx then xxx</span><br><span class="line">when xxx then xxx</span><br><span class="line">else xxx</span><br><span class="line">end case</span><br></pre></td></tr></table></figure></li><li><p>例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //  </span><br><span class="line">CREATE PROCEDURE proc3 (in parameter int)  </span><br><span class="line">  begin </span><br><span class="line">case parameter</span><br><span class="line">        when 1 then   </span><br><span class="line">          insert into table1 values(1,&#x27;tom&#x27;);  </span><br><span class="line">        when 2 then   </span><br><span class="line">          insert into table1 values(2,&#x27;lili&#x27;);  </span><br><span class="line">        else   </span><br><span class="line">          insert into table1 values(3,&#x27;lucy&#x27;);  </span><br><span class="line">    end case;  </span><br><span class="line">  end //  </span><br><span class="line">DELIMITER ; </span><br></pre></td></tr></table></figure></li><li><p>while</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while 条件 do</span><br><span class="line">代码</span><br><span class="line">end while;</span><br></pre></td></tr></table></figure></li><li><p>repeat</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repeat </span><br><span class="line">code</span><br><span class="line">until 条件 end repeat</span><br><span class="line">条件判断在结尾</span><br></pre></td></tr></table></figure></li></ul><h2 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h2><h3 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h3><ul><li>传统的集合运算是二目运算，关系看成元组的集合，其运算关系是从关系的水平方向，即从行的角度进行，有<strong>并，差，交，笛卡尔积</strong>四种运算</li><li>单目运算 一个运算符 eg i++</li><li>双目运算 两个运算符 a+b</li><li>三目运算 三个运算符 a?b:c</li></ul><h3 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h3><p><img src="image-20210614154358625.png" alt="image-20210614154358625"></p><h3 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h3><ul><li>R1和R2的笛卡尔积  R3=R1XR2<img src="image-20210614154559529.png" alt="image-20210614154559529"></li></ul><h3 id="关系运算-1"><a href="#关系运算-1" class="headerlink" title="关系运算"></a>关系运算</h3><ul><li>从操作关系个数上说，分为一元关系操作和二元关系操作。</li><li>一元关系操作包括对==单个==关系进行==垂直分解的投影运算==和进行==水平分解的选择运算==</li><li>二元操作关系则是对==两个==关系进行操作，包括==链接运算和除运算==</li></ul><h4 id="一元关系"><a href="#一元关系" class="headerlink" title="一元关系"></a>一元关系</h4><h1 id="sql考试"><a href="#sql考试" class="headerlink" title="sql考试"></a>sql考试</h1><ul><li>选择题</li><li>简答题（七选四）</li><li>大题<ol><li>查询语句</li><li>数据库设计( 画er图)</li><li>关系代数（一道大题）<img src="image-20210609092445195.png" alt="image-20210609092445195"></li></ol></li></ul><h1 id="sql考试简答"><a href="#sql考试简答" class="headerlink" title="sql考试简答"></a>sql考试简答</h1><h2 id="数据库系统体系结构有多少层"><a href="#数据库系统体系结构有多少层" class="headerlink" title="数据库系统体系结构有多少层"></a>数据库系统体系结构有多少层</h2><p>分为三层：外部层，概念层和内部层</p><p><img src="image-20210609090933593.png" alt="image-20210609090933593"></p><h2 id="什么是事务，简单的阐述一下事务的原子性"><a href="#什么是事务，简单的阐述一下事务的原子性" class="headerlink" title="什么是事务，简单的阐述一下事务的原子性"></a>什么是事务，简单的阐述一下事务的原子性</h2><p>事务（Transaction）是访问和更新数据库的程序执行单元；</p><p>原子性是指一个事务是一个不可分割的工作单位，其中的操作要么都做，要么都不做</p><h2 id="常见的数据库故障有多少种"><a href="#常见的数据库故障有多少种" class="headerlink" title="常见的数据库故障有多少种"></a>常见的数据库故障有多少种</h2><p>5种；事务内部的故障，系统故障，介质故障，计算机病毒故障，用户操作错误</p><h2 id="关系代数的基本运算有哪些"><a href="#关系代数的基本运算有哪些" class="headerlink" title="关系代数的基本运算有哪些"></a>关系代数的基本运算有哪些</h2><p>五种。并 差 投影 选择 笛卡尔积</p><h2 id="等值连接和自然连接的区别"><a href="#等值连接和自然连接的区别" class="headerlink" title="等值连接和自然连接的区别"></a>等值连接和自然连接的区别</h2><ol><li>自然连接一定是等值连接，但等值连接不一定是自然连接</li><li>等值连接要求的分量不一定是公共属性；而自然连接要求相等的分量必须是公共属性</li><li>等值连接不把重复的属性除去，而自然连接要把重复的属性除去</li></ol><h2 id="为什么外键属性的值有时候可以为空"><a href="#为什么外键属性的值有时候可以为空" class="headerlink" title="为什么外键属性的值有时候可以为空"></a>为什么外键属性的值有时候可以为空</h2><p>外键可以为空,一个表的关键的标识是主键,外键是否为空不影响表的结构及数据库设计概念的.外键只起个关联表的作用.</p><h2 id="数据库的完整性约束有哪些子句"><a href="#数据库的完整性约束有哪些子句" class="headerlink" title="数据库的完整性约束有哪些子句"></a>数据库的完整性约束有哪些子句</h2><ol><li>not null 非空约束x</li><li>unique 唯一约束</li><li>primary key 主键约束</li><li>foreign key 外键约束</li><li>default 默认约束</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
