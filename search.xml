<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Webpack5实战指南</title>
      <link href="/posts/7fc1593f40ed/"/>
      <url>/posts/7fc1593f40ed/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>咱们常见的打包工具比如vite，vuecli底层都是通过webpack实现的，下面就来对webpack进行一个学习并且实战运用</p></div><h1 id="为什么需要webpack"><a href="#为什么需要webpack" class="headerlink" title="为什么需要webpack"></a>为什么需要webpack</h1><p>这就要回顾一下没出现打包工具之前的弊端了。在以前，我们的js都是引入之后写在页面上的，有很多第三方的js比如jquery，lodash等，以及自己编写的js，此时需要注意引入的顺序，否则就会报错。可能会想到将它们合并到一个文件里面就不会报错，但是这样一来冗长的代码导致可读性差，可维护性弱的问题。此外还有作用域和文件太大的问题。</p><h2 id="作用域问题"><a href="#作用域问题" class="headerlink" title="作用域问题"></a>作用域问题</h2><p>我们知道，像jq这种库，全局声明是<code>$</code>符号，这个符号是绑定在window对象上面的，而lodash是绑定的下划线，我们自己的业务文件可能也绑定了类似于user这样的变量到window上面。这样一来我们的window对象就会被污染了，使得它变得非常臃肿。这就是作用域问题。</p><h2 id="文件太大"><a href="#文件太大" class="headerlink" title="文件太大"></a>文件太大</h2><p>如果不合并，那么有多少个js，就加载多少个js，页面可能就会出现一边加载一边渲染的问题。<br>如果将文件合并，这个巨大的js就会带来网络瓶颈，比如首页白屏问题</p><h1 id="before-webpack"><a href="#before-webpack" class="headerlink" title="before webpack"></a>before webpack</h1><p>在webpack之前，我们使用的是grunt和gulp这两款工具来管理我们的项目资源，我们称之为任务执行器。它是通过IIFE来解决作用域问题。在IIFE中，文件可以安全拼接而不用担心作用域问题<br>IIFE包裹的东西是不能在外部访问的，所以它不会污染作用域。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> jojo =<span class="string">&#x27;jojojo&#x27;</span>;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="built_in">console</span>.log(jojo);<span class="comment">//不行</span></span><br></pre></td></tr></table></figure><br>但如果我们想要暴露出一些内容应该怎么做呢？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;ajsjdajsd&#x27;</span>;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br></pre></td></tr></table></figure><br>我们的grunt和gulp就是采用这种方式进行管理的，但是由此就引申出了一个问题，如果我们的代码有1w行，我们修改了其中的一行，里面的内容就会重新编译，造成了不需要的性能浪费。<br>解决的办法是实现方法的懒加载或者把文件拆分成一个一个方法的模块</p><h1 id="代码拆分"><a href="#代码拆分" class="headerlink" title="代码拆分"></a>代码拆分</h1><p>nodejs的commonjs提供了导入导出的功能，使得js代码可以模块化了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//math.js</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">x,y</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> minus = <span class="function">(<span class="params">x,y</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">add,</span><br><span class="line">minus</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//server.js</span></span><br><span class="line"><span class="keyword">const</span> math = <span class="built_in">require</span>(<span class="string">&#x27;./math.js&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(math.add(<span class="number">4</span>,<span class="number">5</span>))<span class="comment">//9</span></span><br></pre></td></tr></table></figure><br>虽然在node上面支持模块化，但是我们的浏览器是不支持这样使用的，也就是只能在node环境下面才能用commonjs。</p><h1 id="让浏览器支持模块化"><a href="#让浏览器支持模块化" class="headerlink" title="让浏览器支持模块化"></a>让浏览器支持模块化</h1><p>我们为了能让浏览器支持模块化，使用的是browserify,requirejs这样的打包工具。</p>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你所不知道的JavaScript①</title>
      <link href="/posts/fee85c52fd07/"/>
      <url>/posts/fee85c52fd07/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><p>首先js的类型有基本数据类型和引用类型<br>前者有七种 后者是一种<br>根据以前的USONB理论 大致是<br><code>Undefined</code>,<code>String</code>,<code>Symbol</code>,<code>Object</code>,<code>Null</code>,<code>Number</code>,<code>BigInt</code>,<code>Boolean</code></p><h2 id="基本数据类型的作用？"><a href="#基本数据类型的作用？" class="headerlink" title="基本数据类型的作用？"></a>基本数据类型的作用？</h2><p>基础类型存储在栈内存，被引用或拷贝时，会创建一个完全相等的变量；占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储。</p><h2 id="object为什么是引用类型？"><a href="#object为什么是引用类型？" class="headerlink" title="object为什么是引用类型？"></a><code>object</code>为什么是引用类型？</h2><p>而引用类型 在创建对象的时候会在堆内存中开辟一个空间 用来存放对象的属性 在为对象添加属性的时候，是将属性放在堆内存中开辟的空间里。<br>在栈内存中保存显示 对象名+一个地址 类似于指针 执行堆内存中对象开辟的空间<br>引用类型存储在堆内存，存储的是地址，多个引用指向同一个地址，这里会涉及一个“共享”的概念；占据空间大、大小不固定。引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。<br>引申出栈和堆的概念！</p><h2 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt?"></a><code>BigInt</code>?</h2><h1 id="栈和堆"><a href="#栈和堆" class="headerlink" title="栈和堆"></a>栈和堆</h1><p>在js的执行过程中，主要有三种类型的内存空间，一是代码空间，二是栈空间，三是堆空间。代码空间顾名思义就是存储代码用的，栈空间是用来保存变量和变量值的，堆空间是保存地址的。<br>对于栈空间来说，原始类型存储的是变量的值，而引用类型存储的是在堆空间中的地址，所以当js需要访问数据的时候，是通过栈中的引用地址来访问的，相当于多了一道转手程序</p><h2 id="闭包是怎么存储"><a href="#闭包是怎么存储" class="headerlink" title="闭包是怎么存储"></a>闭包是怎么存储</h2><p>js引擎对于闭包的处理，是当遇到一个闭包的时候，在堆空间中创建一个<code>closure(fn)</code>对象，用来保存闭包中的变量，所以闭包中的变量是存储在堆空间中的。这就是为什么闭包可以常驻在内存的原因。</p><h2 id="js为什么需要栈和堆"><a href="#js为什么需要栈和堆" class="headerlink" title="js为什么需要栈和堆"></a>js为什么需要栈和堆</h2><p>首先知道栈是让变量循环利用，通常也是设置一些小数据来放入栈中，而我们知道引用类型数据obj一般占用的空间都比较大。所以js引擎需要栈和堆来维持内存的平衡。</p><ul><li>题目1<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;lee&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line"><span class="built_in">console</span>.log(a.name);  <span class="comment">//第一个console</span></span><br><span class="line">b.name = <span class="string">&#x27;son&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.name);  <span class="comment">//第二个console</span></span><br><span class="line"><span class="built_in">console</span>.log(b.name);  <span class="comment">//第三个console</span></span><br></pre></td></tr></table></figure>第一个是lee显而易见，第二个console是son 第三个也是。这是因为a是对象 是引用类型 在赋值给b的时候 实际上是给了a在堆中的地址 所以b访问的是堆空间中a的变量 那么修改了b 自然a也会发生变动，这里就引出了堆空间共享的概念</li><li>题目2<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Julia&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  o.age = <span class="number">24</span>;</span><br><span class="line">  o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Kath&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = change(a);     <span class="comment">// 注意这里没有new，后面new相关会有专门文章讲解</span></span><br><span class="line"><span class="built_in">console</span>.log(b.age);    <span class="comment">// 第一个console</span></span><br><span class="line"><span class="built_in">console</span>.log(a.age);    <span class="comment">// 第二个console</span></span><br></pre></td></tr></table></figure>第一个输出30 第二个输出24<br>原因是function里面传入的是a在堆中的地址，那么自然a的age就会变成24 但是到了return这一步 它会把传入的内存地址修改 导致o变成另外一个内存地址 将o的数据存放在该内存中， 所以b就是kath和30</li></ul><h1 id="检测方式"><a href="#检测方式" class="headerlink" title="检测方式"></a>检测方式</h1><p>数据类型检测有很多种，常用的是<code>typeof instanceof constructor Object.prototype.toString.call([])</code></p><ol><li><code>typeof</code>方法是基于计算机底层的数据类型的二进制进行判断。 用于判断除了<code>array null</code>之外的类型,即可以判断除了<code>null</code>之外的基础数据类型和除了<code>array</code>之外的应用数据类型<br>下面看一下它对于所有类型的处理 注意它可以处理function<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">2</span>);               <span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">true</span>);            <span class="comment">// boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="string">&#x27;str&#x27;</span>);           <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> []);              <span class="comment">// object     []数组的数据类型在 typeof 中被解释为 object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);    <span class="comment">// function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> &#123;&#125;);              <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span>);       <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>);            <span class="comment">// object     null 的数据类型被 typeof 解释为 object</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>为什么null会被<code>typeof</code>识别成<code>object</code>？<br>这个是一个历史遗留问题 js底层是二进制存储的 前三位代表的是数据的存储类型 对于object来说则是000 而刚好null也是全0 正好代表object类型的数据格式 所以null才会输出object</li></ul><ol><li><code>instanceof</code><br>由于上面的方法不能精确判断数组和null的原因 所以产生了新的方法<code>instanceof</code><br>康康它对于所有类型的处理<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> <span class="keyword">instanceof</span> <span class="built_in">Number</span>);                    <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>);                <span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;str&#x27;</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>);                <span class="comment">// false  </span></span><br><span class="line"><span class="built_in">console</span>.log([] <span class="keyword">instanceof</span> <span class="built_in">Array</span>);                    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Function</span>);       <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Object</span>);                   <span class="comment">// true    </span></span><br><span class="line"><span class="comment">// console.log(undefined instanceof Undefined);</span></span><br><span class="line"><span class="comment">// console.log(null instanceof Null);</span></span><br></pre></td></tr></table></figure>和由此可见 <code>instanceof</code>方法能准确的判断引用数据类型 但是不能判断基础数据类型<br>因为它的原理是和原型链相关的 ,相当于判断是不是这个类的实例，所以对于<code>undefined和null</code>来说，这两者是没有原型的 所以无法判断。<br>引申一下 <code>null</code>是所有原型的终点 <code>undefined</code>是表示没有这个值 缺少这个值 </li><li><code>constructor</code><br>构造器判断方法 注意带括号 否则会报错<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log((<span class="number">2</span>).constructor === <span class="built_in">Number</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="literal">true</span>).constructor === <span class="built_in">Boolean</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="string">&#x27;str&#x27;</span>).constructor === <span class="built_in">String</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(([]).constructor === <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;).constructor === <span class="built_in">Function</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log((&#123;&#125;).constructor === <span class="built_in">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>弊端是 如果改变了对象原型，该方法会失效<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"> </span><br><span class="line">Fn.prototype=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> f=<span class="keyword">new</span> Fn();</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(f.constructor===Fn);    <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(f.constructor===<span class="built_in">Array</span>); <span class="comment">// true </span></span><br></pre></td></tr></table></figure></li><li><code>Object.prototype.toString.call()</code><br>使用<code>Object</code>上面的<code>toString</code>方法 会返回一个格式为<code>[object Xxx]</code>的字符串，通过call重新调用就可以精确判断对象类型<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString(&#123;&#125;)       <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;)  <span class="comment">// 同上结果，加上call也ok</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>)    <span class="comment">// &quot;[object Number]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">&#x27;1&#x27;</span>)  <span class="comment">// &quot;[object String]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>)  <span class="comment">// &quot;[object Boolean]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)  <span class="comment">// &quot;[object Function]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>)   <span class="comment">//&quot;[object Null]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>) <span class="comment">//&quot;[object Undefined]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="regexp">/123/g</span>)    <span class="comment">//&quot;[object RegExp]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>()) <span class="comment">//&quot;[object Date]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([])       <span class="comment">//&quot;[object Array]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">document</span>)  <span class="comment">//&quot;[object HTMLDocument]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">window</span>)   <span class="comment">//&quot;[object Window]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从上面这段代码可以看出，Object.prototype.toString.call() 可以很好地判断引用类型，甚至可以把 document 和 window 都区分开来。</span></span><br></pre></td></tr></table></figure>由于代码过长 推荐封装一下<code>Object.prototype.toString</code><br>实现一个全局通用的判断方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> type = <span class="keyword">typeof</span> obj;</span><br><span class="line"><span class="comment">//如果是基本类型 直接返回</span></span><br><span class="line"><span class="keyword">if</span>(type!==<span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toStirng.call(obj).replace(<span class="regexp">/^\[object (\S+)\]$/</span>, <span class="string">&#x27;$1&#x27;</span>);  <span class="comment">// 注意正则中间有个空格</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 代码验证，需要注意大小写，哪些是typeof判断，哪些是toString判断？思考下 */</span></span><br><span class="line">getType([])     <span class="comment">// &quot;Array&quot; typeof []是object，因此toString返回</span></span><br><span class="line">getType(<span class="string">&#x27;123&#x27;</span>)  <span class="comment">// &quot;string&quot; typeof 直接返回</span></span><br><span class="line">getType(<span class="built_in">window</span>) <span class="comment">// &quot;Window&quot; toString返回</span></span><br><span class="line">getType(<span class="literal">null</span>)   <span class="comment">// &quot;Null&quot;首字母大写，typeof null是object，需toString来判断</span></span><br><span class="line">getType(<span class="literal">undefined</span>)   <span class="comment">// &quot;undefined&quot; typeof 直接返回</span></span><br><span class="line">getType()            <span class="comment">// &quot;undefined&quot; typeof 直接返回</span></span><br><span class="line">getType(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;) <span class="comment">// &quot;function&quot; typeof能判断，因此首字母小写</span></span><br><span class="line">getType(<span class="regexp">/123/g</span>)      <span class="comment">//&quot;RegExp&quot; toString返回</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220316104931.png" alt=""></li></ol><h1 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h1><h1 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h1>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端算法日记</title>
      <link href="/posts/fa1981f36489/"/>
      <url>/posts/fa1981f36489/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>前端也是要刷算法的呀= =<br>选自leetcode hot 100 和 剑指offer</p></div><h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>给定一个整数数组<code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 和为目标值 <code>target</code>  的那 两个 整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>你可以按任意顺序返回答案。<br>示例 1：<br>输入：<code>nums = [2,7,11,15], target = 9</code><br>输出：<code>[0,1]</code><br>解释：因为 <code>nums[0] + nums[1] == 9</code> ，返回 <code>[0, 1]</code> 。<br>示例 2：<br>输入：<code>nums = [3,2,4], target = 6</code><br>输出：<code>[1,2]</code><br>示例 3：<br>输入：<code>nums = [3,3], target = 6</code><br>输出：<code>[0,1]</code><br>提示：<br><code>2 &lt;= nums.length &lt;= 104</code><br><code>-109 &lt;= nums[i] &lt;= 109</code><br><code>-109 &lt;= target &lt;= 109</code><br>只会存在一个有效答案<br>进阶：你可以想出一个时间复杂度小于<code>O(n2)</code> 的算法吗？</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>这道题对前端来说考察的应该是用map方法来操作数据的问题。<br>回顾一下map的三个方法<br><code>map.get(key)</code>用于返回key对应的value值<br><code>map.set(key,value)</code>设置key和value值<br><code>map.has(key)</code>返回key是否存在<br>那么这道题的思路就是 先遍历数组 判断target和数字的差值是否在map里面，如果是则返回key和当前i，否则存入map<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i===<span class="number">0</span>)&#123;map.set(nums[i],i)&#125;</span><br><span class="line">        <span class="keyword">let</span> less = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span>(map.has(less))&#123;</span><br><span class="line">            <span class="keyword">return</span> [map.get(less),i];</span><br><span class="line">        &#125;</span><br><span class="line">        map.set(nums[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>其实不用到map这个api也是可以做的，并且用时还快一点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums,target</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> map = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line"><span class="keyword">let</span> less = target - nums[i];</span><br><span class="line"><span class="keyword">if</span>(map[less]!==<span class="literal">undefined</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> [map[less],i];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">map[nums[i]] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2.两数相加"></a>2.两数相加</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。<br>请你将两个数相加，并以相同形式返回一个表示和的链表。<br>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220309190959.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>这个就很类似于链表的合并，但是这个相较于合并特殊的一点在于它不能设置val为0 而是要设置next为一个新的节点。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span> (<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dummy = <span class="keyword">new</span> ListNode();</span><br><span class="line">    <span class="keyword">let</span> cur = dummy;</span><br><span class="line">    <span class="keyword">let</span> newAdd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l1 || l2) &#123;</span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//对l1 l2的加法逻辑单独放一块 避免有一方提前结束</span></span><br><span class="line">        <span class="keyword">if</span> (l1) &#123;</span><br><span class="line">            count += l1.val;</span><br><span class="line">            l1 = l1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l2) &#123;</span><br><span class="line">            count += l2.val;</span><br><span class="line">            l2 = l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        count += newAdd;</span><br><span class="line">        <span class="comment">//这里下个节点要用listnode新建，不能直接赋当前的val为count%10</span></span><br><span class="line">        cur.next = <span class="keyword">new</span> ListNode(count % <span class="number">10</span>);</span><br><span class="line">        <span class="comment">//向下取整进位数</span></span><br><span class="line">        newAdd = <span class="built_in">Math</span>.floor(count / <span class="number">10</span>);</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//如果已经结束了且最后的进位还大于0 那么要再新建一个节点放这个数</span></span><br><span class="line">    <span class="keyword">if</span> (newAdd &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        cur.next = <span class="keyword">new</span> ListNode(newAdd)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="3-无重复字符的最长字串"><a href="#3-无重复字符的最长字串" class="headerlink" title="3.无重复字符的最长字串"></a>3.无重复字符的最长字串</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220309192827.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>思路就是用include方法循环判断是否存在这个字符 如果存在就删去，如果不存在就push<br>然后判断maxlength<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> str <span class="keyword">of</span> s) &#123;</span><br><span class="line">        <span class="keyword">while</span> (arr.includes(str)) &#123;</span><br><span class="line">            arr.shift();</span><br><span class="line">        &#125;</span><br><span class="line">        arr.push(str);</span><br><span class="line">        <span class="keyword">if</span>(arr.length&gt;max)&#123;</span><br><span class="line">            max =arr.length</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4.寻找两个正序数组的中位数"></a>4.寻找两个正序数组的中位数</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220309193413.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>思路就是合并数组 然后sort排序，然后判断奇偶来写。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findMedianSortedArrays = <span class="function"><span class="keyword">function</span> (<span class="params">nums1, nums2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [...nums1,...nums2];</span><br><span class="line">    arr.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a-b;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> len = arr.length</span><br><span class="line">    <span class="keyword">if</span>(len%<span class="number">2</span>!==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parseFloat</span>(arr[(len-<span class="number">1</span>)/<span class="number">2</span>]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">parseFloat</span>((arr[len/<span class="number">2</span>]+arr[len/<span class="number">2</span>-<span class="number">1</span>])/<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19.删除链表的倒数第 N 个结点"></a>19.删除链表的倒数第 N 个结点</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220309194806.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>思路就是快慢指针，快指针先走n步，然后快慢一起遍历就能找到要删除节点的前驱节点和后继节点。<br>注意细节问题<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> removeNthFromEnd = <span class="function"><span class="keyword">function</span>(<span class="params">head, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> dummy = <span class="keyword">new</span> ListNode();</span><br><span class="line">    dummy.next = head;</span><br><span class="line">    <span class="keyword">let</span> fast = dummy;</span><br><span class="line">    <span class="keyword">let</span> slow = dummy;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//  这里判断不能写fast 要写fast.next 如果写了前者，那么到最后一个节点他还会前进</span></span><br><span class="line">    <span class="keyword">while</span>(fast.next)&#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注意这里不能直接写fast 如果只存在一个节点那么快慢指针同步 最后还是会返回fast节点的值</span></span><br><span class="line">   <span class="comment">//  slow.next = fast;</span></span><br><span class="line">   slow.next = slow.next.next;</span><br><span class="line">    <span class="keyword">return</span> dummy.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20.有效的括号"></a>20.有效的括号</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220309195925.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>思路 利用栈 先定义括号的数据结构，然后进站的是右括号 如果和出栈的对应 那么最后栈空<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isValid = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> stack = [];</span><br><span class="line">    <span class="keyword">let</span> leftToRight = &#123;</span><br><span class="line">        <span class="string">&#x27;(&#x27;</span>:<span class="string">&#x27;)&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;[&#x27;</span>:<span class="string">&#x27;]&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&#123;&#x27;</span>:<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">0</span>;i&lt;s.length;i++)&#123;</span><br><span class="line">        <span class="keyword">let</span> ch = s[i];</span><br><span class="line">        <span class="keyword">if</span>(ch===<span class="string">&#x27;&#123;&#x27;</span>||ch===<span class="string">&#x27;[&#x27;</span>||ch===<span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">            stack.push(leftToRight[ch]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(stack.pop()!==ch)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !stack.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21.合并两个有序链表"></a>21.合并两个有序链表</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220309200133.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>思路 对链表进行穿针 最后多余出来的部分直接合并<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> mergeTwoLists = <span class="function"><span class="keyword">function</span>(<span class="params">list1, list2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> head = <span class="keyword">new</span> ListNode();</span><br><span class="line">    <span class="keyword">let</span> cur = head;</span><br><span class="line">    <span class="keyword">while</span>(list1&amp;&amp;list2)&#123;</span><br><span class="line">        <span class="keyword">if</span>(list1.val&lt;=list2.val)&#123;</span><br><span class="line">            cur.next = list1;</span><br><span class="line">            list1 = list1.next;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            cur.next = list2;</span><br><span class="line">            list2 = list2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注意这里是cur.next 因为是合并剩下的部分 而不是取代当前</span></span><br><span class="line">    cur.next = list1!==<span class="literal">null</span>?list1:list2;</span><br><span class="line">    <span class="keyword">return</span> head.next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="11-盛最多水的容器"><a href="#11-盛最多水的容器" class="headerlink" title="11. 盛最多水的容器"></a>11. 盛最多水的容器</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220310085330.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>看到涉及前后的问题 使用双指针 指向头尾</p><ol><li>高度是相对小的指针的值 宽度是下标的差值 </li><li>指针移动的条件是相对小的那边移动<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxArea = <span class="function"><span class="keyword">function</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> right = height.length-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(right!==left)&#123;</span><br><span class="line"><span class="keyword">let</span> square = <span class="built_in">Math</span>.min(height[left],height[right])*(right-left);</span><br><span class="line"><span class="keyword">if</span>(square&gt;max)&#123;</span><br><span class="line">max=square;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(height[left]&lt;height[right])&#123;</span><br><span class="line">left++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15.三数之和"></a>15.三数之和</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220313193323.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>思路就是双指针 头指针和尾指针</p><ol><li>先对数组进行排序</li><li>遍历数组，还有个next指针 为<code>i+1</code></li><li>头指针 next指针 尾指针 用<code>while</code>来判断，终止条件是next等于尾指针</li></ol><ul><li>若它们代表的元素相加若等于0，将三个指针代表的元素入数组，并将next指针指向下一位，如果下一位和上一位的数字相同则跳过 next继续指向下一位</li><li>如果小于0 next指针++</li><li>如果大于0 尾指针—<br>特别注意 如果前一项等于后一项 那么直接跳过当前项<br>代码<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> threeSum = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    nums.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">let</span> len = nums.length;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] === nums[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">let</span> next = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> last = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (next &lt; last) &#123;</span><br><span class="line">            <span class="keyword">const</span> sum = nums[i] + nums[next] + nums[last];</span><br><span class="line">            <span class="keyword">if</span> (sum === <span class="number">0</span>) &#123;</span><br><span class="line">                res.push([nums[i], nums[next], nums[last]]);</span><br><span class="line">                next++;</span><br><span class="line">                <span class="keyword">while</span> (nums[next] === nums[next - <span class="number">1</span>]) &#123;</span><br><span class="line">                    next++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                next++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                last--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="16-最接近的三数之和"><a href="#16-最接近的三数之和" class="headerlink" title="16.最接近的三数之和"></a>16.最接近的三数之和</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220313194812.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>思路 和三数之和类似 多了个比较 最接近其实就是绝对值最小<br>代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> threeSumClosest = <span class="function"><span class="keyword">function</span> (<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    nums.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">let</span> len = nums.length;</span><br><span class="line">    <span class="keyword">let</span> min = <span class="literal">Infinity</span>;</span><br><span class="line">    <span class="keyword">let</span> res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> next = i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> last = len-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(next&lt;last)&#123;</span><br><span class="line">            <span class="keyword">const</span> sum = nums[i]+nums[next]+nums[last];</span><br><span class="line">            <span class="keyword">const</span> diff = <span class="built_in">Math</span>.abs(sum-target);</span><br><span class="line">            <span class="keyword">if</span>(diff&lt;min)&#123;</span><br><span class="line">                min = diff;</span><br><span class="line">                res = sum;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum&lt;target)&#123;</span><br><span class="line">                next++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                last--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18.四数之和"></a>18.四数之和</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">实战</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220313205436.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>思路 和三数差不多 但是多了层循环<br>代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[][]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fourSum = <span class="function"><span class="keyword">function</span> (<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    nums.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">    <span class="keyword">let</span> len = nums.length;</span><br><span class="line">    <span class="keyword">let</span> res = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] === nums[i - <span class="number">1</span>] &amp;&amp; i &lt; len) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">let</span> first = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (first &lt; len - <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first &gt; i + <span class="number">1</span> &amp;&amp; nums[first] === nums[first - <span class="number">1</span>] &amp;&amp; first &lt; len - <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">let</span> next = first + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">let</span> last = len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (next &lt; last) &#123;</span><br><span class="line">                <span class="keyword">let</span> sum = nums[i] + nums[first] + nums[next] + nums[last];</span><br><span class="line">                <span class="keyword">if</span> (sum === target) &#123;</span><br><span class="line">                    res.push([nums[i], nums[first], nums[next], nums[last]]);</span><br><span class="line">                    next++;</span><br><span class="line">                    <span class="keyword">while</span> (nums[next] === nums[next - <span class="number">1</span>]) &#123;</span><br><span class="line">                        next++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                    next++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    last--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            first++;</span><br><span class="line">            <span class="keyword">while</span> (nums[first] === nums[first - <span class="number">1</span>]) &#123;</span><br><span class="line">                first++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="53-最大子数组和"><a href="#53-最大子数组和" class="headerlink" title="53.最大子数组和"></a>53.最大子数组和</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220317204004.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>动态规划 但是是从前往后<br>正负收益 如果是相减是负收益 那么不要这个 取当前项<br>优化：不使用dp数组来维护这些变量 直接用一个sum变量来代替<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxSubArray = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="comment">//初始化maxSum</span></span><br><span class="line"><span class="keyword">let</span> maxSum = nums[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//初始化sum</span></span><br><span class="line"><span class="keyword">let</span> sum = nums[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line"><span class="comment">//比较收益 两者差值和当前值谁更大 取更大的</span></span><br><span class="line">sum = <span class="built_in">Math</span>.max(sum-nums[i],nums[i]);</span><br><span class="line"><span class="comment">//比较最大收益 取最大收益</span></span><br><span class="line">maxSum = <span class="built_in">Math</span>.max(sum,maxSum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70.爬楼梯"></a>70.爬楼梯</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220317205059.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>动态规划 状态方程是<code>f[n]= f[n-1]+f[n-2]</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> climbStairs = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> f = [];</span><br><span class="line">f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">f[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">3</span> ;i&lt;=n;i++)&#123;</span><br><span class="line">f[i] = f[i-<span class="number">1</span>]+f[i-<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> f[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94.二叉树的中序遍历"></a>94.二叉树的中序遍历</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220317210015.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>注意在函数里面递归你的二叉树<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"><span class="keyword">const</span> res = <span class="function">(<span class="params">n</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!n)<span class="keyword">return</span>;</span><br><span class="line">res(root.left);</span><br><span class="line">arr.push(root.val);</span><br><span class="line">res(root.right);</span><br><span class="line">&#125;</span><br><span class="line">res(root);</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101.对称二叉树"></a>101.对称二叉树</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220317210209.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>左右节点都存在<br>左右节点相等<br>左节点的左等于右节点的右<br>左节点的右等于右键点的左<br>即为镜像<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isSymmetric = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!root)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jud = <span class="function">(<span class="params">l,r</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//已经是叶子节点了 返回真</span></span><br><span class="line"><span class="keyword">if</span>(!l&amp;&amp;!r)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(l&amp;&amp;r&amp;&amp;l.val===r.val&amp;&amp;jud(l.left,r.right)&amp;&amp;jud(l.right,r.left))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> jud(root.left,root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="104-二叉树的最大深度"><a href="#104-二叉树的最大深度" class="headerlink" title="104. 二叉树的最大深度"></a>104. 二叉树的最大深度</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220318155736.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>最大深度用深度优先遍历<br>然后注意判断的时机<br>代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!root)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> dfs = <span class="function">(<span class="params">n,l</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!n)<span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//只在叶子节点的时候开始判断</span></span><br><span class="line"><span class="keyword">if</span>(!n.left&amp;&amp;!n.right)&#123;</span><br><span class="line">max = <span class="built_in">Math</span>.max(max,l);</span><br><span class="line">&#125;</span><br><span class="line">dfs(n.left,l+<span class="number">1</span>);</span><br><span class="line">dfs(n.right,l+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">dfs(root,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121. 买卖股票的最佳时机"></a>121. 买卖股票的最佳时机</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220318155828.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>先提出一个概念 收益 这里的话是前后元素的差值<br>这里涉及到一个问题 其实有时候不需要知道买进卖出的价格 我们只需要知道在这个过程中，收益的幅度，也就是收益为负的时候，刷新这个收益为0，收益为正的时候，和最大收益比较并考虑是否刷新最大收益。<br>代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span> (<span class="params">prices</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> last = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;prices.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line">last = <span class="built_in">Math</span>.max(<span class="number">0</span>,last+prices[i+<span class="number">1</span>]-prices[i]);</span><br><span class="line">max = <span class="built_in">Math</span>.max(max,last);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="136-只出现一次的数字"><a href="#136-只出现一次的数字" class="headerlink" title="136. 只出现一次的数字"></a>136. 只出现一次的数字</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220318161857.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>利用异或的性质</p><ol><li>0异或任何数都返回那个数字</li><li>两个数字异或 相同0 不同1<br>代码<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span> (<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">0</span>;</span><br><span class="line">    nums.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        res = res^item;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226. 翻转二叉树"></a>226. 翻转二叉树</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220320140032.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> invertTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> left = invertTree(root.left);</span><br><span class="line">    <span class="keyword">let</span> right = invertTree(root.right);</span><br><span class="line">    root.left = right;</span><br><span class="line">    root.right = left;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="141-环形链表"><a href="#141-环形链表" class="headerlink" title="141. 环形链表"></a>141. 环形链表</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220320141647.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>快慢指针 如果是环形 快指针走两步 慢指针走一步 最后肯定会相遇<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hasCycle = <span class="function"><span class="keyword">function</span> (<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> slow = head;</span><br><span class="line">    <span class="keyword">let</span> fast = head;</span><br><span class="line">    <span class="keyword">while</span> (slow&amp;&amp;fast&amp;&amp;fast.next) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next</span><br><span class="line">        <span class="keyword">if</span>(slow===fast)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="155-最小栈"><a href="#155-最小栈" class="headerlink" title="155. 最小栈"></a>155. 最小栈</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220320143256.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>两个栈 一个用于存放最小的数据集合 一个用于普通存放<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MinStack = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.stack1 = [];</span><br><span class="line">    <span class="built_in">this</span>.stack2 = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">val</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.push = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.stack1.push(val);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">this</span>.stack2)&#123;</span><br><span class="line">        <span class="built_in">this</span>.stack2.push(val);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(val&lt;=<span class="built_in">this</span>.stack2[<span class="built_in">this</span>.stack2.length-<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="built_in">this</span>.stack2.push(val);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.stack2.unshift(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.stack1.pop()===<span class="built_in">this</span>.stack2[<span class="built_in">this</span>.stack2.length-<span class="number">1</span>])&#123;</span><br><span class="line">        <span class="built_in">this</span>.stack2.pop();</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.top = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.stack1[<span class="built_in">this</span>.stack1.length-<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MinStack.prototype.getMin = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.stack2[<span class="built_in">this</span>.stack2.length-<span class="number">1</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var obj = new MinStack()</span></span><br><span class="line"><span class="comment"> * obj.push(val)</span></span><br><span class="line"><span class="comment"> * obj.pop()</span></span><br><span class="line"><span class="comment"> * var param_3 = obj.top()</span></span><br><span class="line"><span class="comment"> * var param_4 = obj.getMin()</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="160-相交链表"><a href="#160-相交链表" class="headerlink" title="160. 相交链表"></a>160. 相交链表</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220320145134.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>连接headA和headB 使得它们总路程相同<br>那么可以看 此时总路程相同 速度相同 如果有相交的点 那么最后肯定会到达该点<br>假设公共路径是c 第一条公共路径之前是a 第二条是b<br>那么第一条路径就是a+c+b+c<br>第二条就是b+c+a+c<br>当第一条走过 a+c+b的时候 第二条也走过了b+c+a 此时下一步的c就是交点或者终点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getIntersectionNode = <span class="function"><span class="keyword">function</span>(<span class="params">headA, headB</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> p1 = headA;</span><br><span class="line"><span class="keyword">let</span> p2 = headB;</span><br><span class="line"><span class="keyword">while</span>(p1!===p2)&#123;</span><br><span class="line">p1 = p1 ? p1.next : headB;</span><br><span class="line">p2 = p2 ? p2.next : headA;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="448-找到所有数组中消失的数字"><a href="#448-找到所有数组中消失的数字" class="headerlink" title="448. 找到所有数组中消失的数字"></a>448. 找到所有数组中消失的数字</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220320152709.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>思路 set去重之后找到利用set的has特性 如果不存在该数字就把数组原地的<code>nums[count]</code>修改为i ，最后分割数组即可。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findDisappearedNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(nums);</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">1</span>;i&lt;=nums.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!set.has(i))&#123;</span><br><span class="line">nums[count] = i;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nums.splice(<span class="number">0</span>,count)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="169-多数元素"><a href="#169-多数元素" class="headerlink" title="169. 多数元素"></a>169. 多数元素</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220320153743.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>code<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> majorityElement = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    nums.sort(<span class="function">(<span class="params">a,b</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a-b</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> nums[<span class="built_in">parseInt</span>(nums.length/<span class="number">2</span>)]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283. 移动零"></a>283. 移动零</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220320162258.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>code<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moveZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> n = nums.length</span><br><span class="line">    <span class="keyword">let</span> k = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]!=<span class="number">0</span>)&#123;</span><br><span class="line">            nums[k++] = nums[i]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; n)&#123;</span><br><span class="line">        nums[k++] = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="617. 合并二叉树"></a>617. 合并二叉树</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220321141252.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>code<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mergeTrees = <span class="function"><span class="keyword">function</span> (<span class="params">root1, root2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root1 &amp;&amp; !root2) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">const</span> jud = <span class="function">(<span class="params">n1, n2</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!n1)<span class="keyword">return</span> n2;</span><br><span class="line">        <span class="keyword">if</span>(!n2)<span class="keyword">return</span> n1;</span><br><span class="line">        n1.val += n2.val;</span><br><span class="line">        n1.left = jud(n1.left, n2.left);</span><br><span class="line">        n1.right = jud(n1.right, n2.right);</span><br><span class="line">        <span class="keyword">return</span> n1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jud(root1, root2)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="543-二叉树的直径"><a href="#543-二叉树的直径" class="headerlink" title="543. 二叉树的直径"></a>543. 二叉树的直径</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220321143350.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> diameterOfBinaryTree = <span class="function"><span class="keyword">function</span> (<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> deep = (<span class="function">(<span class="params">n1</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!n1) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> left = deep(n1.left);</span><br><span class="line">        <span class="keyword">let</span> right = deep(n1.right);</span><br><span class="line">        max = <span class="built_in">Math</span>.max(left+right,max);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.max(left,right)+<span class="number">1</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    deep(root);</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="461-汉明距离"><a href="#461-汉明距离" class="headerlink" title="461. 汉明距离"></a>461. 汉明距离</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220321144547.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>code<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hammingDistance = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (x^y).toString(<span class="number">2</span>).split(<span class="string">&#x27;&#x27;</span>).filter(<span class="function"><span class="params">s</span>=&gt;</span>s===<span class="string">&#x27;1&#x27;</span>).length</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="338-比特位计数"><a href="#338-比特位计数" class="headerlink" title="338. 比特位计数"></a>338. 比特位计数</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220321145257.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>code<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> countBits = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        arr.push((i).toString(<span class="number">2</span>).replace(<span class="regexp">/0/g</span>,<span class="string">&#x27;&#x27;</span>).length);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="剑指-Offer-10-I-斐波那契数列"><a href="#剑指-Offer-10-I-斐波那契数列" class="headerlink" title="剑指 Offer 10- I. 斐波那契数列"></a>剑指 Offer 10- I. 斐波那契数列</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220321150914.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>经典动态规划 注意栈溢出。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fib = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> f = [];</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        f[i] = (f[i-<span class="number">1</span>]+f[i-<span class="number">2</span>]) % <span class="number">1000000007</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[n];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="剑指-Offer-10-II-青蛙跳台阶问题"><a href="#剑指-Offer-10-II-青蛙跳台阶问题" class="headerlink" title="剑指 Offer 10- II. 青蛙跳台阶问题"></a>剑指 Offer 10- II. 青蛙跳台阶问题</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220321160431.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>code<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numWays = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> f = [];</span><br><span class="line">    f[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    f[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        f[i] = (f[i - <span class="number">1</span>] + f[i - <span class="number">2</span>])%<span class="number">1000000007</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[n]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="剑指-Offer-11-旋转数组的最小数字"><a href="#剑指-Offer-11-旋转数组的最小数字" class="headerlink" title="剑指 Offer 11. 旋转数组的最小数字"></a>剑指 Offer 11. 旋转数组的最小数字</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220322144752.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> minArray = <span class="function"><span class="keyword">function</span>(<span class="params">numbers</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.min(...numbers)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="剑指-Offer-15-二进制中1的个数"><a href="#剑指-Offer-15-二进制中1的个数" class="headerlink" title="剑指 Offer 15. 二进制中1的个数"></a>剑指 Offer 15. 二进制中1的个数</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220322145049.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>code<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hammingWeight = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n.toString(<span class="number">2</span>).split(<span class="string">&#x27;&#x27;</span>).filter(<span class="function"><span class="params">s</span>=&gt;</span>s===<span class="string">&#x27;1&#x27;</span>).length</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="剑指-Offer-17-打印从1到最大的n位数"><a href="#剑指-Offer-17-打印从1到最大的n位数" class="headerlink" title="剑指 Offer 17. 打印从1到最大的n位数"></a>剑指 Offer 17. 打印从1到最大的n位数</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220322150012.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>code<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> printNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// n = Math.pow(10,n);</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        count*=<span class="number">10</span>;</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i =<span class="number">1</span>;i&lt;count;i++)&#123;</span><br><span class="line">        arr.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="剑指-Offer-21-调整数组顺序使奇数位于偶数前面"><a href="#剑指-Offer-21-调整数组顺序使奇数位于偶数前面" class="headerlink" title="剑指 Offer 21. 调整数组顺序使奇数位于偶数前面"></a>剑指 Offer 21. 调整数组顺序使奇数位于偶数前面</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220322151039.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>双指针 左指针维护奇数数组 右指针维护偶数数组<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exchange = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> left = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> right = nums.length;</span><br><span class="line"><span class="keyword">while</span>(left&lt;right)&#123;</span><br><span class="line"><span class="keyword">if</span>(nums[left]%<span class="number">2</span>===<span class="number">1</span>)&#123;</span><br><span class="line">left++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">[nums[left],nums[right]] = [nums[right],nums[left]];</span><br><span class="line">right--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="剑指-Offer-27-二叉树的镜像"><a href="#剑指-Offer-27-二叉树的镜像" class="headerlink" title="剑指 Offer 27. 二叉树的镜像"></a>剑指 Offer 27. 二叉树的镜像</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220322151651.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>反转二叉树<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mirrorTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)<span class="keyword">return</span> root;</span><br><span class="line">    <span class="keyword">let</span> left = mirrorTree(root.left);</span><br><span class="line">    <span class="keyword">let</span> right = mirrorTree(root.right);</span><br><span class="line">    root.left = right;</span><br><span class="line">    root.right = left;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="剑指-Offer-28-对称的二叉树"><a href="#剑指-Offer-28-对称的二叉树" class="headerlink" title="剑指 Offer 28. 对称的二叉树"></a>剑指 Offer 28. 对称的二叉树</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220322152626.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>对称二叉树<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isSymmetric = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">const</span> jud = <span class="function">(<span class="params">l,r</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!l&amp;&amp;!r)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(l&amp;&amp;r&amp;&amp;l.val===r.val&amp;&amp;jud(l.left,r.right)&amp;&amp;jud(l.right,r.left))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jud(root.left,root.right);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入浅出vue.js</title>
      <link href="/posts/885b6d5d3821/"/>
      <url>/posts/885b6d5d3821/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tip cogs"><p>记录《深入浅出Vue.js》这本书中的内容，以笔记的形式了解vue之中涉及的部分原理</p></div><h1 id="Object变化侦测"><a href="#Object变化侦测" class="headerlink" title="Object变化侦测"></a>Object变化侦测</h1><div class="tip "><p>vue的特性之一就是响应式系统，我们在学习的过程中知道它是通过侦测数据的变化进行视图的更新，而具体到其中的原理是什么呢？</p></div><h2 id="推和拉"><a href="#推和拉" class="headerlink" title="推和拉"></a>推和拉</h2><p>变化侦测分为两种类型 一种是推一种是拉。<br>在Angular和React里面，变化侦测的内容属于”拉“，意思是当状态发生变化的时候，它不知道哪个状态改变了。只知道状态有可能变了。然后发送一个信号告诉框架。<br>而在Vue当中，变化侦测属于”推”。当状态发送改变的时候，vue立刻就知道了，然后在一定程度上知道哪些状态变了。意味着vue能进行颗粒度更细的更新。</p><h2 id="颗粒度"><a href="#颗粒度" class="headerlink" title="颗粒度"></a>颗粒度</h2><p>所谓颗粒度呢，就是指某一个状态在发生更新的时候，会影响到多少节点。举个例子来说，假如一个状态绑定着很多个依赖，此时每个依赖表示一个具体的DOM节点，当这个状态改变的时候，会向所有依赖发出通知，进行更新操作。<br>因此颗粒度越细，开销也就越大，所以vue将粒度调为中等，同时将依赖绑定的DOM节点换为了组件。</p><h2 id="如何追踪变化"><a href="#如何追踪变化" class="headerlink" title="如何追踪变化"></a>如何追踪变化</h2><p>vue中，先前的版本里，es6对浏览器的支持并不理想，所以采取了<code>defineProperty</code>的方法而非<code>Proxy</code>，通过前者的方法可以很容易的侦测对象的变化，并用getter/setter来对对象进行响应式的处理。</p><h2 id="如何收集依赖"><a href="#如何收集依赖" class="headerlink" title="如何收集依赖"></a>如何收集依赖</h2><p>在本节中，依赖的收集其实是使用到了getter，触发依赖使用到了setter。</p><h2 id="依赖收集在哪里？"><a href="#依赖收集在哪里？" class="headerlink" title="依赖收集在哪里？"></a>依赖收集在哪里？</h2><p>很清晰的理解，知道要收集依赖，那么势必有保存依赖的地方，而这个地方最好是唯一的，全局性的，因为我们做出的改变需要通知到这个依赖，然后让这样依赖去反馈或者处理我们需要的数据等。<br>代码的编写方面 在get中push数据到window的全局变量中，然后在set中循环触发依赖。<br>但是这样编写代码还是有点耦合，于是把收集依赖处理依赖的代码封装成一个Dep类，这个类中有增删改查的方法，还要向依赖发送通知的方法。这样只需要在变化侦测的代码中实例化这个Dep类就可以使用以上方法。</p><h2 id="依赖是谁？"><a href="#依赖是谁？" class="headerlink" title="依赖是谁？"></a>依赖是谁？</h2><p>在上一小节中，知道依赖最好是存放到一个全局变量中访问和获取，并且在我们调用get的时候负责管理依赖的类会执行修改 set的时候会新增，但我们收集完这些依赖，实际上是要去告诉其他地方或者其他用到依赖的地方，去通知他们要修改，而对于这个起到通知作用的类，我们称之为Watcher。<br>(在下面会了解到依赖其实就是watcher实例)</p><h2 id="Watcher是谁？"><a href="#Watcher是谁？" class="headerlink" title="Watcher是谁？"></a>Watcher是谁？</h2><p>在vue的watch方法中，可以知道参数变化之后触发函数的功能。而这个Watcher类也是需要做到这样的事情。在代码中可以看见，作者通过将Watcher类的this赋值给全局变量，然后再读取值触发getter方法，将watcher实例传输到Dep类中，这样Dep就会获取到该实例并且进行增删改查。在增删改查的部分，还会用到watcher的update方法，这就是代码的神奇之处。<br>写到这里可能有点一头雾水，实际上依赖就是这个watcher实例，这个类就是负责通知Dep是否进行增删改查的。</p><h2 id="递归侦测所有key"><a href="#递归侦测所有key" class="headerlink" title="递归侦测所有key"></a>递归侦测所有key</h2><p>其实写到这里 已经满足了变化侦测的基本需求了。但是如果我们想检测到数据中所有的属性，光是上面还不够，需要封装一个Observer类。这个类将数据内的全部属性，包括子属性，都转化成getter、setter的形式，然后去追踪它们的变化。</p><h2 id="Observer的缺点"><a href="#Observer的缺点" class="headerlink" title="Observer的缺点"></a>Observer的缺点</h2><p>上面实现了传入一个obj变成响应式obj的Observer类。但其实它也存在缺点，比如我们要使用点运算符新增一个数据或者delete方法删除一个数据的时候，vue并不能检测到，这是因为getter/setter方法本身只支持数据的修改，不能检测到数据的增加和删除。但是vue提供了两个api来帮助解决这个问题。一个是<code>vm.$set</code>，另外一个是<code>vm.$delete</code></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>变化侦测就是侦测数据的变化，当数据发生变化的时候，能侦测到并发出通知。<br>Object通过defineProperty的方法来将属性转化为响应式来追踪数据的变化。我们需要在getter中收集依赖，当setter被触发的时候通知getter中收集的依赖数据发生变化。<br>收集依赖需要为依赖找到一个存储依赖的地方，为此创建了Dep用于收集依赖，删除依赖和向依赖发送信息。<br>所谓的依赖，其实就是Watcher。只有Watcher触发的getter才会收集依赖，哪个watcher触发了getter，就把哪个watcher收集到Dep。当数据发生变化的时候，会循环依赖列表，把所有的watcher都通知一遍。</p><h1 id="Array变化侦测"><a href="#Array变化侦测" class="headerlink" title="Array变化侦测"></a>Array变化侦测</h1><div class="tip "><p>上文介绍了Object的变化侦测 但是getter和setter方法并不会触发数组的方法，比如push，pull等等，下面讲解vue是如何操作使得数组的操作能够被检测</p></div><h2 id="如何追踪变化-1"><a href="#如何追踪变化-1" class="headerlink" title="如何追踪变化"></a>如何追踪变化</h2><p>我们知道Object的变化是靠setter来追踪的，一旦数据发送了变化 就触发setter。<br>那么我们只要操作数组的时候，通知到一个容器让他存储这种变化即可。<br>可惜的是在es6之前没有提供元编程的能力，也没有提供拦截原型方法的能力，但是程序员可以自己创建一个方法，取拦截<code>Array.prototype</code>之后我们想使用Array上面的方法去操作数组的时候，使用的都是拦截器上面的方法，然后在拦截器中使用原生Array原型上面的方法去操作数组。<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220317212521.png" alt=""></p><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>拦截器其实是一个和<code>Array.prototype</code>一样的<code>Object</code> 里面包含的属性一模一样，只不过这个<code>object</code>中某些可以改变数组和自身内容的方法是处理过的。<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220317213444.png" alt=""><br>代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayProto = <span class="built_in">Array</span>.prototype;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> arrayMethods = <span class="built_in">Object</span>.create(arrayProto);</span><br><span class="line">[<span class="string">&#x27;push&#x27;</span>,<span class="string">&#x27;pop&#x27;</span>,<span class="string">&#x27;shift&#x27;</span>,<span class="string">&#x27;unshift&#x27;</span>,<span class="string">&#x27;splice&#x27;</span>,<span class="string">&#x27;sort&#x27;</span>,<span class="string">&#x27;reverse&#x27;</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">method</span>))</span>&#123;</span><br><span class="line"><span class="comment">//缓存原始方法</span></span><br><span class="line"><span class="keyword">const</span> original = arrayProto[method];</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(arrayMethods,methods,&#123;</span><br><span class="line"><span class="attr">value</span>:<span class="function"><span class="keyword">function</span> <span class="title">mutator</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> original.apply(<span class="built_in">this</span>,args);<span class="comment">//触发Array上面的方法</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">enumerable</span>:<span class="literal">false</span>,</span><br><span class="line"><span class="attr">writable</span>:<span class="literal">true</span>,</span><br><span class="line"><span class="attr">configurable</span>:<span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在上面的代码中 创建了变量<code>arrayMethods</code>，继承自<code>Array.prototype</code>，所以有它的全部功能。然后用<code>arrayMethods</code>去覆盖数组原型。<br>接着封装数组的方法在<code>Object.defineProperty</code>中<br>假如使用的是push，那么实际上调用的是<code>arrayMethods.push</code>然后<code>arrayMethods.push</code>是函数<code>mutator</code>所以实际执行的是<code>mutator</code>函数<br>最后在<code>mutator</code>中执行<code>original</code>（它是原生数组原型上面的方法 比如push）来做它应该做的事情。<br>因此我们就可以在<code>mutator</code>中做一些其他的事情 比如发送变化通知。</p>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDN内容分发网络</title>
      <link href="/posts/5e2ce1604d71/"/>
      <url>/posts/5e2ce1604d71/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>大家可能都有过这样的经历，把博客建立在类似github上面的外网上，然后国内正常的访问方式访问博客，静态资源的加载速度都非常的慢，解决这个问题的方法就是使用CDN，依赖市场上的CDN，可以实现博客的加速访问，接下来就来详细讲述CDN（内容分发网络）的原理。</p></div><h1 id="Content-Delivery-Network"><a href="#Content-Delivery-Network" class="headerlink" title="Content Delivery Network"></a>Content Delivery Network</h1><p>CDN全称是Content Delivery Network，俗称内容分发网络，它是集中在世界各地的边缘服务器的集合。当你的服务器需要给来自世界各地的用户响应内容的时候，由于距离原因难免会有很大的网络延迟，所以就有人专门在世界各地设置了能帮你转发内容的服务器，并且有专门的人员进行维护。这些服务器叫做边缘服务器，意思就是接近用户的服务器，它们构建起来就是内容分发网络体系。CDN的这些服务器就是近距离给用户发送网页内容的。<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227095858.png" alt=""></p><h1 id="分发内容"><a href="#分发内容" class="headerlink" title="分发内容"></a>分发内容</h1><p>CDN服务器分发的内容分为两个部分，一个是静态内容，一个是动态内容。<br>简单的理解可以是长期不需要改变的内容为静态内容，经常需要改变的内容为动态内容，就好比网页中的标题，导航栏等，就是一开始设计好之后就基本不会更改的。而类似于echarts图表这种，可能会随某些操作进行变化的称之为动态内容。<br>像博客这种大部分都是静态内容的就很适合使用CDN，接下来通过分发流程讲解原因。</p><h1 id="分发流程"><a href="#分发流程" class="headerlink" title="分发流程"></a>分发流程</h1><p>CDN肯定一开始是不知道源服务器给了什么内容的，就需要主服务器将静态内容提前push到CDN服务器上面，当世界各地的用户需要访问网站的时候，就近的CDN就把内容响应到客户端，这也就是说如果你的静态博客像hexo这样的，在本地发布好才上传的博客，就可以先将静态的内容通过主服务器缓存到CDN服务器上面，这样客户端访问就可以飞快的运行。<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227100752.png" alt=""><br>如果是动态内容，由于主服务器没办法预测用户会产生怎么样的动态数据，所以也就没办法提前缓存到CDN服务器上面，这样的话CDN的作用就不是很大了，虽然也有CDN能够提高动态的服务，比方说时间。时间是一直变动的，如果一直让主服务器提供时间的动态内容，万一主服务器产生了网络的波动，时间就没办法同步。这时候就可以采用CDN上面的接口。有些CDN会提供类似的时间接口，让主服务器用CDN上面的接口，这样用户就可以直接在CDN上面获取时间，而不是通过主服务器了<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227102557.png" alt=""><br>CDN的设置无形中给主服务器设置了一道墙，因为访问主服务器的内容就得先访问CDN服务器，这样就能减少或者避免DDOS攻击，但是这样一来就会攻击CDN服务器了。这样的话CDN服务器接受的了吗？</p><h1 id="安全性和可靠性"><a href="#安全性和可靠性" class="headerlink" title="安全性和可靠性"></a>安全性和可靠性</h1><p>CDN的老板们肯定考虑过这个问题，他们将检测多台服务器的负载情况，如果说某台服务器超载了，那么就把用户的请求移动到没有超载的CDN服务器上面，这种情况也称之为负载均衡。<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227102959.png" alt=""><br>但是CDN是怎么将这些流量转移到别的服务器的呢？这里值得一提的是这个名为任播的技术，利用它的通信方式，服务器对外都拥有同样的ip地址<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227103208.png" alt=""><br>如果这个ip地址收到用户的请求之后，请求就会由距离最近的CDN服务器响应，同样的道理，只要使用这个技术，不管你的攻击有多猛烈，都可以将流量转移到没有超载的服务器上面<br>不仅如此，CDN还会帮你把文件进行最小化或者压缩文档，就和webpack打包之后生成的js/css代码类似，省略掉不必要的字符后都是一行的。<br>最后正式因为CDN更加接近用户提供服务，大大减小了CDN到源服务器之间的带宽的占用和使用</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>大部分的镜像源和网站都会使用CDN，比如npm的unpkg，hexo使用的jsdelivr，这些免费的东西最后可能还是会避免不了被禁用的命运。比如后者在国内的驾驶照就被吊销了，只能使用所谓的“附近”节点，导致hexo有段时间直接GG，好在现在笔者所处的位置访问还算ok，可能以后会考虑部署到自己的服务器上面并购置CDN包吧。</p>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue打包优化+可视化js体积</title>
      <link href="/posts/105e254930e2/"/>
      <url>/posts/105e254930e2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>最近在了解性能优化的时候发现了vue的打包优化，其原理就是通过cdn的方式引入插件从而减小打包后的js和css体积。还有一个则是一款插件，可以让vue打包后以网页的形式显示js和css体积，更加直观。</p></div><h1 id="webpack-bundle-analyzer"><a href="#webpack-bundle-analyzer" class="headerlink" title="webpack-bundle-analyzer"></a>webpack-bundle-analyzer</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">效果预览</button></li><li class="tab"><button type="button" data-href="#test-2">安装方式</button></li><li class="tab"><button type="button" data-href="#test-3">使用教程</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>鼠标移动到上面会显示相关的js大小<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220225123114.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>项目地址：<a href="https://github.com/webpack-contrib/webpack-bundle-analyzer">传送门</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># NPM</span></span><br><span class="line">npm install --save-dev webpack-bundle-analyzer</span><br><span class="line"><span class="comment"># Yarn</span></span><br><span class="line">yarn add -D webpack-bundle-analyzer</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ol><li>安装</li><li>打开<code>package.json</code>，修改<code>script</code>下面的<code>build</code><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;serve&quot;</span>: <span class="string">&quot;vue-cli-service serve&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;build&quot;</span>: <span class="string">&quot;vue-cli-service build --report&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;vue-cli-service lint&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>新建<code>vue.config.js</code>写入以下内容<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BundleAnalyzerPlugin = <span class="built_in">require</span>(<span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>).BundleAnalyzerPlugin;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="keyword">new</span> BundleAnalyzerPlugin()</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>npm run build</code>打包项目，会在dist下面生成一个<code>report.html</code>，右键运行</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="vue打包优化-cdn"><a href="#vue打包优化-cdn" class="headerlink" title="vue打包优化+cdn"></a>vue打包优化+cdn</h1><p>原理：通过cdn的方式引入插件从而减小打包后的js和css体积<br>这里要用到<code>configureWebpack</code>里面的<code>externals</code>配置项，简单说一下该配置项:就是不通过npm下载的类库，在html文件中以script引入，然后在页面中使用import导入的这种方式<br>写法如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BundleAnalyzerPlugin = <span class="built_in">require</span>(<span class="string">&#x27;webpack-bundle-analyzer&#x27;</span>).BundleAnalyzerPlugin;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">    <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">        <span class="attr">externals</span>:&#123;</span><br><span class="line">            <span class="string">&#x27;vue&#x27;</span>:<span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;vue-router&#x27;</span>:<span class="string">&#x27;VueRouter&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;vuex&#x27;</span>:<span class="string">&#x27;Vuex&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;vuetify&#x27;</span>:<span class="string">&#x27;Vuetify&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="keyword">new</span> BundleAnalyzerPlugin()</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>其中 配置项里面的键指的是<code>package.json</code>中依赖的名字，后面跟的是对应的cdn里面的全局变量，一般来说只要上述三个加ui（如果你的ui按需引入则不用添加上去）达到减小打包体积。<br>注意:</p><ol><li>你的页面有多少个全局插件，就引入多少个对应的值<br>然后在<code>public</code>下面的<code>index.html</code>中配置插件的地址，可以用免费的cdn引入，推荐bootcdn<a href="https://www.bootcdn.cn/">传送门</a>。<br>接着看你自己依赖中写的对应的版本，这里我的依赖放出来演示一下<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;core-js&quot;</span>: <span class="string">&quot;^3.6.5&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;echarts&quot;</span>: <span class="string">&quot;^5.3.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;less-loader&quot;</span>: <span class="string">&quot;^6.2.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;nanoid&quot;</span>: <span class="string">&quot;^3.2.0&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;pubsub-js&quot;</span>: <span class="string">&quot;^1.9.4&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;vue&quot;</span>: <span class="string">&quot;^2.6.11&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;vue-clock-lonlyape&quot;</span>: <span class="string">&quot;^1.2.1&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;vue-router&quot;</span>: <span class="string">&quot;^3.5.3&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;vuetify&quot;</span>: <span class="string">&quot;^2.6.2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;vuex&quot;</span>: <span class="string">&quot;^3.6.2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;vuex-persist&quot;</span>: <span class="string">&quot;^3.1.3&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line">        externals:&#123;</span><br><span class="line">          &#x27;vue&#x27;:&#x27;Vue&#x27;,</span><br><span class="line">          &#x27;vue-router&#x27;:&#x27;VueRouter&#x27;,</span><br><span class="line">          &#x27;vuex&#x27;:&#x27;Vuex&#x27;,</span><br><span class="line">          &#x27;vuetify&#x27;:&#x27;Vuetify&#x27;,</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure>举例这个vue是<code>2.6.11</code>版本的，就打开bootcdn搜索vue，找到该版本并复制<code>min.js</code><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220225142247.png" alt=""><br>从官网上拷贝到相应的cdn地址之后引入：<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220225124252.png" alt=""><br>之后重新打包即可看到体积比之前减小了很多。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客网刷题record</title>
      <link href="/posts/2d20c31c4911/"/>
      <url>/posts/2d20c31c4911/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>记录一下牛客网的错题记录以及知识点，用于查漏补缺</p></div><h1 id="基础不牢，地动山摇Day1"><a href="#基础不牢，地动山摇Day1" class="headerlink" title="基础不牢，地动山摇Day1"></a>基础不牢，地动山摇Day1</h1><details class="folding-tag" blue><summary> 行内元素 </summary>              <div class='content'>              <p>行内元素典型代表 span  ,a,  ,strong , em,  del,  ins<br>特点：</p><ol><li>在一行上显示</li><li>不能直接设置宽高</li><li>元素的宽和高就是内容撑开的宽高。</li></ol><p>行内块元素（内联元素）典型代表  input  img<br>特点：</p><ol><li>在一行上显示</li><li>可以设置宽高</li></ol><p>块元素典型代表,div,h1-h6,p,ul,li<br>特点: </p><ol><li>独占一行</li><li>可以设置宽高</li><li>嵌套（包含）下，子块元素宽度（没有定义情况下）和父块元素宽度默认一致。<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220222191634.png" alt=""><br>行内元素不可以设置宽高，但是可以设置   左右padding、左右margin</li></ol>              </div>            </details><details class="folding-tag" blue><summary> `link`和`import` </summary>              <div class='content'>              <p>link除了引用样式文件，还可以引用图片等资源文件，而import只引用样式文件<br>link属于html范畴 import属于css范畴<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;any&quot;</span> <span class="attr">mask</span> <span class="attr">href</span>=<span class="string">&quot;//www.baidu.com/img/baidu.svg&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><br>兼容性不同，link不存在兼容性的问题，import在IE5以上支持，是css2.1新增的<br>在样式表文件可以使用import导入其它的样式表文件，而link不可以<br>link引用CSS时，在页面载入时同时加载；@import需要页面网页完全载入以后加载。<br>link支持使用Javascript控制DOM去改变样式；而@import不支持。<br>原文链接：<a href="https://blog.csdn.net/lxcao/article/details/52639442">https://blog.csdn.net/lxcao/article/details/52639442</a></p>              </div>            </details><details class="folding-tag" blue><summary> DOM事件 </summary>              <div class='content'>              <p>onchange()  事件会在域的内容改变时发生<br>比如：<code>&lt;input type=&quot;text&quot;&gt;, &lt;select&gt;, &lt;textarea&gt;</code></p><p>onblur()  会在对象失去焦点时发生</p>              </div>            </details><details class="folding-tag" blue><summary> css选择器 </summary>              <div class='content'>              <p>这次主要错在了相邻兄弟选择器<br>eg<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span> + <span class="selector-class">.b</span>&#123;xxx&#125;</span><br></pre></td></tr></table></figure><br>这样的是选择兄弟中第一个叫b的人，而不是所有兄弟b</p>              </div>            </details><details class="folding-tag" blue><summary> input的元素 </summary>              <div class='content'>              <p>text password radio checkbox submit reset file image search button<br>email url number range color<br>关于时间 (date, month, week, time, datetime, datetime-local)</p>              </div>            </details><details class="folding-tag" blue><summary> 获取用户位置H5 </summary>              <div class='content'>              <p><code>getCurrentPosition()</code></p>              </div>            </details><details class="folding-tag" blue><summary> fieldset </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220222191949.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> audio和video </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220222192302.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220222192326.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224164217.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> DHTML </summary>              <div class='content'>              <p>DHTML 将 HTML、JavaScript、DOM 以及 CSS 组合在一起，用于创造动态性更强的网页。<br>通过 JavaScript 和 HTML DOM，能够动态地改变 HTML 元素的样式。<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223205919.png" alt=""><br>DHTML具有三个主要优点：动态样式、动态内容、动态定位</p>              </div>            </details><details class="folding-tag" blue><summary> H5中可以省略结束标记的标签 </summary>              <div class='content'>              <p>选C，html5中可以省略结束标记的元素有<br>1、dd<br>2、dt<br>3、li<br>4、p<br>5、optgroup<br>6、option<br>7、rt<br>8、rp<br>9、thread<br>10、tfoot<br>11、tr<br>12、td<br>13、th </p>              </div>            </details><details class="folding-tag" blue><summary> 锚伪类 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220222192700.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> nthchild的n从0开始 </summary>              <div class='content'>              <p>xx</p>              </div>            </details><details class="folding-tag" blue><summary> BFC </summary>              <div class='content'>              <p>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与,<br>哪些情况会产生BFC:<br>根元素<br>float属性不为none<br>position为absolute或fixed<br>display为inline-block, table-cell, table-caption, flex, inline-flex<br>overflow不为visible<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223195229.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223195252.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> H5新增的标签 </summary>              <div class='content'>              <p>新增header，footer，nav，article，section，aside，datalist，audio，video，embed，input属性<br>没有head！！！</p>              </div>            </details><details class="folding-tag" blue><summary> ul和ol </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;blockquote&gt; 标签定义块引用。 &lt;h1&gt; - &lt;h6&gt; 标签可定义标题。 &lt;strong&gt; 标签和 &lt;em&gt; 标签一样，用于强调文本，但不加粗，是斜体。它强调的程度更强一些。 &lt;a&gt;标签定义超链接，用于从一张页面链接到另一张页面。 &lt;p&gt;标签定义段落。 &lt;section&gt; 标签定义文档中的节（section、区段）。 &lt;nav&gt; 标签定义导航链接的部分。 &lt;ul&gt; 标签定义无序列表。 &lt;ol&gt; 标签定义有序列表。</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> `button`不建议嵌套`a` </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A：&lt;p&gt; 元素的父元素不能是 &lt;a&gt; 元素（最后一个 &lt;p&gt; 元素不满足这条件），见 MDN</span><br><span class="line">B: &lt;button&gt; 是行内块元素，可以嵌套行内元素。但是，不推荐嵌套 &lt;a&gt; 元素！！！</span><br><span class="line">   在比较多的 UI 库中，都是 &lt;a&gt; 元素嵌套 &lt;button&gt; 元素的。（自己试一下就知道区别了）</span><br><span class="line">C：正确</span><br><span class="line">D：&lt;dl&gt;、&lt;dt&gt;、&lt;dd&gt; 、&lt;h&gt;这些 标题标签 不推荐嵌套块级元素</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> `img` </summary>              <div class='content'>              <p><code>img</code>是<code>src</code>不是<code>href</code></p>              </div>            </details><details class="folding-tag" blue><summary> 定位 </summary>              <div class='content'>              <p>relative是相对于自身进行偏移的</p>              </div>            </details><h1 id="基础不牢，地动山摇Day2"><a href="#基础不牢，地动山摇Day2" class="headerlink" title="基础不牢，地动山摇Day2"></a>基础不牢，地动山摇Day2</h1><div class="note primary flat"><p>今天先回顾一下day1的错题，然后今天开始有每日总结</p></div><details class="folding-tag" blue><summary> H5元素 </summary>              <div class='content'>              <p>h5没有删除small元素<br>废除了能用css代替的元素：basefont、big、center、font、s、strike、tt、u</p>              </div>            </details><details class="folding-tag" cyan><summary> 空元素 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223104325.png" alt=""><br><code>address</code>用于定义文档或文章的作者/拥有者的联系信息。<br><code>&lt;embed&gt;</code> 标签定义嵌入的内容，比如插件。<br><code>&lt;wbr&gt;</code>元素来添加 Word Break Opportunity（单词换行时机）。</p>              </div>            </details><details class="folding-tag" cyan><summary> date </summary>              <div class='content'>              <p><code>&lt;input type=&quot;datetime-local&quot; &gt;</code>可以用来显示本地时间，且时间不可以修改</p>              </div>            </details><details class="folding-tag" cyan><summary> meta标签 </summary>              <div class='content'>              <p>meta标签是描述一些基本的元数据<br>head标签可以包含，title、meta、link、script 等<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223110914.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> dl标签 </summary>              <div class='content'>              <p>dl标签定义一个描述列表<br>dl标签和dt标签（定义项目/名字）和dd标签（描述每一个项目/名字）一起使用<br>且dt和dd同级，但dt要在dd前面</p>              </div>            </details><details class="folding-tag" cyan><summary> radio属性与label绑定 </summary>              <div class='content'>              <p>input中的radio属性以name来划分组，有且仅有一个被选中<br>label和radio绑定有两种方法</p><ol><li>label和input同级，label的for属性值与input的id相同<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;radioA&quot;</span> <span class="attr">name</span>=<span class="string">&quot;radio1&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;radioA&quot;</span>&gt;</span>这是radioA<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;radioB&quot;</span> <span class="attr">name</span>=<span class="string">&quot;radio1&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;radioB&quot;</span>&gt;</span>这是radioB<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>label里面嵌套input<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;radio2&quot;</span>&gt;</span>这是radioA<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;radio2&quot;</span>&gt;</span>这是radioB<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>另外注意label只有两个属性for（规定 label 绑定到哪个表单元素）和form（规定 label 字段所属的一个或多个表单）</li></ol>              </div>            </details><details class="folding-tag" cyan><summary> 注释问题 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223105322.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> object元素 </summary>              <div class='content'>              <p>称为html嵌入对象元素，表示引入一个外部资源，这个资源可能是一张图片，一个嵌入的浏览上下文，亦或是一个插件所使用的资源<br><code>param</code>用来为object或applet元素定义的对象或小程序进行初始化参数设置，param为object、applet的子元素，因此param只可以放置在object、applet元素的标签内容中。</p>              </div>            </details><details class="folding-tag" cyan><summary> contextmenu 和 spellcheck </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223105622.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> 脱标 </summary>              <div class='content'>              <p>浮动（float）、固定定位（fixed）和绝对定位（absolute）都会使元素脱离文档流</p>              </div>            </details><details class="folding-tag" cyan><summary> track标签 </summary>              <div class='content'>              <p><track> 标签为诸如 video 元素之类的媒介规定外部文本轨道。</p><p>用于规定字幕文件或其他包含文本的文件，当媒介播放时，这些文件是可见的。</p><p><track> 标签是 HTML 5 中的新标签。<br>目前所有主流浏览器都不支持 <track> 标签</p>              </div>            </details><details class="folding-tag" cyan><summary> canvas和svg比较 </summary>              <div class='content'>              <p>Canvas 与 SVG 的比较<br>下表列出了 canvas 与 SVG 之间的一些不同之处。</p><p>Canvas<br>依赖分辨率<br>不支持事件处理器<br>弱的文本渲染能力<br>能够以 .png 或 .jpg 格式保存结果图像<br>最适合图像密集型的游戏，其中的许多对象会被频繁重绘<br>Canvas 是逐像素进行渲染的。</p><p>在 canvas 中，一旦图形被绘制完成，它就不会继续得到浏览器的关注。如果其位置发生变化，那么整个场景也需要重新绘制，包括任何或许已被图形覆盖的对象。</p><p>什么是SVG?<br>SVG 指可伸缩矢量图形 (Scalable Vector Graphics)<br>SVG 用来定义用于网络的基于矢量的图形<br>SVG 使用 XML 格式定义图形<br>SVG 图像在放大或改变尺寸的情况下其图形质量不会有所损失<br>SVG 是万维网联盟的标准<br>SVG 与诸如 DOM 和 XSL 之类的 W3C 标准是一个整体<br>(SVG是HTML下的一个分支)</p><p>SVG<br>不依赖分辨率<br>支持事件处理器<br>最适合带有大型渲染区域的应用程序（比如谷歌地图）<br>复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）<br>不适合游戏应用</p>              </div>            </details><details class="folding-tag" cyan><summary> 高亮显示 </summary>              <div class='content'>              <p>mark<br>jquery的话是highlight<br>（1）highlight jQuery中的，突出特效，通过改变背景颜色来隐藏或者显示一个元素<br>（2）mark h5中的标签，定义带有记号的文本，文本高亮显示<br>（3）strong HTML中的标签，定义重要文本，用来加粗文本<br>（4）blink 是js中的方法，用于显示闪动的字符串，不能用于ie，Chrome，Safari</p>              </div>            </details><details class="folding-tag" cyan><summary> form属性 </summary>              <div class='content'>              <p>首先form的methods里面只有get和post 其他的方法是在ajax里面的<br>然后enctype属性规定发送到服务器之前一个如何对表单数据进行编码，它的默认值是<code>application/x-www-form-urlencoded</code></p>              </div>            </details><details class="folding-tag" cyan><summary> h5新特性 </summary>              <div class='content'>              <p>audio和video支持<br>Canvas<br>localStorage<br>WebSocket<br>…</p>              </div>            </details><details class="folding-tag" cyan><summary> 属性值顺序 </summary>              <div class='content'>              <p>上右下左 顺时针</p>              </div>            </details><details class="folding-tag" cyan><summary> 获取selected文本框的值或文本 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223123244.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> extra 知识 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223123424.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> 父类高度塌陷问题 </summary>              <div class='content'>              <p>如果子元素都是浮动</p><ol><li>直接给父元素设置高度，在子元素改变的情况下，此方法使用起来比较繁杂。</li><li>给父元素直接设置 overflow:hidden;样式 </li><li>父元结束标签之前加空div，样式为 clear：both； </li><li>伪元素选择器,父元素加上clearfix</li></ol>              </div>            </details><details class="folding-tag" cyan><summary> jq滑动 </summary>              <div class='content'>              <p><code>slideUp()</code>和<code>slideDown</code>都是jQuery函数，<code>slideUp()</code>通过使用滑动效果，隐藏被选元素，如果元素已显示出来的话。<code>slideDown()</code> 方法通过使用滑动效果，显示隐藏的被选元素。</p>              </div>            </details><details class="folding-tag" cyan><summary> WebStorage </summary>              <div class='content'>              <p>其实就是localStorage和sessionStorage的统称。<br>WebStorage存储是HTML5为数据存储在客户端提供的一项重要功能，分为两种：sessionStorage(保存会话数据)和loaclStorage(在客户端长期保存数据)。</p>              </div>            </details><details class="folding-tag" cyan><summary> svg标签 </summary>              <div class='content'>              <p>SVG 即 Scalable Vector Graphics，是一种用来绘制 矢量图 的 HTML5 标签。你只需定义好XML属性，就能获得一致的图像元素。<br>svg的嵌入：使用object标签才行 不能直接嵌入</p>              </div>            </details><details class="folding-tag" cyan><summary> 怪异模式/兼容模式 </summary>              <div class='content'>              <p>在 HTML 中，文档类型 doctype 的声明是必要的。在所有文档的头部，你都将会看到”&lt;!DOCTYPE html&gt;” 的身影。这个声明的目的是防止浏览器在渲染文档时，切换到我们称为“怪异模式(兼容模式)”的渲染模式。“&lt;!DOCTYPE html&gt;” 确保浏览器按照最佳的相关规范进行渲染，而不是使用一个不符合规范的渲染模式。<br>也就是没有声明的话是进入怪异模式</p>              </div>            </details><details class="folding-tag" cyan><summary> h5跨文档消息传输 </summary>              <div class='content'>              <p>h5提供了网页文档之间发送信息和相互接收的功能。使用这个功能，只要获得网页窗口所在对象的实例，既可以实现同域 跨域的通信</p>              </div>            </details><details class="folding-tag" cyan><summary> 权重计算 </summary>              <div class='content'>              <p>1.通配符选择器和继承:权重为0， 2.标签选择器:权重为0001 3.类选择器:权重为0010 4.id选择器:权重为0100 5.行内样式:权重为1000 6.!important:权重为无穷大<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223200820.png" alt=""><br>另外值得一提的是 继承的优先级是没有自身设置的高的 即使继承的是<code>!important</code></p>              </div>            </details><details class="folding-tag" cyan><summary> h5新增 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223195547.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223195557.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> border边框 </summary>              <div class='content'>              <p>none 无边框样式 自然没有宽度这一说<br>0 边框宽度0<br>定义边框的时候除了设置宽度还要设置边框的样式才行</p>              </div>            </details><details class="folding-tag" cyan><summary> 默认加粗 </summary>              <div class='content'>              <p>h1-6和th<br>em是斜体<br>caption是表格标题</p>              </div>            </details><details class="folding-tag" cyan><summary> hidden和none </summary>              <div class='content'>              <p>hidden的元素没有被渲染 但是元素内容是被创建了<br>none会触发回流<br>hidden会触发重绘<br>repaint(重绘) ，repaint发生更改时，元素的外观被改变，且在没有改变布局的情况下发生，如改变outline,visibility,background color，不会影响到dom结构渲染。</p><p>reflow(渲染)，与repaint区别就是他会影响到dom的结构渲染，同时他会触发repaint，他会改变他本身与所有父辈元素(祖先)，这种开销是非常昂贵的，导致性能下降是必然的，页面元素越多效果越明显。<br>回流一定会重绘 重绘不一定回流</p>              </div>            </details><details class="folding-tag" cyan><summary> dom中htmldivelement的正确继承关系是 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223200333.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> link标签的加载和解析 </summary>              <div class='content'>              <p>link标签是同时加载的 先加载完成的优先解析<br>js才是先加完一个再加另外一个</p>              </div>            </details><details class="folding-tag" cyan><summary> input标签的readonly </summary>              <div class='content'>              <p>readonly只读，用户不可以修改，但可以复制，也可以通过tab切换到该字段，还可以用js设置条件控制用户是否可以更改输入内容<br>step规定输入字段的合法数字间隔 比如说2 那么合法数字就是-2 0 2 4等<br>为负数或0的时候默认为1<br>disabled指当 input 元素加载时禁用此元素。input内容不会随着表单提交<br>readonly规定输入字段为只读。input内容会随着表单提交。<br>无论设置readonly还是disabled，通过js脚本都能更改input的value（亲测可以）</p>              </div>            </details><details class="folding-tag" cyan><summary> h5新增的input元素的type属性 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223201207.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> h5大小写 </summary>              <div class='content'>              <p>h5对大小写不敏感 但为了规范推荐小写</p>              </div>            </details><details class="folding-tag" cyan><summary> h5的`data-` </summary>              <div class='content'>              <p>h5允许使用<code>data-xx</code>来自定义数据</p>              </div>            </details><details class="folding-tag" cyan><summary> h5之前的版本是 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223210854.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> 优化滚动性能 </summary>              <div class='content'>              <p>重绘重排节流防抖<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220223210917.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> p元素a元素包含问题 </summary>              <div class='content'>              <p>p不能包含任何块级元素包括自身<br>a可以包含任何其他元素除了自身</p>              </div>            </details><details class="folding-tag" cyan><summary> document </summary>              <div class='content'>              <p>dom树的根节点是document<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224162234.png" alt=""><br><code>getElementsByName()</code>是获取name<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224162317.png" alt=""></p>              </div>            </details><h1 id="基础不牢，地动山摇Day3"><a href="#基础不牢，地动山摇Day3" class="headerlink" title="基础不牢，地动山摇Day3"></a>基础不牢，地动山摇Day3</h1><details class="folding-tag" cyan><summary> a标签 </summary>              <div class='content'>              <p>有href才有下划线<br>href 属性的可选有：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 绝对路径（href = &quot;https://www.baidu.com&quot;）</span><br><span class="line">2. 相对路径（href = &quot;index.html&quot;）</span><br><span class="line">3. 锚（href = &quot;#top&quot;）</span><br></pre></td></tr></table></figure></p>              </div>            </details><details class="folding-tag" cyan><summary> 内容重要程度mark strong em b </summary>              <div class='content'>              <p>重要程度递减<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224092010.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> 重绘和重排(重点) </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224092054.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> td单元格 </summary>              <div class='content'>              <p>td标准意义指的是单元格 而不是列</p>              </div>            </details><details class="folding-tag" cyan><summary> textarea标签 </summary>              <div class='content'>              <p>textarea不能设置宽度 但是可以通过cols控制宽度</p>              </div>            </details><details class="folding-tag" cyan><summary> embed标签 </summary>              <div class='content'>              <p>定义嵌入的内容 比如插件 可以设置高度和宽度</p>              </div>            </details><details class="folding-tag" cyan><summary> head间的代码 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224092628.png" alt=""><br>其实页面是有能力进行响应式设计的，但是只是没有规范到合适的大小</p>              </div>            </details><details class="folding-tag" cyan><summary> vm视口单位 </summary>              <div class='content'>              <p>vm是视口单位，将视口分为100份</p>              </div>            </details><details class="folding-tag" cyan><summary> 无继承性的属性值 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224092829.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> 有继承性的属性值 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224092849.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224092906.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> q标签 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224093116.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> 定义滑块range </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224093154.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> 上标文本sup下标文本sub </summary>              <div class='content'>              <p>如上</p>              </div>            </details><details class="folding-tag" cyan><summary> manifest标签 </summary>              <div class='content'>              <p>应用缓存资源清单<br>带有缓存 manifest 的 HTML 文档（用于离线浏览）<br>manifest 文件是一个简单的文本文件，列举出了浏览器用于离线访问而缓存的资源。<br>HTML5 引入了应用程序缓存，即意味着 Web 应用程序可以被缓存，然后在无互联网连接的时候进行访问。<br>应用程序缓存使得应用程序有三个优点：</p><ol><li>离线浏览 - 用户可以在离线时使用应用程序</li><li>快速 - 缓存的资源可以更快地加载</li><li>减少服务器加载 - 浏览器只从服务器上下载已更新/已更改的资源</li></ol>              </div>            </details><details class="folding-tag" cyan><summary> h5新特性 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224094058.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> HTML5 是作为Flash的替代技术出现 </summary>              <div class='content'>                            </div>            </details><details class="folding-tag" cyan><summary> 浏览器渲染流程 </summary>              <div class='content'>              <ol><li>解析HTML并构建DOM树</li><li>构建render树</li><li>布局render树</li><li>绘制render树</li></ol>              </div>            </details><details class="folding-tag" cyan><summary> 创建带有id的dom元素有什么副作用 </summary>              <div class='content'>              <p>首先会增加内存负担，然后是会创建同名的全局变量，可以用<code>window[&#39;xx&#39;]</code>访问</p>              </div>            </details><details class="folding-tag" cyan><summary> css加载 </summary>              <div class='content'>              <p>css加载不会阻塞DOM树的解析<br>css加载会阻塞DOM树的渲染<br>css加载会阻塞后面js语句的执行</p>              </div>            </details><details class="folding-tag" cyan><summary> 优化滚动性能 </summary>              <div class='content'>              <ol><li>在滚动中对滚动函数进行节流处理</li><li>滚动中减少导致重绘的操作</li><li>滚动中减少导致重排的操作</li><li>对滚动事件进行防抖处理</li></ol>              </div>            </details><details class="folding-tag" cyan><summary> web表单的图形验证码 </summary>              <div class='content'>              <p>最好不要把验证码文本放在客户端 否则虫或者是恶意程序依旧可以通过各种手段获取你嵌入在html文本或者保存在cookie中的正确验证码文本，模拟表单提交来达到攻击的目的。<br>浏览器也不能判断验证码<br>正确的方式是：发送到客户端的只有图片形式的验证码，服务器端保存cookie对应的图形验证码的正确文本。客户端表单提交时到服务器端验证。</p>              </div>            </details><details class="folding-tag" cyan><summary> 外边距塌陷问题 </summary>              <div class='content'>              <p>当两个在标准流中相邻（兄弟或父子关系）的块级元素的外边距组合在一起的时候，垂直方向上会发生外边距塌陷的问题，计算方式：</p><ol><li>两个都为正，取最大</li><li>一正一负加起来</li><li>两个负 取绝对值最大</li></ol>              </div>            </details><details class="folding-tag" cyan><summary> clientWidth和offsetWidth </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224153703.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> window对象 </summary>              <div class='content'>              <p>如果页面中包含框架，那么每个框架都拥有自己的window对象</p>              </div>            </details><details class="folding-tag" cyan><summary> a标签 </summary>              <div class='content'>              <p>在a标签的href中添加<code>javascript:;</code>可以使页面不跳转<br><code>#</code>不是，是当前位置</p>              </div>            </details><details class="folding-tag" cyan><summary> json和xml比较 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON 和 XML 优缺点的比较 （1）【XML】的优缺点 优点： （1）格式统一，符合标准； （2）容易与其他系统进行远程交互，数据传输比较方便。 缺点： （1）XML文件庞大，文件格式复杂，传输占带宽； （2）服务器端和客户端都需要花费大量代码来解析XML，导致服务器端和客户端代码变得异常复杂且不易维护； （3）客户端不同浏览器之间解析XML的方式不一致，需要重复编写很多代码； （4）服务器端和客户端解析XML花费较多的资源和时间。 那么除了XML格式，还有一种叫JSON （2）【JSON】的优缺点 优点： （1）数据格式比较简单，易于读写，格式都是压缩的，占用带宽小； （2）易于解析，客户端JavaScript可以简单的通过eval_r()进行JSON数据的读取； （3）支持多种语言，包括ActionScript, C, C#, ColdFusion, Java, JavaScript, Perl, PHP, Python, Ruby等服务器端语言，便于服务器端的解析； （4）在PHP世界，已经有PHP-JSON和JSON-PHP出现了，偏于PHP序列化后的程序直接调用，PHP服务器端的对象、数组等能直接生成JSON格式，便于客户端的访问提取； （5）因为JSON格式能直接为服务器端代码使用，大大简化了服务器端和客户端的代码开发量，且完成任务不变，并且易于维护。 缺点： （1） 没有XML格式这么推广的深入人心和喜用广泛，没有XML那么通用性； （2）JSON格式目前在Web Service中推广还属于初级阶段</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" cyan><summary> 跨域 </summary>              <div class='content'>              <p>字体有的可能会受到影响<br>图片和css这类的 采用src的一般不会 因为src本质是get请求</p>              </div>            </details><details class="folding-tag" cyan><summary> enctype属性 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224162843.png" alt=""></p>              </div>            </details><details class="folding-tag" cyan><summary> html全局属性 </summary>              <div class='content'>              <p>html全局属性就是所有标签都能用的属性</p>              </div>            </details><h2 id="css-part"><a href="#css-part" class="headerlink" title="css part"></a>css part</h2><details class="folding-tag" blue><summary> margin外边距 </summary>              <div class='content'>              <p><code>margin:auto</code>是根据剩余的长度居中对齐 并不是0</p>              </div>            </details><details class="folding-tag" blue><summary> 定位 </summary>              <div class='content'>              <p>absolute是基于第一个static定位以外的父元素进行定位<br>static定位就是默认值 没有定位</p>              </div>            </details><details class="folding-tag" blue><summary> overflow </summary>              <div class='content'>              <p>参数是scroll时候，必会出现滚动条。<br>参数是auto时候，子元素内容大于父元素时出现滚动条。<br>参数是visible时候，溢出的内容出现在父元素之外。<br>参数是hidden时候，溢出隐藏。</p>              </div>            </details><details class="folding-tag" blue><summary> 页面元素的优先显示以及优先级 </summary>              <div class='content'>              <p>在不涉及样式的情况下 优先显示指的是html文档加载时从上到下加载 只与标签的上下顺序有关，与标签的选用无关。<br>优先级是帧元素比表单元素优先 表单元素比非表单元素优先</p>              </div>            </details><details class="folding-tag" blue><summary> 浮动元素重叠 </summary>              <div class='content'>              <ol><li>行内元素和浮动元素发生重叠的时候，行内元素的边框 背景 内容都会在浮动元素之上</li><li>块状元素和浮动元素发生重叠的时候，边框，背景在浮动元素之下，内容在浮动元素之上</li></ol>              </div>            </details><details class="folding-tag" blue><summary> `:before`选择器 </summary>              <div class='content'>              <p>早在css2.1的时候就已经定义了</p>              </div>            </details><details class="folding-tag" blue><summary> `background-position`背景定位 </summary>              <div class='content'>              <p>用处：配合<code>background-image</code>属性一起使用，用于设置背景图片在盒子中的位置<br>参数：<code>xpos ypos |x% y% |x y三种,</code><br>如果只写第一个参数 那么第二个参数会默认为<code>center|50%|容器高度一半的px</code><br>Xpos：规定水平方向的对齐方式,值有left,right,center<br>Ypos：规定垂直方向的对齐方式,值有top,bottom,center<br>x%:规定图片水平方向的距离。<br>你会不会以为这个x%就是父级容器宽度的x%？那你就想错了哦，这里的x%指的是父级容器的宽度减去图片的宽度后的差值的x%。<br>举个栗子：background-position：50%，20%；<br>图片的宽度为     imgwidth：100px；高度为     imgheight：100px；<br>容器的宽度为     conwidth：200px；高度为     conheight：200px；<br>那么此时图片的左顶点距离容器的左顶点的水平距离就是(conwidth-imgwidth)<em>50%=50px,而不是conwidth</em>50%=100px；(很好理解的吧，不然盒子宽度200px，图片宽度100px，又距离左边100px，岂不是50%没实现水平居中而紧靠右了吗？)<br>由此也可以算出图片的左顶点距离容器的左顶点的垂直距离为20px<br>y%:对应x%<br>x:图片距离容器水平方向距离<br>y:图片距离容器垂直方向距离</p>              </div>            </details><details class="folding-tag" blue><summary> 字体三个单位 </summary>              <div class='content'>              <p>em的值并不是固定的， 会继承父级元素的字体大小。px为固定单位。 pt 绝对长度单位 </p>              </div>            </details><details class="folding-tag" blue><summary> 动画 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224203730.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> css sprite </summary>              <div class='content'>              <p>CSS Sprites在国内很多人叫css精灵，是一种网页图片应用处理方式。它允许你将一个页面涉及到的所有零星图片都包含到一张大图中去，这样一来，当访问该页面时，载入的图片就不会像以前那样一幅一幅地慢慢显示出来了。<br>利用CSS的“background-image”，“background- repeat”，“background-position”的组合进行背景定位，background-position可以用数字精确的定位出背景图片的位置。<br>利用CSS Sprites能很好地减少网页的http请求，从而大大的提高页面的性能，这也是CSS Sprites最大的优点，也是其被广泛传播和应用的主要原因；<br>CSS Sprites能减少图片的字节，曾经比较过多次3张图片合并成1张图片的字节总是小于这3张图片的字节总和。所以C错误<br>解决了网页设计师在图片命名上的困扰，只需对一张集合的图片上命名就可以了，不需要对每一个小元素进行命名，从而提高了网页的制作效率。<br>更换风格方便，只需要在一张或少张图片上修改图片的颜色或样式，整个网页的风格就可以改变。维护起来更加方便。</p>              </div>            </details><details class="folding-tag" blue><summary> cellpadding和cellspacing </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224212442.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> div 元素的哪些 CSS 属性的默认值为 0？ </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220224212703.png" alt=""></p>              </div>            </details><h1 id="基础不牢，地动山摇Day4"><a href="#基础不牢，地动山摇Day4" class="headerlink" title="基础不牢，地动山摇Day4"></a>基础不牢，地动山摇Day4</h1><p>今天不出意外css应该就结束然后进入js篇章<br>承接上面的css继续写<br><details class="folding-tag" blue><summary> `text-shadow`属性 </summary>              <div class='content'>              <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: h-shadow v-shadow blur color;</span><br></pre></td></tr></table></figure><p>h-shadow指的是水平阴影，必需<br>v-shadow是垂直阴影，必需<br>blur模糊 color颜色<br>可以说是：<br>阴影离开文字的横方向距离，阴影离开文字的纵方向距离，阴影的模糊半径，阴影的颜色</p>              </div>            </details><details class="folding-tag" blue><summary> 百分比单位 </summary>              <div class='content'>              <p>宽泛的讲这个百分比单位应该是相对于父元素的，但也有特例的情况：</p><ol><li>line-height的百分比是相对于自身字体的大小</li><li>fixed定位的百分比是相对于视口的</li></ol>              </div>            </details><details class="folding-tag" blue><summary> 理论上的最小动画间隔 </summary>              <div class='content'>              <p>多数显示器的刷新率是60hz 即每秒刷新60次，所以理论上最小间隔是<code>1/60*1000ms=16.7ms</code></p>              </div>            </details><details class="folding-tag" blue><summary> css预编译工具 </summary>              <div class='content'>              <p>CSS 预编译工具有stylus，sass，less</p>              </div>            </details><details class="folding-tag" blue><summary> `list-style-type` </summary>              <div class='content'>              <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//标记圆圈（默认）</span><br><span class="line"><span class="attribute">list-style-type</span>:circle;</span><br><span class="line">//方块</span><br><span class="line"><span class="attribute">list-style-type</span>:square;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220225152635.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> 伪类和伪元素的区别 </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">伪类  :link  :hover         伪元素  ::before    ::after</span><br></pre></td></tr></table></figure><p>其中伪类和伪元素的根本区别在于：它们是否创造了新的元素,,   这个新创造的元素就叫  “伪无素” 。<br>伪元素/伪对象：不存在在DOM文档中，是虚拟的元素，是创建新元素。 这个新元素(伪元素)  是某个元素的子元素，这个子元素虽然在逻辑上存在，但却并不实际存在于文档树中.<br>伪类：存在DOM文档中，(无标签,找不到,  只有符合触发条件时才能看到 ),  逻辑上存在但在文档树中却无须标识的“幽灵”分类。</p>              </div>            </details><details class="folding-tag" blue><summary> css继承 </summary>              <div class='content'>              <p>只有颜色，文字，字体间距行高对齐方式，和列表的样式可以继承<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220225154948.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> `text-overflow` </summary>              <div class='content'>              <p><code>text-overflow: ellipsis;</code>使超出的文字部分变成<code>「…」()</code></p>              </div>            </details><details class="folding-tag" blue><summary> `@font-face` </summary>              <div class='content'>              <p>css使用服务端字体的方式<code>@font-face</code><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220225160740.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> `currentColor` </summary>              <div class='content'>              <p>css3拓展了颜色值包括了currentColor关键字，它的值是计算之后的color值，当它被应用在color属性自身，相当于<code>color: inherit</code></p>              </div>            </details><details class="folding-tag" blue><summary> css注释 </summary>              <div class='content'>              <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*this is a comment*/</span></span><br></pre></td></tr></table></figure>              </div>            </details></p><h2 id="js篇"><a href="#js篇" class="headerlink" title="js篇"></a>js篇</h2><details class="folding-tag" blue><summary> 变量提升，函数提升 </summary>              <div class='content'>              <p>用var声明的变量会先在全局创建好然后赋值为undefined，最后在赋值为相应的值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jojo = <span class="string">&#x27;jostar&#x27;</span>;</span><br><span class="line"><span class="comment">//其实是</span></span><br><span class="line"><span class="keyword">var</span> jojo = <span class="literal">undefined</span>;</span><br><span class="line">jojo = <span class="string">&#x27;jostar&#x27;</span></span><br></pre></td></tr></table></figure><br>这就是变量提升。如果有多个同名变量提升，后面会覆盖前面的<br>函数提升的话，是js引擎把函数声明提前到了整个作用域的顶部，<br>举例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hoistFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    foo(); <span class="comment">// output: I am hoisted</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;I am hoisted&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hoistFunction();</span><br><span class="line"><span class="comment">//实际上是</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hoistFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;I am hoisted&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    foo(); <span class="comment">// output: I am hoisted</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hoistFunction();</span><br></pre></td></tr></table></figure><br>如果有多个同名函数提升 后面的会覆盖前面的<br>那么会考察到变量提升和函数提升是什么时候呢？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">3</span>);&#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">4</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = fn();</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure><br>这个时候是输出什么呢？<br>可以知道函数提升是大于变量提升的，所以此时的预编译应该是<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">4</span>);&#125;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    a=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line">a=<span class="number">1</span>;</span><br><span class="line">b=fn();</span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//2</span></span><br></pre></td></tr></table></figure></p>              </div>            </details><details class="folding-tag" blue><summary> ==与null与undefined </summary>              <div class='content'>              <p>在==的情况下，null和undefined与其他任何有意义的值比较都是返回false，只有它们两个比较的时候会返回true</p>              </div>            </details><details class="folding-tag" blue><summary> split </summary>              <div class='content'>              <p>split方法只能检测正则或者字符串，如果不是则返回typeerror</p>              </div>            </details><details class="folding-tag" blue><summary> history的back go forward </summary>              <div class='content'>              <p>go里面带数字 正数表示前进 负数表示后退</p>              </div>            </details><details class="folding-tag" blue><summary> JavaScript的全局函数 </summary>              <div class='content'>              <p>个人记忆方法：6（编码相关）+ 2（数据处理）+ 4（数字相关）+ 1（特殊）<br>编码相关：<br>    escape()、unescape()、encodeURI()、decodeURI()、<br>    encodeURIComponent()、decodeURIComponent()<br>数据处理：<br>    Number()、String()<br>数字相关：<br>    isFinite()、isNaN()、parseFloat()、parseInt()<br>特殊：<br>    eval()</p><p>ps:对于 getClass() 方法不确定，菜鸟教程上没有，Chrome 控制台也没提示。</p>              </div>            </details><h1 id="基础不牢，地动山摇Day5"><a href="#基础不牢，地动山摇Day5" class="headerlink" title="基础不牢，地动山摇Day5"></a>基础不牢，地动山摇Day5</h1><details class="folding-tag" blue><summary> 类型转换 </summary>              <div class='content'>              <p>在js中任何对象转化为布尔值都是true<br>只有<code>0,-0,NaN,&quot;&quot;,null,undefined</code>这六个值转化为布尔值才是false<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220226092430.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> js原始值 </summary>              <div class='content'>              <p>ECMAScript中，变量可以存放两种类型的值，即原始值和引用值。<br>原始值是存储在栈中的简单数据段，也就是说，它们的值直接存储在变量访问的位置。<br>引用值是存储在堆中的对象，也就是说，存储在变量处的值是一个指针，指向存储对象的内存处。<br>ECMAScript中有5种原始类型，即undefined、null、number、string、boolean。<br>选项中的值分别是：string、number、null，而最后一个是数组，数组是一个对象，所以是引用值。</p>              </div>            </details><details class="folding-tag" blue><summary> 对话框 </summary>              <div class='content'>              <p><code>prompt()</code></p>              </div>            </details><details class="folding-tag" blue><summary> defineProperty </summary>              <div class='content'>              <p><code>defineProperty</code>为对象设置属性后，该属性的描述符<code>writable</code>、<code>configurable</code>以及<code>enumberable</code>默认为false。<br><code>configurable</code>：可否修改，false则不能被删除等<br><code>enumberable</code>：可否枚举，false则不能被遍历，输出长度没有该项，不能打印该项</p>              </div>            </details><details class="folding-tag" blue><summary> Math函数 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220226095854.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> call 、bind 、 apply </summary>              <div class='content'>              <p>返回的第一个参数都是this指向的对象，区别在第二个参数，<br>call的第二个参数必须用逗号分割<code>p1,&#39;xx1&#39;,&#39;xx2&#39;</code><br>apply的第二个参数必须用数组<code>p1,[&#39;xx1&#39;,&#39;xx2&#39;]</code><br>bind和call一样 除了返回是函数<br>有两种情况需要注意，传null或undefined时，将是JS执行环境的全局变量。浏览器中是window，其它环境（如node）则是global。</p>              </div>            </details><details class="folding-tag" blue><summary> 请求头 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220226100314.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> 支持冒泡的函数 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220226100451.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> symbol </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220226142636.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> this </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220226142958.png" alt=""><br>在本题中，<code>var func = user.getCount</code>其实相当于<code>var func = function(){return this.count}</code>this指向的是window而不是user 所以会返回undefined</p>              </div>            </details><details class="folding-tag" blue><summary> `var a=b=3` </summary>              <div class='content'>              <p>相当于<code>var a=3 b=3</code>此时b是全局变量</p>              </div>            </details><details class="folding-tag" blue><summary> 定义函数的方式 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220226143955.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> 点操作符 </summary>              <div class='content'>              <p>通过点操作符添加的属性 会添加到数组最后一位<br>不可以用foreach遍历<br>不会影响length的值<br>可以用forin遍历 此时遍历出来的只有点操作符添加的属性</p>              </div>            </details><details class="folding-tag" blue><summary> +和- </summary>              <div class='content'>              <p>在+的情况下，如果有一者为字符串 那么最后返回的结果是字符串<br>在-的情况下，返回数字</p>              </div>            </details><details class="folding-tag" blue><summary> ==的隐式转化 </summary>              <div class='content'>              <p>在<code>==</code>的隐式转化中，是对两边进行<code>Number()</code>,<br><code>Number(true) = 1</code><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220226152448.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220228150026.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> 闭包 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220226152753.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> in操作符 </summary>              <div class='content'>              <p>对于数组属性需要指定数字形式的索引值来表示数组的属性名称所以<code>1 in [1]</code>,其中<code>[1]</code>的索引是0 返回false</p>              </div>            </details><details class="folding-tag" blue><summary> &&和> </summary>              <div class='content'>              <p><code>&gt;</code>的权重大于<code>&amp;&amp;</code>优先执行</p>              </div>            </details><details class="folding-tag" blue><summary> 微任务和宏任务 </summary>              <div class='content'>              <p><code>promise</code>是微任务 在当轮事件循环结束前执行<br><code>setTimeout</code>是宏任务 在下一轮事件循环执行</p>              </div>            </details><details class="folding-tag" blue><summary> isNaN方法 </summary>              <div class='content'>              <p>如果不是数字，才返回true<br>escape方法： 该方法返回对一个字符串编码后的结果字符串<br>eval方法：该方法将某个参数字符串作为一个JavaScript执行</p>              </div>            </details><details class="folding-tag" blue><summary> `Object.is()` </summary>              <div class='content'>              <p>其行为与<code>===</code>基本一致，不过有两处不同： <code>+0</code>不等于<code>-0</code>。 <code>NaN</code>等于自身。</p>              </div>            </details><details class="folding-tag" blue><summary> CommonJS规范，在任何模块代码的作用域下内置了以下哪些变量？ </summary>              <div class='content'>              <p>浏览器不兼容CommonJS的根本原因，在于缺少四个Node.js环境的变量。 module exports require global 来自阮一峰</p>              </div>            </details><details class="folding-tag" blue><summary> onerror事件 </summary>              <div class='content'>              <p><code>onerror</code>   事件 当图片不存在时,将触发；</p>              </div>            </details><h1 id="基础不牢，地动山摇Day6"><a href="#基础不牢，地动山摇Day6" class="headerlink" title="基础不牢，地动山摇Day6"></a>基础不牢，地动山摇Day6</h1><details class="folding-tag" blue><summary> delete篇 </summary>              <div class='content'>              <p>delete删除的是对象的属性 或者说如果不是对象上的 比如let const 这种 不会挂载到window对象上面的属性 就不能删除<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220228152622.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> js中的内置对象 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227144314.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> `'0\0'` </summary>              <div class='content'>              <p>在js中允许0作为除数，只有<code>&#39;0\0&#39;</code>的结果为NaN 其他都是Infinitely<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227151024.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> 动态语言和静态语言 </summary>              <div class='content'>              <p>看变量使用之前需不需要类型声明，需要的是静态 不需要的是动态<br>静态语言（强类型语言）<br>静态语言是在编译时变量的数据类型即可确定的语言，多数静态类型语言要求在使用变量之前必须声明数据类型。<br>例如：C++、Java、Delphi、C#等。</p><p>动态语言（弱类型语言）<br>动态语言是在运行时确定数据类型的语言。变量使用之前不需要类型声明，通常变量的类型是被赋值的那个值的类型。<br>例如PHP/ASP/Ruby/Python/Perl/ABAP/SQL/JavaScript/Unix Shell等等。</p>              </div>            </details><details class="folding-tag" blue><summary> 运算 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227160505.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227160531.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> 块内声明函数 </summary>              <div class='content'>              <p>在非严格模式下，块内声明函数可以用函数表达式的形式声明</p>              </div>            </details><details class="folding-tag" blue><summary> 构造器 </summary>              <div class='content'>              <p>构造函数的原型对象的构造器指回构造函数本身<br>构造函数里面如果不写return 那么返回创建的实例对象<br>写return 且return是一个基本数据类型的话 还是返回创建的实例对象<br>return的是一个对象的话 则返回该对象 原本指向实例对象的this会被无效化<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220228142935.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> trycatch </summary>              <div class='content'>              <p>try后面一定要接catch或者finally 也可以先catch后finally<br>然后如果存在finally 就一定会执行finally里面的内容<br>且如果finally是return的话，那么后面的内容就不会执行了。没有return才会执行后面的内容</p>              </div>            </details><details class="folding-tag" blue><summary> 数组api </summary>              <div class='content'>              <p><code>filter</code>是过滤出符合条件的元素。<br><code>every</code>是检测数组是否所有元素都满足条件。<br><code>some</code>是检测数组是否有满足条件的元素。<br><code>map</code>是遍历数组，且对每个元素进行操作。</p>              </div>            </details><details class="folding-tag" blue><summary> NaN相关 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227202155.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> 会改变数组的方法以及不会改变数组的方法 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227202308.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> 原型覆盖 </summary>              <div class='content'>              <p>如果用点操作符提前定义了原型中的一个属性，那么后面再定义原型的话会开辟新的空间覆盖掉原先的点操作符属性<br>如果点操作符后定义，那么原型中会增加属性</p>              </div>            </details><details class="folding-tag" blue><summary> typeof </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220227212201.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> length </summary>              <div class='content'>              <p>length是数组的属性不是方法 且不用带括号</p>              </div>            </details><h1 id="基础不牢，地动山摇Day7"><a href="#基础不牢，地动山摇Day7" class="headerlink" title="基础不牢，地动山摇Day7"></a>基础不牢，地动山摇Day7</h1><details class="folding-tag" blue><summary> class </summary>              <div class='content'>              <p>在class的方法里，前面有static 那么this指向类本身<br>没有static this指向类的实例化对象<br>类方法中有static 只能通过类调用 不能通过实例化对象调用<br>类方法前面没有static 那该方法只能通过实例化对象调用 不能通过类调用</p>              </div>            </details><details class="folding-tag" blue><summary> foreach </summary>              <div class='content'>              <p>该方法会忽略掉空元素</p>              </div>            </details><details class="folding-tag" blue><summary> toString </summary>              <div class='content'>              <p>toString会优先将小数点解析为数字小数点<br>所以存在这种情况会报错<br><code>2.toString()</code><br>正确的写法应该是<br><code>2. toString()</code><br>or<br><code>(2).toString()</code></p>              </div>            </details><details class="folding-tag" blue><summary> 跨域 </summary>              <div class='content'>              <p>只要 协议 、 域名 、 端口 有任何一个 不同, 都被当作是 不同 的域。</p>              </div>            </details><details class="folding-tag" blue><summary> 函数的执行与赋值 </summary>              <div class='content'>              <p>以一道题来讲解<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220228094341.png" alt=""><br>如果此时注释掉1<br>那么对于11行来说 只是将a这个函数赋值给了btn，所以会在整个执行结束之后输出1，点击的时候不会执行b的内容<br>如果此时注释掉2<br>那么对于10行来说，函数a执行 输出1 返回一个函数给btn 所以点击btn的时候 会输出2</p>              </div>            </details><details class="folding-tag" blue><summary> join方法 </summary>              <div class='content'>              <p>join是针对数组的 把数组的内容拼接成字符串 如果join内不加符号或者<code>undefined</code>默认用逗号隔开，如果是<code>&#39;&#39;</code>则没有间隔</p>              </div>            </details><details class="folding-tag" blue><summary> 不支持冒泡 </summary>              <div class='content'>              <p>妈（mouseenter）妈（mouseleave）不（blur）（unload）让（resize）浪（load）费（focus）</p>              </div>            </details><details class="folding-tag" blue><summary> eval </summary>              <div class='content'>              <p>eval 将会返回对最后一个表达式的求值结果。</p>              </div>            </details><details class="folding-tag" blue><summary> `hasOwnProperty`和`isPrototypeOf` </summary>              <div class='content'>              <p><code>hasOwnProperty</code>： 是用来判断一个对象是否有你给出名称的属性或对象。不过需要注意的是，此方法无法检查该对象的原型链中是否具有该属性，该属性必须是对象本身的一个成员。<br><code>isPrototypeOf</code> : 是用来判断要检查其原型链的对象是否存在于指定对象实例中，是则返回true，否则返回false。</p>              </div>            </details><details class="folding-tag" blue><summary> 函数加括号调用 引号调用 不加括号调用 </summary>              <div class='content'>              <p>加括号 相当于立刻执行<br>不加括号 正常执行<br>引号调用 正常执行<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220228143047.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> `parseInt` </summary>              <div class='content'>              <p><code>parseInt</code>在第一个字符是非数字的时候 返回NaN<br>在后面有字符是非数字的时候 返回前面的数字<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 2. parseInt(string,raix)函数有两个参数</span><br><span class="line"> // 2.1 注意:string字符串只会被解析从第一个字符开始直到不是数字的字符部分</span><br><span class="line"> console.log(parseInt(&#x27;223&#x27;));//223</span><br><span class="line"> // 2.2 当字符串中间存在非数字,那么就只解析前面是数字的部分字符</span><br><span class="line"> console.log(parseInt(&#x27;22e3&#x27;));//22</span><br><span class="line"> // 2.3 如果字符串中第一个字符就不是数字,那么返回NaN </span><br><span class="line"> console.log(parseInt(&#x27;e21&#x27;));//NaN</span><br></pre></td></tr></table></figure></p>              </div>            </details><details class="folding-tag" blue><summary> 原型和隐式原型 </summary>              <div class='content'>              <p>注意只有实例化的对象才有隐式原型</p>              </div>            </details><details class="folding-tag" blue><summary> 判断一个对象是否存在 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220228150210.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> symbol </summary>              <div class='content'>              <p>symbol不参与运算 会报错</p>              </div>            </details><details class="folding-tag" blue><summary> 集合A转化为数组？ </summary>              <div class='content'>              <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Array.from(arr, mapfn,thisArg)方法，用于将两类可以把对象转换为真正的数组：类似数组的对象和可遍历的对象（部署了Iterator接口的，String，ES6新增的Map和Set）。可以传3个参数，其中第一个是数组，必传；第二个是一个函数（类似map函数），对数组元素进行操作后再返回数组，可选；第三个是对于this关键字的指向，可选。</span><br><span class="line">slice() 方法可从已有的数组中返回选定的元素。</span><br><span class="line">返回值：返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。</span><br><span class="line">说明</span><br><span class="line">请注意，该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()。</span><br><span class="line">所以在这里就是对集合A应用slice，返回一个新的数组，不对数组做任何改变。</span><br><span class="line">展开运算符，把A集合的元素展开后，用数组[]承载，返回新的数组。</span><br><span class="line">map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</span><br><span class="line">map() 方法按照原始数组元素顺序依次处理元素。</span><br><span class="line">注意： map() 不会对空数组进行检测。</span><br><span class="line">注意： map() 不会改变原始数组。</span><br><span class="line">所以map方法返回了一个新的数组，并且数组中每个元素是A里面的元素。</span><br></pre></td></tr></table></figure>              </div>            </details><h1 id="基础不牢，地动山摇Day8"><a href="#基础不牢，地动山摇Day8" class="headerlink" title="基础不牢，地动山摇Day8"></a>基础不牢，地动山摇Day8</h1><p>昨天有点小感冒 导致学习没太久，今天补上vue的专题</p><h2 id="vue篇"><a href="#vue篇" class="headerlink" title="vue篇"></a>vue篇</h2><details class="folding-tag" blue><summary> `Object.defineProperty(obj </summary>              <div class='content'>              <p>不能监视数组的变化。原因：defineProperty是监视对象的属性，且对于数组来说，要监听到length的变化首先就必须设置<code>configurable</code>为真，但是各大浏览器不允许这样设置吗，所以导致<code>push``pop</code>等修改数组原长度的方法无法被监听到。<br>vue能实现数组的监听原理是将一个新数组赋值给旧数组 而不是修改原数组，这样的话性能开销其实还是有点大。</p>              </div>            </details><details class="folding-tag" blue><summary> hash模式原理 </summary>              <div class='content'>              <p>通过<code>onhashchange</code>事件，监听url的修改<br>优点是可以快速上线，直接使用 缺点是不美观 且移动端有限制会报错<br><code>history</code>模式是传统的url模式，优点是不会影响到url的美感，缺点是需要后端的配合。</p>              </div>            </details><details class="folding-tag" blue><summary> 挂载 </summary>              <div class='content'>              <p>如果不是在脚手架环境下，vue的挂载需要el（重要！！）</p>              </div>            </details><details class="folding-tag" blue><summary> nextTick </summary>              <div class='content'>              <p>在created等还没生成dom的钩子中，想要操作dom可以将操作放到nextTick的回调函数里。<br>因为nextTick是等dom更新完后才执行操作</p>              </div>            </details><details class="folding-tag" blue><summary> 父子组件的生命周期 </summary>              <div class='content'>              <p>加载渲染过程：（注意是子先挂载完毕）<br>父beforeCreate 父created 父beforeMount 子beforeCreate 子created 子beforeMount<br>子mounted 父mounted<br>子组件更新过程：<br>父 beforeUpdate 子beforeUpdate 子updated 父updated<br>父组件更新过程：<br>父 beforeUpdate 父updated<br>销毁过程：（子先销毁完毕）<br>父beforeDestroy 子beforeDestroy 子destoryed 父destoryed</p>              </div>            </details><details class="folding-tag" blue><summary> watch初始化监听第一次 </summary>              <div class='content'>              <p>加<code>immediate:true</code></p>              </div>            </details><details class="folding-tag" blue><summary> `vue-lazyload` </summary>              <div class='content'>              <p>vue的懒加载插件<br>img标签中使用懒加载：<code>v-lazy</code> 代替 <code>v-bind:src</code> ；<br>背景图片中使用懒加载：<code>v-lazy:background-image = &quot;&quot;</code>  ==&gt;&gt; 注意图片和盒子大小问题，否则显示可能有问题哦。<br>使用的时候不一定要加上<code>:key</code>属性 因为可能会由于key相同导致图片不刷新</p>              </div>            </details><details class="folding-tag" blue><summary> 全局路由守卫的钩子 </summary>              <div class='content'>              <p>全局路由守卫的钩子函数有： <code>beforeEach</code>（全局前置守卫）、<code>beforeResolve</code>（全局解析守卫）、<code>afterEach</code>（全局后置守卫）</p>              </div>            </details><details class="folding-tag" blue><summary> 服务端渲染和客户端渲染 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220301103139.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> vuex的ajax </summary>              <div class='content'>              <p>actions一般操作异步 mutations同步 所以写在actions里面</p>              </div>            </details><details class="folding-tag" blue><summary> 钩子间共享数据 </summary>              <div class='content'>                            </div>            </details><details class="folding-tag" blue><summary> `keep-alive` </summary>              <div class='content'>              <p>组件设置了该属性才会有<code>activated和deactivated</code>两个钩子<br><code>max</code>属性控制最多可以缓存多少组件实例。一旦这个数字达到了，在新实例被创建之前，已缓存组件中最久没有被访问的实例会被销毁掉</p>              </div>            </details><details class="folding-tag" blue><summary> show和if </summary>              <div class='content'>              <p><code>v-show</code>本质是通过设置css中的<code>display:none</code>来控制隐藏<br><code>v-if</code>本质是动态的向dom树添加或者删除元素<br>经常切换用show 反之用if</p>              </div>            </details><h1 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h1><details class="folding-tag" blue><summary> promise的状态 </summary>              <div class='content'>              <p>pending进行中<br>fulfilled已成功<br>rejected已失败</p>              </div>            </details><details class="folding-tag" blue><summary> promise的固化 </summary>              <div class='content'>              <p>如果已经走了resolve 就不会继续走下一步了<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220301153036.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> 返回值 </summary>              <div class='content'>              <p>promise的return值如果是个常量 会包装成一个成功的promise对象<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220301153536.png" alt=""><br>如果没有return 那么默认是return一个undefined 而undefined也属于常量 所以是成功的回调<br>如果返回的不是常量 就看情况定 </p>              </div>            </details><details class="folding-tag" blue><summary> 宏任务和微任务 </summary>              <div class='content'>              <p>微任务：promise<br>宏任务：setTime系列<br>微任务在js机制中会被放到宏任务的前面，所以微任务先执行<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220301154635.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> `async`和`await` </summary>              <div class='content'>              <p><code>await</code>返回的是一个promise 然后包括<code>async</code>之后返回的也是一个promise<br>并且<code>await</code>的函数执行完才执行下一步，且下一步的任务是微任务（！！！）<br>如果<code>await</code>执行的函数没有返回<code>return Promise.reject(new Error())</code>那么就是一个成功的回调<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220301161026.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220301162533.png" alt=""><br><code>async</code>是同步函数 </p>              </div>            </details><details class="folding-tag" blue><summary> promise的return和throw </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220301161529.png" alt=""><br>此时它是return一个错误 看上去好像会执行catch的内容 实际是执行了then的内容<br>因为它实际上是返回了一个对象 而不是抛出了一个错误<br>所以正确的做法应该是<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220301161627.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> execution </summary>              <div class='content'>              <p>在promise的execution函数中是同步代码</p>              </div>            </details><details class="folding-tag" blue><summary> 综合 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220301163007.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary> promise的赋值 </summary>              <div class='content'>              <p>如果有<code>xx = promise对象</code>的话,那么赋值操作在同步任务执行完之后再执行赋值‘<br>如果promise没有resolve也没有reject状态的话 那么它是pending<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220301185339.png" alt=""></p>              </div>            </details><details class="folding-tag" blue><summary>  </summary>              <div class='content'>                            </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue静态资源上传+GitHub</title>
      <link href="/posts/5a2ea4345d0a/"/>
      <url>/posts/5a2ea4345d0a/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>记录用vue-cli打包vue项目之后上传静态资源到github的踩坑向</p></div><h1 id="开始踩坑"><a href="#开始踩坑" class="headerlink" title="开始踩坑"></a>开始踩坑</h1><p>首先对于新版的vue-cli打包，指令是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><br>这个是没有变的<br>在打包之前 必须注意的一点是，新版的cli已经没有config文件夹了，需要自己新建<code>vue.config.js</code>然后配置参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个是为了防止服务端找不到地址</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;./&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>必须注意的第二点：在<code>.gitignore</code>文件夹下面，把有关<code>dist</code>的行数删掉<br>必须注意的第三点：如果你的路由是history模式，建议直接注释掉或者改hash模式<br>接着执行<code>npm run build</code> 会生成一个<code>dist</code>文件夹，检查里面的<code>index.html</code>的css和js路径是否正确。<br>如果完全是静态的可以<code>live server</code>打开，动态的需要用<code>tomcat</code>或者<code>node</code>进行测试<br>下面贴一个用node测试的<br><details class="folding-tag" cyan><summary> node test </summary>              <div class='content'>              <ol><li>新建文件夹</li><li>初始化 可以直接一直回车<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure></li><li>安装express<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save express</span><br></pre></td></tr></table></figure></li><li>新建<code>server.js</code>输入代码<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.use(express.static(__dirname+<span class="string">&#x27;/static&#x27;</span>))</span><br><span class="line">app.get(<span class="string">&#x27;/person&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3040</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)<span class="built_in">console</span>.log(<span class="string">&#x27;qidong&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>新建static文件夹 复制所有dist目录下面的文件到该文件夹</li><li>run</li></ol>              </div>            </details><br>确保你的网页在本地可以运行之后，打开github新建仓库…这一步就省略了，网上很多教程<br>当你已经把远程仓库和本地建立连接之后，在本地文件夹右键打开git命令窗口<br>接下来有两种方法可以上传到github 第一种是将dist重命名为docs（推荐） 另外一种是将dist里面的内容上传到分支，下面演示第一种<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//创建分支 且一定要是这个名字</span><br><span class="line">git branch gh-pages</span><br><span class="line">//切换到该分支</span><br><span class="line">git checkout gh-pages</span><br><span class="line">//强制提交dist</span><br><span class="line">git add -f docs</span><br><span class="line">//commit</span><br><span class="line">git commit -m &quot;message&quot;</span><br><span class="line">git push origin gh-pages </span><br></pre></td></tr></table></figure><br>然后打开你的github 点开仓库的setting 将目录改为docs 然后直接访问它提供的网址即可<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220222163700.png" alt=""></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>网上现在很多的教程说的都是旧版的cli 那个时候还有webpack的配置文件，现在只能通过js修改，导致在这块踩了很久的坑，然后就是github默认是不允许上传dist文件夹的，所以推荐还是使用docs来放静态资源，后续会更新关于vue打包的优化。</p>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MileStone项目杂谈</title>
      <link href="/posts/844c2cfdc4a5/"/>
      <url>/posts/844c2cfdc4a5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>最近博客没更新的原因是，emm在搞一个新的项目，完全的从0开始没有参考任何项目视频，然后现在也是项目大体功能要做完了，就在这里写一下本次项目踩过的坑以及一些经验，算是一期杂谈。<br>源码地址：<a href="https://github.com/Zlinni/MileStone">传送门1</a><br>项目演示地址:<a href="https://zlinni.github.io/MileStone/#/">传送门2</a></p></div><h1 id="主体演示"><a href="#主体演示" class="headerlink" title="主体演示"></a>主体演示</h1><div class="note primary flat"><p>制作完毕~</p></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">效果展示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/milestone预览.gif" alt="不知道为什么自己很喜欢这种纯黑风格"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="构建工具-技术栈"><a href="#构建工具-技术栈" class="headerlink" title="构建工具+技术栈"></a>构建工具+技术栈</h1><p>编译软件：vscode<br>开发框架: vue2<br>打包工具：vue-cli<br>UI：vuetify<br>icon：阿里巴巴<br>其他：vuex， vue-router，git<br>插件：pubsub，nanoid，less-loader，vuex-persist</p><h1 id="组件列表"><a href="#组件列表" class="headerlink" title="组件列表"></a>组件列表</h1><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220222102652.png" alt=""></p><h1 id="项目难点"><a href="#项目难点" class="headerlink" title="项目难点"></a>项目难点</h1><div class="note primary flat"><p>本次项目综合了很多方面的问题，比如vuex模块化加数据持久化，对所有任务的时间排序，以及vuetify的栅格系统等等，各种方面的问题哈哈，但好在最后都能够解决出来</p></div><h2 id="vuex模块化结合本地化存储"><a href="#vuex模块化结合本地化存储" class="headerlink" title="vuex模块化结合本地化存储"></a>vuex模块化结合本地化存储</h2><div class="note primary flat"><p>vuex是一个很方便的官方提供的数据管理插件，但在使用的时候一遇到刷新就会导致数据丢失的问题。于是想到了<code>localStorage</code>结合本地存储的方式进行数据持久化。</p></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">方案一 localStorage</button></li><li class="tab"><button type="button" data-href="#test-2">方案2 vuex-presist</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>原理很简单 对于自己设置的数据先使用<code>JSON.parse(localStorage.getItem(&#39;xxx&#39;))</code><br>然后在mutations里面对于需要增删改查的操作最后进行一次<code>localStorage.setItem(&quot;xxx&quot;, JSON.stringify(state.xxx));</code><br>部分代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> todoObj =  <span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&quot;todoObj&quot;</span>)) || [</span><br><span class="line">  &#123;<span class="attr">id</span>: <span class="string">&quot;X5DX4v8Wz4r97xjs&quot;</span>, <span class="attr">title</span>: <span class="string">&quot;阿斯顿&quot;</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">];</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">    <span class="function"><span class="title">updatedType</span>(<span class="params">state, [people, subject, typeId, typeValue]</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(typeValue);</span><br><span class="line">      state.dataList.forEach(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data.people === people) &#123;</span><br><span class="line">          data.kemu.forEach(<span class="function"><span class="params">kemu</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (kemu.subject === subject) &#123;</span><br><span class="line">              kemu.typeList.forEach(<span class="function"><span class="params">typelist</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (typelist.id === typeId) &#123;</span><br><span class="line">                  Vue.set(typelist, <span class="string">&#x27;type&#x27;</span>, typeValue[<span class="number">0</span>]);</span><br><span class="line">                  Vue.set(typelist, <span class="string">&#x27;time&#x27;</span>, typeValue[<span class="number">2</span>]);</span><br><span class="line">                  Vue.set(typelist, <span class="string">&#x27;remarks&#x27;</span>, typeValue[<span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">       <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;dataList&#x27;</span>, <span class="built_in">JSON</span>.stringify(state.dataList));</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><br>但是这个方法也有一个弊端，就是每次执行增删改查的操作都需要进行一次手动存储，在操作多的情况下非常不适合。于是找到了这个vuex的插件<code>vuex-presist</code>来帮助模块进行本地存储</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>实质上就是进行了本地存储，当然也有新的类型比如session和cookie<br>安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save vuex-persist</span><br></pre></td></tr></table></figure><br>引入<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VuexPersistence <span class="keyword">from</span> <span class="string">&#x27;vuex-persist&#x27;</span></span><br></pre></td></tr></table></figure><br>定义 (此处是根据我的两个模块来使用)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vuexLocal = <span class="keyword">new</span> VuexPersistence(&#123;</span><br><span class="line">  <span class="attr">storage</span>: <span class="built_in">window</span>.localStorage,</span><br><span class="line">  <span class="attr">modules</span>: [<span class="string">&#x27;dataListOptions&#x27;</span>, <span class="string">&#x27;todoOptions&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>引入到vuex<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    dataListOptions,</span><br><span class="line">    todoOptions</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [vuexLocal.plugin]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>注意此处的引入位置</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="vuex模块化踩坑"><a href="#vuex模块化踩坑" class="headerlink" title="vuex模块化踩坑"></a>vuex模块化踩坑</h2><div class="note primary flat"><p>当vuex要使用很多options的时候，会采用模块化的方式来写代码会比较方便管理。<br>比如定义一个todoOptions 里面就要有store的全部方法 以及一个<code>namespaced</code>属性</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todoOptions =&#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>:&#123;</span><br><span class="line">  </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">todoObj</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    dataListOptions,</span><br><span class="line">    todoOptions</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>到这一步其实大多数时候都没有问题 出问题在于使用到mutation或者actions的时候<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此处需要使用名字/方法否则不行</span></span><br><span class="line"> <span class="built_in">this</span>.$store.dispatch(</span><br><span class="line">        <span class="string">&quot;dataListOptions/transType&quot;</span>,</span><br><span class="line">        <span class="built_in">this</span>.$route.params.people</span><br><span class="line">      );</span><br><span class="line">      </span><br></pre></td></tr></table></figure><br>如果用到了mapState插件或者其他的，也需要加名字 注意是要用双引号<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...mapState(<span class="string">&quot;todoOptions&quot;</span>, [<span class="string">&quot;todoObj&quot;</span>]),</span><br></pre></td></tr></table></figure><br>以及最后其实vuex的value是可以传多个参数的，用数组或者对象的形式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&quot;dataListOptions/addType&quot;</span>, [</span><br><span class="line">  <span class="built_in">this</span>.$route.params.people,</span><br><span class="line">  <span class="built_in">this</span>.subject,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure></p><h2 id="准确获取时区"><a href="#准确获取时区" class="headerlink" title="准确获取时区"></a>准确获取时区</h2><div class="note primary flat"><p>一般大家使用时间都是直接用<code>new Date()</code>但这个方法获取的并不是完全准确的时区时间，采用下面的方法可以获取更为准确的时间</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">selectTimezone</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">  <span class="comment">//得到1970年一月一日到现在的秒数</span></span><br><span class="line">  <span class="keyword">var</span> len = d.getTime();</span><br><span class="line">  <span class="comment">//确定时区</span></span><br><span class="line">  <span class="keyword">var</span> timezone = -d.getTimezoneOffset() / <span class="number">60</span>;</span><br><span class="line">  <span class="comment">//本地时间与GMT时间的时间偏移差</span></span><br><span class="line">  <span class="keyword">var</span> offset = d.getTimezoneOffset() * <span class="number">60000</span>;</span><br><span class="line">  <span class="comment">//得到现在的格林尼治时间</span></span><br><span class="line">  <span class="keyword">var</span> utcTime = len + offset;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(utcTime + <span class="number">3600000</span> * timezone);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="时间排序"><a href="#时间排序" class="headerlink" title="时间排序"></a>时间排序</h2><div class="note primary flat"><p>项目中需要将自定义的任务进行一个时间的排序最后呈现到学习计划页面</p></div><p>预览<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220222122336.png" alt=""><br>当一开始的时间格式是<code>14:00-15:00</code>这样的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">subject: <span class="string">&quot;数学&quot;</span>,</span><br><span class="line"><span class="attr">typeList</span>: [&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;001&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;高等数学&quot;</span>,</span><br><span class="line">    <span class="attr">time</span>: <span class="string">&#x27;14:00-15:00&#x27;</span>,</span><br><span class="line">    <span class="attr">remarks</span>: <span class="string">&#x27;暂无&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;002&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;线性代数&quot;</span>,</span><br><span class="line">    <span class="attr">time</span>: <span class="string">&#x27;15:00-16:00&#x27;</span>,</span><br><span class="line">    <span class="attr">remarks</span>: <span class="string">&#x27;暂无&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;003&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;概率论&quot;</span>,</span><br><span class="line">    <span class="attr">time</span>: <span class="string">&#x27;16:00-17:00&#x27;</span>,</span><br><span class="line">    <span class="attr">remarks</span>: <span class="string">&#x27;暂无&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br>于是想到了<code>split</code>方法去分割第一个时间点，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> res = [];</span><br><span class="line"><span class="keyword">let</span> indexArr = [];</span><br><span class="line"><span class="built_in">this</span>.$store.state.dataListOptions.typeList.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> hhmm = item.time.split(<span class="string">&quot;-&quot;</span>, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> hh = hhmm.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> sum = hh.reduce(<span class="function">(<span class="params">total, val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (total += val);</span><br><span class="line">  &#125;, <span class="string">&quot;&quot;</span>);</span><br><span class="line">  res.push(<span class="built_in">parseInt</span>(sum));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>然后将第一个时间点化为<code>1400</code>的形式，以此类推。只要对比第一个时间点就可以完成排序，这样一来就可以使用sort方法，但问题又出现了，这样比较之后需要将时间还原回去才能在原本的数组里面找到对应的任务名称。或者是知道数组下标的形式？那么如何知道排序后原先时间数组的下标呢？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> typeMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"> typeMap.set(<span class="built_in">parseInt</span>(sum), index);</span><br></pre></td></tr></table></figure><br>使用到map类里面的set方法，将原先的数据和下标传入到map中，最后遍历排序后的时间数组，通过get方法去查找数据原先对应的下标<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">typeList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  <span class="keyword">let</span> typeMap = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">let</span> indexArr = [];</span><br><span class="line">  <span class="built_in">this</span>.$store.state.dataListOptions.typeList.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> hhmm = item.time.split(<span class="string">&quot;-&quot;</span>, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> hh = hhmm.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> sum = hh.reduce(<span class="function">(<span class="params">total, val</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (total += val);</span><br><span class="line">    &#125;, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    res.push(<span class="built_in">parseInt</span>(sum));</span><br><span class="line">    typeMap.set(<span class="built_in">parseInt</span>(sum), index);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;排序前的res&quot;</span>, res);</span><br><span class="line">  res.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;排序后的res&quot;</span>, res);</span><br><span class="line">  res.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    indexArr.push(typeMap.get(item));</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;下标&quot;</span>, indexArr);</span><br><span class="line">  <span class="keyword">let</span> finalArr = [];</span><br><span class="line">  indexArr.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$store.state.dataListOptions.typeList.forEach(<span class="function">(<span class="params">data, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (index === item) &#123;</span><br><span class="line">        finalArr.push(data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;最终数组&quot;</span>, finalArr);</span><br><span class="line">  <span class="keyword">return</span> finalArr;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h2 id="时间排序2"><a href="#时间排序2" class="headerlink" title="时间排序2"></a>时间排序2</h2><div class="note primary flat"><p>项目中还有一个地方需要用到时间排序，就是页面中这个introduce的地方，它会随着任务的执行判断时间，然后返回相应的内容到页面上</p></div><p>预览<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220222122836.png" alt=""><br>需求是有三种判断<br>一是任务没有开始 那么就显示下个任务还有xx时xx分开始，如果不到1小时，则返回xx分<br>二是任务正在执行中 那么显示该任务还有xx时xx分结束，如果不到1小时，则返回xx分<br>三是任务都执行完了 此时显示今日任务已完毕，查看今日总结</p><p>获取任务数组这块就不说了 用的是消息的订阅和发布，收到的是已经排序好时间的任务数组<br>那么为了执行现在的时间是否在某个任务时间段内，就需要三个变量，一个是现在时间，一个是当前任务开始时间，结束时间<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">this</span>.pid = pubsub.subscribe(</span><br><span class="line">      <span class="string">&quot;judgeTime&quot;</span>,</span><br><span class="line">      <span class="function">(<span class="params">msg, [timeArr, typeNameArr, len]</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          timeArr.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> hhmm = item.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> strTime1 = hhmm[<span class="number">0</span>].split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> strTime2 = hhmm[<span class="number">1</span>].split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> b = <span class="built_in">this</span>.selectTimezone();</span><br><span class="line">            <span class="keyword">var</span> e = <span class="built_in">this</span>.selectTimezone();</span><br><span class="line">            <span class="keyword">var</span> n = <span class="built_in">this</span>.selectTimezone();</span><br><span class="line">            b.setHours(strTime1[<span class="number">0</span>]);</span><br><span class="line">            b.setMinutes(strTime1[<span class="number">1</span>]);</span><br><span class="line">            b.setSeconds(<span class="number">0</span>);</span><br><span class="line">            b.setMilliseconds(<span class="number">0</span>);</span><br><span class="line">            e.setHours(strTime2[<span class="number">0</span>]);</span><br><span class="line">            e.setMinutes(strTime2[<span class="number">1</span>]);</span><br><span class="line">            e.setSeconds(<span class="number">0</span>);</span><br><span class="line">            e.setMilliseconds(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (b.getTime() - n.getTime() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="built_in">this</span>.typeName = <span class="string">&quot;还未到学习时间&quot;</span>;</span><br><span class="line">              <span class="built_in">console</span>.log(b);</span><br><span class="line">              <span class="built_in">this</span>.beginTime = b;</span><br><span class="line">              <span class="built_in">this</span>.state = <span class="string">&quot;start&quot;</span>;</span><br><span class="line">······</span><br></pre></td></tr></table></figure><br>然后比较它们的时间戳，细节上为了准确的比较还得把秒和毫秒设置0<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">calTime</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> n = <span class="built_in">this</span>.selectTimezone();</span><br><span class="line">  <span class="keyword">var</span> chazhi = <span class="built_in">this</span>.beginTime - n;</span><br><span class="line">  <span class="built_in">this</span>.minutes = <span class="built_in">Math</span>.floor((chazhi / <span class="number">1000</span> / <span class="number">60</span>) % <span class="number">60</span>);</span><br><span class="line">  <span class="built_in">this</span>.hours = <span class="built_in">Math</span>.floor((chazhi / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span>) % <span class="number">24</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.hours &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&quot;start&quot;</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.endTime = <span class="string">`距离下一个任务开始还有<span class="subst">$&#123;<span class="built_in">this</span>.hours&#125;</span>小时<span class="subst">$&#123;<span class="built_in">this</span>.minutes&#125;</span>分钟`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&quot;end&quot;</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.endTime = <span class="string">`距离学习结束还有<span class="subst">$&#123;<span class="built_in">this</span>.hours&#125;</span>小时<span class="subst">$&#123;<span class="built_in">this</span>.minutes&#125;</span>分钟`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&quot;start&quot;</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.endTime = <span class="string">`距离下一个任务开始还有<span class="subst">$&#123;<span class="built_in">this</span>.minutes&#125;</span>分钟`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&quot;end&quot;</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.endTime = <span class="string">`距离学习结束还有<span class="subst">$&#123;<span class="built_in">this</span>.minutes&#125;</span>分钟`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (chazhi &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.calTime();</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$router.go(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>此处有个难点，就是在定时器代码那里，如果使用的是<code>setInterval</code>那么可能在下个时间段的时候，前面的代码计算比较复杂，他会跳过当前的这个时间应该执行的任务（代码队列之前的任务没有处理完，js引擎只能允许一份未执行的代码），这方面的问题要去了解js的事件循环机制，于是这里采用了<code>setTimeout</code>来反复调用自身，最后当差值小于或等于0的时候利用routergo刷新页面<br>最后在补充一下剩下的判断代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (b.getTime() - n.getTime() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="built_in">this</span>.typeName = <span class="string">&quot;还未到学习时间&quot;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">  <span class="built_in">this</span>.beginTime = b;</span><br><span class="line">  <span class="built_in">this</span>.state = <span class="string">&quot;start&quot;</span>;</span><br><span class="line">  <span class="built_in">this</span>.calTime();</span><br><span class="line">  <span class="built_in">localStorage</span>.removeItem(<span class="string">&quot;dayEnd&quot;</span>);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">  n.getTime() - b.getTime() &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">  n.getTime() - e.getTime() &lt; <span class="number">0</span></span><br><span class="line">) &#123;</span><br><span class="line">  <span class="built_in">this</span>.typeName = typeNameArr[index];</span><br><span class="line">  <span class="built_in">this</span>.beginTime = e;</span><br><span class="line">  <span class="built_in">this</span>.state = <span class="string">&quot;end&quot;</span>;</span><br><span class="line">  <span class="built_in">this</span>.calTime();</span><br><span class="line">  <span class="built_in">localStorage</span>.removeItem(<span class="string">&quot;dayEnd&quot;</span>);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === len - <span class="number">1</span> &amp;&amp; n.getTime() - e.getTime() &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="built_in">this</span>.typeName = <span class="string">&quot;今日任务已完成&quot;</span>;</span><br><span class="line">  <span class="built_in">this</span>.endTime = <span class="string">&quot;点击查看今日总结~&quot;</span>;</span><br><span class="line">  <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;dayEnd&quot;</span>, <span class="string">&quot;end&quot;</span>);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><ol><li>采用了插件webpack-bundle-analyzer分析了项目中js文件占据的空间，又利用了bootcdn将插件以cdn的方式引入，减小了打包的时候生成的js体积。</li><li>echarts采用了按需引入的方式，减少了所需的js体积</li></ol><h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><p>本次项目是对vue2练手的独立项目，从该项目中我收获到了有关vuex模块化以及数据持久化的处理，时间算法和事件循环的操作，并加深了vuetify-ui的使用，尤其是栅格系统和断点系统，最后针对项目进行了打包优化，结合cdn提升了访问速度。</p>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3</title>
      <link href="/posts/725dcb7bbb15/"/>
      <url>/posts/725dcb7bbb15/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>本文主要用于记录vue3的使用，参考视频<a href='https://www.bilibili.com/video/BV1Zy4y1K7SH?p=1'>【尚硅谷Vue2.0+Vue3.0全套教程丨vuejs从入门到精通】</a></p></div><h1 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">Vue3的提升</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125103708.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125103846.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125103919.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="创建Vue3工程"><a href="#创建Vue3工程" class="headerlink" title="创建Vue3工程"></a>创建Vue3工程</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">vuecli</button></li><li class="tab"><button type="button" data-href="#test-3">vite</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>两种方法 一种是传统的vuecli 另外一种是vite</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>使用vuecli创建该工程需要确保脚手架的版本在4.5以上<br>使用指令可以查看<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vue -V</span><br><span class="line">or</span><br><span class="line">vue --version</span><br></pre></td></tr></table></figure><br>否则重新安装<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><br>创建<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vue_test</span><br></pre></td></tr></table></figure><br>启动<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>先看一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125104523.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125105053.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="分析工程解构"><a href="#分析工程解构" class="headerlink" title="分析工程解构"></a>分析工程解构</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>主要查看vue3和2有什么结构和写法上面的区别</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>从mainjs上面看 引入和实例化app的方法不一样了 而且也不能用vue2的形式写了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入的不再是vue构造函数了 而是一个精简版的createApp工厂函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">createApp(App).mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>vue3不需要根标签了 在vue2里面需要用div当做根标签编写<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125111435.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>setup是vue3使用组合api的地方 结合了之前2中的data methods等</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>setup是一个函数 里面可以直接定义变量 方法等<br>返回有两种情况 一种是返回定义的变量 此时模板中可以直接使用该变量<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;这是a值&#123;&#123; a &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt;这是b值&#123;&#123; b &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    let a = 1;</span><br><span class="line">    let b = 2;</span><br><span class="line">    return &#123;</span><br><span class="line">      a,</span><br><span class="line">      b,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>返回的第二种情况是 返回一个渲染函数 该函数的html元素可以直接被渲染<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; h &#125; from &quot;vue&quot;;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">    return () =&gt; h(&quot;h1&quot;, &quot;hahahah&quot;);</span><br></pre></td></tr></table></figure><br>除此之外 data methods写法可以正常访问setup的数据 但是反过来不行 即vue2可以访问vue3 但3不能访问2 而且最好两者不要混用！<br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125132019.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="ref函数"><a href="#ref函数" class="headerlink" title="ref函数"></a>ref函数</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>ref函数可以将数据变成响应式的，还用于处理对象类型。如果不设置ref直接修改变量 那么修改后的变量不会响应式的出现在页面上。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>案例如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;学习ref&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;jojoname is &#123;&#123;jojo&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;changeJOJO&quot;&gt;点击改变jojo&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 引入ref</span><br><span class="line">import &#123; h, ref &#125; from &quot;vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    // 将数据变成响应式</span><br><span class="line">    let jojo = ref(&quot;jotaro&quot;);</span><br><span class="line">    console.log(jojo);</span><br><span class="line">    function changeJOJO() &#123;</span><br><span class="line">      // 改变数据的方式</span><br><span class="line">      jojo.value = &#x27;jostar&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      jojo,</span><br><span class="line">      changeJOJO</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>注意的点是 初学使用setup容易忘记最后将模板需要的变量和方法返回出去<br>然后 数据变成响应式之后 修改数据需要<code>xxx.value</code>的方式修改<br>最后是ref的数据 看上去像是做了数据代理之后的结果 这个RefImpl的意思是reference 和 implement的组合 全称是引用实现的实例，我们称之为引用对象<br>类似于单例的加工返回单例，将函数交给ref处理后返回响应式</p><ul><li>ref实现响应式也是通过getter和setter即<code>object.defineProperty</code></li><li>将getter和setter藏在原型对象中 更简洁了<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314095628.png" alt=""><br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125134254.png" alt=""></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="reative函数-处理对象类型数据"><a href="#reative函数-处理对象类型数据" class="headerlink" title="reative函数 处理对象类型数据"></a>reative函数 处理对象类型数据</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">抛出疑惑</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue3对不同类型的数据有不同类型的响应式处理，处理对象的时候用的是ref则是Proxy形式，本质上是求助了reactive函数。<br>reactive函数主要用于处理对象类型数据 并且它是深层次处理的。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>用ref处理对象<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;学习ref&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;jojoname is &#123;&#123;jojo&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;jojo author is &#123;&#123;jojoHome.author&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;changeJOJO&quot;&gt;点击改变jojo&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 引入ref</span><br><span class="line">import &#123; h, ref &#125; from &quot;vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    // 将数据变成响应式</span><br><span class="line">    let jojo = ref(&quot;jotaro&quot;);</span><br><span class="line">    let jojoHome = ref(&#123;</span><br><span class="line">      author:&#x27;huangmu&#x27;,</span><br><span class="line">      jojoone:&#x27;幻影之血&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    console.log(jojoHome);</span><br><span class="line">    function changeJOJO() &#123;</span><br><span class="line">      // 改变数据的方式</span><br><span class="line">      jojo.value = &#x27;jostar&#x27;;</span><br><span class="line">      jojoHome.value.author = &#x27;dio哒&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      jojo,</span><br><span class="line">      jojoHome,</span><br><span class="line">      changeJOJO</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>在上述ref的使用过程我们知道 用ref将对象变成响应式的 修改的时候需要对象点value点具体的属性<br>而reactive则不需要点value 而且可以检测到深度的数据<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;学习ref&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;jojoname is &#123;&#123;jojo&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;jojo author is &#123;&#123;jojoHome.author&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;find 套娃 is &#123;&#123;jojoHome.a.b.c&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;changeJOJO&quot;&gt;点击改变jojo&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 引入ref</span><br><span class="line">import &#123; h, reactive, ref &#125; from &quot;vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    // 将数据变成响应式</span><br><span class="line">    let jojo = ref(&quot;jotaro&quot;);</span><br><span class="line">    let jojoHome = reactive(&#123;</span><br><span class="line">      author:&#x27;huangmu&#x27;,</span><br><span class="line">      jojoone:&#x27;幻影之血&#x27;,</span><br><span class="line">      a:&#123;</span><br><span class="line">        b:&#123;</span><br><span class="line">          c:&#x27;套娃呢？&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    console.log(jojoHome);</span><br><span class="line">    function changeJOJO() &#123;</span><br><span class="line">      // 改变数据的方式</span><br><span class="line">      jojo.value = &#x27;jostar&#x27;;</span><br><span class="line">      jojoHome.author = &#x27;dio哒&#x27;;</span><br><span class="line">      jojoHome.a.b.c = &#x27;对啊&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      jojo,</span><br><span class="line">      jojoHome,</span><br><span class="line">      changeJOJO</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220125161054.png" alt=""></p><ul><li>reactive将源对象转化为代理对象</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ul><li>为什么基本类型数据最好用<code>ref</code> 对象类型要用<code>reactive</code>?</li><li>首先ref都能处理这两者 但是在处理对象类型的时候借用了<code>reactive</code>，而<code>reactive</code>只能处理对象类型，不能处理基本类型</li><li><code>ref</code>和<code>reactive</code>处理对象类型有什么区别</li><li>如果同样都是包裹了一个对象，比如说<code>obj</code>，那么访问的时候ref需要使用<code>obj.value</code>才能访问到<code>Proxy</code>下的<code>obj</code>对象 而reactive直接使用<code>obj</code>就可以访问。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="vue3中的响应式原理"><a href="#vue3中的响应式原理" class="headerlink" title="vue3中的响应式原理"></a>vue3中的响应式原理</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>回顾vue2的响应式，我们用对对象类型的数据用<code>object.defineProperty</code>对属性进行读取，修改和拦截。对数组类型的数据进行包裹然后使用原生的方法修改数组。<br>弊端：</p><ol><li>不支持删除delete，以及新增(点操作符)</li><li>不能通过下标直接修改数组，需要用数组原生的几个方法才行</li></ol><p>vue3中的响应式是通过Proxy代理，拦截</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314140322.png" alt=""><br>对比vue2的修改方法，有以下几点不同</p><ul><li>proxy的get和set接收了对象和属性值两个参数 通过键值对的方式修改</li><li>proxy对于增加的操作包含在了set方法中，意思是set方法可以检测到增加 </li><li>proxy有了delete操作 返回值最好写删除的结果<br>上面是简略版<br>实际上底层不是这样实现的<br>就需要讲解到Reflect反射这个东西了，首先这个Reflect是可以和Object一样进行数据的属性增删改查操作<br>如：<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314141154.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314141206.png" alt=""><br>但是又有点不同在于 如果重复写了<code>Object.defineProperty</code>那么会报错 而<code>Reflect</code>会返回一个布尔值 所以可以存在两个一样的reflect 但是只会执行第一个<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314142805.png" alt=""><br>最后<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314142833.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314142930.png" alt=""></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="setup的两个注意点"><a href="#setup的两个注意点" class="headerlink" title="setup的两个注意点"></a>setup的两个注意点</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>setup在<code>beforeCreate</code>之前调用，且<code>this</code>的值是<code>undefined</code><br>接收两个参数 一个是<code>props</code>一个是<code>context</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>对于<code>props</code>，接收的是一个Proxy类型的的数据，如果没有和<code>props</code>对应会有警告出现，如果没有传该值则是<code>undefined</code><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314144248.png" alt=""><br>对于<code>context</code>参数，有三个值接收<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314145920.png" alt=""><br>对于emit属性，就是触发事件，它可以使用<code>context.emit</code>触发，用于父子通信<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314150241.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314150406.png" alt=""><br>对于slot属性，插槽，需要注意和vue2不同的一点是 传递具名插槽的时候不再使用<code>slot=&quot;xxx&quot;</code>而是使用<code>v-slot:xxx</code>这个是一个兼容性的问题<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314150617.png" alt=""><br>总结一图流：<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314150657.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="computed计算属性"><a href="#computed计算属性" class="headerlink" title="computed计算属性"></a>computed计算属性</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>可以像vue2一样使用computed，但vue3里面使用可以import之后使用箭头函数的形式使用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314154516.png" alt=""><br>注意 因为结合了reative函数，所以计算属性赋值可以是响应式对象的属性的形式 且最后不用返回<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314154740.png" alt=""><br>但是这样一来有一个问题出现 就是这个computed之后的属性是可读不可写的，这样就导致修改数据会出错，那么如何让他可读可写呢？<br>使用computed的全称写法 里面包裹的是一个对象<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314155030.png" alt=""><br>总结一图流：<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314155044.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="watch监视属性"><a href="#watch监视属性" class="headerlink" title="watch监视属性"></a>watch监视属性</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue3中依然可以在setup外面写watch方法<br>在vue3自身中,watch方法可以写为如下形式</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>检测ref数据<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314185851.png" alt=""><br>注意 以上是检测ref数据 不是reactive的数据</p><ul><li>不同于computed不需要接收值 所以不用变量收集</li><li>检测多个数据的时候采用数组的形式</li><li>如果输出new和old的值 会发现它们是用数组的形式存储,即,修改后存在数组里面显示</li></ul><ol><li>那么抛出疑问 vue2有immediate 那vue3应该怎么写?<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setup()&#123;</span><br><span class="line">watch(sum,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">console.log(newValue,oldValue);</span><br><span class="line">&#125;,&#123;immediate:true&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在watch里面写第三个属性即可</li><li>那么deep应该如何写?会出现什么问题?<br>在reactive生成的响应式数据自动开启了deep监视,导致deep配置项无效 且无法关闭</li><li>那么reative的数据是如何监视以及出现的问题?<br>如果直接写watch一个reactive的对象 那么会出现new和old值一样的问题<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314190806.png" alt=""><br>暂时没有办法解决这个问题<br>4 因为深度监视没办法关闭 开着会浪费性能的问题,所以如果想监视一个reative响应式对象中的一个数据 直接使用<code>对象.属性</code>是不行的,vue3规定必须要返回这个值<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch(<span class="function">()=&gt;</span>person.age,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;xxx变化了&#x27;</span>,newValue,oldValue);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>如果要监视reactive定义的一个对象中的某些属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch([<span class="function">()=&gt;</span>person.age,<span class="function">()=&gt;</span>person.name],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;xxx变化了&#x27;</span>,newValue,oldValue);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>看起来很麻烦= =</li><li>特殊情况<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314192351.png" alt=""></li><li>watch中的value问题<br>如果是一个ref定义的基本数据,那么取出来我们需要用到<code>xx.value</code><br>而在watch里面想监视它 则不能写点value 因为watch监视的是一个结构 而不是一个具体的数据<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">watch(sum,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;aaa&#x27;</span>,newValue,oldValue);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>但是如果是ref定义的obj类型 即对象类型 那么用watch监视有两种方法<br>一是监视<code>obj.value</code>,为什么呢?因为我们知道 ref定义的对象类型数据,直接输出是一个RefImplll即引用对象,它是再借助了reactive生成了proxy类型数据 即它的响应式来自reactive中的proxy 所以单单监视<code>obj</code>是行不通的,必须监视<code>obj.value</code>让他访问到响应式数据<br>二是开启deep配置项,从1我们知道,ref生成的对象类型数据必须监视到其value里面的proxy 那么换个角度来说只要他能深度检测到obj里面的value里面的proxy即可 所以开启这个深度监视也奏效<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314193642.png" alt=""></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="wacthEffect"><a href="#wacthEffect" class="headerlink" title="wacthEffect"></a>wacthEffect</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">抛出疑问</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>watchEffect方法的功能用一句话来说就是用谁就监视谁</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先它区别于watch 不需要传入任何参数<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watchEffect(()=&gt;&#123;</span><br><span class="line">const x1 = sum;</span><br><span class="line">const x2 = person.job.j1.salary;</span><br><span class="line">console.log(&#x27;回调执行&#x27;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>刚刚说了 用到谁就去监视谁 所以在这里面 用到了sum 和<code>person.job.j1.salary</code>这两个变量,前者好理解 就是一个基本的数据检测 但后者是深度的数据 结果是也能检测出来.说明这个方法非常的智能,可以深度检测.<br>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314194918.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ul><li>computed和watchEffect很像的原因?<br>前者是有数据变化了,整个都要重新计算然后返回结果<br>后者也是一样 有东西变了 就执行回调</li><li>两者不一样的地方?<br>前者更注重的是回调的结果 所以要有一个返回值<br>而后者更注重过程 所以不用写返回值</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="vue3生命周期"><a href="#vue3生命周期" class="headerlink" title="vue3生命周期"></a>vue3生命周期</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要区别</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><ol><li>在vue3里面 原先vue2中的<code>beforeDestroy和destroyed</code>变成了<code>beforeUnmounted和unmounted</code></li><li>原先在vue2里面 如果创建了<code>new Vue</code>并且传入了配置项,但不写el 也不在vm中挂载el,意味着此时模板没有被解析 但是它经过了<code>beforeCreate和created</code>两个钩子 这样的情况是不必要的,在vue3中得到了改善,vue3需要app挂载完后才能走下一步<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314195722.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314195816.png" alt=""></li><li>vue3也提供了组合api形式的生命周期钩子 和vue2中的对应如下<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314202556.png" alt=""></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>其实本质上就是js的模块化</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>定义一个hook文件夹 将需要的函数放进去并暴露方法最后return<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314204651.png" alt=""><br>和mixins有点类似<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314204907.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">抛出疑问</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>解决响应式丢失的问题</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>如果我们return变量的时候想调用的时候简写,比如:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">return &#123;</span><br><span class="line">name:person.name,</span><br><span class="line">age:person.age</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这个时候数据虽然能用 但因为只是把响应式的数据赋值给了变量,而变量不是响应式的 所以就丢失了响应式.<br>使用<code>toRef</code>或者<code>toRefs</code>方法 即可把数据变成响应式的,从而return的变量也是响应式的<br>并且非常需要注意的是 toRef之后修改的数据 对应原先的数据也会修改!!!.<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const name = toRef(person,&#x27;name&#x27;);</span><br><span class="line">console.log(name)//输出的是一个RefImpl对象</span><br></pre></td></tr></table></figure><br>注意 对于深层次的数据变成响应式需要这样写<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const salary = toRef(person.job.j1,&#x27;salary&#x27;);</span><br></pre></td></tr></table></figure><br>如果需要抛出的变量很多 那么建议使用<code>toRefs</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const x = toRefs(person);</span><br><span class="line">//这样就抛出了person的全部属性了 且属性里面的数据也是Proxy的</span><br><span class="line">//或者</span><br><span class="line">return &#123;</span><br><span class="line">...toRefs(person)</span><br><span class="line">&#125;</span><br><span class="line">//利用...运算符将person全部展开 但是需要注意的是 多层级的数据依旧需要在模板中一层一层写 比如job.j1.salary 暴露出来的只有job</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ul><li>为什么不在return的时候用ref包装呢?不是比toRef写法更简单吗?<br>结果上是可以的 但是这样会有个很严重的问题 ref只是将传过来的数据进行响应式 如果当前的数据改变页面也会变动 但是!!原先的数据并没有改变 改变的是ref新建的对象里面的数据<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314210835.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314211005.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220314211035.png" alt=""></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="shallowReactive和shallowRef"><a href="#shallowReactive和shallowRef" class="headerlink" title="shallowReactive和shallowRef"></a>shallowReactive和shallowRef</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><code>shallowReactive</code>只考虑第一层的数据，意味着只对第一层做响应式，比较节能。<br><code>shallowRef</code>如果是基本类型 那么和<code>ref</code>没有区别 但是如果是对象类型 <code>shallowRef</code>不会使其变成响应式<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220316213307.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="readonly和shallowReadonly"><a href="#readonly和shallowReadonly" class="headerlink" title="readonly和shallowReadonly"></a>readonly和shallowReadonly</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><code>readonly</code>可以使得数据变成只读，虽然它是响应式的但是不允许更改<br>引申出页面没有变化的两种情况</p><ol><li>数据不是响应式的 vue就检测不到</li><li>数据不可以被修改 <code>readonly</code>属于这种情况<br><code>shallowReadonly</code>让数据的第一层不能被修改 但深层次可以被修改<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220316214755.png" alt=""></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="toRaw还原对象"><a href="#toRaw还原对象" class="headerlink" title="toRaw还原对象"></a>toRaw还原对象</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><code>toRaw</code>用于还原对象或者变量的响应式。<br>只能处理reactive定义的响应式对象<br><code>markRaw</code><br>用之前讲讲不用它的时候的需求<br>如果已经将对象变成响应式并且暴露出去了，那么后面有个function想在刚刚的对象中添加新数据进去是不行的，因为<code>toRefs</code>只把第一层的数据暴露了出去，新添加的数据是没有暴露的。解决方法有两种</p><ol><li>给原先的对象赋一个空的新数据，这样就会把空数据暴露出去且是响应式，所以后面增加也会变动</li><li>将对象重新交出去(交了两次 一次是源对象 一次是<code>toRefs</code>)这样一来就是把整个响应式对象交了出去，既然是响应式的对象，那么也能检测到添加和删除的元素。</li></ol><p>那么<code>markRaw</code>的业务是什么呢？<br>上面说了新添加的响应式数据 如果这个数据特别庞大，层次特别丰富，只是展示到页面上，且不用变动数据的时候，那么这时候这个数据最好就不用响应式。这样一来就需要用到<code>markRaw</code>标记这个数据，这样一来不管这个数据是进入到了响应式对象里，还是一开始给了它响应式，最后它都不会是响应式的。<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220316220630.png" alt="">    </p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="customRef"><a href="#customRef" class="headerlink" title="customRef"></a>customRef</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>创建一个自定义的ref 一般用于防抖的业务场景</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">setup()&#123;</span><br><span class="line">function myRef(value,delay)&#123;</span><br><span class="line">let timer;</span><br><span class="line">return customRef((track,trigger)=&gt;&#123;</span><br><span class="line">return&#123;</span><br><span class="line">get()&#123;</span><br><span class="line">track();//告诉vue这个值需要被追踪</span><br><span class="line">&#125;,</span><br><span class="line">set(newValue)&#123;</span><br><span class="line">clearTimeout(timer);</span><br><span class="line">timer = setTimeout(()=&gt;&#123;</span><br><span class="line">value = newValue;</span><br><span class="line">trigger();//告诉vue去更新页面</span><br><span class="line">&#125;,delay)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">let keyword = myRef(&#x27;hello&#x27;,500)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="provide和inject"><a href="#provide和inject" class="headerlink" title="provide和inject"></a>provide和inject</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>提供了祖孙通信的方式<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220318193604.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="响应式数据的判断"><a href="#响应式数据的判断" class="headerlink" title="响应式数据的判断"></a>响应式数据的判断</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220318193651.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="composition-API的优势"><a href="#composition-API的优势" class="headerlink" title="composition API的优势"></a>composition API的优势</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>讲到组合api，那么就要讲到这个option api了。后者是vue2的，和它的中文含义一样，是将数据和方法进行一项一项的配置。但是这样存在一定的劣势，比如当变量很多的时候，数据就不好维护了。如下图，绿色的数据对应绿色的功能，但它们的位置不一样 很难维护。<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220318194106.png" alt=""><br>而到了vue3,借助了hook 就不会造成这样的问题<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220318194253.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Router</title>
      <link href="/posts/8bf806511a1a/"/>
      <url>/posts/8bf806511a1a/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tip cogs"><p>本文主要用于记录vue路由的使用，参考视频<a href='https://www.bilibili.com/video/BV1Zy4y1K7SH?p=1'>【尚硅谷Vue2.0+Vue3.0全套教程丨vuejs从入门到精通】</a></p></div><h1 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">SPA</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>是vue的一个插件库 专门用于实现spa应用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>全称single page web application<br>整个应用只有一个完整的页面<br>点击页面的xx链接不会刷新页面 只会做局部更新<br>数据需要通过ajax请求获取</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">注意事项</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>下面以单页面多组件跳转为例子讲解router的基本使用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>安装vuerouter<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-router</span><br></pre></td></tr></table></figure><br>创建router文件夹 写入indexjs 并导入相关组件的地址和名字<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入vuerouter</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">// 导入相关组件</span></span><br><span class="line"><span class="keyword">import</span> JOJO <span class="keyword">from</span> <span class="string">&#x27;../components/JOJO.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> DIO <span class="keyword">from</span> <span class="string">&#x27;../components/DIO.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/jojo&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:JOJO</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/dio&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:DIO</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>mainjs中导入以及应用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">render</span>:<span class="function"><span class="params">h</span>=&gt;</span>h(App),</span><br><span class="line">    <span class="attr">router</span>:router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>在app需要显示组件跳转的链接a标签改为<code>router-link</code>标签 并设置<code>to=&#39;/xxx地址&#39;</code><br>可以自行添加<code>active-class</code>属性(前提是css里面有这个样式)跳转后实现效果<br>最后在要显示组件的地方 换成<code>&lt;router-view&gt;&lt;/router-view&gt;</code>标签<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;开始学习router&lt;/h1&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;div class=&quot;middle&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;navi&quot;&gt;</span><br><span class="line">        &lt;router-link to=&quot;/jojo&quot; class=&quot;list-item&quot; active-class=&quot;active&quot;&gt;点我显示jojo组件&lt;/router-link&gt;</span><br><span class="line">        &lt;router-link to=&quot;/dio&quot; class=&quot;list-item&quot; active-class=&quot;active&quot;&gt;点我显示dio组件&lt;/router-link&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;compon&quot;&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br></pre></td></tr></table></figure><br>总结一图流<br><img src="./Vue-route/Snipaste_2022-01-19_19-30-10.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ol><li>开发当中 被路由使用的组件叫做路由组件 其他的自己亲自注册亲自写的叫做一般组件<br>前者放在pages文件夹中 后者放在components文件夹中</li><li>被路由使用的组件 会在页面需要的时候挂载 不需要的时候销毁</li><li>每个路由器都有自己的<code>$route</code>属性 里面存着自己的路由信息</li><li>整个应用只有一个router 可以通过组件的<code>$router</code>属性获取</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>嵌套路由为了解决组件中想继续显示子组件的问题 使用到了children配置项</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>定义好子组件<br>在路由中引入子组件 注意这里使用了children配置项 也是配置数组对象 且path不写斜杠<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入vuerouter</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">// 导入相关组件</span></span><br><span class="line"><span class="keyword">import</span> JOJO <span class="keyword">from</span> <span class="string">&#x27;../pages/JOJO.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> DIO <span class="keyword">from</span> <span class="string">&#x27;../pages/DIO.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Msg <span class="keyword">from</span> <span class="string">&#x27;../pages/Msg.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">&#x27;../pages/News.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/jojo&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:JOJO,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 这里不用写斜杠了</span></span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;msg&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:Msg</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:News</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/dio&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:DIO</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>引入在组件中引入子组件 注意routerlink标签要写对应的组件下子组件的地址<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;bo ku wa jojo哒&lt;/h1&gt;</span><br><span class="line">    &lt;ul class=&quot;jojotab&quot;&gt;</span><br><span class="line">      &lt;!-- 这里不是写/msg了 是写/组件/子组件 --&gt;</span><br><span class="line">      &lt;li&gt;&lt;router-link to=&quot;/jojo/msg&quot; class=&quot;tabshow&quot;&gt;Msg&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;router-link to=&quot;/jojo/news&quot;  class=&quot;tabshow&quot;&gt;News&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;ul&gt;&lt;router-view&gt;&lt;/router-view&gt;&lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><br>注意的点 需要写routerview标签指定位置显示</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="路由的query参数"><a href="#路由的query参数" class="headerlink" title="路由的query参数"></a>路由的query参数</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">命名路由</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>利用路由的query可以实现同个组件点击切换不同的内容</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>先定义好组件 这里是以messageList为例子 点击列表中的选项 下方显示出传递的内容<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220120131547.png" alt=""><br>下方是组件Detail显示传递过来的信息 注意符号的使用<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li&gt;消息id是：&#123;&#123;$route.query.id&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;消息title是：&#123;&#123;$route.query.title&#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><br>然后在路由的news下面导入以及定义detail<br>回到news 定义好列表 修改跳转的地址<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;老东西你的替身最强啦&lt;/li&gt;</span><br><span class="line">      &lt;li v-for=&quot;m in messageList&quot; :key=&quot;m.id&quot;&gt;</span><br><span class="line">        &lt;!-- 跳转路由并携带query参数 to的字符串写法--&gt;</span><br><span class="line">        &lt;!-- &lt;router-link :to=&quot;`/jojo/news/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;&gt;&#123;&#123; m.title &#125;&#125;&lt;/router-link&gt; --&gt;</span><br><span class="line">        &lt;!-- 跳转路由并携带query参数 to的对象写法--&gt;</span><br><span class="line">        &lt;router-link</span><br><span class="line">          :to=&quot;&#123;</span><br><span class="line">            path: &#x27;/jojo/news/detail&#x27;,</span><br><span class="line">            query: &#123;</span><br><span class="line">              id: m.id,</span><br><span class="line">              title: m.title,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;&quot;</span><br><span class="line">          &gt;&#123;&#123; m.title &#125;&#125;&lt;/router-link</span><br><span class="line">        &gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;hr /&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      messageList: [</span><br><span class="line">        &#123; id: &quot;001&quot;, title: &quot;msg001&quot; &#125;,</span><br><span class="line">        &#123; id: &quot;002&quot;, title: &quot;msg002&quot; &#125;,</span><br><span class="line">        &#123; id: &quot;003&quot;, title: &quot;msg003&quot; &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>注意跳转路由携带query参数的写法 推荐第二种 比较清晰<br>必须注意绑定to</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220120132306.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="params参数和路由器的props配置"><a href="#params参数和路由器的props配置" class="headerlink" title="params参数和路由器的props配置"></a>params参数和路由器的props配置</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>params参数接收基本和query相同 但是路径path要写成name<br>路由的props配置可以简化路由组件的编写</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>params<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220120134626.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220120134658.png" alt=""><br>props<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220120134727.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="开启replace操作"><a href="#开启replace操作" class="headerlink" title="开启replace操作"></a>开启replace操作</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220120162259.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>不借助routerlink的路由导航就是编程式路由导航<br>如果要使用button或者其他非a标签进行跳转实现的时候，routerlink就没有作用了<br>以及定时器自动跳转（没有点击用不到a标签）</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>主要内容<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124102705.png" alt=""><br>push和replace部分<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">        &lt;button @click=&quot;pushShow(m)&quot;&gt;push&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;replaceShow(m)&quot;&gt;replace&lt;/button&gt;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">methods: &#123;</span><br><span class="line">    pushShow(m) &#123;</span><br><span class="line">      this.$router.push(&#123;</span><br><span class="line">        path: &quot;/jojo/news/detail&quot;,</span><br><span class="line">        query: &#123;</span><br><span class="line">          id: m.id,</span><br><span class="line">          title: m.title,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    replaceShow(m) &#123;</span><br><span class="line">      this.$router.replace(&#123;</span><br><span class="line">        path: &quot;/jojo/news/detail&quot;,</span><br><span class="line">        query: &#123;</span><br><span class="line">          id: m.id,</span><br><span class="line">          title: m.title,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><br>前进后退和go部分<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    &lt;button @click=&quot;back&quot;&gt;后退&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;forward&quot;&gt;前进&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;testGo&quot;&gt;测试一下go&lt;/button&gt;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">  methods: &#123;</span><br><span class="line">    back()&#123;</span><br><span class="line">      this.$router.back();</span><br><span class="line">    &#125;,</span><br><span class="line">    forward()&#123;</span><br><span class="line">      this.$router.forward();</span><br><span class="line">    &#125;,</span><br><span class="line">    testGo()&#123;</span><br><span class="line">      // 正数前进 负数后退</span><br><span class="line">      this.$router.go(3)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><br>总结一波流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124102914.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="路由缓存"><a href="#路由缓存" class="headerlink" title="路由缓存"></a>路由缓存</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>为了解决当页面中输入了相关内容后进行跳转最后回去还保留内容的问题<br>原因是组件的切换会重新挂载和销毁<br>利用到keepalive标签以及include属性</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>msg里面定义输入框<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">    &lt;li&gt;name:&lt;input type=&quot;text&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;li&gt;stand:&lt;input type=&quot;text&quot;&gt;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><br>jojo里面 （使用到输入框的父组件）设置keepalive<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;bo ku wa jojo哒&lt;/h1&gt;</span><br><span class="line">    &lt;ul class=&quot;jojotab&quot;&gt;</span><br><span class="line">      &lt;!-- 这里不是写/msg了 是写/组件/子组件 --&gt;</span><br><span class="line">      &lt;li&gt;&lt;router-link to=&quot;/jojo/msg&quot; class=&quot;tabshow&quot;&gt;Msg&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;router-link to=&quot;/jojo/news&quot; class=&quot;tabshow&quot;&gt;News&lt;/router-link&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;keep-alive include=&quot;Msg&quot;&gt;</span><br><span class="line">      &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><br>注意 keepalive包裹的是routerview标签<br>include属性是指定缓存哪个组件 不写的话默认全部<br>最后特别注意 使用到include的时候 对应的组件要设置name<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name:&#x27;Msg&#x27;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124104807.png" alt=""></p><p>补充说明<br>如果想缓存多个路由组件 使用到<code>v-bind</code>和数组写法<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124104954.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="两个新的生命周期钩子"><a href="#两个新的生命周期钩子" class="headerlink" title="两个新的生命周期钩子"></a>两个新的生命周期钩子</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>如果使用上述的缓存路由就会出现一个问题 缓存组件中的东西没有执行销毁<br>引出两个路由的生命周期钩子 activated 和 deactivated</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>激活 activated<br>将之前需要写在mounted里面的功能写入 当切换到该组件就生效<br>失活 deactivated<br>将之前需要写在销毁之前的功能写入 当离开该组件生效<br>一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124111225.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="全局路由守卫"><a href="#全局路由守卫" class="headerlink" title="全局路由守卫"></a>全局路由守卫</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>用于判断某些条件的执行是否满足才进入到路由的下一级</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>全局前置路由：每一次切换前都被调用<br>要用到全局路由守卫就必须接收路由再暴露出去<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> router =  <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [&#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/jojo&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: JOJO,</span><br><span class="line">            <span class="attr">children</span>: [&#123;</span><br><span class="line">                    <span class="comment">// 这里不用写斜杠了</span></span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;msg&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: Msg</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: News,</span><br><span class="line">                    <span class="attr">children</span>: [&#123;</span><br><span class="line">                        <span class="attr">path</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                        <span class="attr">component</span>: Detail,</span><br><span class="line">                        <span class="function"><span class="title">props</span>(<span class="params">$route</span>)</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> &#123;</span><br><span class="line">                                <span class="attr">id</span>: $route.query.id,</span><br><span class="line">                                <span class="attr">title</span>: $route.query.title</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/dio&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: DIO</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(to,<span class="keyword">from</span>);</span><br><span class="line">    <span class="keyword">if</span>(to.path === <span class="string">&#x27;/jojo/news&#x27;</span>)&#123;</span><br><span class="line">        next();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;去往news&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><br>用到了beforeEach的方法 值得一提的是三个参数<br>to代表的是去往的位置<br>from代表从哪里来<br>next代表是否执行下一步<br>example：先点击jojo 后点击dio 就出现to里面有dio from里面有jojo<br>对于to 和 from 两者携带的参数如下<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124151706.png" alt=""><br>其中name指的是路由的名字 这里没有定义所以是undefined<br>可以在meta里面放入个人定义的信息 这个属性称之为路由元信息<br>就不用逐个判断这么复杂了 只要路由守卫判断路由信息里面是否有存在这么个meta里面的属性 就可以执行或不执行下面的步骤<br>且注意没有定义的时候 就是undefined 自然为假 所以只用定义真的情况<br>此处在news里面设置meta<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router =  <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [&#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/jojo&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: JOJO,</span><br><span class="line">            <span class="attr">children</span>: [&#123;</span><br><span class="line">                    <span class="comment">// 这里不用写斜杠了</span></span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;msg&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: Msg</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>: News,</span><br><span class="line">                    <span class="attr">children</span>: [&#123;</span><br><span class="line">                        <span class="attr">path</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                        <span class="attr">component</span>: Detail,</span><br><span class="line">                        <span class="function"><span class="title">props</span>(<span class="params">$route</span>)</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> &#123;</span><br><span class="line">                                <span class="attr">id</span>: $route.query.id,</span><br><span class="line">                                <span class="attr">title</span>: $route.query.title</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;],</span><br><span class="line">                    <span class="attr">meta</span>:&#123;<span class="attr">isAuth</span>:<span class="literal">true</span>&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>: <span class="string">&#x27;/dio&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>: DIO</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(to,<span class="keyword">from</span>);</span><br><span class="line">    <span class="keyword">if</span>(to.meta.isAuth)&#123;</span><br><span class="line">        next();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;去往news&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><br>全局后置守卫<br>没有next功能 常用于网页标题的切换<br>如果只使用前置守卫去切换这个标题的话 会出现一瞬间的网页标题错误等细节问题<br>所以使用后置守卫写比较好<br>另外修改标题的方法是<code>document.title = xxx</code>这里最好使用meta定义的title<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124153523.png" alt=""><br>总结一波流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124153608.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="独享路由守卫"><a href="#独享路由守卫" class="headerlink" title="独享路由守卫"></a>独享路由守卫</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>如果只想对单个路由进行权限操作 则可以使用独享路由守卫来执行</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>beforeEnter 也有to from next三个参数 类似于beforeEach<br>但独享路由守卫只有前置路由守卫 没有后置<br>一图流：<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124154108.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="组件路由守卫"><a href="#组件路由守卫" class="headerlink" title="组件路由守卫"></a>组件路由守卫</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>顾名思义就是在组件里面写路由守卫</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>两个方法<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124154242.png" alt=""><br>与前置后置守卫不同的一点是<br>从jojo到dio 会产生一次前置 一次后置<br>而组件路由守卫的话<br>从jojo到dio 会产生一次beforeRouteEnter 然后 当点击到其他的内容 比如msg 才会产生beforeRouteLeave<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124154607.png" alt=""><br>注意一点 如果不next 放行 那么就是进不去也出不来<br>一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124155056.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="history模式与hash模式"><a href="#history模式与hash模式" class="headerlink" title="history模式与hash模式"></a>history模式与hash模式</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue的路由有两种工作模式 hash 和 history 默认是hash</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>hash模式 地址栏井号斜杠后面的所有参数都是hash值 特点是不随http请求发给服务器<br>意味着如果后面写了很多东西 它也不会发给服务器的<br>history模式 没有井号 比较美观<br>默认hash模式 切换成history模式<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124155759.png" alt=""><br>此外 hash模式的兼容性比history好<br>且 如果项目上线的时候 打包为history模式 会在刷新的时候出现404问题 因为服务端没有配置相关地址 但hash 就不会 因为井号后面不会发给服务端<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220124162251.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组去重的八种方法</title>
      <link href="/posts/1bdac88a9cd9/"/>
      <url>/posts/1bdac88a9cd9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>本文主要用于讲解以及记录js数组去重的八种方法 主要学习其中的编程思想</p></div><h1 id="方法总览"><a href="#方法总览" class="headerlink" title="方法总览"></a>方法总览</h1><ol><li>第三方库<br>下面推荐underscore和loadash，这两个库也是官网直接下载下来然后引入即可<br>效果如下<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220114160343.png" alt=""><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./underscore-min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">500</span>];</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> result = _.uniq(arr);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    getUniqueArray();</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>es6的set方法<br>set方法里面的东西是独一无二的 利用这个特性去重<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">500</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">// 两种都可以 推荐上面的</span></span><br><span class="line">    <span class="comment">// var result = [...new Set(arr)]</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="built_in">Array</span>.from(<span class="built_in">Set</span>(arr));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">getUniqueArray();</span><br></pre></td></tr></table></figure></li><li>遍历数组再用indexOf判断 如果不存在相同的就push进去<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">500</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(result.indexOf(item) === -<span class="number">1</span>)result.push(item);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">getUniqueArray();</span><br></pre></td></tr></table></figure></li><li>利用filter过滤 原理是利用indexOf会返回数组下标 并且有两个一样的元素的时候 只会返回第一个的下标 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">500</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = arr.filter(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr.indexOf(item) === index</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">getUniqueArray();</span><br></pre></td></tr></table></figure></li><li>利用reduce方法 以及include方法 迭代的结果里面是否有相同<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">500</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = arr.reduce(<span class="function">(<span class="params">pre,current</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pre.includes(current)?pre:[...pre,current]</span><br><span class="line">    &#125;,[])</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">getUniqueArray();</span><br></pre></td></tr></table></figure></li><li>利用对象的特性 对象中的key是唯一的 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">500</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">    arr.forEach(<span class="function">(<span class="params">item,index</span>) =&gt;</span> &#123;</span><br><span class="line">        result[arr[index]] = <span class="string">&#x27;sss&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    result = <span class="built_in">Object</span>.keys(result).map(<span class="function"><span class="params">item</span>=&gt;</span>~~item);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">getUniqueArray();</span><br></pre></td></tr></table></figure></li><li>基本的算法 数组去重 对比两数组<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">500</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    loop: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] === arr[j]) <span class="keyword">continue</span> loop;</span><br><span class="line">        &#125;</span><br><span class="line">        result.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">getUniqueArray();</span><br></pre></td></tr></table></figure></li><li>利用排序后的数组 相邻有相同的则重复的特性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">500</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUniqueArray</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    sortArr = arr.sort();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sortArr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sortArr[i] !== sortArr[i + <span class="number">1</span>]) result.push(sortArr[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">&#125;</span><br><span class="line">getUniqueArray();</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1>上面写到的八种方法还是看需求使用比较好 有的方法虽然可以解决问题 但没有考虑到时间复杂度之类的 尽量使用简单的方法或者第三方库的方法吧</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LandingPage落地页</title>
      <link href="/posts/660fac1a5939/"/>
      <url>/posts/660fac1a5939/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>本文介绍了落地页的内容，设计风格以及落地页对用户的吸引作用。</p></div><h1 id="何为LandingPage"><a href="#何为LandingPage" class="headerlink" title="何为LandingPage"></a>何为LandingPage</h1><p>landingpage是一种网页设计风格制作的网页，中文名是落地页，像下面这几种<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220209180635.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220209180709.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220209180741.png" alt=""><br>它们都有非常鲜明的特点，就是非常集中式的引导用户进入某个选项。相比起传统的网页，落地页不需要用户去探索页面的各种内容，而是专于某种目的，比如推销产品，展现简历内容等。</p><h1 id="LandingPage的制作"><a href="#LandingPage的制作" class="headerlink" title="LandingPage的制作"></a>LandingPage的制作</h1><p>其实landingpage的制作并不太需要很好的前端能力，甚至现在很多开发网页都可以使用框架生成或者软件生成，这样有助于设计者更专注于界面的设计而非功能的使用，并且因为落地页基本不需要后台的功能，所以落地页基本是静态的网站，也就加快了网页的访问速度，减少用户的等待时间，进一步留住用户提高访问量。<br>另外，正常的网页中目标导向太多，导致用户不知道应该点哪个以进行下一步的选择，这样不仅会导致使用者的流失，也会导致设计者投资的广告费用白白浪费，所以一个正确的landingpage应该具有以下几点要求</p><ol><li>精美的设计</li><li>收集信息的表格</li><li>详细的产品或服务描述</li><li>以往客户评价</li></ol><p>关于实际制作landing page 需要使用到wordpress软件里面的一个插件brizy<br>下面提供视频演示地址<br><div class="note primary flat"><p><a href="https://www.bilibili.com/video/BV17h411R7vF?from=search&amp;seid=10740205905332206372&amp;spm_id_from=333.337.0.0">视频地址</a></p></div></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>依我个人而言，更喜欢landing page这种类型的页面制作，因为它的美感肯定是大于常规的电商网站的，而且也不会用到很多的功能，但是要练手项目的话，还是建议选择功能制作比较多的页面，这样能够体现自己的编程能力，以及解决问题的能力。</p>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一面，快乐无限</title>
      <link href="/posts/427f696eb6e1/"/>
      <url>/posts/427f696eb6e1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>本文主要用于记录前端面试常考题</p></div><h1 id="前端基础"><a href="#前端基础" class="headerlink" title="前端基础"></a>前端基础</h1><h2 id="HTTP-HTML-浏览器"><a href="#HTTP-HTML-浏览器" class="headerlink" title="HTTP/HTML/浏览器"></a>HTTP/HTML/浏览器</h2><h3 id="说一下http和https"><a href="#说一下http和https" class="headerlink" title="说一下http和https"></a>说一下http和https</h3><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">基本概念</button></li><li class="tab"><button type="button" data-href="#test-2">区别</button></li><li class="tab"><button type="button" data-href="#test-3">https的工作原理</button></li><li class="tab"><button type="button" data-href="#test-4">https协议的优缺点</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>http 超文本传输协议 是互联网上应用最广泛的一种网络协议，是一个客户端和服务器端请求和应答的标准（tcp），用于从www服务器传输超文本到本地浏览器的传输协议，它可以使浏览器更加高效，使网络传输减少<br>https 是以安全为目标的http通道，简单讲是http的安全版，即http下加入ssl层，https的安全基础是ssl，因此加密的详细内容就需要ssl<br>https协议的主要作用是：建立一个信息安全通道，来确保数组的传输，确保网站的真实性</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>https协议需要ca证书 费用比较高<br>http的信息是明文传输，https是经过ssl协议加密传输的<br>端口不同 一般来讲http是80端口 https是443端口</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>客户使用https url访问服务器，则要求web服务器建立ssl连接<br>web服务器收到客户端的请求后，将网站的证书（里面包含公钥）返回or传输给客户端<br>客户端和web服务器端开始协商ssl链接的安全等级<br>客户端浏览器通过双方协商一致的安全等级，建立会话密钥，然后通过网站的公钥加密会话密钥，并传送给网站<br>web服务器通过自己的私钥解密出会话密钥<br>web服务器通过会话密钥加密与客户端之间的通信</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-4"><p>优点：使用https协议可认证用户和服务器，确保数据发送到正确的客户机和服务器。<br>缺点：https握手阶段比较费时，会使得页面加载时间延长50%，增加10%-20%的耗电<br>https缓存不如http高效，会增加数据开销<br>ssl证书要钱 功能越强的证书费用越高<br>ssl证书要绑定ip 不能在同个ip上绑定多个域名，ipv4资源支持不了这种消耗</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="tcp三次握手"><a href="#tcp三次握手" class="headerlink" title="tcp三次握手"></a>tcp三次握手</h3><p>一句话概括：<br>客户端和服务端都需要直到各自可收发，因此需要三次握手</p><h3 id="tcp和udp的区别"><a href="#tcp和udp的区别" class="headerlink" title="tcp和udp的区别"></a>tcp和udp的区别</h3><ol><li>tcp是面向链接的 udp是无连接的即发送数据前不需要建立连接</li><li>tcp提供可靠的服务，也就是说通过tcp连接发送的数据，无差错，不丢失，不重复，且按序到达，udp尽最大的努力交付，即不保证可靠交付。并且因为tcp可靠，面向连接，不会丢失数据因此适合大数据量的交换</li><li>tcp是面向字节流，udp面向报文，并且网络出现拥塞不会使得发送速率降低（因此会产生丢包，对实时的应用比如ip电话和视频会议等）</li><li>tcp只能是一对一的，udp支持1对1 1对多</li><li>tcp的首部较大为20字节 udp只有8字节</li><li>tcp是面向连接的可靠性传输，udp是不可靠的</li></ol><h3 id="websocket的实现和应用"><a href="#websocket的实现和应用" class="headerlink" title="websocket的实现和应用"></a>websocket的实现和应用</h3><p>应用：多人聊天室，客服咨询<br><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">什么是websocket</button></li><li class="tab"><button type="button" data-href="#test-2">websocket是怎么样的协议？具体有什么优点</button></li><li class="tab"><button type="button" data-href="#test-3">websocket的作用</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>websocket是h5中的一种协议，支持持久性连接，而http协议不支持。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先，Websocket是一个持久化的协议，相对于HTTP这种非持久的协议来说</p><p>HTTP的生命周期通过 Request 来界定，也就是一个 Request 一个 Response ，那么在 HTTP1.0 中，这次HTTP请求就结束了。</p><p>在HTTP1.1中进行了改进，使得有一个keep-alive，也就是说，在一个HTTP连接中，可以发送多个Request，接收多个Response。但是请记住 Request = Response ， 在HTTP中永远是这样，也就是说一个request只能有一个response。而且这个response也是被动的，不能主动发起。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>（1）ajax轮询</p><p>ajax轮询的原理非常简单，让浏览器隔个几秒就发送一次请求，询问服务器是否有新信息。</p><p>（2）long poll（长轮询）</p><p>long poll 其实原理跟 ajax轮询 差不多，都是采用轮询的方式，不过采取的是阻塞模型（一直打电话，没收到就不挂电话），也就是说，客户端发起连接后，如果没消息，就一直不返回Response给客户端（对于PHP有最大执行时间，建议没消息，执行到一定时间也返回）。直到有消息才返回，返回完之后，客户端再次建立连接，周而复始。</p><p>从上面可以看出其实这两种方式，都是在不断地建立HTTP连接，关闭HTTP协议，由于HTTP是非状态性的，每次都要重新传输 identity info （鉴别信息），来告诉服务端你是谁。然后等待服务端处理，可以体现HTTP协议的另外一个特点，被动性。</p><p>何为被动性呢，其实就是，服务端不能主动联系客户端，只能有客户端发起。从上面很容易看出来，不管怎么样，上面这两种都是非常消耗资源的。</p><p>ajax轮询 需要服务器有很快的处理速度和资源。（速度）long poll 需要有很高的并发，也就是说同时接待客户的能力。（场地大小）</p><p>（3）WebSocket</p><p>Websocket解决了HTTP的这几个难题。首先，被动性，当服务器完成协议升级后（HTTP-&gt;Websocket），服务端就可以主动推送信息给客户端啦。解决了上面同步有延迟的问题。</p><p>解决服务器上消耗资源的问题：其实我们所用的程序是要经过两层代理的，即HTTP协议在Nginx等服务器的解析下，然后再传送给相应的Handler（php等）来处理。简单地说，我们有一个非常快速的 接线员（Nginx） ，他负责把问题转交给相应的 客服（Handler） 。Websocket就解决了这样一个难题，建立后，可以直接跟接线员建立持久连接，有信息的时候客服想办法通知接线员，然后接线员在统一转交给客户。</p><p>由于Websocket只需要一次HTTP握手，所以说整个通讯过程是建立在一次连接/状态中，也就避免了HTTP的非状态性，服务端会一直知道你的信息，直到你关闭请求，这样就解决了接线员要反复解析HTTP协议，还要查看identity info的信息。</p><p>目前唯一的问题是：不兼容低版本的IE</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p><h3 id="http请求的HEAD方式"><a href="#http请求的HEAD方式" class="headerlink" title="http请求的HEAD方式"></a>http请求的HEAD方式</h3><p>head：类似于get请求，只不过返回的响应中没有具体的内容，用户获取报头<br>options： 允许客户端查看服务器的性能 比如服务器支持的请求方式等等</p><h3 id="一个图片url访问后下载怎样实现"><a href="#一个图片url访问后下载怎样实现" class="headerlink" title="一个图片url访问后下载怎样实现"></a>一个图片url访问后下载怎样实现</h3><p>请求的返回头里面，用于浏览器解析的重要参数就是oss的api文档里面的返回http头，决定用户下载行为的参数<br>下载的情况下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. x-oss-object-type</span><br><span class="line">Normal</span><br><span class="line">2. x-oss-request-id:</span><br><span class="line">3. x-oss-storage-class</span><br><span class="line">Standard</span><br></pre></td></tr></table></figure></p><h3 id="web-quality-无障碍"><a href="#web-quality-无障碍" class="headerlink" title="web quality(无障碍)"></a>web quality(无障碍)</h3><p>能够被残障人士使用的网站才能称得上是一个易用的网站<br>使用alt属性<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;person,jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;this is a person&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="几个实用的BOM属性对象方法"><a href="#几个实用的BOM属性对象方法" class="headerlink" title="几个实用的BOM属性对象方法"></a>几个实用的BOM属性对象方法</h3><p>1.location对象<br>2.history对象<br>3.Navigator对象</p><h3 id="H5的drag-api"><a href="#H5的drag-api" class="headerlink" title="H5的drag api"></a>H5的drag api</h3><h3 id="http2-0"><a href="#http2-0" class="headerlink" title="http2.0"></a>http2.0</h3><p>访问速度更快<br>允许多路复用<br>二进制分帧<br>首部压缩<br>服务器端推送</p><h3 id="400-401-403状态码"><a href="#400-401-403状态码" class="headerlink" title="400 401 403状态码"></a>400 401 403状态码</h3><ol><li>400：请求无效<br>产生原因：<br>前端提交数据的字段名称和字段类型与后台的实体没有保持一致<br>前端提交到后台的数据应该是json字符串类型 但是前端没有将对象<code>JSON.stringfy</code>转化成字符串<br>解决方法：<br>对照字段的名称 保持一致性<br>将obj对象通过<code>JSON.stringfy</code>实现序列化</li><li>401：当前请求需要用户验证</li><li>403：服务器已经得到请求，但是拒绝执行</li></ol><h3 id="fetch发送两次请求的原因"><a href="#fetch发送两次请求的原因" class="headerlink" title="fetch发送两次请求的原因"></a>fetch发送两次请求的原因</h3><p>fetch发送post请求的时候 总是发送两次，第一次的状态码是204 第二次才成功？<br>原因：<br>因为用fetch的post请求的时候，导致fetch第一次发送了一个options请求 询问服务器是否支持修改的请求头 如果服务器支持 则在第二次中发送真正的请求</p><h3 id="cookie-sessionStorage-localStorage的区别"><a href="#cookie-sessionStorage-localStorage的区别" class="headerlink" title="cookie sessionStorage localStorage的区别"></a>cookie sessionStorage localStorage的区别</h3><p>共同点：都是保存在浏览器 而且是同源的<br>cookie：cookie数据始终在同源的http请求中携带（即使不需要）即cookie在浏览器和服务器之间来回传递，而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存 cookie数据还有路径path的概念，可以限制cookie只属于某个路径下，存储的大小很小只有4k左右<br>（key：可以在浏览器和服务器之间来回传递 存储容量小 只有4k左右）<br>sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持<br>localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭<br>（key：本身就是一个会话过程，关闭浏览器后消失 ，session为一个会话，当页面不同即使是同一页面打开两次，也被视为同一次会话）</p><h3 id="web-worker"><a href="#web-worker" class="headerlink" title="web worker"></a>web worker</h3><h3 id="对html语义化标签的理解"><a href="#对html语义化标签的理解" class="headerlink" title="对html语义化标签的理解"></a>对html语义化标签的理解</h3><p>h5语义化标签是指正确的标签包含了正确的内容 结构良好 便于阅读 比如nav表示导航条 类似的还有artical header footer等等</p><h3 id="iframe是什么？有什么缺点？"><a href="#iframe是什么？有什么缺点？" class="headerlink" title="iframe是什么？有什么缺点？"></a>iframe是什么？有什么缺点？</h3><p>定义：iframe元素会创建包含另一个文档的内联框架<br>提示：可以将提示文字放在iframe标签之间，来提示某些不支持iframe的浏览器<br>缺点：</p><ol><li>会阻塞主页面的onload事件</li><li>搜索引擎无法解读这种页面 不利于SEO</li><li>iframe和主页面共享连接池 而浏览器对相同区域有限制所以会影响性能</li></ol><h3 id="Doctype的作用？严格模式与混杂模式如何区分？它们有何意义？"><a href="#Doctype的作用？严格模式与混杂模式如何区分？它们有何意义？" class="headerlink" title="Doctype的作用？严格模式与混杂模式如何区分？它们有何意义？"></a>Doctype的作用？严格模式与混杂模式如何区分？它们有何意义？</h3><p>Doctype声明于文档最前面 告诉浏览器以何种方式来渲染页面 有两种模式 混杂模式和严格模式<br>严格模式的排版和js运作模式是以该浏览器支持的最高标准运行<br>混杂模式则向后兼容 模拟老实浏览器 防止浏览器无法兼容页面</p><h3 id="cookie如何防范xss攻击"><a href="#cookie如何防范xss攻击" class="headerlink" title="cookie如何防范xss攻击"></a>cookie如何防范xss攻击</h3><p>xss 跨站脚本攻击 是指攻击者在返回的html中嵌入js脚本，为了减轻这些攻击，需要在http的头部配上，<code>set-cookie:httponly</code>这个属性可以防止xss，他会禁止js脚本来访问cookie<br><code>secure</code>这个属性告诉浏览器仅在请求为https的时候发送cookie</p><h3 id="一句话概括RESTFUL"><a href="#一句话概括RESTFUL" class="headerlink" title="一句话概括RESTFUL"></a>一句话概括RESTFUL</h3><p>就是用url定位资源 用http描述操作</p><h3 id="讲讲viewport和移动端布局"><a href="#讲讲viewport和移动端布局" class="headerlink" title="讲讲viewport和移动端布局"></a>讲讲viewport和移动端布局</h3><p>常用解决方案<br>媒体查询<br>百分比<br>rem<br>vw和vh</p><h3 id="click在ios上有300ms延迟-原因以及如何解决"><a href="#click在ios上有300ms延迟-原因以及如何解决" class="headerlink" title="click在ios上有300ms延迟 原因以及如何解决"></a>click在ios上有300ms延迟 原因以及如何解决</h3><h3 id="addEventListener的参数"><a href="#addEventListener的参数" class="headerlink" title="addEventListener的参数"></a>addEventListener的参数</h3><p>代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(event,<span class="keyword">function</span>.useCapture)</span><br><span class="line"><span class="comment">//event事件名</span></span><br><span class="line"><span class="comment">//function指定事件触发时执行的函数</span></span><br><span class="line"><span class="comment">//useCapture是否在捕获或者冒泡阶段执行</span></span><br></pre></td></tr></table></figure></p><h3 id="讲讲304"><a href="#讲讲304" class="headerlink" title="讲讲304"></a>讲讲304</h3><p>如果客户端发送了一个带条件的get请求且该请求已被允许，而文档的内容并没有改变，则服务器应该返回这个304状态码</p><h3 id="强缓存-协商缓存什么时候用哪个？"><a href="#强缓存-协商缓存什么时候用哪个？" class="headerlink" title="强缓存 协商缓存什么时候用哪个？"></a>强缓存 协商缓存什么时候用哪个？</h3><h3 id="前端优化"><a href="#前端优化" class="headerlink" title="前端优化"></a>前端优化</h3><ol><li>降低请求量：合并资源，减少http请求数，minify/gzip压缩，webP，lazyLoad</li><li>加快请求速度：预解析DNS，减少域名数，并行加载，CDN分发。</li><li>缓存：HTTP协议缓存请求，离线缓存，manifest，离线数据缓存localStorage</li><li>渲染：JS/CSS优化，加载顺序，服务端渲染，pipeline</li></ol><h3 id="post和get的区别"><a href="#post和get的区别" class="headerlink" title="post和get的区别"></a>post和get的区别</h3><ol><li>get参数通过url传递，post放在request body中</li><li>get请求在url中传递的参数是有长度限制的 post没有</li><li>get比post更不安全，因为参数直接暴露在url中，所以不能用来传输敏感信息</li><li>get请求只能进行url编码 post支持多种编码方式</li><li>get请求会浏览器主动cache</li><li>get请求的参数会被完整的保留在浏览器的历史记录里，而post不会</li><li>get和post本质上都是TCP连接，没有差别。但由于http的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同</li><li>get产生一个TCP数据包 post产生两个</li></ol><h3 id="301-和-302的区别"><a href="#301-和-302的区别" class="headerlink" title="301 和 302的区别"></a>301 和 302的区别</h3><h3 id="HTTP支持的方法"><a href="#HTTP支持的方法" class="headerlink" title="HTTP支持的方法"></a>HTTP支持的方法</h3><p>get post head options put delete trace connect</p><h3 id="如何画一个三角形"><a href="#如何画一个三角形" class="headerlink" title="如何画一个三角形"></a>如何画一个三角形</h3><p>三角形原理，边框的均分原理<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">0px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">0px</span>;</span><br><span class="line"><span class="attribute">border-top</span>:<span class="number">10px</span> solid red;</span><br><span class="line"><span class="attribute">border-right</span>:<span class="number">10px</span> solid transparent;</span><br><span class="line"><span class="attribute">border-bottom</span>:<span class="number">10px</span> solid transparent;</span><br><span class="line"><span class="attribute">border-left</span>:<span class="number">10px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="状态码304和200"><a href="#状态码304和200" class="headerlink" title="状态码304和200"></a>状态码304和200</h3><p>200：请求已经成功 请求所希望的响应头或数据体岁此响应返回<br>304：如果客户端发送了一个带条件的get请求且该请求已被允许，而文档的内容并没有改变，则返回这个状态码</p><h3 id="说一下浏览器缓存"><a href="#说一下浏览器缓存" class="headerlink" title="说一下浏览器缓存"></a>说一下浏览器缓存</h3><h3 id="HTML5新增的元素"><a href="#HTML5新增的元素" class="headerlink" title="HTML5新增的元素"></a>HTML5新增的元素</h3><p>首先html5为了更好的实践web语义化，增加了<code>header</code>，<code>footer</code>，<code>nav</code>，<code>aside</code>，<code>section</code>等语义化标签，在表单方面，为了增强表单，为input增加了<code>color</code>,<code>emial</code>, <code>data</code>,<code>range</code> 等类型。在存储方面，提供了<code>sessionStorage</code>，<code>localStorage</code>和离线存储，通过这些存储方式方便数据在客户端的存储和获取，在多媒体方面规定了音频和视频元素<code>audio</code>和<code>video</code>，另外还有地理定位，<code>canvas</code>画布，拖放，多线程编程的web worker和websocket协议</p><h3 id="在地址栏里输入一个url-到这个页面呈现出来，中间会发生什么？"><a href="#在地址栏里输入一个url-到这个页面呈现出来，中间会发生什么？" class="headerlink" title="在地址栏里输入一个url 到这个页面呈现出来，中间会发生什么？"></a>在地址栏里输入一个url 到这个页面呈现出来，中间会发生什么？</h3><p>DNS解析<br>TCP连接<br>发送HTTP请求<br>服务器处理请求并返回http报文<br>浏览器解析渲染页面<br>连接结束</p><h3 id="浏览器在生成页面的时候会生成哪两颗树"><a href="#浏览器在生成页面的时候会生成哪两颗树" class="headerlink" title="浏览器在生成页面的时候会生成哪两颗树"></a>浏览器在生成页面的时候会生成哪两颗树</h3><p>构造两棵树，DOM树和CSSOM规则树<br>当浏览器接收到服务器相应来的HTML文档后，会遍历文档节点，生成DOM树<br>CSSOM规则树则由浏览器解析css文件生成</p><h3 id="csrf和xss网络攻击及防范"><a href="#csrf和xss网络攻击及防范" class="headerlink" title="csrf和xss网络攻击及防范"></a>csrf和xss网络攻击及防范</h3><p>csrf 跨站请求伪造，理解为攻击者盗用了用户的身份，以用户的名义发送了恶意请求，比如用户登陆了一个网站后，立刻在另一个tab页面访问攻击者用来制造攻击的网站，这个网站要求访问刚刚登陆的网站，并发送了一个恶意请求，这时候csrf就产生了。<br>防范方式：使用验证码，检查http头部的refer，使用token<br>xss 跨站脚本攻击 可以理解为攻击者通过注入恶意的脚本，在用户浏览网页的时候进行攻击，比如获取cookie，或者其他用户身份信息，可以分为存储型和反射型。<br>防范方式：cookie设置httponly属性，对用户的输入进行检查，进行特殊字符过滤</p><h3 id="怎么看网站的性能如何"><a href="#怎么看网站的性能如何" class="headerlink" title="怎么看网站的性能如何"></a>怎么看网站的性能如何</h3><p>检测页面加载事件一般有两种方式：</p><ol><li>被动去测：就是在被检测的页面置入脚本或探针，当用户访问网页时，探针自动菜鸡数据并传回到数据库进行分析。</li><li>主动检测，即主动搭建分布式受控环境，模拟用户发起页面访问请求，主动采集性能数据并分析，在检测的精准度上，专业的第三方工具效果更佳，比如性能极客。</li></ol><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>1xx 信息状态码<br>100 continue 继续 一般在发送post请求的时候 已发送了http header 之后服务端返回此信息 表示确认，之后发送具体的参数消息<br>2xx 成功状态码<br>200 ok 正常返回信息<br>201 created 请求服务器已经成功并且创建了新的资源<br>202 accepted 服务器已接受请求 但未响应<br>3xx 重定向<br>301 moved permanently 请求的网页已永久移到新的位置<br>302 found 临时性重定向<br>303 see other 临时性重定向 且总是使用get请求新的url<br>304 not modified 自从上次的请求过后     请求的网页未修改过<br>4xx 客户端错误<br>400 bad request 服务端不理解客户端请求的格式 客户端不应该继续使用相同的内容发起请求<br>401 unauthorized 请求未授权<br>403 forbidden 禁止访问<br>404 not found 找不到与url匹配的资源<br>5xx 服务器错误<br>500 Internal server error 最常见的服务器错误<br>503 service unavailable 服务端暂时无法处理请求</p><h3 id="严格模式和混杂模式之doctype"><a href="#严格模式和混杂模式之doctype" class="headerlink" title="严格模式和混杂模式之doctype"></a>严格模式和混杂模式之doctype</h3><p>严格模式 以浏览器支持的最高标准执行 混杂模式也称怪异模式 向后兼容<br>没有<code>!Doctype</code>位于文档首部或者格式不正确 那么就是以混杂模式执行</p><h3 id="web标准以及w3c标准是什么"><a href="#web标准以及w3c标准是什么" class="headerlink" title="web标准以及w3c标准是什么"></a>web标准以及w3c标准是什么</h3><p>标签闭合 标签小写 不乱嵌套 使用外链的js/css 结构行为表现的分离</p><h3 id="行内元素-行内块-块元素-空元素"><a href="#行内元素-行内块-块元素-空元素" class="headerlink" title="行内元素 行内块 块元素 空元素"></a>行内元素 行内块 块元素 空元素</h3><p>行内元素：<code>a b span br i em strong label q code cite var</code><br>行内块:<code>img input</code><br>块元素:<code>div p h1-6 ol ul dl table form</code><br>行内元素 在一行上显示 不能设置宽高 元素的大小就是内容撑开的大小<br>行内块 在一行上显示 可设置宽高<br>块元素 独占一行 可以设置宽高 嵌套的情况下子默认和父宽度一致</p><p>空元素：不用写闭合标签的元素<br>常见空元素:<code>img input hr br link meta</code></p><h3 id="html全局属性"><a href="#html全局属性" class="headerlink" title="html全局属性"></a>html全局属性</h3><h2 id="CSS篇"><a href="#CSS篇" class="headerlink" title="CSS篇"></a>CSS篇</h2><h3 id="css盒模型"><a href="#css盒模型" class="headerlink" title="css盒模型"></a>css盒模型</h3><p>就是用来装页面上的元素的矩形区域，css中的盒模型包括ie盒子模型和标准的w3c盒子模型<br>标准盒子模型：<br>只有content<br>ie盒子模型:<br>包含了content padding 和 border</p><h3 id="画一条0-5px的线"><a href="#画一条0-5px的线" class="headerlink" title="画一条0.5px的线"></a>画一条0.5px的线</h3><ol><li>采用<code>meta viewport</code>的方法</li><li>采用<code>border-image</code>的方式</li><li>采用<code>transform:scale()</code></li></ol><h3 id="link标签和import标签的区别"><a href="#link标签和import标签的区别" class="headerlink" title="link标签和import标签的区别"></a>link标签和import标签的区别</h3><p><code>link</code>属于html标签 而<code>@import</code>是css提供的<br>页面被加载的时候，<code>link</code>会同时被加载，而<code>@import</code>引用的css会等页面加载结束后加载<br><code>link</code>是html标签，因此没有兼容性的问题，而<code>@import</code>只有ie5以上才能识别<br>link方式的权重高于import方式</p><h3 id="transition和animation的区别"><a href="#transition和animation的区别" class="headerlink" title="transition和animation的区别"></a>transition和animation的区别</h3><p><code>animation</code>和<code>transition</code>大部分属性都是相同的，它们都是随着事件改变元素的属性值，主要区别是<code>transition</code>需要触发一个事件才能改变属性，而<code>animation</code>不需要触发事件<br><code>transition</code>为2帧 从<code>from...to...</code> 而<code>animation</code>是一帧一帧的</p><h3 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h3><p>弹性布局<br><code>flex-direction</code>主轴方向<br><code>flex-wrap</code>换行原则<br><code>flex-flow</code><br><code>justify-content</code>水平主轴对齐方式<br><code>align-items</code>垂直对齐方式<br>属性<br><code>order</code>：定义项目的排列顺序 越小越前 默认0<br><code>flex-grow</code>定义项目的放大比例 即使存在空间也不会放大<br><code>flex-shrink</code>定义了项目的缩小比例，当空间不足的情况下会等比例缩小，如果为0则不缩小<br><code>flex-basis</code> 定义了在分配多余的空间，项目占据的空间<br><code>flex</code>前三者的简称 默认值为<code>0 1 auto</code><br><code>align-self</code>允许单个项目与其他项目不一样的对齐方式 可以覆盖<code>align-items</code>默认属性为auto 表示继承父元素的<code>align-items</code><br>圣杯布局</p><h3 id="BFC块级格式化上下文"><a href="#BFC块级格式化上下文" class="headerlink" title="BFC块级格式化上下文"></a>BFC块级格式化上下文</h3><p>用于清除浮动防止margin重叠等</p><h1 id="JS篇章"><a href="#JS篇章" class="headerlink" title="JS篇章"></a>JS篇章</h1><h2 id="类型及检测方式及栈和堆"><a href="#类型及检测方式及栈和堆" class="headerlink" title="类型及检测方式及栈和堆"></a>类型及检测方式及栈和堆</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">类型</button></li><li class="tab"><button type="button" data-href="#test-2">栈和堆</button></li><li class="tab"><button type="button" data-href="#test-3">检测方式</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>首先js的类型有基本数据类型和引用类型<br>前者有七种 后者是一种<br>根据以前的USONB理论 大致是<br><code>Undefined</code>,<code>String</code>,<code>Symbol</code>,<code>Object</code>,<code>Null</code>,<code>Number</code>,<code>BigInt</code>,<code>Boolean</code></p><ul><li>基本数据类型的作用？<br>基础类型存储在栈内存，被引用或拷贝时，会创建一个完全相等的变量；占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储。</li><li><code>object</code>为什么是引用类型？<br>而引用类型 在创建对象的时候会在堆内存中开辟一个空间 用来存放对象的属性 在为对象添加属性的时候，是将属性放在堆内存中开辟的空间里。<br>在栈内存中保存显示 对象名+一个地址 类似于指针 执行堆内存中对象开辟的空间<br>引用类型存储在堆内存，存储的是地址，多个引用指向同一个地址，这里会涉及一个“共享”的概念；占据空间大、大小不固定。引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。<br>引申出栈和堆的概念！</li><li><code>BigInt</code>?</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>在js的执行过程中，主要有三种类型的内存空间，一是代码空间，二是栈空间，三是堆空间。代码空间顾名思义就是存储代码用的，栈空间是用来保存变量和变量值的，堆空间是保存地址的。<br>对于栈空间来说，原始类型存储的是变量的值，而引用类型存储的是在堆空间中的地址，所以当js需要访问数据的时候，是通过栈中的引用地址来访问的，相当于多了一道转手程序</p><ul><li>闭包是怎么存储<br>js引擎对于闭包的处理，是当遇到一个闭包的时候，在堆空间中创建一个<code>closure(fn)</code>对象，用来保存闭包中的变量，所以闭包中的变量是存储在堆空间中的。这就是为什么闭包可以常驻在内存的原因。</li><li>js为什么需要栈和堆<br>首先知道栈是让变量循环利用，通常也是设置一些小数据来放入栈中，而我们知道引用类型数据obj一般占用的空间都比较大。所以js引擎需要栈和堆来维持内存的平衡。</li><li>题目1<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;lee&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line"><span class="built_in">console</span>.log(a.name);  <span class="comment">//第一个console</span></span><br><span class="line">b.name = <span class="string">&#x27;son&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.name);  <span class="comment">//第二个console</span></span><br><span class="line"><span class="built_in">console</span>.log(b.name);  <span class="comment">//第三个console</span></span><br></pre></td></tr></table></figure>第一个是lee显而易见，第二个console是son 第三个也是。这是因为a是对象 是引用类型 在赋值给b的时候 实际上是给了a在堆中的地址 所以b访问的是堆空间中a的变量 那么修改了b 自然a也会发生变动，这里就引出了堆空间共享的概念</li><li>题目2<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Julia&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  o.age = <span class="number">24</span>;</span><br><span class="line">  o = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Kath&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = change(a);     <span class="comment">// 注意这里没有new，后面new相关会有专门文章讲解</span></span><br><span class="line"><span class="built_in">console</span>.log(b.age);    <span class="comment">// 第一个console</span></span><br><span class="line"><span class="built_in">console</span>.log(a.age);    <span class="comment">// 第二个console</span></span><br></pre></td></tr></table></figure>第一个输出30 第二个输出24<br>原因是function里面传入的是a在堆中的地址，那么自然a的age就会变成24 但是到了return这一步 它会把传入的内存地址修改 导致o变成另外一个内存地址 将o的数据存放在该内存中， 所以b就是kath和30</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>数据类型检测有很多种，常用的是<code>typeof instanceof constructor Object.prototype.toString.call([])</code></p><ol><li><code>typeof</code>方法是基于计算机底层的数据类型的二进制进行判断。 用于判断除了<code>array null</code>之外的类型,即可以判断除了<code>null</code>之外的基础数据类型和除了<code>array</code>之外的应用数据类型<br>下面看一下它对于所有类型的处理 注意它可以处理function<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">2</span>);               <span class="comment">// number</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">true</span>);            <span class="comment">// boolean</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="string">&#x27;str&#x27;</span>);           <span class="comment">// string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> []);              <span class="comment">// object     []数组的数据类型在 typeof 中被解释为 object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);    <span class="comment">// function</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> &#123;&#125;);              <span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">undefined</span>);       <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">null</span>);            <span class="comment">// object     null 的数据类型被 typeof 解释为 object</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>为什么null会被<code>typeof</code>识别成<code>object</code>？<br>这个是一个历史遗留问题 js底层是二进制存储的 前三位代表的是数据的存储类型 对于object来说则是000 而刚好null也是全0 正好代表object类型的数据格式 所以null才会输出object</li></ul><ol><li><code>instanceof</code><br>由于上面的方法不能精确判断数组和null的原因 所以产生了新的方法<code>instanceof</code><br>康康它对于所有类型的处理<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> <span class="keyword">instanceof</span> <span class="built_in">Number</span>);                    <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>);                <span class="comment">// false </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;str&#x27;</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>);                <span class="comment">// false  </span></span><br><span class="line"><span class="built_in">console</span>.log([] <span class="keyword">instanceof</span> <span class="built_in">Array</span>);                    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Function</span>);       <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(&#123;&#125; <span class="keyword">instanceof</span> <span class="built_in">Object</span>);                   <span class="comment">// true    </span></span><br><span class="line"><span class="comment">// console.log(undefined instanceof Undefined);</span></span><br><span class="line"><span class="comment">// console.log(null instanceof Null);</span></span><br></pre></td></tr></table></figure>和由此可见 <code>instanceof</code>方法能准确的判断引用数据类型 但是不能判断基础数据类型<br>因为它的原理是和原型链相关的 ,相当于判断是不是这个类的实例，所以对于<code>undefined和null</code>来说，这两者是没有原型的 所以无法判断。<br>引申一下 <code>null</code>是所有原型的终点 <code>undefined</code>是表示没有这个值 缺少这个值 </li><li><code>constructor</code><br>构造器判断方法 注意带括号 否则会报错<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log((<span class="number">2</span>).constructor === <span class="built_in">Number</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="literal">true</span>).constructor === <span class="built_in">Boolean</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="string">&#x27;str&#x27;</span>).constructor === <span class="built_in">String</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(([]).constructor === <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log((<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;).constructor === <span class="built_in">Function</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log((&#123;&#125;).constructor === <span class="built_in">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>弊端是 如果改变了对象原型，该方法会失效<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"> </span><br><span class="line">Fn.prototype=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> f=<span class="keyword">new</span> Fn();</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(f.constructor===Fn);    <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(f.constructor===<span class="built_in">Array</span>); <span class="comment">// true </span></span><br></pre></td></tr></table></figure></li><li><code>Object.prototype.toString.call()</code><br>使用<code>Object</code>上面的<code>toString</code>方法 会返回一个格式为<code>[object Xxx]</code>的字符串，通过call重新调用就可以精确判断对象类型<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString(&#123;&#125;)       <span class="comment">// &quot;[object Object]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;)  <span class="comment">// 同上结果，加上call也ok</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>)    <span class="comment">// &quot;[object Number]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">&#x27;1&#x27;</span>)  <span class="comment">// &quot;[object String]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>)  <span class="comment">// &quot;[object Boolean]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)  <span class="comment">// &quot;[object Function]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>)   <span class="comment">//&quot;[object Null]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">undefined</span>) <span class="comment">//&quot;[object Undefined]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="regexp">/123/g</span>)    <span class="comment">//&quot;[object RegExp]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>()) <span class="comment">//&quot;[object Date]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call([])       <span class="comment">//&quot;[object Array]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">document</span>)  <span class="comment">//&quot;[object HTMLDocument]&quot;</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">window</span>)   <span class="comment">//&quot;[object Window]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从上面这段代码可以看出，Object.prototype.toString.call() 可以很好地判断引用类型，甚至可以把 document 和 window 都区分开来。</span></span><br></pre></td></tr></table></figure>由于代码过长 推荐封装一下<code>Object.prototype.toString</code><br>实现一个全局通用的判断方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getType</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> type = <span class="keyword">typeof</span> obj;</span><br><span class="line"><span class="comment">//如果是基本类型 直接返回</span></span><br><span class="line"><span class="keyword">if</span>(type!==<span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toStirng.call(obj).replace(<span class="regexp">/^\[object (\S+)\]$/</span>, <span class="string">&#x27;$1&#x27;</span>);  <span class="comment">// 注意正则中间有个空格</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 代码验证，需要注意大小写，哪些是typeof判断，哪些是toString判断？思考下 */</span></span><br><span class="line">getType([])     <span class="comment">// &quot;Array&quot; typeof []是object，因此toString返回</span></span><br><span class="line">getType(<span class="string">&#x27;123&#x27;</span>)  <span class="comment">// &quot;string&quot; typeof 直接返回</span></span><br><span class="line">getType(<span class="built_in">window</span>) <span class="comment">// &quot;Window&quot; toString返回</span></span><br><span class="line">getType(<span class="literal">null</span>)   <span class="comment">// &quot;Null&quot;首字母大写，typeof null是object，需toString来判断</span></span><br><span class="line">getType(<span class="literal">undefined</span>)   <span class="comment">// &quot;undefined&quot; typeof 直接返回</span></span><br><span class="line">getType()            <span class="comment">// &quot;undefined&quot; typeof 直接返回</span></span><br><span class="line">getType(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;) <span class="comment">// &quot;function&quot; typeof能判断，因此首字母小写</span></span><br><span class="line">getType(<span class="regexp">/123/g</span>)      <span class="comment">//&quot;RegExp&quot; toString返回</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220316104931.png" alt=""></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">防抖</button></li><li class="tab"><button type="button" data-href="#test-2">节流</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>防抖主要是为了不让事件同一时间内触发多次导致请求多次的问题<br>防抖有两种情况<br>第一种是只触发第一次<br>第二种是只触发最后一次<br>防抖的主要写法如下: 但会产生一个问题 就是一开始必须等待才能进行<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="comment">// const msg = document.getElementById(&#x27;msg&#x27;);</span></span></span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, debounce(submit), <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">submit</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> t = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (t) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">clearTimeout</span>(t);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            t = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span></span><br><span class="line"><span class="javascript">            &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol><li>用<code>debounce</code>传入参数 并且注意最后返回的是一个函数</li><li>设置t来决定定时器的销毁和开启</li><li>定时器用箭头函数 让<code>this</code>指向<code>window</code></li><li>apply将<code>this</code>和<code>arguments</code>传给<code>submit</code></li></ol><p>解决上面问题的做法如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="comment">// const msg = document.getElementById(&#x27;msg&#x27;);</span></span></span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, debounce(submit, <span class="number">2000</span>), <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">submit</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, timer</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> t = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> firstclick = !t;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (firstclick) &#123;</span></span><br><span class="line"><span class="javascript">                fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            t = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                t = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">            &#125;, timer);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>原理是判断是否为第一次执行 如果是的话直接请求 然后让定时器将t经过一定时间还原，这样下一次就又是第一次 否则的话 因为t还没还原 所以不会输出；</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>节流是指函数在一定时间间隔内只能执行一次，从而减少一段时间内的触发频率<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;msg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点我发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="comment">// const msg = document.getElementById(&#x27;msg&#x27;);</span></span></span><br><span class="line"><span class="javascript">    btn.addEventListener(<span class="string">&#x27;click&#x27;</span>, throttle(submit, <span class="number">2000</span>), <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">submit</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(e, <span class="built_in">this</span>);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> begin = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> cur = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (cur - begin &gt;= delay) &#123;</span></span><br><span class="line"><span class="javascript">                fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span></span><br><span class="line"><span class="javascript">                begin = cur;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ol><li>用<code>throttle</code>传入参数 并且注意最后返回的是一个函数</li><li>用<code>begin</code>定义一开始的时间，用<code>cur</code>定义当前时间 </li><li>最后<code>begin</code>要变成<code>cur</code></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="手写深浅拷贝"><a href="#手写深浅拷贝" class="headerlink" title="手写深浅拷贝"></a>手写深浅拷贝</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">浅拷贝</button></li><li class="tab"><button type="button" data-href="#test-2">深拷贝</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>浅拷贝顾名思义就是直接拷贝对象上面的内容 但是如果新的对象的属性发生了改变，原先对象上面的属性也会随之改变<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> oldObj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jotaro&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="attr">color</span>:[<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>],</span><br><span class="line">    <span class="attr">friend</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;jostar&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newObj = oldObj;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;oldObj&#x27;</span>,oldObj);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;newObj&#x27;</span>,newObj);</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>深拷贝的话，新的对象发生改变不会影响旧的对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> oldObj = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;jotaro&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="attr">color</span>:[<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>],</span><br><span class="line">    <span class="attr">friend</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;jostar&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 深拷贝的话 在复制对象属性的基础上 不能对原先对象的属性进行改变</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 如果传进来的参数不是对象 或者是 空 直接返回原先参数</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>||obj===<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义一个result 用于复制参数</span></span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    <span class="comment">// 那么只剩数组和对象两种可能 继续判断 并改变result的类型</span></span><br><span class="line">    <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">        result = [];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        result = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 之后就是把obj里面的key拿出来放到result里面 这样就完成了初步的深拷贝</span></span><br><span class="line">    <span class="comment">// for(let key in obj)&#123;</span></span><br><span class="line">    <span class="comment">//     result[key] = obj[key];</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// 会发现有一点缺陷就是 如果对象里面包含了对象 那么最后做出的修改 还是浅拷贝类型的修改</span></span><br><span class="line">    <span class="comment">// 解决方法是 递归obj[key] 让他继续判断再传递</span></span><br><span class="line">    <span class="comment">// 还有一个可以优化的地方 就是对象原型上面的属性不应该去拷贝 所以使用到一个方法</span></span><br><span class="line">    <span class="comment">// 只会拷贝对象自身的属性</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj.hasOwnProperty(key))&#123;</span><br><span class="line">            result[key] = deepClone(obj[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = deepClone(oldObj);</span><br><span class="line">newObj.age = <span class="number">99</span>;</span><br><span class="line">newObj.color[<span class="number">0</span>] = <span class="string">&#x27;yellow&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;oldObj&#x27;</span>,oldObj);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;newObj&#x27;</span>,newObj);</span><br></pre></td></tr></table></figure><br>分几步走</p><ol><li>判断obj不为对象 和 为空的情况 直接返回obj</li><li>定义一个result用来放结果 再根据传进来的obj 判断它是否为对象或者数组 相应的改变result的类型</li><li>for循环将obj的key传给result的key 注意要用递归的形式</li><li>优化 只拷贝对象的属性 不拷贝对象原型的属性 </li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>需求 已知数组<code>arr[1,2,[3,[4,[5,6]]]]</code> 将其扁平化处理成<code>[1,2,3,4,5,6]</code><br>方法一 flat函数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,[<span class="number">3</span>,[<span class="number">4</span>,[<span class="number">5</span>,<span class="number">6</span>]]]];</span><br><span class="line"><span class="built_in">console</span>.log(arr.flat(<span class="literal">Infinity</span>));</span><br></pre></td></tr></table></figure><br>方法2 reduce加递归<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatfn</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">res,item</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// return res.concat((item instanceof Array)?flatfn(item):item)</span></span><br><span class="line">        <span class="comment">// 也可以写成</span></span><br><span class="line">        <span class="keyword">return</span> res.concat(<span class="built_in">Array</span>.isArray(item)?flatfn(item):item);</span><br><span class="line">    &#125;,[])</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(flatfn(arr))</span><br></pre></td></tr></table></figure><br>方法3 数组转字符串<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatfn</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">&#x27;,&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>).map(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">parseInt</span>(item);</span><br><span class="line">    &#125;)    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(flatfn(arr))</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="单例模式-设计模式"><a href="#单例模式-设计模式" class="headerlink" title="单例模式(设计模式)"></a>单例模式(设计模式)</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>单例模式算是编程思想中的一种设计模式，简单来讲就是一个类只能有一个实例对象，这个实例对象最终也只会被新建一次，并且要提供一个能访问到这个实例的入口</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>假设有个person类 里面构造器传入的是姓名 设计单例模式 让两个人的名字都用的同一个<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> Person(<span class="string">&#x27;zzz&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> Person(<span class="string">&#x27;yyy&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p1===p2);</span><br><span class="line">返回<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Person.getInstance = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.instance) <span class="keyword">return</span> <span class="built_in">this</span>.instance;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.instance = <span class="keyword">new</span> Person(name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = Person.getInstance(<span class="string">&#x27;zzz&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> p2 = Person.getInstance(<span class="string">&#x27;yyy&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p1===p2);</span><br><span class="line">返回<span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>提高版本 假设有个女朋友类 里面传入的是姓名和年龄 设计单例模式 让女朋友类变成单例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GF</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name,age</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> danli = <span class="function"><span class="keyword">function</span>(<span class="params">customClass</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> instance = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(instance)<span class="keyword">return</span> instance;</span><br><span class="line">            <span class="keyword">return</span> instance = <span class="keyword">new</span> customClass(...arguments);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let g1 = new GF(&#x27;2b&#x27;,20);</span></span><br><span class="line"><span class="comment">// let g2 = new GF(&#x27;3b&#x27;,18);</span></span><br><span class="line"><span class="comment">// console.log(g1===g2)</span></span><br><span class="line"><span class="comment">// 返回false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> DanliGF = danli(GF);</span><br><span class="line"><span class="keyword">let</span> g1 = <span class="keyword">new</span> DanliGF(<span class="string">&#x27;2b&#x27;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">let</span> g2 = <span class="keyword">new</span> DanliGF(<span class="string">&#x27;3b&#x27;</span>,<span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(g1===g2)</span><br><span class="line"><span class="comment">// 返回ture</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h1><div class="note primary flat"><p><a href="https://zlinni.github.io/posts/1bdac88a9cd9/">数组去重的八种方法</a></p></div><h1 id="手写promise-all和promise-race"><a href="#手写promise-all和promise-race" class="headerlink" title="手写promise.all和promise.race"></a>手写promise.all和promise.race</h1><h1 id="模拟实现new"><a href="#模拟实现new" class="headerlink" title="模拟实现new"></a>模拟实现new</h1><h1 id="实现call-apply-bind"><a href="#实现call-apply-bind" class="headerlink" title="实现call/apply/bind"></a>实现call/apply/bind</h1><h1 id="模拟Object-create-的实现"><a href="#模拟Object-create-的实现" class="headerlink" title="模拟Object.create()的实现"></a>模拟Object.create()的实现</h1><h1 id="千分位分隔符"><a href="#千分位分隔符" class="headerlink" title="千分位分隔符"></a>千分位分隔符</h1><h1 id="实现三角形"><a href="#实现三角形" class="headerlink" title="实现三角形"></a>实现三角形</h1><h1 id="实现三栏布局-双栏布局"><a href="#实现三栏布局-双栏布局" class="headerlink" title="实现三栏布局/双栏布局"></a>实现三栏布局/双栏布局</h1><h1 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h1><h2 id="判断一个数组是否是数组"><a href="#判断一个数组是否是数组" class="headerlink" title="判断一个数组是否是数组"></a>判断一个数组是否是数组</h2><p>关键：结合<code>Object.prototype.toString.call(arr)</code>判断。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">judgeArr</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> arr === <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(arr) === <span class="string">&#x27;[object Array]&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h3><p>每次比较相邻的数 如果后一个比前一个小 换位置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.length-<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;arr.length-<span class="number">1</span>-i;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(arr[j+<span class="number">1</span>]&lt;arr[j])&#123;</span><br><span class="line"><span class="keyword">var</span> temp;</span><br><span class="line">temp = arr[j];</span><br><span class="line">arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(bubbleSort(arr));</span><br></pre></td></tr></table></figure></p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>思路 二分数组 找个基准点 遍历数组小于基准点在左反之在又 之后继续递归左数组和右数组最后concat起来<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.length === <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> cIndex = <span class="built_in">Math</span>.floor(arr.length/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">var</span> c = arr.splice(cIndex,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> l = [];</span><br><span class="line">    <span class="keyword">var</span> r = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span> ;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]&lt;c)&#123;</span><br><span class="line">            l.push(arr[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            r.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> quickSort(l).concat(c,quickSort(r));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(quickSort(arr));</span><br></pre></td></tr></table></figure></p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>先序遍历 根左右<br>中序遍历 左根右<br>后序遍历 左右根<br>关键：了解递归边界<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">const</span> root = &#123;</span><br><span class="line">        <span class="attr">val</span>:<span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">        <span class="attr">left</span>:&#123;</span><br><span class="line">            <span class="attr">val</span>:<span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">            <span class="attr">left</span>:&#123;</span><br><span class="line">                <span class="attr">val</span>:<span class="string">&#x27;d&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">right</span>:&#123;</span><br><span class="line">                <span class="attr">val</span>:<span class="string">&#x27;e&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">right</span>:&#123;</span><br><span class="line">            <span class="attr">val</span>:<span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">            <span class="attr">left</span>:&#123;</span><br><span class="line">                <span class="attr">val</span>:<span class="string">&#x27;f&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">right</span>:&#123;</span><br><span class="line">                <span class="attr">val</span>:<span class="string">&#x27;g&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//先序遍历</span></span><br><span class="line"><span class="comment">// function preorder(root)&#123;</span></span><br><span class="line"><span class="comment">//     if(!root)&#123;</span></span><br><span class="line"><span class="comment">//         return;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;当前遍历的节点值是&#x27;,root.val);</span></span><br><span class="line"><span class="comment">//     preorder(root.left);</span></span><br><span class="line"><span class="comment">//     preorder(root.right);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 中序遍历</span></span><br><span class="line"><span class="comment">// function inorder(root)&#123;</span></span><br><span class="line"><span class="comment">//     if(!root)&#123;</span></span><br><span class="line"><span class="comment">//         return;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     inorder(root.left);</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;当前遍历的节点值是&#x27;,root.val);</span></span><br><span class="line"><span class="comment">//     inorder(root.right);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// inorder(root);</span></span><br><span class="line"><span class="comment">// 后序遍历</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">postorder</span>(<span class="params">root</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!root)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    postorder(root.left);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;当前遍历的节点值是&#x27;</span>,root.val);</span><br><span class="line">    postorder(root.right);</span><br><span class="line">&#125;</span><br><span class="line">postorder(root);</span><br></pre></td></tr></table></figure></p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>下列代码会执行几次？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverse</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length <span class="comment">//1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++) &#123; <span class="comment">//1,n+1,n</span></span><br><span class="line">        <span class="built_in">console</span>.log(arr[i]) <span class="comment">//n</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><code>T(n) = 1 + n +1 +(n+1) +n = 3n+3</code>次<br>规则：如果n是常数 无脑化为1 如果n不是常熟 取最高项的值且常数项化为1<br>所以时间复杂度 <code>O(n) = n</code><br>注意 判断语句比递增语句执行多一次 因为要多判断最后一次。<br>下面代码会执行多少次？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverse</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> outLen = arr.length <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;outLen;i++) &#123; <span class="comment">//1,n+1,n</span></span><br><span class="line">        <span class="keyword">var</span> inLen = arr[i].length <span class="comment">//n </span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;inLen;j++) &#123; <span class="comment">//由上知循环n 所以这部分总的是n，即n,n(n+1),n²</span></span><br><span class="line">            <span class="built_in">console</span>.log(arr[i][j]) <span class="comment">//n²</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><code>T(n) = 1 + n +1 +(n+1) +n + n(3n+2) = 3n²+5n+3</code><br><code>O(n) = n²</code><br>所以综上得知只要计算最高项的就可以<br>再看<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length  <span class="comment">//不看</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;len;i=i*<span class="number">2</span>) &#123; <span class="comment">//看i*2 已知i++是i一直加 所以是n次 而这里相当于2的n次 而跳出循环的条件是i&gt;=len 所以这里不妨设2的x次&gt;=n来计算 得log2(n) = x 去掉常数项 则On为log(n)</span></span><br><span class="line">        <span class="built_in">console</span>.log(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><p>看代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traverse</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>里面有三个变量<code>arr len i</code><br>而这三个变量在执行的时候是恒定的并没有开辟新的空间 都是时间上的开销 所以是空间复杂度是<code>O(1)</code><br>看代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;n;i++) &#123;</span><br><span class="line">        arr[i] = i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>而在这个代码中 数组的大小不是恒定的 是随n变化的 所以它的空间复杂度是<code>O(n)</code></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件化编程+Vuex</title>
      <link href="/posts/910d3920d22d/"/>
      <url>/posts/910d3920d22d/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tip cogs"><p>本文主要用于记录Vue2.0的组件化编程功能和vux管理数据，参考视频<a href='https://www.bilibili.com/video/BV1Zy4y1K7SH?p=1'>【尚硅谷Vue2.0+Vue3.0全套教程丨vuejs从入门到精通】</a></p></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">效果展示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>实现应用中局部功能代码和资源的集合</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>代码复用<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220107105407.png" alt=""><br>组件可以产生嵌套<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220107105435.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="模块与组件-模块化与组件化"><a href="#模块与组件-模块化与组件化" class="headerlink" title="模块与组件 模块化与组件化"></a>模块与组件 模块化与组件化</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">模块</button></li><li class="tab"><button type="button" data-href="#test-2">组件</button></li><li class="tab"><button type="button" data-href="#test-3">模块化</button></li><li class="tab"><button type="button" data-href="#test-4">组件化</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><ol><li>向外提供特定功能的js程序 一般就是一个js文件</li><li>为什么 ？ 因为js文件很多很复杂</li><li>作用 复用js 简化js的编写 提高js运行效率</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>用来实现局部（特定）功能效果的代码集合（html/css/js/image…）</li><li>为什么？ 一个界面的功能很复杂</li><li>作用 复用编码 简化项目编码 提高运行效率</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>当应用中的js都已模块化来编写 那这个应用就是一个模块化应用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-4"><p>当应用中的功能都是以多组件的形式来编写 那么这个应用就是一个组件化应用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供非单文件组件的形式 使得一个文件包含有n个组件来编写</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>为什么组件中要使用<code>data:{return{xxx}}</code>?<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// const data = &#123;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     x:1,</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//     y:2</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">//每次都返回一个全新的对象 互不干扰</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> data = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">x</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">y</span>:<span class="number">2</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> x1 = data();</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> x2 = data();</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>组件先声明 后注册 注册分为全局和局部注册<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;intro&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jojo</span>&gt;</span><span class="tag">&lt;/<span class="name">jojo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dio</span>&gt;</span><span class="tag">&lt;/<span class="name">dio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    // 定义组件 用Vue.extend 注意不要写extends 接收记得data函数式且return一个对象</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    const jojo = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        // 定义模板标签</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        `,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        data:function()&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            return &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                name:&#x27;jotaro&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                age:18</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    // 全局注册一个组件</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    const dio = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    `,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        data:function()&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            return &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                name:&#x27;dio&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                age:9999</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    // 注意不用加s 组件的名字逗号加组件在哪</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    Vue.component(&#x27;dio&#x27;,dio);</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    new Vue(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        data:&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            intro:&#x27;vue组件使用&#x27;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        // 注册组件 components记得加s 此为局部注册</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        components:&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            jojo:jojo</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>需要注意的是单词的拼写是否正确<br>在声明的时候 <code>extend</code>不用加s<br>在局部注册的时候 使用<code>components</code> 因为可能会局部注册到很多个逐渐<br>在全局注册的时候 <code>Vue.component</code>不用加s 因为全局一次只能注册一个</p><p>一图流总结<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220108213845.png" alt=""></p><p>常见问题:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220108214611.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="组件的嵌套"><a href="#组件的嵌套" class="headerlink" title="组件的嵌套"></a>组件的嵌套</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue可以在组件里面嵌套组件 但需要注意一些细节上的问题</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>直接上代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    const jotaro = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml">-----</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        `,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        data:function()&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            return &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                name:&#x27;jotaro&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                age:18</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    const jojohome = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml">-----</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">jotaro</span>&gt;</span><span class="tag">&lt;/<span class="name">jotaro</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        `,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        data:function()&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            return &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                name:&#x27;jostar&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                age:18</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        components:&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            jotaro</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    const dio = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml">-----</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        `,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        data:function()&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            return &#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                name:&#x27;dio&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                age:999</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    const huangmu = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">jojohome</span>&gt;</span><span class="tag">&lt;/<span class="name">jojohome</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">                <span class="tag">&lt;<span class="name">dio</span>&gt;</span><span class="tag">&lt;/<span class="name">dio</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        `,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        components:&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            jojohome,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            dio</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    new Vue(&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        template:`</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            <span class="tag">&lt;<span class="name">huangmu</span>&gt;</span><span class="tag">&lt;/<span class="name">huangmu</span>&gt;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        `,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        components:&#123;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">            huangmu</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">        &#125;</span></span></span><br><span class="line"><span class="xml"><span class="handlebars">    &#125;)</span></span></span><br><span class="line"><span class="xml"><span class="handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Vuecomponent构造函数"><a href="#Vuecomponent构造函数" class="headerlink" title="Vuecomponent构造函数"></a>Vuecomponent构造函数</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>讲解一下vue源码中这个构造函数的作用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220109163817.png" alt=""><br>可以直接通过vm查看下面所带领的全部vc 而vc也可以查看自己带领的vc<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220109163935.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="单文件组件的使用"><a href="#单文件组件的使用" class="headerlink" title="单文件组件的使用"></a>单文件组件的使用</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供了<code>.vue</code>格式的文件作为单文件组件的使用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>先在vscode里面安装<code>vtuer</code>插件<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220109201930.png" alt=""></p><p>创建vue文件 使用<code>&lt;v</code>能快捷创建<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>一个vue文件里面包含三个标签<br><code>&lt;template&gt;&lt;/template&gt;</code>模板标签 用于书写html代码<br><code>&lt;script&gt;&lt;/script&gt;</code>脚本标签 用于书写js代码<br><code>&lt;style&gt;&lt;/style&gt;</code>样式标签 用于书写css代码</p><p>需要注意的是 </p><ol><li>注释问题 (如果没有脚手架写注释默认报错)</li><li>命名问题 建议首字母大写 或者<code>my-school</code></li><li>js代码暴露问题 参见之前的es6学习 有三种暴露方式</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p><code>JOJO.vue</code>的代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; name &#125;&#125;----&#123;&#123; age &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;JOJO&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &quot;jotaro&quot;,</span><br><span class="line">      age: 18,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br><code>App.vue</code>的代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;JOJO&gt;&lt;/JOJO&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JOJO from &quot;./JOJO&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        JOJO</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br><code>main.js</code>的代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`&lt;div&gt;&lt;App&gt;&lt;/App&gt;&lt;/div&gt;`</span>,</span><br><span class="line">    <span class="attr">components</span>:&#123;App&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><code>index.html</code>代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>需要注意的是</p><ol><li>上面的东西最好按顺序写 </li><li>记得暴露 和 导入</li><li>在vue的使用中 一般root写在<code>main.js</code>里面</li><li>最后是html文件中引入js的顺序 一定要先把vuejs引入再引入自己的mainjs</li></ol><p>新增注意 记得组件中的data返回的是函数</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="创建vue脚手架"><a href="#创建vue脚手架" class="headerlink" title="创建vue脚手架"></a>创建vue脚手架</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">配置参数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供脚手架cli为程序员使用，相当于webpack配置好了，方便编译vue代码</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先安装vue cli<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><br>之后在创建的目录打开输入cmd<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create xxx</span><br></pre></td></tr></table></figure><br>然后启动项目 注意是<code>serve</code><br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="分析vue脚手架"><a href="#分析vue脚手架" class="headerlink" title="分析vue脚手架"></a>分析vue脚手架</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">详细分析</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>一个脚手架项目构建好之后有以下几个文件<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220110212007.png" alt=""><br>自上而下说明<br><code>nodexxx</code>这个是node配置文件<br><code>favicon.ico</code>ico文件<br><code>index.html</code>首页文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 避免路径产生的错误以后统一用baseurl这个是vue提供的取代./的方法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这个是webpack里面默认去packagejson里面找文件名作为网站标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果你的浏览器不支持js 将执行下面的代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">strong</span>&gt;</span>We&#x27;re sorry but &lt;%= htmlWebpackPlugin.options.title %&gt; doesn&#x27;t work properly without JavaScript enabled. Please enable it to continue.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><code>main.js</code>入口文件 不用在页面中引入都可以找到该文件 vue已经配置好了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入口文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><code>gitignore</code>git文件<br><code>babelxxx</code>es6转es5文件</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="render函数"><a href="#render函数" class="headerlink" title="render函数"></a>render函数</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>上面讲到了在入口文件mainjs里面有一句代码叫做<code>render: h =&gt; h(App),</code>，下面来讲述它的作用以及相关的vue文件</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先在入口文件中必须写这个render函数作为模板template的替代 否则会报错<br>其原因是 入口文件中引入的并非完整的vue<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111125016.png" alt=""><br>而是一个精简版的 去掉模板解析器的vue<br>这么做是为了精简代码体积，到最后打包的时候减少代码量 虽然只有一点点</p><p>再讲讲这个render函数的本质：<br>它本来是个函数 可以写成<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params">createElement</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> createElement(<span class="string">&#x27;h1&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这样就相当于生成了一个h1标签内容是hello<br>由于它用不到this以及参数的名字可以改变 最后就可以简写成上面的形式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="params">h</span> =&gt;</span> h(<span class="string">&#x27;h1&#x27;</span>,<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure><br>最后说明一下 这个render函数只需要在mainjs里面写 其他需要用到模板的地方可以在vue文件里面写 vue配置了单独的模板解析器 直接使用提供的template标签即可</p><p>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111125714.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="ref指令"><a href="#ref指令" class="headerlink" title="ref指令"></a>ref指令</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供ref指令来获取dom元素和组件，方便后续的组件通信</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>在使用的时候是,xxx是自己定义的名字<br><code>ref=&quot;xxx&quot;</code><br>获取ref的时候是 注意这里是dollar符和refs<br><code>this.$refs.xxx</code><br>如果不加后续的xxx 则显示全部ref标志的元素或组件</p><p>上代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1 ref=&quot;title&quot;&gt;这是app组件 现在要学习ref&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;showTitle&quot;&gt;点我切换标题&lt;/button&gt;</span><br><span class="line">        &lt;JOJO ref=&quot;jojo&quot;&gt;&lt;/JOJO&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JOJO from &quot;./components/JOJO.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        JOJO</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        showTitle()&#123;</span><br><span class="line">            let title = this.$refs.title;</span><br><span class="line">            title.innerText = &#x27;开始拉&#x27;;</span><br><span class="line">            console.log(this.$refs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>ref在标记dom元素的时候 还可以标记组件<br>像上面标记组件之后输出的结果如下<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111150120.png" alt=""><br>由此可见 可以完全获取整个组件 而<code>document.getElementById</code>这个原生的方法 只能获取组件的根标签内容 像下面这样<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111150252.png" alt=""><br>一图流：<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111150327.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="配置项props"><a href="#配置项props" class="headerlink" title="配置项props"></a>配置项props</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>需求是当组件复用的时候 希望更改组件的内置属性而不是重新写个组件 就要使用到props配置项</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>第一种方法 用数组的方式 <code>prop:[&#39;xxx&#39;,&#39;xxxx&#39;]</code> 这是简单声明接收<br>jojovue文件 使用props配置项<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; name &#125;&#125;----&#123;&#123; age &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;JOJO&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg:&#x27;现在开始学习props配置项&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  props:[&#x27;name&#x27;,&#x27;age&#x27;]</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>appvue文件 在组件标签中传参<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;JOJO name=&quot;jotaro&quot; age=&quot;18&quot;&gt;&lt;/JOJO&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JOJO from &quot;./components/JOJO.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        JOJO</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>注意 上面的方法中 传进去的age是字符串的形式 并不是number的形式<br>如果不加双引号 那么再保存的时候他也会自动给你加上双引号<br>所以如果有需求更改age的值的时候会出现问题<br>那么解决这个问题的主要方式就是使用<code>v-bind:</code>即动态绑定 进行js代码的运算<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111152423.png" alt=""><br>并且最好用props的另外一种方法进行类型的限制<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">  name:String,</span><br><span class="line">  age:Number</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这样一来如果接收的东西不对 它就会报错<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111152649.png" alt=""><br>以及更高级别的写法 接收的同时对数据进行类型限制+默认值的指定+必要性的限制<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">  name:&#123;</span><br><span class="line">    typeof:String, //name的类型</span><br><span class="line">    required:true //name是否必须传 为true必传</span><br><span class="line">  &#125;,</span><br><span class="line">  age:&#123;</span><br><span class="line">    typeof:Number, </span><br><span class="line">    default:99 //如果不传 默认值99</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>一般来说 <code>required</code>和<code>default</code>只能用一个</p><p>最后注意一下 传进来的prop是不能修改的 最好不要修改<br>如果业务上面必须要修改可以参考以下的方法<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; name &#125;&#125;----&#123;&#123; myage + 1 &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;点我修改age&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;JOJO&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;现在开始学习props配置项&quot;,</span><br><span class="line">      myage: this.age //由于必须要修改age 所以这里加一个myage接收age 因为优先级prop大于data 所以会在这里接收到age</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">      typeof: String, //name的类型</span><br><span class="line">      required: true, //name是否必须传 为true必传</span><br><span class="line">    &#125;,</span><br><span class="line">    age: &#123;</span><br><span class="line">      typeof: Number,</span><br><span class="line">      default: 99, //如果不传</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    changeAge() &#123;</span><br><span class="line">      this.myage++;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111154250.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="mixins混入"><a href="#mixins混入" class="headerlink" title="mixins混入"></a>mixins混入</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供mixins混入的配置项 来使用公共的方法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>需求 jojo和dio在h1标签中表态 但荒木偷偷混入 点击h1之后就会变成made in heaven<br>huangmujs<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> huangmu = &#123;</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="function"><span class="title">showMsg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.msg = <span class="string">&#x27;made in heaven!!!!!!!!!&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>jojovue<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 @click=&quot;showMsg&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;huangmu&#125; from &#x27;../huangmu&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;JOJO&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;欧拉欧拉欧拉&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mixins:[huangmu]</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>diovue<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1 @click=&quot;showMsg&quot;&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;huangmu&#125; from &#x27;../huangmu&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;DIO&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;我不做人啦jojo&quot;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mixins:[huangmu]</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>appvue<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;JOJO&gt;&lt;/JOJO&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;DIO&gt;&lt;/DIO&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JOJO from &quot;./components/JOJO.vue&quot;;</span><br><span class="line">import DIO from &quot;./components/DIO.vue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        JOJO,</span><br><span class="line">        DIO</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>注意混入的js要暴露 引入的时候也要注意<br>最后是mixins方法是一个数组的配置，多个的时候要用逗号隔开</p><p>混合的原则是 如果你自己有的 就用自己的 如果没有 就用混合的<br>但如果是生命周期钩子 则都要的 来者不拒<br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111191145.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="vue插件"><a href="#vue插件" class="headerlink" title="vue插件"></a>vue插件</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供插件功能来增强页面的功能</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111192201.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="scoped样式"><a href="#scoped样式" class="headerlink" title="scoped样式"></a>scoped样式</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">less安装</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供scoped关键字 在style标签中使用 可以将该style标签中的样式独立使用于当前vue文件 但最好不要使用在appvue中</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>语法如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>图例<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111193910.png" alt=""><br>生成一个随机数data<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111194222.png" alt=""></p><p>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220111200334.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>由于webpack目前版本已经到5以上 vue求稳定使用它的4.46版本，所以在安装less-loader的时候，会报错，要使用6的版本才能安装<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i less-loader@<span class="number">6</span></span><br></pre></td></tr></table></figure><br>然后在样式中引入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;less&quot;&gt;</span><br><span class="line">  .jojo&#123;</span><br><span class="line">    color: pink;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>最后补充一个查插件版本的指令<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm view xxx versions</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="todolist案例"><a href="#todolist案例" class="headerlink" title="todolist案例"></a>todolist案例</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>学会编写todolist案例来帮助理解vue开发</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>把全部静态资源定义好</li><li><p>分析需要做哪个组件 这里选择了 mylist和myitem<br>mylist相关代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;ul class=&quot;todo-main&quot;&gt;</span><br><span class="line">&lt;MyItem v-for=&quot;todo in todoObj&quot; :key=&quot;todo.id&quot; :todo=&quot;todo&quot;/&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyItem from &#x27;./MyItem&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;MyList&#x27;,</span><br><span class="line">components:&#123;MyItem&#125;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">todoObj:[</span><br><span class="line">&#123;id:&#x27;001&#x27;,title:&quot;我不做人了jojo&quot;,done:true&#125;,</span><br><span class="line">&#123;id:&#x27;002&#x27;,title:&quot;扎瓦鲁多&quot;,done:false&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这里要注意<code>v-for</code>的使用 注意传进去的内容 以及<code>v-bind</code>绑定 最后传给item的是单个对象<br>myitem相关代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;label&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; :checked=&quot;todo.done&quot;/&gt;</span><br><span class="line">&lt;span&gt;&#123;&#123;todo.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">&lt;/label&gt;</span><br><span class="line">&lt;button class=&quot;btn btn-danger&quot; style=&quot;display:none&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;MyItem&#x27;,</span><br><span class="line">props:[&#x27;todo&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这里需要注意 item需要接收一个对象用于渲染</p></li><li><p>开始编写myheader<br>myheader中 需要使用的是 输入框 以及输入之后敲回车的执行<br>这里就会出现一个问题 因为不知道如何和子组件进行通信 而且也没有相关的list标签可以用于传递参数 所以这里要用到父子组件的通信<br>解决前者的问题 需要在app中定义一个带参函数addTodo 在header中prop该函数 当keyupenter之后 header就会往该函数中传入相应的对象<br>myheadervue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;todo-header&quot;&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; placeholder=&quot;请输入你的任务名称，按回车键确认&quot; @keyup.enter=&quot;addTodos&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;nanoid&#125; from &#x27;nanoid&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;MyHeader&#x27;,</span><br><span class="line">props:[&#x27;addTodo&#x27;],</span><br><span class="line">methods: &#123;</span><br><span class="line">addTodos(e)&#123;</span><br><span class="line">this.addTodo(&#123;id:nanoid(),title:e.target.value,done:false&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>部分appvue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyHeader :addTodo=&quot;addTodo&quot;/&gt;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">methods: &#123;</span><br><span class="line">addTodo(x)&#123;</span><br><span class="line">console.log(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>那么后者的问题 就需要将list中的todoObj放到app中 这样做的好处是 全局共享这个数据 这样一来 app也可以像上面给header传东西一样 给list传这个obj 最后交给item去渲染<br>mylist代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;ul class=&quot;todo-main&quot;&gt;</span><br><span class="line">&lt;MyItem v-for=&quot;todo in todoObj&quot; :key=&quot;todo.id&quot; :todo=&quot;todo&quot;/&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import MyItem from &#x27;./MyItem&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;MyList&#x27;,</span><br><span class="line">components:&#123;MyItem&#125;,</span><br><span class="line">props:[&#x27;todoObj&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>部分app代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;MyList :todoObj=&quot;todoObj&quot;/&gt;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">todoObj:[</span><br><span class="line">&#123;id:&#x27;001&#x27;,title:&quot;我不做人了jojo&quot;,done:true&#125;,</span><br><span class="line">&#123;id:&#x27;002&#x27;,title:&quot;扎瓦鲁多&quot;,done:false&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">addTodo(obj)&#123;</span><br><span class="line">this.todoObj.unshift(obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>开始进行勾选功能的实现<br>流程是 勾选myitem组件，改变它的checkbox，由于数据在app中，所以要告诉app它改变了checkbox 然后todoObj中的<code>todoObj.done</code>进行取反操作 又由于app和myitem属于爷孙关系 不能直接通信 需要借助mylist。<br>Q: 如何改变？<br>A: 使用click事件 点击之后执行一个函数<br>Q: 函数应该传什么告诉它改变了呢？<br>A: 应该传id 传这种唯一的标识符到app app才能根据id进行遍历，找到对应项的done进行取反<br>Q: 这个整体的过程大概是怎么样呢？<br>A: app组件将数据共享出来 并定义一个函数改变done值，然后把这个函数传递给mylist mylist用prop接收后 再传递给myitem myitem的checkbox改变的时候 在调用这个函数 就实现了数据的改变<br>关键在于app里的data数据是全局共享的<br>部分appvue代码 定义checkTodo 遍历todoObj 如果找到相同的id 则done取反<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    &lt;MyList :todoObj=&quot;todoObj&quot; :checkTodo=&quot;checkTodo&quot;/&gt;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">    checkTodo(id) &#123;</span><br><span class="line">      this.todoObj.forEach((todo) =&gt; &#123;</span><br><span class="line">        if (todo.id === id) todo.done = !todo.done;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="本地存储和会话存储"><a href="#本地存储和会话存储" class="headerlink" title="本地存储和会话存储"></a>本地存储和会话存储</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">本地存储</button></li><li class="tab"><button type="button" data-href="#test-3">会话存储</button></li><li class="tab"><button type="button" data-href="#test-4">todolist的本地存储</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>本篇将涉及两个js原生代码<code>localStorage</code>和<code>sessionStorage</code>的讲解，前者会存储在用户硬盘上 后者在网页关闭后消失</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>注意所有的数据将在控制台的application下面的<code>localStorage</code>里面查看<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220115141439.png" alt=""><br>代码如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>本地存储<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveData()&quot;</span>&gt;</span>点我保存一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;readData()&quot;</span>&gt;</span>点我读取一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteData()&quot;</span>&gt;</span>点我删除一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;clearData()&quot;</span>&gt;</span>点我清空数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>:<span class="string">&#x27;josefu&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>:<span class="number">70</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">saveData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;name1&#x27;</span>,<span class="string">&#x27;jostar&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;name2&#x27;</span>,<span class="string">&#x27;jotaro&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果是数字 自动转化为字符串</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;age&#x27;</span>,<span class="number">18</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果是对象 需要用JSON.stringify()方法将对象转化为json字符串</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.setItem(<span class="string">&#x27;person&#x27;</span>,<span class="built_in">JSON</span>.stringify(person));</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">readData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;name1&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;name2&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;age&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果想读取到的格式是对象 就要把json转为对象 </span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(JSON.parse(localStorage.getItem(&#x27;person&#x27;)));</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> result = <span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;person&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 但这里转化的age是由于是对象 所以还是保留原来的格式</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(result.age)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果不存在 返回null</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> result2 = <span class="built_in">JSON</span>.parse(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;person2&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(result2)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">deleteData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.removeItem(<span class="string">&#x27;name1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.removeItem(<span class="string">&#x27;name2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">clearData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">localStorage</span>.clear()</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>代码如下：只是替换了关键字<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>会话存储<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveData()&quot;</span>&gt;</span>点我保存一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;readData()&quot;</span>&gt;</span>点我读取一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteData()&quot;</span>&gt;</span>点我删除一个数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;clearData()&quot;</span>&gt;</span>点我清空数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> person = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">name</span>:<span class="string">&#x27;josefu&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">age</span>:<span class="number">70</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">saveData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        sessionStorage.setItem(<span class="string">&#x27;name1&#x27;</span>,<span class="string">&#x27;jostar&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        sessionStorage.setItem(<span class="string">&#x27;name2&#x27;</span>,<span class="string">&#x27;jotaro&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果是数字 自动转化为字符串</span></span></span><br><span class="line"><span class="javascript">        sessionStorage.setItem(<span class="string">&#x27;age&#x27;</span>,<span class="number">18</span>);</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果是对象 需要用JSON.stringify()方法将对象转化为json字符串</span></span></span><br><span class="line"><span class="javascript">        sessionStorage.setItem(<span class="string">&#x27;person&#x27;</span>,<span class="built_in">JSON</span>.stringify(person));</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">readData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(sessionStorage.getItem(<span class="string">&#x27;name1&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(sessionStorage.getItem(<span class="string">&#x27;name2&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(sessionStorage.getItem(<span class="string">&#x27;age&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果想读取到的格式是对象 就要把json转为对象 </span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// console.log(JSON.parse(sessionStorage.getItem(&#x27;person&#x27;)));</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> result = <span class="built_in">JSON</span>.parse(sessionStorage.getItem(<span class="string">&#x27;person&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 但这里转化的age是由于是对象 所以还是保留原来的格式</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(result.age)</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 如果不存在 返回null</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> result2 = <span class="built_in">JSON</span>.parse(sessionStorage.getItem(<span class="string">&#x27;person2&#x27;</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(result2)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">deleteData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        sessionStorage.removeItem(<span class="string">&#x27;name1&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        sessionStorage.removeItem(<span class="string">&#x27;name2&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">clearData</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        sessionStorage.clear()</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220115141620.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-4"><p>todolist自然也会用到本地存储 思路就是监视app里面todoObj的改变 并且在一开始初始化todoObj的时候读取本地数据<br>踩坑的有两点<br>一是初始化的时候如果本地没有值会报错（因为myfooter里面的初始化要计算数组长度，如果是null是没有长度的）<br>解决方法是或运算<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    todoObj: JSON.parse(localStorage.getItem(&quot;todoObj&quot;)) || [],</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>二是在勾选完之后刷新会发现选项并没有勾选成功 因为监视属性中只监视了第一层 没有发现数组内部的变化<br>解决方法 使用深度监视<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  // 这里勾选的时候会不显示改变 因为不是深度监视 无法知道数组内容的改变</span><br><span class="line">  todoObj: &#123;</span><br><span class="line">    deep: true,</span><br><span class="line">    handler(value) &#123;</span><br><span class="line">      localStorage.setItem(&quot;todoObj&quot;, JSON.stringify(value));</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="组件自定义事件-绑定"><a href="#组件自定义事件-绑定" class="headerlink" title="组件自定义事件_绑定"></a>组件自定义事件_绑定</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>组件之间的通信前面学过 需要父组件定义函数 发送到子组件 子组件props之后调用<br>但现在用两种旧的方法来进行组件的通信 它们分别是直接自定义事件和挂载后自定义事件</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先要了解作用机制<br>自定义事件能够通信是因为 父组件在子组件身上定义了自定义事件，在子组件中通过某种方式触发该自定义事件 实现函数的调用 以此来通信<br>流程是 父组件先定义自定义事件 然后写该事件的函数 之后子组件用自己的需要的方式触发该自定义事件 并 传参<br>app部分代码如下：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1 ref=&quot;title&quot;&gt;这是app组件 现在要学习自定义事件&lt;/h1&gt;</span><br><span class="line">        &lt;JOJO @customEvent=&quot;getJOJO&quot;&gt;&lt;/JOJO&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JOJO from &quot;./components/JOJO.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        JOJO</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        getJOJO(name)&#123;</span><br><span class="line">            console.log(&#x27;JOJO的名字是&#x27;,name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>jojovue<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; name &#125;&#125;----&#123;&#123; age &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;sendJOJO&quot;&gt;点我发送jojoname&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;JOJO&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &quot;jotaro&quot;,</span><br><span class="line">      age: 18,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendJOJO()&#123;</span><br><span class="line">      this.$emit(&#x27;customEvent&#x27;,this.name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>第二种写法 是通过挂载自定义事件来写<br>流程是用ref定义子组件 然后书写回调函数 之后在mounted里面通过refs拿到子组件 之后通过<code>$on</code>指定在该自定义事件触发的时候调用上面的回调函数<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1 ref=&quot;title&quot;&gt;这是app组件 现在要学习自定义事件&lt;/h1&gt;</span><br><span class="line">        &lt;!-- &lt;JOJO @customEvent=&quot;getJOJO&quot;&gt;&lt;/JOJO&gt; --&gt;</span><br><span class="line">        &lt;JOJO ref=&quot;jojo&quot;&gt;&lt;/JOJO&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JOJO from &quot;./components/JOJO.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        JOJO</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        getJOJO(name)&#123;</span><br><span class="line">            console.log(&#x27;JOJO的名字是&#x27;,name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        this.$refs.jojo.$on(&#x27;customEvent&#x27;,this.getJOJO);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>这种方法的好处是灵活性强，可以通过延时函数设定什么时候触发这个自定义事件等</p><p>然后是一些细节上或者优化的问题<br>假如想要自定义事件只触发一次 前面用<code>v-on</code>的方法就是直接在事件后面加once<br><code>@customEvent.once=&quot;getJOJO&quot;</code><br>后者ref的就是<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">    this.$refs.jojo.$once(&#x27;customEvent&#x27;,this.getJOJO);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>以及如果想要在自定义事件中传入多个参数 则最好使用对象发送或者es6的剩余参数rest接收<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    <span class="function"><span class="title">getJOJO</span>(<span class="params">name,...params</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;JOJO的名字是&#x27;</span>,name,params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="解绑事件"><a href="#解绑事件" class="headerlink" title="解绑事件"></a>解绑事件</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>上面绑定事件之后如果要想进行事件的解绑操作 需要用到<code>$off</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>见代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; name &#125;&#125;----&#123;&#123; age &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;sendJOJO&quot;&gt;点我发送jojoname&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;unbind&quot;&gt;点我解绑jojoname&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;JOJO&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      name: &quot;jotaro&quot;,</span><br><span class="line">      age: 18,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sendJOJO()&#123;</span><br><span class="line">      this.$emit(&#x27;customEvent&#x27;,this.name);</span><br><span class="line">      this.$emit(&#x27;customEvent2&#x27;);</span><br><span class="line">    &#125;,</span><br><span class="line">    unbind()&#123;</span><br><span class="line">      // 只解绑一个事件</span><br><span class="line">      // this.$off(&#x27;customEvent&#x27;);</span><br><span class="line">      // 解绑多个事件 数组的方式</span><br><span class="line">      // this.$off([&#x27;customEvent&#x27;,&#x27;customEvent2&#x27;]);</span><br><span class="line">      // 或者直接啥都不写</span><br><span class="line">      this.$off();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="自定义事件踩坑总结"><a href="#自定义事件踩坑总结" class="headerlink" title="自定义事件踩坑总结"></a>自定义事件踩坑总结</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>主要内容有 </p><ol><li>app组件获取自定义事件的结果渲染到页面</li><li>组件使用原生事件</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>综上所述 有两种方法自定义 一种是<code>v-on</code> 另外一种是<code>ref</code><br>前者代码 思路是在data中定义然后方法调用的时候赋值给定义的变量<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        jojoName:&#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">components:&#123;</span><br><span class="line">    JOJO</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">    getJOJO(name)&#123;</span><br><span class="line">        console.log(&#x27;JOJO的名字是&#x27;,name);</span><br><span class="line">        this.jojoName = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>后者<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1 ref=&quot;title&quot;&gt;这是app组件 jojo的名字是&#123;&#123;jojoName&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;!-- &lt;JOJO @customEvent=&quot;getJOJO&quot;&gt;&lt;/JOJO&gt; --&gt;</span><br><span class="line">        &lt;JOJO ref=&quot;jojo&quot;&gt;&lt;/JOJO&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import JOJO from &quot;./components/JOJO.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            jojoName:&#x27;&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        JOJO</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        getJOJO(name)&#123;</span><br><span class="line">            console.log(&#x27;JOJO的名字是&#x27;,name);</span><br><span class="line">            this.jojoName = name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        this.$refs.jojo.$on(&#x27;customEvent&#x27;,this.getJOJO);</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><br>但是后者如果直接将回调的具体内容写在on后面的话 会出现问题<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">    // 此处的function中的this指代的是触发该事件的对象 就是子组件 然鹅子组件里面没有jojoName所以不行</span><br><span class="line">  this.$refs.jojo.$on(&quot;customEvent&quot;, function (name) &#123;</span><br><span class="line">    console.log(&quot;JOJO的名字是&quot;, name);</span><br><span class="line">    this.jojoName = name;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>需要写成箭头函数的形式<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//箭头函数的this指向前面一个 即app的vm</span><br><span class="line">    this.$refs.jojo.$on(&quot;customEvent&quot;, (name)=&gt; &#123;</span><br><span class="line">      console.log(&quot;JOJO的名字是&quot;, name);</span><br><span class="line">      this.jojoName = name;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><br>组件正常来说 如果使用像<code>@click=&quot;show&quot;</code>这样的方法 那么他会判断该click是个自定义事件，要用自定义事件的方式去定义才行<br>那么组件如何使用原生事件呢？<br>只需要加个<code>.native</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;JOJO ref=&quot;jojo&quot; @click.native=&quot;show&quot;&gt;&lt;/JOJO&gt;</span><br></pre></td></tr></table></figure></p><p>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220115163213.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>全局事件总线用于处理子组件和子组件之间的通信。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>为了处理子组件之间的通信 要有一个中间人 当它被定义之后 如果有组件往里面挂载自定义事件用于得到信息，那么另外的组件就可以触发该事件发送信息 从此进行组件间的通信<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220115220953.png" alt=""><br>那么这个中间人有三点需求</p><ol><li>它可以被所有组件知道</li><li>它必须有<code>$on</code>，<code>$emit</code>和<code>$off</code></li></ol><p>首先第一点只要它在vue原型中出现就可以<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.x = &#123;a:1,b:2&#125;;</span><br><span class="line">//这样子组件直接打印是有数据的</span><br></pre></td></tr></table></figure><br>但是要满足第二点的时候 会发现它的对象不合法 因为对象上面并没有<code>$on</code>，<code>$emit</code>和<code>$off</code>这几个方法<br>解决这个问题 也很简单 要知道在vm或者vc上面才有这三个方法的存在 所以出发点就是这两个对象<br>对于vm来说 因为要创建vm实例对象就要接收 那么接收之后再赋值给原型上的x已经晚了 因为这个时候其他组件已经渲染完了<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//这是错误做法</span><br><span class="line">const vm = new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    render:h=&gt;h(App)</span><br><span class="line">&#125;)</span><br><span class="line">Vue.prototype.x = vm;</span><br></pre></td></tr></table></figure><br>所以只能想到用vc 要用vc的话 之前学到要使用<code>const Demo = Vue.extend({});</code> 但是不能直接传给x 因为没有新建 之前的做法是直接使用这个标签<code>&lt;Demo/&gt;</code> 所以这里只能自己新建<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Demo = Vue.extend(&#123;&#125;);</span><br><span class="line">const d = new Demo();</span><br><span class="line">Vue.prototype.x = d;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    render:h=&gt;h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>这样做之后就满足要求了<br>其他组件的通信写法<br>jojovue 发送端<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  sendHello() &#123;</span><br><span class="line">    this.x.$emit(&quot;hello&quot;, this.msg);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>diovue接收端<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  this.x.$on(&#x27;hello&#x27;,(data)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;ko no DIO da!!!&#x27;,data);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>那么项目中肯定不是以这样的复杂的形式去定义x的 这里引出全局事件总线的写法<br>首先vm里面有个钩子叫做<code>beforeCreate()</code>这个是在模板解析之前做的操作 所以在这里面创建所谓的x是最好的 vue告诉我们这里的x应该叫做<code>$bus</code> 可以理解未公共汽车 都可以把东西往里面放<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    render:h=&gt;h(App),</span><br><span class="line">    beforeCreate()&#123;</span><br><span class="line">        // 安装全局事件总线</span><br><span class="line">        Vue.prototype.$bus = this </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>注意 最好在组件销毁之前解绑bus身上的相关事件 利用<code>beforeDestroy()</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeDestroy() &#123;</span><br><span class="line">  this.$bus.$off(&#x27;hello&#x27;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220116155551.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="消息订阅与发布"><a href="#消息订阅与发布" class="headerlink" title="消息订阅与发布"></a>消息订阅与发布</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>消息的订阅与发布是另外一种组件间通信的方法 一般引入<code>pubsub.js</code>来调用pubsub对象里面的方法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>安装pubsub<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i pubsub-js</span><br></pre></td></tr></table></figure></li><li>导入pubsub<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pubsub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span></span><br></pre></td></tr></table></figure></li><li>基本使用<br>消息的订阅 使用到的是subscribe 传入两个参数 一个是订阅的名字 一个是进来的数据<br>且注意因为每次订阅都会生成不同的id 所以最后取消订阅是要传入一个id的 这里用pubId来演示 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  this.pubId = pubsub.subscribe(&#x27;hello&#x27;,function(msgName,data)&#123;</span><br><span class="line">      console.log(&#x27;系内jojo&#x27;,msgName,data);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy() &#123;</span><br><span class="line">  pubsub.unsubscribe(this.pubId);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>消息的发布 使用到的是publish<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  sendHello() &#123;</span><br><span class="line">    pubsub.publish(&#x27;hello&#x27;,&#x27;欧拉欧拉欧拉欧拉！！！！！！！&#x27;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>直接在function里面输出this的话结果是undefined 这时候需要用到箭头函数来将this设置为vc<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mounted() &#123;</span><br><span class="line">  this.pubId = pubsub.subscribe(&quot;hello&quot;, (msgName, data) =&gt; &#123;</span><br><span class="line">    console.log(this);</span><br><span class="line">    console.log(&quot;系内jojo&quot;, msgName, data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>特别注意一点 如果订阅的功能是写在methods里面的 那么需要methods里面的方法的第一个参数用占位符代替 因为它第一个要传一个msgName<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220116193229.png" alt=""><br>总结一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220116192934.png" alt=""></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="todolist编辑"><a href="#todolist编辑" class="headerlink" title="todolist编辑"></a>todolist编辑</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>讲一下todolist编辑这个功能的实现 运用到了动态添加属性<code>$set</code>, 事件总线，事件对象<code>$event</code> 显示指令<code>v-show</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先样式写好 编辑框和点击编辑之后出现的文本框<br>对于编辑框 需要的是1点击之后 出现文本框 2 出现文本框后 编辑框消失<br>对于文本框需要的是 1点击编辑框之后自动获取焦点 离开自动失去焦点并修改数据<br>所以先给编辑框绑定一个事件 叫isEdit 传入todo并添加响应式的edit 如果todo里面的edit为真 那么就显示文本框<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">      &lt;span v-show=&quot;!todo.edit&quot;&gt;&#123;&#123; todo.title &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;input v-show=&quot;todo.edit&quot; type=&quot;text&quot; :value=&quot;todo.title&quot; @blur=&quot;isBlur(todo,$event)&quot;/&gt;</span><br><span class="line">          &lt;button v-show=&quot;!todo.edit&quot; class=&quot;btn btn-danger&quot; @click=&quot;isEdit(todo)&quot;&gt;编辑&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">    isEdit(todo) &#123;</span><br><span class="line">      if (todo.edit !== undefined) &#123;</span><br><span class="line">        todo.edit = true;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        this.$set(todo, &quot;edit&quot;, true);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><br>然后文本框也需要编写一个isBlur函数 用于改变edit状态 来影响编辑框和title<br>由于失去焦点后要完成改变 需要在app里面编写update函数接收当前的todoid和title值<br>值得一提的是<code>@blur=&quot;isBlur(todo,$event)&quot;</code>传入event找到<code>e.target.value</code><br>（这里还没有写自动获取焦点）<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    isBlur(todo,e)&#123;</span><br><span class="line">      todo.edit = false;</span><br><span class="line">      this.$bus.$emit(&quot;updateTodo&quot;, todo.id,e.target.value);</span><br><span class="line">    &#125;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">    updateTodo(id,title) &#123;</span><br><span class="line">      this.todoObj.forEach((todo) =&gt; &#123;</span><br><span class="line">        if (todo.id === id) todo.title = title;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><br>关于自动获取焦点 由于函数里面的内容线执行完毕再去渲染dom 所以直接写focus是没有作用的<br>解决的办法有使用定时器和<code>$nextTick</code> 后者的原理是等dom渲染完后执行回调<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  this.$refs.edit.focus();</span><br><span class="line">&#125;, 200);</span><br><span class="line">// this.$nextTick(function () &#123;</span><br><span class="line">//   this.$refs.edit.focus();</span><br><span class="line">// &#125;);</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="vue动画"><a href="#vue动画" class="headerlink" title="vue动画"></a>vue动画</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供了几个动画类名和指令用于调用动画</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>如果自己写的话 还需要判断什么时候来什么时候去<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;现在学习vue动画&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;showMsg&quot;&gt;点我显示/隐藏&lt;/button&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;h1 v-show=&quot;isShow&quot; class=&quot;msg&quot;&gt;我不做人啦&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isShow:false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        showMsg()&#123;</span><br><span class="line">            this.isShow = !this.isShow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    @keyframes enter &#123;</span><br><span class="line">        from&#123;</span><br><span class="line">            transform:translateX(100%)</span><br><span class="line">        &#125;</span><br><span class="line">        to&#123;</span><br><span class="line">            transform: translateX(0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    .come&#123;</span><br><span class="line">        animation: enter 1s linear;</span><br><span class="line">    &#125;</span><br><span class="line">    .go&#123;</span><br><span class="line">        animation: enter 1s reverse;</span><br><span class="line">    &#125;</span><br><span class="line">    .msg&#123;</span><br><span class="line">        background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>利用vue提供的transistion标签<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;现在学习vue动画&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;showMsg&quot;&gt;点我显示/隐藏&lt;/button&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;transition&gt;</span><br><span class="line">        &lt;h1 v-show=&quot;isShow&quot; class=&quot;msg&quot;&gt;我不做人啦&lt;/h1&gt;        </span><br><span class="line">        &lt;/transition&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isShow:false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        showMsg()&#123;</span><br><span class="line">            this.isShow = !this.isShow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    @keyframes enter &#123;</span><br><span class="line">        from&#123;</span><br><span class="line">            transform:translateX(100%)</span><br><span class="line">        &#125;</span><br><span class="line">        to&#123;</span><br><span class="line">            transform: translateX(0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /* 来的时候 */</span><br><span class="line">    .v-enter-active&#123;</span><br><span class="line">        animation: enter 1s linear;</span><br><span class="line">    &#125;</span><br><span class="line">    /* 去的时候 */</span><br><span class="line">    .v-leave-active&#123;</span><br><span class="line">        animation: enter 1s reverse;</span><br><span class="line">    &#125;</span><br><span class="line">    .msg&#123;</span><br><span class="line">        background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>如果有多个需要用到不同动画效果的时候 要给transistion标签一个name值 并且在下方样式中的v改成name值 并且如果想要一上来就执行动画 可以使用<code>appear</code>指令<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;现在学习vue动画&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;showMsg&quot;&gt;点我显示/隐藏&lt;/button&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">        &lt;transition name=&quot;dio&quot; appear&gt;</span><br><span class="line">        &lt;h1 v-show=&quot;isShow&quot; class=&quot;msg&quot;&gt;我不做人啦&lt;/h1&gt;        </span><br><span class="line">        &lt;/transition&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            isShow:true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        showMsg()&#123;</span><br><span class="line">            this.isShow = !this.isShow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    @keyframes enter &#123;</span><br><span class="line">        from&#123;</span><br><span class="line">            transform:translateX(100%)</span><br><span class="line">        &#125;</span><br><span class="line">        to&#123;</span><br><span class="line">            transform: translateX(0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /* 来的时候 */</span><br><span class="line">    .dio-enter-active&#123;</span><br><span class="line">        animation: enter 1s linear;</span><br><span class="line">    &#125;</span><br><span class="line">    /* 去的时候 */</span><br><span class="line">    .dio-leave-active&#123;</span><br><span class="line">        animation: enter 1s reverse;</span><br><span class="line">    &#125;</span><br><span class="line">    .msg&#123;</span><br><span class="line">        background-color: pink;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117101836.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117101907.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="配置代理-axios"><a href="#配置代理-axios" class="headerlink" title="配置代理(axios)"></a>配置代理(axios)</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>配置代理解决vue中发送请求的时候跨域的问题</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>安装axios<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i axios</span><br></pre></td></tr></table></figure><br>导入axios<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#x27;axios&#x27;</span><br></pre></td></tr></table></figure><br>实例代码<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;现在开始学习vue发送axios请求&lt;/h1&gt;</span><br><span class="line">        &lt;button @click=&quot;sendAxios&quot;&gt;点我发送一个请求&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import axios from &#x27;axios&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        sendAxios()&#123;</span><br><span class="line">            axios.get(&#x27;http://localhost:3000/timeout-server&#x27;).then(</span><br><span class="line">                response=&gt;&#123;</span><br><span class="line">                    console.log(&#x27;请求成功了&#x27;,response.data);</span><br><span class="line">                &#125;,</span><br><span class="line">                error=&gt;&#123;</span><br><span class="line">                    console.log(&#x27;请求失败了&#x27;,error.message)</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>注意跨域问题<br>之前在ajax学过 跨域就是违背了同源策略 同源策略规定协议 主机 端口号一致<br>如果要解决这个问题 可以在nodejs里配置 也可以直接使用代理服务器<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/9f479b0a038d8abb97e2f066ad255f6.png" alt=""><br>原理是前端网页访问代理服务器的时候 代理服务器的协议主机端口号是一致的 所以就可以请求 同时 代理服务器和保存结果的服务器直接又可以互相请求 就达成了效果<br>新建<code>vue.config.js</code>输入<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">pages</span>:&#123;</span><br><span class="line">        <span class="attr">index</span>:&#123;</span><br><span class="line">            <span class="attr">entry</span>:<span class="string">&#x27;src/main.js&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">devServer</span>:&#123;</span><br><span class="line">        <span class="attr">proxy</span>:<span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>注意 里面的proxy的地址就是代理服务器请求的有结果的服务器的地址<br>然后改变axios的请求地址如下:<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    sendAxios()&#123;</span><br><span class="line">        axios.get(&#x27;http://localhost:8080/timeout-server&#x27;).then(</span><br><span class="line">            response=&gt;&#123;</span><br><span class="line">                console.log(&#x27;请求成功了&#x27;,response.data);</span><br><span class="line">            &#125;,</span><br><span class="line">            error=&gt;&#123;</span><br><span class="line">                console.log(&#x27;请求失败了&#x27;,error.message)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>注意 这里就是往代理服务器8080发送了请求 让该代理服务器从端口号3000的timeoutserver拿结果过来<br>这里还涉及到一个问题 代理服务器并不是全部的请求都发给实际服务器 如果代理服务器发现public目录下有该资源 就直接返回该资源 不会往服务器请求数据<br>并且它的缺陷就是配置完只能转发给一个服务器 不能给多个<br>下面讲解另外一种方式 转发给多个服务器<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    devServer:&#123;</span><br><span class="line">        proxy:&#123;</span><br><span class="line">            &#x27;/jojo&#x27;:&#123;</span><br><span class="line">                target:&#x27;http://localhost:3000&#x27;,</span><br><span class="line">                changeOrigin:true,</span><br><span class="line">                pathRewrite:&#123;&#x27;^/jojo&#x27;:&#x27;&#x27;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">//请求端的vue</span><br><span class="line">    methods: &#123;</span><br><span class="line">        sendAxios()&#123;</span><br><span class="line">            axios.get(&#x27;http://localhost:8080/jojo/timeout-server&#x27;).then(</span><br><span class="line">                response=&gt;&#123;</span><br><span class="line">                    console.log(&#x27;请求成功了&#x27;,response.data);</span><br><span class="line">                &#125;,</span><br><span class="line">                error=&gt;&#123;</span><br><span class="line">                    console.log(&#x27;请求失败了&#x27;,error.message)</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><br>原理是当请求的地址中第一项是以jojo为名字的话 代理服务器就开始向目标服务器请求数据<br>前面的<code>&#39;/jojo&#39;</code>指的是代理的服务器请求路径 他会匹配所有以此为路径的地址<br>target 是目标服务器地址<br>changeOrigin为true的话 指的是请求目标服务器的时候 伪装自己的host为相同的host<br>pathRewrite的话 当代理服务器向目标服务器请求数据的时候 地址其实是<code>/jojo/timeout-server</code>但目标服务器中并没有这一项 所以要使用这个方法 以键值对的形式找到所有<code>&#39;/jojo&#39;</code>并改写成空<br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117143427.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117143454.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>slot插槽标签的功能主要是当组件需要传入单独的内容的时候，对该内容进行渲染。常用于组件复用。分为三类 默认插槽 具名插槽 作用域插槽</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>默认插槽 使用方法<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117193522.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117193625.png" alt=""><br>适用场景 只有一个需要独立渲染的内容的时候</p><p>具名插槽 适用场景 需要多个slot来渲染数据的时候<br>使用方法<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117193832.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117193848.png" alt=""><br>如果出现多个标签共享同样的slot的时候 如下<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117194043.png" alt=""><br>建议使用<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117194144.png" alt=""><br><code>v-slot</code>可以用#号代替<br>并且注意该指令只能使用在组件的标签上<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117194257.png" alt=""></p><p>作用域插槽<br>使用场景 当需要组件里面的相同数据进行不同的渲染的时候使用到该方法<br>比如同样的列表数据 想展示成有序列表 无序列表 两种方式<br>使用方法<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117195308.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117195502.png" alt=""><br>如果直接用插值语法输出scope的名字 会出现传递的数据<br>主要的概念是传给插槽的使用者<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117195756.png" alt=""><br>技巧<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117195919.png" alt=""><br>新的api是<code>slot-scope</code>功能和scope是一致的<br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117200048.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117200128.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117200144.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>全局事件总线<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117200729.png" alt=""><br>vuex<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117201111.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220117201156.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>新建一个store文件夹 下面放indexjs<br>写入如下 注意Store要大写</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import vuex from &#x27;vuex&#x27;</span><br><span class="line">Vue.use(vuex)</span><br><span class="line"></span><br><span class="line">// 准备actions 用于响应组件中的动作</span><br><span class="line">const actions = &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">// 准备mutations 用于操作数据 state</span><br><span class="line">const mutations = &#123;&#125;</span><br><span class="line">// 准备state 用于存储数据</span><br><span class="line">const state = &#123;&#125;</span><br><span class="line"></span><br><span class="line">// 创建并暴露store</span><br><span class="line">export default new vuex.Store(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在mainjs里面导入 注意store后面的index不能省略<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import App from &#x27;./App&#x27;</span><br><span class="line">import store from &#x27;./store/index&#x27;</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;,</span><br><span class="line">    render:h=&gt;h(App),</span><br><span class="line">    store,</span><br><span class="line">    beforeCreate()&#123;</span><br><span class="line">        // 安装全局事件总线</span><br><span class="line">        Vue.prototype.$bus = this </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>注意这里在index里面写入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import vuex from &#x27;vuex&#x27;</span><br><span class="line">Vue.use(vuex)</span><br></pre></td></tr></table></figure><br>是因为cli脚手架它有个代码执行顺序的问题<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220118114954.png" alt=""><br>所以不能在mainjs里面使用vuex再引入store </p><p>查看vuex的数据<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220118150438.png" alt=""><br>还有一个案例再下一栏</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>加减法计算器<br>jisuanqivue<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;现在开始学习vuex 案例是加减&lt;/h1&gt;</span><br><span class="line">    &lt;h1&gt;当前求和是:&#123;&#123; $store.state.sum &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;select v-model=&quot;n&quot;&gt;</span><br><span class="line">      &lt;option :value=&quot;1&quot;&gt;1&lt;/option&gt;</span><br><span class="line">      &lt;option :value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">      &lt;option :value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;button @click=&quot;increment&quot;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;decrement&quot;&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;incrementOdd&quot;&gt;当前求和为奇数再加&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;incrementWait&quot;&gt;等一等再加&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      n: 1,</span><br><span class="line">      sum: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment() &#123;</span><br><span class="line">      this.$store.commit(&quot;INCREMENT&quot;, this.n);</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement() &#123;</span><br><span class="line">      this.$store.commit(&quot;DECREMENT&quot;, this.n);    </span><br><span class="line">    &#125;,</span><br><span class="line">    incrementOdd() &#123;</span><br><span class="line">      this.$store.dispatch(&quot;incrementOdd&quot;, this.n);</span><br><span class="line">    &#125;,</span><br><span class="line">    incrementWait() &#123;</span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">        this.$store.dispatch(&quot;incrementWait&quot;, this.n);</span><br><span class="line">      &#125;, 500);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(this);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>indexjs<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line">Vue.use(vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备actions 用于响应组件中的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//context 上下文 value 传过来的值 </span></span><br><span class="line">    <span class="comment">// increment(context, value) &#123;</span></span><br><span class="line">    <span class="comment">//     context.commit(&#x27;INCREMENT&#x27;, value)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="comment">// decrement(context, value) &#123;</span></span><br><span class="line">    <span class="comment">//     context.commit(&#x27;DECREMENT&#x27;, value)</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="function"><span class="title">incrementOdd</span>(<span class="params">context, value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (context.state.sum % <span class="number">2</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">            context.commit(<span class="string">&#x27;INCREMENT&#x27;</span>, value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">incrementWait</span>(<span class="params">context, value</span>)</span> &#123;</span><br><span class="line">        context.commit(<span class="string">&#x27;INCREMENT&#x27;</span>, value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 准备mutations 用于操作数据 state</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="function"><span class="title">INCREMENT</span>(<span class="params">state, value</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;mutation里面的INCREMENT被调用了&#x27;</span>, state, value)</span><br><span class="line">        state.sum += value;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">DECREMENT</span>(<span class="params">state, value</span>)</span> &#123;</span><br><span class="line">        state.sum -= value;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 准备state 用于存储数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">sum</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>注意这里有比较细节的问题<br>整个流程是vc传递n值给action action做出判断之后传递给mutation加工 mutation加工之后将数据给到state state里面的值改变重新渲染vc<br>vc将n值传递给action这个part</p><ol><li>因为已经use了vux这个插件 且已经注册了store 所以vc中会出现<code>$store</code>并且里面的state中有想要的sum值 可以插值语法直接获取</li><li>vc如果先和action沟通 使用的是dispatch 并且第一个参数要和action里面的key对应</li><li>如果不需要action的业务逻辑判断 可以使用commit 直接发送给mutation进行加工 这里的加法和减法就是例子</li></ol><p>action判断部分</p><ol><li>action在这里接收两个参数 一个是context 上下文对象 这个上下文对象依然也包含state 所以可以拿到sum进行数据过滤 另外一个参数是value 就是传递来的值</li><li>action判断完之后需要传递两个参数 第一个和mutation里面的key相同 建议使用大写区分 第二个是value</li></ol><p>mutation部分</p><ol><li>加工数据 接收两个参数 一个是state 一个是value</li><li>没有发送 </li></ol><p>state部分</p><ol><li>初始化参数 </li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="getters配置项"><a href="#getters配置项" class="headerlink" title="getters配置项"></a>getters配置项</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>使用getters配置项可以想计算属性一样对state里面的数据进行操作</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先在store下面的indexjs里面定义getters<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="comment">// 类似计算属性 传入的是state</span></span><br><span class="line">    <span class="function"><span class="title">bigSum</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state.sum * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>然后追加该配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">    getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>最后在组件中使用 注意此时是getters里面的xx 不是state<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;当前求和放大十倍是&#123;&#123; $store.getters.bigSum &#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><br>总结一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220118193534.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="mapState和mapGetters"><a href="#mapState和mapGetters" class="headerlink" title="mapState和mapGetters"></a>mapState和mapGetters</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>主要是优化模板中插值语法<code>$store.state.xxx</code>的冗余写法 应用场景是需要用到vuex里面的数据并且不想写复杂的<code>$store.state.xxx</code>，用computed进行读取则可以用这种形式优化</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先需要import<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;mapState&#125; from &#x27;vuex&#x27;</span><br></pre></td></tr></table></figure><br>原理就是函数生成函数 这里mapState会把传进来的对象根据key生成函数 并返回从state里面找到的value值 巧妙的一点是用了拓展运算符<code>...</code>将全部对象展开<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220118194547.png" alt=""><br>在vue开发者工具中也可以知道这个它其实最后是隶属于computed的 但是vue把他独立出来显示<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220118195043.png" alt=""><br>简写方法 数组写法<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220118195326.png" alt=""><br>同理 mapGetters<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220118195453.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="mapMutations和mapActions"><a href="#mapMutations和mapActions" class="headerlink" title="mapMutations和mapActions"></a>mapMutations和mapActions</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>作用： 优化methods的写法 但需要导入和传参</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>首先导入<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;mapActions, mapMutations&#125; from &#x27;vuex&#x27;</span><br></pre></td></tr></table></figure><br>在模板中传参<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;increment(n)&quot;&gt;+&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;decrement(n)&quot;&gt;-&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;incrementOdd(n)&quot;&gt;当前求和为奇数再加&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;incrementWait(n)&quot;&gt;等一等再加&lt;/button&gt;</span><br></pre></td></tr></table></figure><br>在methods中编写 key是模板中的方法 value是给mutations或者actions传递的信息 注意要写成字符串<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  //使用这种写法要注意模板里面的函数要传参 值要写成字符串</span><br><span class="line">  ...mapMutations(&#123;</span><br><span class="line">    increment:&#x27;INCREMENT&#x27;,</span><br><span class="line">    decrement:&#x27;DECREMENT&#x27;</span><br><span class="line">  &#125;),</span><br><span class="line">  ...mapActions(&#123;</span><br><span class="line">    incrementOdd:&#x27;incrementOdd&#x27;,</span><br><span class="line">    incrementWait:&#x27;incrementWait&#x27;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>常见错误 不传参<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220119112907.png" alt=""><br>点击一下加之后是1 1之后点奇数加（奇数加没有传参） 就会默认将事件event传进去给actions<br>在actions中完成拼接 就是这个结果<br>也有数组写法 不过个人感觉不太适合</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="vux模块化-namespaced"><a href="#vux模块化-namespaced" class="headerlink" title="vux模块化+namespaced"></a>vux模块化+namespaced</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>利用vuex模块化可以更加方便的维护数据 并且利用namespaced属性 可以使得methods和computed添加方法更方便</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>模块化配置 将所有的actions mutations getters state全部配置在一个options里面<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">const countOptions = &#123;</span><br><span class="line">    namespaced:true,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        incrementOdd(context, value) &#123;</span><br><span class="line">            if (context.state.sum % 2 !== 0) &#123;</span><br><span class="line">                context.commit(&#x27;INCREMENT&#x27;, value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        incrementWait(context, value) &#123;</span><br><span class="line">            setTimeout(() =&gt; &#123;</span><br><span class="line">                context.commit(&#x27;INCREMENT&#x27;, value)</span><br><span class="line">            &#125;, 500);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        INCREMENT(state, value) &#123;</span><br><span class="line">            console.log(&#x27;mutation里面的INCREMENT被调用了&#x27;, state, value)</span><br><span class="line">            state.sum += value;</span><br><span class="line">        &#125;,</span><br><span class="line">        DECREMENT(state, value) &#123;</span><br><span class="line">            state.sum -= value;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">        bigSum(state) &#123;</span><br><span class="line">            return state.sum * 10</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    state: &#123;</span><br><span class="line">        sum: 0,</span><br><span class="line">        school: &#x27;进击的鬼灭学园&#x27;,</span><br><span class="line">        name: &#x27;炭之狼&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>创建并暴露store的适合要引入模块 有多少就引入多少<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 创建并暴露store</span><br><span class="line">export default new vuex.Store(&#123;</span><br><span class="line">    modules:&#123;</span><br><span class="line">        countOptions</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>添加namespace属性为true<br>然后重写一下mapstate 以及其他mapxxx方法<br>注意 如果不配置namespace的话 mapxxx方法是找不到对应的模块的<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  ...mapState(&quot;countOptions&quot;, [&quot;school&quot;, &quot;name&quot;, &quot;sum&quot;]),</span><br><span class="line">  ...mapGetters(&quot;countOptions&quot;, [&quot;bigSum&quot;])</span><br><span class="line">&#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">  ...mapMutations(&quot;countOptions&quot;, &#123;</span><br><span class="line">    increment: &quot;INCREMENT&quot;,</span><br><span class="line">    decrement: &quot;DECREMENT&quot;,</span><br><span class="line">  &#125;),</span><br><span class="line">  ...mapActions(&quot;countOptions&quot;, &#123;</span><br><span class="line">    incrementOdd: &quot;incrementOdd&quot;,</span><br><span class="line">    incrementWait: &quot;incrementWait&quot;,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><br>一图流:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220119121619.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="技巧类"><a href="#技巧类" class="headerlink" title="技巧类"></a>技巧类</h1><p>iconfont<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220201143732.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>替身面板生成器</title>
      <link href="/posts/47a379b80246/"/>
      <url>/posts/47a379b80246/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>本文主要介绍如何给自己的替身匹配相应的面板</p></div><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220104105601.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/joji.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220104110655.png" alt=""></p><h1 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h1><div class="note warning flat"><p>鉴于在线版网址已经挂掉的情况下，建议使用离线版本，本质也是个echarts图表</p></div><p>在线版地址:<a href="http://dogend.tripleying.com/article/?id=1">点击</a><br>离线版地址:<a href="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/JOJO替身面板生成 _ Dogend.html">点击之后右键另存为html</a><br>使用方法：</p><ol><li>选择右边输入数值之后生成数据</li><li>之后右击图片另存为，注意是替身面板，不是整个图片<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220104110255.png" alt=""></li><li>下载以下任意图片 用ps工具覆盖刚刚的面板数值上去<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/standCharts2.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/standCharts.png" alt=""></li></ol><div class="note info flat"><p>下面介绍的是来自于b站up主木南工坊的pr替身教学</p></div><p>可以直接参考原视频的<a href="https://www.bilibili.com/video/BV1YJ411R768/?spm_id_from=333.788.recommend_more_video.0">地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JOJO石之海信封替换</title>
      <link href="/posts/f49019ed9855/"/>
      <url>/posts/f49019ed9855/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>本文用自建的jojo信封替换原akilar博客的蓝色信封，原帖地址:<a href="https://akilar.top/posts/e2d3c450/">akilar的信封留言板</a></p></div><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/jojo.gif" alt=""></p><h1 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h1><ol><li>在<code>[Blogroot]</code>运行指令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-envelope --save</span><br></pre></td></tr></table></figure></li><li>在站点配置文件或者主题配置文件添加配置项（对，两者任一均可。但不要都写）<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># envelope_comment</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/58900a8/</span></span><br><span class="line"><span class="attr">envelope_comment:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#开关</span></span><br><span class="line">  <span class="attr">cover:</span> <span class="string">https://ae01.alicdn.com/kf/U5bb04af32be544c4b41206d9a42fcacfd.jpg</span> <span class="comment">#信笺封面图</span></span><br><span class="line">  <span class="attr">message:</span> <span class="comment">#信笺内容，支持多行</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">有什么想问的？</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">有什么想说的？</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">有什么想吐槽的？</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">哪怕是有什么想吃的，都可以告诉我哦~</span></span><br><span class="line">  <span class="attr">bottom:</span> <span class="string">自动书记人偶竭诚为您服务！</span> <span class="comment">#信笺结束语，只能单行</span></span><br><span class="line">  <span class="attr">height:</span> <span class="comment">#调整信笺划出高度，默认1050px</span></span><br><span class="line">  <span class="attr">path:</span> <span class="comment">#【可选】comments 的路径名称。默认为 comments，生成的页面为 comments/index.html</span></span><br><span class="line">  <span class="attr">front_matter:</span> <span class="comment">#【可选】comments页面的 front_matter 配置</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">留言板</span></span><br><span class="line">    <span class="attr">comments:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li>新建js，导入以下内容<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//messageboard为你的信封所在位置</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.location.pathname.match(<span class="string">&#x27;messageboard&#x27;</span>)) &#123;</span><br><span class="line"><span class="keyword">var</span> fancybox = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;fancybox&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> beforeimg = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;beforeimg&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> afterimg = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;afterimg&#x27;</span>);</span><br><span class="line">beforeimg.setAttribute(<span class="string">&quot;data-lazy-src&quot;</span>,<span class="string">&quot;https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/beforenew.png&quot;</span>);</span><br><span class="line">afterimg.setAttribute(<span class="string">&quot;data-lazy-src&quot;</span>,<span class="string">&quot;https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/afternew.png&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 魔改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给Blog安排一个图床</title>
      <link href="/posts/ceb26206ef16/"/>
      <url>/posts/ceb26206ef16/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>初次尝试使用Typora编写上传博客的时候，发现图片居然都加载不出来，原因是使用软件截屏的时候直接cv到了文章内容里面，地址还是本地的地址，以下提供了两种方案对图片进行在线化处理。</p></div><div class="note warning flat"><p>自2021年12月开始jsdeliver不提供中国内部的加速服务，可以自行斟酌换cdn加速，笔者学校网络暂时没有影响。</p></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">PicGo图床</button></li><li class="tab"><button type="button" data-href="#test-2">本地插件</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><ol><li>安装PicGO图床 </li><li>打开github 右上角选择你的仓库<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103120101.png" alt=""></li><li>新建一个仓库<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103120201.png" alt=""></li><li>仓库名称为picgo 公开该仓库<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103120232.png" alt=""></li><li>回到右上角settings<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103120401.png" alt=""></li><li>选择Developer settings<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103120603.png" alt=""></li><li>选择Personal acess tokens 并创建新的token之后复制下来(只有一次)<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103120649.png" alt=""></li><li>回到PicGo 在图床设置里选择github图床 设为默认图床后确定<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103121026.png" alt=""><br>提供一下cdn加速的地址，cv即可: <a href="https://cdn.jsdelivr.net/gh/">https://cdn.jsdelivr.net/gh/</a> </li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>安装插件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></li><li>在<code>_config.yml</code>配置文件中，修改为<code>post_asset_folder: true</code>， 然后新建一篇文章<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">hexo</span> <span class="string">new</span> <span class="string">post</span> <span class="string">ceshi</span></span><br></pre></td></tr></table></figure></li><li>此时就会出现一个ceshi的文件夹和ceshi的md文件</li><li>最后只要把图片放到对应文件夹之后在对应md文件中引入即可</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 魔改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Animation主页动画处理</title>
      <link href="/posts/0368fe1c5ab9/"/>
      <url>/posts/0368fe1c5ab9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip "><p>采用wowjs对主页进行动画效果处理，使得页面加载更加平滑流畅</p></div>     <details class="folding-tag" cyan><summary> 预览效果 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/index.gif" alt=""></p>              </div>            </details><h1 id="主要配置"><a href="#主要配置" class="headerlink" title="主要配置"></a>主要配置</h1><ol><li>引入<code>wow.min.js</code> 和 <code>animated.min.css</code><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css&quot;</span> <span class="string">media=&quot;defer&quot;</span> <span class="string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/gh/graingert/wow@1.3.0/dist/wow.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">data-pjax</span> <span class="string">src=&quot;/js/fadeIn.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li><li>新建<code>fadeIn.js</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给首页文章卡片套上动画</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;recent-post-item&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="comment">// 必填项 打上wow类名</span></span><br><span class="line">    arr[i].classList.add(<span class="string">&quot;wow&quot;</span>),</span><br><span class="line">    <span class="comment">// 必填项 打上动画类名</span></span><br><span class="line">    arr[i].classList.add(<span class="string">&quot;animate__zoomIn&quot;</span>),</span><br><span class="line">    <span class="comment">// 动画执行时间</span></span><br><span class="line">    arr[i].setAttribute(<span class="string">&quot;data-wow-duration&quot;</span>, <span class="string">&quot;1.5s&quot;</span>),</span><br><span class="line">    <span class="comment">// 动画延迟多久后执行</span></span><br><span class="line">    arr[i].setAttribute(<span class="string">&quot;data-wow-delay&quot;</span>, <span class="string">&quot;0&quot;</span>),</span><br><span class="line">    <span class="comment">// 动画执行次数</span></span><br><span class="line">    arr[i].setAttribute(<span class="string">&quot;data-wow-iteration&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//给侧边栏套动画</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;card-widget&quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr2.length;i++)&#123;</span><br><span class="line">    arr2[i].classList.add(<span class="string">&quot;wow&quot;</span>);</span><br><span class="line">    arr2[i].classList.add(<span class="string">&quot;animate__zoomIn&quot;</span>);</span><br><span class="line">    arr2[i].setAttribute(<span class="string">&quot;data-wow-duration&quot;</span>, <span class="string">&quot;1.5s&quot;</span>),</span><br><span class="line">    arr2[i].setAttribute(<span class="string">&quot;data-wow-delay&quot;</span>, <span class="string">&quot;0&quot;</span>),</span><br><span class="line">    arr2[i].setAttribute(<span class="string">&quot;data-wow-iteration&quot;</span>, <span class="string">&quot;1&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//初始化函数</span></span><br><span class="line">wow = <span class="keyword">new</span> WOW(&#123;</span><br><span class="line">  <span class="attr">boxClass</span>: <span class="string">&#x27;wow&#x27;</span>,</span><br><span class="line">  <span class="comment">// 当用户滚动时显示隐藏框的类名称</span></span><br><span class="line">  <span class="attr">animateClass</span>: <span class="string">&#x27;animated&#x27;</span>,</span><br><span class="line">  <span class="comment">// 触发 CSS 动画的类名称（动画库默认为&quot;animate.css&quot;库）</span></span><br><span class="line">  <span class="attr">offset</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="comment">// 定义浏览器视口底部与隐藏框顶部之间的距离。</span></span><br><span class="line">  <span class="comment">// 当用户滚动并到达此距离时，将显示隐藏的框。</span></span><br><span class="line">  <span class="attr">mobile</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 在移动设备上打开/关闭wow.js。</span></span><br><span class="line">  <span class="attr">live</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment">// 在页面上检查新的 wow.js元素。</span></span><br><span class="line">&#125;)</span><br><span class="line">wow.init();</span><br></pre></td></tr></table></figure></li></ol><h1 id="可能会遇到的问题"><a href="#可能会遇到的问题" class="headerlink" title="可能会遇到的问题"></a>可能会遇到的问题</h1><ol><li>初始化wow尽量不要改变 否则会出错</li><li>动画名称的类是双<code>_</code> 建议直接复制</li><li>使用了pjax的情况下可能出现图片残存一下再隐藏的情况 暂时无法解决 或者使用大背景遮住等待图片完全消失</li><li><code>wowjs</code>是基于<code>animatedcss</code>动画的 可以去官方文档查看动画种类</li></ol>]]></content>
      
      
      <categories>
          
          <category> 魔改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RGB头像魔改</title>
      <link href="/posts/08ebb908b528/"/>
      <url>/posts/08ebb908b528/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip "><p>本教程为rgb头像魔改，替换原先的头像，可以自定义颜色。</p></div><details class="folding-tag" cyan><summary> 预览效果 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/logosucai.gif" alt=""></p>              </div>            </details><h1 id="主要配置"><a href="#主要配置" class="headerlink" title="主要配置"></a>主要配置</h1><ol><li>引入rgbHead.css<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* rgb头像魔改 */</span></span><br><span class="line"><span class="selector-class">.avatar-img</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">overflow</span>: visible;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">55px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> black;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">135deg</span>, <span class="built_in">rgb</span>(<span class="number">1</span>, <span class="number">255</span>, <span class="number">234</span>), <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">251</span>, <span class="number">14</span>), <span class="built_in">rgb</span>(<span class="number">0</span>, <span class="number">238</span>, <span class="number">255</span>));</span><br><span class="line">    <span class="attribute">animation</span>: color <span class="number">3s</span> linear infinite;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.avatar-img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> <span class="number">0</span> <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> <span class="attribute">color</span> &#123;</span><br><span class="line">    <span class="selector-tag">to</span> &#123;</span><br><span class="line">        <span class="attribute">filter</span>: <span class="built_in">hue-rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 隐藏掉原先的头像 */</span></span><br><span class="line"><span class="selector-class">.avatar-img</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.centerBox</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 引入新的头像 url是你的头像位置 */</span></span><br><span class="line"><span class="selector-class">.newheadBox</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">../img/head/boji.jpg</span>);</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 防止和上面的菜单冲突 添加一下zindex */</span></span><br><span class="line"><span class="selector-id">#nav</span> <span class="selector-class">.site-page</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.child</span>):after &#123;</span><br><span class="line">    z-index: <span class="number">23</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*头像旋转*/</span></span><br><span class="line"><span class="keyword">@keyframes</span> turn &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">25%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">50%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">75%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">270deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.newheadBox</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: turn linear <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>引入addEle.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cardinfoBox = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;card-info&#x27;</span>)[<span class="number">0</span>].children[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(cardinfoBox);</span><br><span class="line"><span class="keyword">var</span> newheadBox = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">newheadBox.classList.add(<span class="string">&#x27;newheadBox&#x27;</span>);</span><br><span class="line">cardinfoBox.classList.add(<span class="string">&#x27;centerBox&#x27;</span>);</span><br><span class="line">cardinfoBox.insertBefore(newheadBox,cardinfoBox.childNodes[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 魔改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aplayer设置与优化</title>
      <link href="/posts/6327a1b7c765/"/>
      <url>/posts/6327a1b7c765/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip "><p>本教程分为两个版本，一个是插件版本，一个是修改源代码的版本。两个版本选择一个即可。</p></div><details class="folding-tag" cyan><summary> 预览效果 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/music.gif" alt=""></p>              </div>            </details><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">源代码版(个人使用)</button></li><li class="tab"><button type="button" data-href="#test-2">插件版</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><ol><li>引入aplayer.pug<br>打开<code>themes\hexo-theme-butterfly\layout\includes\head.pug</code>里面添加<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include ./third-party/aplayer.pug</span><br></pre></td></tr></table></figure></li><li>创建aplayer.pug<br>在<code>themes\hexo-theme-butterfly\layout\includes\third-party下创建aplayer.pug</code> 内容如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if theme.aplayer &amp;&amp; theme.aplayer.enable</span><br><span class="line">.aplayer(data-id=theme.aplayer.id data-server=theme.aplayer.server data-type=theme.aplayer.type data-fixed=theme.aplayer.fixed data-mini=theme.aplayer.mini data-listFolded=theme.aplayer.listFolded data-order=theme.aplayer.order data-preload=theme.aplayer.preload)</span><br><span class="line">each item in theme.aplayer.css</span><br><span class="line">link(rel=&#x27;stylesheet&#x27;, href=item)</span><br><span class="line">each item in theme.aplayer.js</span><br><span class="line">script(src=item)</span><br></pre></td></tr></table></figure></li><li>打开主题配置文件<code>themes\hexo-theme-butterfly\_config.yml</code>在最后加入</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">aplayer:</span><br><span class="line">  enable: true</span><br><span class="line">  js:</span><br><span class="line">    - https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.js</span><br><span class="line">    - https://cdn.jsdelivr.net/npm/meting@1.2.0/dist/Meting.min.js</span><br><span class="line">  css:</span><br><span class="line">    - https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.css</span><br><span class="line">  id: 2841149029</span><br><span class="line">  server: netease </span><br><span class="line">  type: playlist</span><br><span class="line">  fixed: &#x27;true&#x27;</span><br><span class="line">  order: random</span><br><span class="line">  preload: none</span><br><span class="line">  listFolded: &#x27;false&#x27;</span><br></pre></td></tr></table></figure><p>其中参数见下图</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211217200814.png"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><div class="note primary flat"><p>转自<a href="https://akilar.top/posts/3afa069a/">akilar的博客</a></p></div><ol><li><p>在博客根目录 <code>[Blogroot]</code> 下打开终端，运行以下指令安装 <a href="https://www.npmjs.com/package/hexo-tag-aplayer">hexo-tag-aplayer</a> 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexp-tag-aplayer --save</span><br></pre></td></tr></table></figure></li><li><p>在站点配置文件 <code>[Blogroot]\_config.yml</code> 中新增配置项，建议直接加在最底下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># APlayer</span></span><br><span class="line"><span class="comment"># https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md</span></span><br><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>修改主题配置文件 <code>[Blogroot]\_config.butterfly.yml</code> 中关于 Aplayer 的配置内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li><li><p>在主题配置文件 <code>[Blogroot]\_config.butterfly.yml</code> 的 inject 配置项中添加 Aplayer 的容器。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> <span class="string">data-id=&quot;5183531430&quot;</span> <span class="string">data-server=&quot;netease&quot;</span> <span class="string">data-type=&quot;playlist&quot;</span> <span class="string">data-fixed=&quot;true&quot;</span> <span class="string">data-mini=&quot;true&quot;</span> <span class="string">data-listFolded=&quot;false&quot;</span> <span class="string">data-order=&quot;random&quot;</span> <span class="string">data-preload=&quot;none&quot;</span> <span class="string">data-autoplay=&quot;false&quot;</span> <span class="string">muted&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在博客根目录 <code>[Blogroot]</code> 下打开终端，运行以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure></li><li><p>关于更换歌单的问题，大部分同学都因为只更改了 <code>data-id</code> 的值，所以出现歌单加载不出的情况，此处需要注意，<code>data-id</code>、<code>data-server</code>、<code>data-type</code> 分别对应了<code>歌单的</code>id<code>，歌单的服务商、歌单的类型,所以需要确认这三项是一一对应的。如图中所示，找到网易云歌单的url，</code><a href="https://music.163.com/#/playlist?id=4907060762`">https://music.163.com/#/playlist?id=4907060762`</a>, 此处的<code>palylist</code>对应的就是<code>data-type</code>的值，<code>id</code>就是<code>data-id</code>的值，而网易云的<code>data-server</code>为<code>netease</code>，这个可以通过Aplayer的插件文档查阅到。<strong>只有三个参数对应正确才能正常加载歌单。</strong></p></li><li><p>Aplayer的网易云歌单接口时不时的会挂掉，所以如果你确定你配置正确，但是歌单还是没有出现。不妨去看看其他人的站点是不是也没有Aplayer标签了来判断是Aplayer本身接口的问题还是自己配置出错的问题。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="收入侧边栏-修改配色和歌词"><a href="#收入侧边栏-修改配色和歌词" class="headerlink" title="收入侧边栏+修改配色和歌词"></a>收入侧边栏+修改配色和歌词</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">收入侧边栏</button></li><li class="tab"><button type="button" data-href="#test-2">配色和歌词</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.aplayer</span><span class="selector-class">.aplayer-fixed</span><span class="selector-class">.aplayer-narrow</span> <span class="selector-class">.aplayer-body</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">66px</span> <span class="meta">!important</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.aplayer-body</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0px</span> <span class="meta">!important</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.aplayer.aplayer-fixed .aplayer-lrc &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    position: fixed;</span><br><span class="line">    bottom: 10px;</span><br><span class="line">    left: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    margin: 0;</span><br><span class="line">    z-index: 98;</span><br><span class="line">    pointer-events: none;</span><br><span class="line">    text-shadow: -1px -1px 0 #fff;  </span><br><span class="line">&#125;</span><br><span class="line">.aplayer .aplayer-lrc p &#123;</span><br><span class="line">color: #0ff5ff !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="不间断播放"><a href="#不间断播放" class="headerlink" title="不间断播放"></a>不间断播放</h1><div class="tip "><p>刚开始以为设置了pjax之后就会切换页面连续播放，但后面发现还是有问题，随后找文章发现是aplayer每次在进入页面就会重载一次。</p></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">解决方法1</button></li><li class="tab"><button type="button" data-href="#test-2">解决方法2</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>引入1.2的metingjs里面的no-destroy方法<br>1.2版本metingjs下载地址：<a href="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/Meting.min.zip">点击下载</a><br>修改主题配置文件<code>themes\hexo-theme-butterfly\_config.yml</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">aplayer:</span><br><span class="line">  enable: true</span><br><span class="line">  js:</span><br><span class="line">    - https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.js</span><br><span class="line">    - ./lib/Meting.min.js</span><br><span class="line">  css:</span><br><span class="line">    - https://cdn.bootcss.com/aplayer/1.10.1/APlayer.min.css</span><br><span class="line">  id: 7123261369 //这个是你的歌单id</span><br><span class="line">  server: netease </span><br><span class="line">  type: playlist</span><br><span class="line">  fixed: &#x27;true&#x27;</span><br><span class="line">  order: list</span><br><span class="line">  preload: none</span><br><span class="line">  listFolded: &#x27;false&#x27;</span><br><span class="line">  autoplay: true</span><br></pre></td></tr></table></figure><br>新建addnodestory.js，内容如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aplayer = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;aplayer&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">aplayer.classList.add(<span class="string">&#x27;no-destroy&#x27;</span>);</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>使用插件版</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="关于导入歌单"><a href="#关于导入歌单" class="headerlink" title="关于导入歌单"></a>关于导入歌单</h1><p>网易云右键你想要导入的歌单并复制链接，用网页打开<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211217204804.png" alt="此处id就是你的歌单id"></p>]]></content>
      
      
      <categories>
          
          <category> 魔改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建+Github</title>
      <link href="/posts/7fffe8d5dfea/"/>
      <url>/posts/7fffe8d5dfea/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h1><div class="tip "><p>本博客使用Hexo框架搭建，Hexo是一款轻量级，高效的博客框架，可以使用markdown对文章进行编写，可以实现无后端评论系统，站内搜索等，以及支持一键部署到github或gitee等主流代码平台，让使用者更加专注于博客内容的更新，以下是<a href = 'https://hexo.io/zh-cn/'>hexo</a>的官网，内有使用文档以及其他教程，本篇视频资源参考自<a href='https://www.bilibili.com/video/BV1mU4y1j72n?from=search&seid=3952314687470919837&spm_id_from=333.337.0.0'>【2021最新版】保姆级Hexo+github搭建个人博客</a></p></div> <h2 id="基础工具git-nodejs"><a href="#基础工具git-nodejs" class="headerlink" title="基础工具git+nodejs"></a>基础工具git+nodejs</h2><ol><li><p><code>git</code>是一款强大的项目管理工具，可以用于自定义项目的管理，实现进度的上传以及拉去，安装<a href = 'https://git-scm.com/download'>git</a><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211215103045.png" alt="随后自行选择32位或者64位安装"/></div><span class="image-caption">随后自行选择32位或者64位安装</span></div></p></li><li><p>之后一路next，安装之后使用git -v验证是否安装成功</p></li><li><p><code>nodejs</code>，一款前端程序员必备的服务端语言，安装地址<a href='http://nodejs.cn/download/'>nodejs</a>，也是一路next安装，随后打开<code>cmd</code>输入<code>node -v</code>和<code>npm -v</code>验证是否安装成功</p></li></ol><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ol><li><p>新建一个项目文件夹，命名随意，用来放自己的博客内容，我的是<code>blog</code></p></li><li><p>进入该文件夹，右键<code>git bash</code>输入以下指令安装hexo（注意git的命令窗口不是使用<code>ctrl v</code>进行粘贴，建议右键<code>paste</code>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>验证安装 <code>hexo - v</code></p></li><li><p>输入以下指令生成静态网页并打开本地服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s -g</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211215104804.png" alt="点击复制上面的地址在浏览器打开"/></div><span class="image-caption">点击复制上面的地址在浏览器打开</span></div></li><li><p>如果以上步骤都成功，那么恭喜你已经构建好hexo了</p></li></ol><h2 id="注册github＋新建个人仓库-ssh"><a href="#注册github＋新建个人仓库-ssh" class="headerlink" title="注册github＋新建个人仓库+ssh"></a>注册github＋新建个人仓库+ssh</h2><div class="note info flat"><p>网上有很多关于github注册的内容，这里就不详细讲了</p></div><ol><li>新建个人仓库，命名为项目名字<code>.github.io</code>，勾选<code>readme</code>，</li></ol><p>注：必须这样命名，否则之后部署会识别不到</p><ol><li><p>右键<code>git bash</code>，输入下面指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure></li><li><p>检查</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure></li><li><p>创建ssh，一路回车就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure></li><li><p>再输入，将输出的内容复制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li><li><p>打开github 右上角头像点击找到里面的<code>setting</code>，点开后找到<code>SSH and GPG keys</code><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211215111747.png"/></div></div></p></li><li><p>新建一个ssh，把你刚刚复制的内容放进去</p></li><li><p>检查ssh，如果出现你的用户名就成功了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li></ol><h2 id="正式部署"><a href="#正式部署" class="headerlink" title="正式部署"></a>正式部署</h2><ol><li><p>复制你的仓库的ssh地址<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211215123758.png"/></div></div></p></li><li><p>打开博客根目录下面的<code>_config.yml</code>文件，拉到最底配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">   type: git</span><br><span class="line">   repository: 刚刚复制的内容 </span><br><span class="line">   branch: main</span><br></pre></td></tr></table></figure><p>这里注意一点 现在github的默认分支是main 不是master</p><ol><li><p>安装<code>deploy-git</code> 这个是一个hexo部署命令的插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>讲一下主要的三个指令 一般情况下只会用到<code>hexo g</code> 和 <code>hexo d</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean //清除前面生成的东西 一般用于排错 简写hexo cl </span><br><span class="line">hexo generate //生成你的网页 简写 hexo g</span><br><span class="line">hexo deploy //部署文章 简写hexo d</span><br></pre></td></tr></table></figure></li><li><p>第一次deploy可能要输入一次用户名和密码</p></li></ol></li></ol><h2 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a>设置个人域名</h2><div class="note info flat"><p>因为个人还没有这方面的需求，所以暂时没有购买域名，需要了解的可以自行百度</p></div><h2 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h2><ol><li><p>进入根目录，找到<code>[blog\source\_posts]</code>，输入以下指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n xxx</span><br></pre></td></tr></table></figure></li><li><p>就可以看到生成了一个xxx.md文件，点开该文件，里面一般有两个属性，一个是title一个是date，前者是你显示在页面的文章标题，后者是创建该文章的日期，下面介绍一下文章的其他属性</p></li></ol><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>layout</code></td><td>布局</td><td><a href="https://hexo.io/zh-cn/docs/configuration#文章"><code>config.default_layout</code></a></td></tr><tr><td><code>title</code></td><td>标题</td><td>文章的文件名</td></tr><tr><td><code>date</code></td><td>建立日期</td><td>文件建立日期</td></tr><tr><td><code>updated</code></td><td>更新日期</td><td>文件更新日期</td></tr><tr><td><code>comments</code></td><td>开启文章的评论功能</td><td>true</td></tr><tr><td><code>tags</code></td><td>标签（不适用于分页）</td><td></td></tr><tr><td><code>categories</code></td><td>分类（不适用于分页）</td><td></td></tr><tr><td><code>permalink</code></td><td>覆盖文章网址</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 魔改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔改 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cyberpunk配色魔改</title>
      <link href="/posts/5531b9d5d73a/"/>
      <url>/posts/5531b9d5d73a/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip "><p>刚开始的主页没有啥个人风格，个人比较喜欢dark模式，但不喜欢它的反人类透明度，就直接改源码去掉了日间模式和透明度，之后发现还是不够满意，刚好就参考到了之前在永庆坊拍的照片配色风格</p></div><details class="folding-tag" cyan><summary> 点击查看图片 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/e3c965193ce3716899dda3c59c3b89b.jpg" alt="永庆坊电影院"><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211219095500.png" alt="原来的风格？"><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211219102444.png" alt="改了配色"></p>              </div>            </details><h1 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h1><ol><li>新建css 自行命名 需要注意的是，如果你自己注释 最好不要使用双斜杠，如果报错，建议你移除没有的部分 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 所有背景（包括首页卡片、文章页、页面页等） */</span></span><br><span class="line"><span class="selector-id">#aside_content</span> <span class="selector-class">.card-widget</span>, <span class="selector-id">#recent-posts</span>&gt;<span class="selector-class">.recent-post-item</span>, <span class="selector-class">.layout_page</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:first</span>-child<span class="selector-pseudo">:not</span>(<span class="selector-class">.recent-posts</span>), <span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#page</span>, <span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#post</span>, <span class="selector-class">.read-mode</span> <span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#post</span>&#123;</span><br><span class="line">    <span class="comment">/* 以下代表白色透明度为0.3 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">7</span>) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#0ff5ff</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">10px</span> <span class="number">#0ff5ff</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#git_container</span>,<span class="selector-id">#archive</span>,<span class="selector-id">#page</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.7</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#0ff5ff</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">20px</span> <span class="number">#0ff5ff</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*收藏博客的边框*/</span></span><br><span class="line"><span class="selector-class">.card-info</span> <span class="selector-id">#card-info-btn</span> &#123;</span><br><span class="line">   <span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#0ff5ff</span> <span class="meta">!important</span>;</span><br><span class="line">   <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">20px</span> <span class="number">#0ff5ff</span>  <span class="meta">!important</span>;</span><br><span class="line">   <span class="attribute">background-color</span>:transparent <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button--animated</span>:before&#123;</span><br><span class="line">   background:<span class="number">#0ff5ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*所有的侧边栏边框*/</span></span><br><span class="line"><span class="selector-class">.card-widget</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.7</span>) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#ea03f8</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">20px</span> <span class="number">#ea03f8</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*主题下面的字体颜色*/</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span>&#123;</span><br><span class="line">--<span class="attribute">font</span>-<span class="attribute">color</span>:<span class="number">#fdeacc</span>;</span><br><span class="line">--text-highlight-<span class="attribute">color</span>:<span class="number">#fdeacc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*电子时钟的字体颜色*/</span></span><br><span class="line"><span class="selector-attr">[data-theme=dark]</span> <span class="selector-class">.clock-row</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#fdeacc</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*标题和副标题*/</span></span><br><span class="line"><span class="selector-id">#subtitle</span>,<span class="selector-id">#site-title</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#e364d7</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>注入css，找到你的主题配置文件，<code>ctrl+f</code>查找inject，在head下面插入css<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/neonlight.css&quot;&gt;</span></span><br></pre></td></tr></table></figure>如果以上步骤都正确的话，那么恭喜你成功完成了配色魔改</li></ol><hr><div class="tip cogs"><p>当然还没有结束，主题怎么少的了炫酷的鼠标特效，那么鼠标特效怎么拿呢？</p></div><h1 id="鼠标特效"><a href="#鼠标特效" class="headerlink" title="鼠标特效"></a>鼠标特效</h1><p>找到了个非常好的<a href="https://custom-cursor.com/en">网站</a>啊,里面你想要的都有<br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211219103840.png"/></div></div><br>那就选这个炫酷的<del>抖音特效</del><br><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211219104029.png"/></div></div><br>这个时候可能就不知道怎么操作了，但程序员还是有办法的</p><ol><li>打开f12，点击左上角选中元素，选择hoverme框框<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211219104403.png"/></div></div></li><li>点击hoverme外框 复制一份<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211219104529.png"/></div></div></li><li>点击hoverme内框 复制一份<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211219105400.png"/></div></div></li><li>新建css 将刚刚复制的两份 粘贴上去<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*这里放外框*/</span></span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"><span class="attribute">cursor</span>:<span class="built_in">url</span>(<span class="string">https://cdn.custom-cursor.com/db/7248/32/starter-3d-effect-cursor-cursor.png</span>) , default<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*这里放内框*/</span></span><br><span class="line"><span class="selector-tag">a</span>,<span class="selector-tag">img</span>,<span class="selector-tag">button</span>&#123;</span><br><span class="line"><span class="attribute">cursor</span>:<span class="built_in">url</span>(<span class="string">https://cdn.custom-cursor.com/db/7247/32/starter-3d-effect-cursor-pointer.png</span>) , pointer<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>注入css</li></ol>]]></content>
      
      
      <categories>
          
          <category> 魔改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly魔改合集</title>
      <link href="/posts/2d51252021cb/"/>
      <url>/posts/2d51252021cb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip "><p>本篇博客主要用于记录hexo butterfly主题魔改，涉及到部分css和js的添加和更改，基本没有对pug和styl进行修改，可以放心食用.<br>每天争取更新</p></div>     <details class="folding-tag" cyan false><summary> 开发日志 </summary>              <div class='content'>              <div class="timeline"><div class="timenode"><div class="meta"><p><p>2021-12-13</p></p></div><div class="body"><p>更新字体</p></div></div><div class="timenode"><div class="meta"><p><p>2021-12-14</p></p></div><div class="body"><p>更新本地搜索</p></div></div><div class="timenode"><div class="meta"><p><p>2021-12-15</p></p></div><div class="body"><ol><li>更新Hexo搭建</li><li>待更新网站音乐，snackbar，音乐css，pjax</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-12-16</p></p></div><div class="body"><p>更新网站aplayer，音乐css，pjax</p></div></div><div class="timenode"><div class="meta"><p><p>2021-12-18</p></p></div><div class="body"><p>更新插件版aplayer</p></div></div><div class="timenode"><div class="meta"><p><p>2021-12-19</p></p></div><div class="body"><p>重新修改了文章布局，发布了几篇教程</p></div></div><div class="timenode"><div class="meta"><p><p>2021-12-20</p></p></div><div class="body"><p>更新一个菜单栏魔改</p></div></div><div class="timenode"><div class="meta"><p><p>2022-1-2</p></p></div><div class="body"><ol><li>更新一个RGB头像魔改</li><li>更新了主页动画平滑处理</li><li>更新了git贡献日历</li><li>更新了电子时钟</li><li>更新了utools插件压缩功能</li><li>更新Typora</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2022-1-3</p></p></div><div class="body"><ol><li>更新一个picgo图床</li><li>更新jojo石之海信封</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2022-1-3</p></p></div><div class="body"><ol><li>更新替身生成器</li></ol></div></div></div>              </div>            </details><h1 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h1><div class="note primary flat"><p><a href="https://zlinni.github.io/posts/7fffe8d5dfea/">Hexo搭建+github</a></p></div><h1 id="Aplayer全局吸底-不间断播放-配色修改"><a href="#Aplayer全局吸底-不间断播放-配色修改" class="headerlink" title="Aplayer全局吸底+不间断播放+配色修改"></a>Aplayer全局吸底+不间断播放+配色修改</h1><div class="note primary flat"><p><a href="https://zlinni.github.io/posts/6327a1b7c765/">Aplayer的设置与优化</a></p></div><details class="folding-tag" cyan><summary> 预览效果 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/music.gif" alt=""></p>              </div>            </details><h1 id="配色魔改"><a href="#配色魔改" class="headerlink" title="配色魔改"></a>配色魔改</h1><div class="note primary flat"><p><a href="https://zlinni.github.io/posts/5531b9d5d73a/">Cyberpunk配色魔改</a></p></div><h1 id="RGB头像魔改"><a href="#RGB头像魔改" class="headerlink" title="RGB头像魔改"></a>RGB头像魔改</h1><div class="note primary flat"><p><a href="https://zlinni.github.io/posts/08ebb908b528/">RGB头像魔改</a></p></div><details class="folding-tag" cyan><summary> 预览效果 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/logosucai.gif" alt=""></p>              </div>            </details><h1 id="主页动画平滑处理"><a href="#主页动画平滑处理" class="headerlink" title="主页动画平滑处理"></a>主页动画平滑处理</h1><div class="note primary flat"><p><a href="https://zlinni.github.io/posts/0368fe1c5ab9/">主页动画平滑处理</a></p></div><details class="folding-tag" cyan><summary> 预览效果 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/index.gif" alt=""></p>              </div>            </details><h1 id="JOJO石之海信封替换"><a href="#JOJO石之海信封替换" class="headerlink" title="JOJO石之海信封替换"></a>JOJO石之海信封替换</h1><div class="note primary flat"><p><a href="https://zlinni.github.io/posts/f49019ed9855/">JOJO石之海信封替换</a></p></div><details class="folding-tag" cyan><summary> 预览效果 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/jojo.gif" alt=""></p>              </div>            </details><h1 id="picgo图床"><a href="#picgo图床" class="headerlink" title="picgo图床"></a>picgo图床</h1><div class="note primary flat"><p><a href="https://zlinni.github.io/posts/ceb26206ef16/">给Blog添加一个图床</a></p></div><h1 id="替身生成器"><a href="#替身生成器" class="headerlink" title="替身生成器"></a>替身生成器</h1><div class="note primary flat"><p><a href="https://zlinni.github.io/posts/47a379b80246/">替身生成器</a></p></div><h1 id="字体修改"><a href="#字体修改" class="headerlink" title="字体修改"></a>字体修改</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">配置参数</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><ol><li><p>从字体网上面测试字体，这里建议使用第一字体网<a href="http://www.diyiziti.com/">http://www.diyiziti.com/</a></p></li><li><p>再从另外一个字体网下载字体，一般是免费的，这里推荐方正字库官网<a href="https://www.foundertype.com/">https://www.foundertype.com/</a></p></li><li><p>在<span class='p cyan'>source</span>目录中新建fonts文件夹，这里使用<span class='p cyan'>【\themes\hexo-theme-butterfly\source】</span>，将字体文件放入</p></li><li><p>在<span class='p cyan'>css</span>目录新建<span class='p cyan'>custom.css</span>写入如下内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span>&#123;</span><br><span class="line">  <span class="attribute">font-family</span>:<span class="string">&#x27;fzfwqyt&#x27;</span>;  <span class="comment">/* 字体名自定义即可 */</span></span><br><span class="line">  <span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">&#x27;/fonts/fzfwqyt.TTF&#x27;</span>); <span class="comment">/* 字体文件路径 */</span></span><br><span class="line">  <span class="attribute">font-display</span> : swap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>注入css文件</li><li>在控制台调试你的字体，成功后将下面代码加入<code>css</code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line"> <span class="attribute">font-family</span>:<span class="string">&#x27;fzfwqyt&#x27;</span>,-apple-system, BlinkMacSystemFont, <span class="string">&#x27;Segoe UI&#x27;</span>, <span class="string">&#x27;Helvetica Neue&#x27;</span>, Lato, Roboto, <span class="string">&#x27;PingFang SC&#x27;</span>, <span class="string">&#x27;Microsoft YaHei&#x27;</span>, sans-serif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">配置参数</button></li><li class="tab active"><button type="button" data-href="#test-2">样式预览</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><p>在你的博客根目录git bash输入以下指令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><br>在主题文件的_config.yml中找到localsearch并修改</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Posts</span></span><br><span class="line">    <span class="attr">hits_empty:</span> <span class="string">&quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot;</span> <span class="comment"># 如果没有查到内容相关内容显示</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test-2"><p><strong> 成功后菜单栏最左侧会出现搜索icon </strong></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211214092101.png"/></div></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211214091732.png"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="菜单栏魔改"><a href="#菜单栏魔改" class="headerlink" title="菜单栏魔改"></a>菜单栏魔改</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">配置参数</button></li><li class="tab active"><button type="button" data-href="#test-2">样式预览</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><ol><li>修改主题配置文件，找到menu<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">闲言碎语||fas</span> <span class="attr">fa-heart:</span></span><br><span class="line">     <span class="string">日常吐槽:</span> <span class="string">/artitalk/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-comment-dots</span></span><br><span class="line">     <span class="string">留个说法:</span> <span class="string">/messageboard/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-comment-dots</span></span><br><span class="line">  <span class="string">分类||</span> <span class="attr">fa fa-folder-open:</span></span><br><span class="line">     <span class="string">前端基础:</span> <span class="string">/categories/前端基础/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-bookmark</span></span><br><span class="line">     <span class="string">前端进阶:</span> <span class="string">/categories/前端进阶/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-bookmark</span></span><br><span class="line">     <span class="string">程序员必修:</span> <span class="string">/categories/程序员必修/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-bookmark</span></span><br><span class="line">     <span class="string">面试:</span> <span class="string">/categories/面试/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-bookmark</span></span><br><span class="line">     <span class="string">魔改:</span> <span class="string">/categories/魔改/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-bookmark</span></span><br><span class="line">  <span class="string">镜像网站||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">     <span class="attr">gitee:</span> <span class="string">https://zlinni.gitee.io/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-link</span></span><br><span class="line">     <span class="attr">github:</span> <span class="string">https://zlinni.github.io/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于本站||</span> <span class="attr">fas fa-desktop:</span></span><br><span class="line">     <span class="string">和我无关:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-user-tag</span></span><br><span class="line">     <span class="string">友情链接:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-link</span></span><br></pre></td></tr></table></figure></li><li>注意多级目录的格式 而且必须要有对应的页面否则报错</li><li>你可以在<code>source/</code>里面新建页面 指令是<code>hexo new page xxx</code></li><li>icon也是可以更换的，这里提供<a href="https://fontawesome.com/v4.7/icons/">网站</a></li><li>彩色icon的话可能要引入具体的svg格式图片 暂时不做分析</li></ol><div class="note warning flat"><p>如果你设置了多级目录，可能会与魔改的头像冲突，注意修改zindex就可以解决问题</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test-2"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211220091127.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="github贡献日历"><a href="#github贡献日历" class="headerlink" title="github贡献日历"></a>github贡献日历</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">配置参数</button></li><li class="tab active"><button type="button" data-href="#test-2">样式预览</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><p>转自<a href="https://akilar.top/posts/1f9c68c9/">akilar的博客</a></p><ol><li>安装插件，在博客根目录 [Blogroot] 下打开终端，运行以下指令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-gitcalendar --save</span><br></pre></td></tr></table></figure></li><li>添加配置信息，以下为写法示例<br>在站点配置文件<code>_config.yml</code> 或者主题配置文件如<code>_config.butterfly.yml</code> 中添加<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-filter-gitcalendar</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/1f9c68c9/</span></span><br><span class="line"><span class="attr">gitcalendar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="comment"># butterfly挂载容器</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># volantis挂载容器</span></span><br><span class="line">  <span class="comment"># layout:</span></span><br><span class="line">  <span class="comment">#   type: class</span></span><br><span class="line">  <span class="comment">#   name: l_main</span></span><br><span class="line">  <span class="comment">#   index: 0</span></span><br><span class="line">  <span class="comment"># matery挂载容器</span></span><br><span class="line">  <span class="comment"># layout:</span></span><br><span class="line">  <span class="comment">#   type: id</span></span><br><span class="line">  <span class="comment">#   name: indexCard</span></span><br><span class="line">  <span class="comment">#   index: 0</span></span><br><span class="line">  <span class="comment"># mengd挂载容器</span></span><br><span class="line">  <span class="comment"># layout:</span></span><br><span class="line">  <span class="comment">#   type: class</span></span><br><span class="line">  <span class="comment">#   name: content</span></span><br><span class="line">  <span class="comment">#   index: 0</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">Akilarlxh</span> <span class="comment">#git用户名</span></span><br><span class="line">  <span class="attr">apiurl:</span> <span class="string">&#x27;https://gitcalendar.akilar.top&#x27;</span></span><br><span class="line">  <span class="attr">minheight:</span></span><br><span class="line">    <span class="attr">pc:</span> <span class="string">280px</span> <span class="comment">#桌面端最小高度</span></span><br><span class="line">    <span class="attr">mibile:</span> <span class="string">0px</span> <span class="comment">#移动端最小高度</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;[&#x27;#e4dfd7&#x27;, &#x27;#f9f4dc&#x27;, &#x27;#f7e8aa&#x27;, &#x27;#f7e8aa&#x27;, &#x27;#f8df72&#x27;, &#x27;#fcd217&#x27;, &#x27;#fcc515&#x27;, &#x27;#f28e16&#x27;, &#x27;#fb8b05&#x27;, &#x27;#d85916&#x27;, &#x27;#f43e06&#x27;]&quot;</span> <span class="comment">#橘黄色调</span></span><br><span class="line">  <span class="comment"># color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#fdcdec&#x27;, &#x27;#fc9bd9&#x27;, &#x27;#fa6ac5&#x27;, &#x27;#f838b2&#x27;, &#x27;#f5089f&#x27;, &#x27;#c4067e&#x27;, &#x27;#92055e&#x27;, &#x27;#540336&#x27;, &#x27;#48022f&#x27;, &#x27;#30021f&#x27;]&quot; #浅紫色调</span></span><br><span class="line">  <span class="comment"># color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#f0fff4&#x27;, &#x27;#dcffe4&#x27;, &#x27;#bef5cb&#x27;, &#x27;#85e89d&#x27;, &#x27;#34d058&#x27;, &#x27;#28a745&#x27;, &#x27;#22863a&#x27;, &#x27;#176f2c&#x27;, &#x27;#165c26&#x27;, &#x27;#144620&#x27;]&quot; #翠绿色调</span></span><br><span class="line">  <span class="comment"># color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#f1f8ff&#x27;, &#x27;#dbedff&#x27;, &#x27;#c8e1ff&#x27;, &#x27;#79b8ff&#x27;, &#x27;#2188ff&#x27;, &#x27;#0366d6&#x27;, &#x27;#005cc5&#x27;, &#x27;#044289&#x27;, &#x27;#032f62&#x27;, &#x27;#05264c&#x27;]&quot; #天青色调</span></span><br><span class="line">  <span class="attr">container:</span> <span class="string">.recent-post-item(style=&#x27;width:100%;height:auto;padding:10px;&#x27;)</span> <span class="comment">#父元素容器，需要使用pug语法</span></span><br><span class="line">  <span class="attr">gitcalendar_css:</span> <span class="string">https://unpkg.zhimg.com/hexo-filter-gitcalendar/lib/gitcalendar.css</span></span><br><span class="line">  <span class="attr">gitcalendar_js:</span> <span class="string">https://unpkg.zhimg.com/hexo-filter-gitcalendar/lib/gitcalendar.js</span></span><br></pre></td></tr></table></figure></li><li>参数释义<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220102220518.png" alt=""></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test-2"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220102220351.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="电子时钟"><a href="#电子时钟" class="headerlink" title="电子时钟"></a>电子时钟</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">配置参数</button></li><li class="tab active"><button type="button" data-href="#test-2">样式预览</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><p>转自<a href="https://akilar.top/posts/4e39cf4a/">akilar的博客</a></p><ol><li>安装插件,在博客根目录[Blogroot]下打开终端，运行以下指令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-clock --save</span><br></pre></td></tr></table></figure></li><li>添加配置信息，以下为写法示例<br>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># electric_clock</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/4e39cf4a/</span></span><br><span class="line"><span class="attr">electric_clock:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="comment"># - /posts/</span></span><br><span class="line">    <span class="comment"># - /about/</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">class</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sticky_layout</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">loading:</span> <span class="string">https://unpkg.zhimg.com/hexo-butterfly-clock/lib/loading.gif</span> <span class="comment">#加载动画自定义</span></span><br><span class="line">  <span class="attr">clock_css:</span> <span class="string">https://unpkg.zhimg.com/hexo-butterfly-clock/lib/clock.min.css</span></span><br><span class="line">  <span class="attr">clock_js:</span> <span class="string">https://unpkg.zhimg.com/hexo-butterfly-clock/lib/clock.min.js</span></span><br><span class="line">  <span class="attr">ip_api:</span> <span class="string">https://pv.sohu.com/cityjson?ie=utf-8</span></span><br></pre></td></tr></table></figure></li><li>参数示意<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220102221732.png" alt=""></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test-2"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220102221805.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="一键部署-上传脚本"><a href="#一键部署-上传脚本" class="headerlink" title="一键部署/上传脚本"></a>一键部署/上传脚本</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">配置参数</button></li><li class="tab active"><button type="button" data-href="#test-2">样式预览</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><p>两个批处理文件</p><ol><li>新建自动部署.txt<figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="function">C:</span></span><br><span class="line"><span class="function"><span class="title">cd</span> 你的<span class="title">blog</span>所在目录</span></span><br><span class="line"><span class="function"><span class="title">hexo</span> <span class="title">cl</span> &amp;&amp; <span class="title">hexo</span> <span class="title">g</span> &amp;&amp; <span class="title">hexo</span> <span class="title">s</span></span></span><br></pre></td></tr></table></figure></li><li>新建自动上传.txt<figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="function">C:</span></span><br><span class="line"><span class="function"><span class="title">cd</span> 你的<span class="title">blog</span>所在目录</span></span><br><span class="line"><span class="function"><span class="title">hexo</span> <span class="title">g</span> &amp;&amp; <span class="title">hexo</span> <span class="title">d</span></span></span><br></pre></td></tr></table></figure></li><li>修改两个txt的后缀名为bat</li><li>双击运行即可</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test-2"><p>暂无预览</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="utools压缩图片"><a href="#utools压缩图片" class="headerlink" title="utools压缩图片"></a>utools压缩图片</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">配置参数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>utools是一个功能非常强大的轻量级工具，下面使用到它的一键压缩功能</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>官网下载utools</li><li>在插件市场中搜索图片压缩第一个<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220102222913.png" alt=""></li><li>之后选择博客下面的图片文件夹，一键压缩<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220102223037.png" alt=""></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h1><div class="note warning flat"><p>Typora自2021年11月后开始收费，需不需要使用付费版本自行斟酌</p></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>Typora是一款轻量级的markdown编辑器，支持很多标签语法，本身相当于一个网页，非常的实用，本人也是用这款软件进行文章的撰写和学习的记录。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p><a href="https://blog.csdn.net/SIMBA1949/article/details/79001226">转自csdn</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="下面待更新"><a href="#下面待更新" class="headerlink" title="下面待更新"></a>下面待更新</h1><h1 id="闲言碎语部分"><a href="#闲言碎语部分" class="headerlink" title="闲言碎语部分"></a>闲言碎语部分</h1><h2 id="日常吐槽artitalk"><a href="#日常吐槽artitalk" class="headerlink" title="日常吐槽artitalk"></a>日常吐槽artitalk</h2><h1 id="镜像网站多线部署"><a href="#镜像网站多线部署" class="headerlink" title="镜像网站多线部署"></a>镜像网站多线部署</h1>]]></content>
      
      
      <categories>
          
          <category> 魔改 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6-11</title>
      <link href="/posts/66e2d24f7085/"/>
      <url>/posts/66e2d24f7085/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tip cogs"><p>本文主要用于记录es6-11的学习过程，参考视频<a href='https://www.bilibili.com/video/BV1uK411H7on?p=1'>【尚硅谷Web前端ES6教程，涵盖ES6-ES11】</a></p></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><ol><li>ECMA：<br>ECMA 欧洲计算机制造商协会</li><li>ECMAScript：<br>是ECMA国际通过ECMA-262标准化的脚本程序设计语言</li><li>ECMA-262：<br>它定制的一种标准</li><li>历史：<br>每年都会更新一个版本 截至写稿已经是第十二版 即es12</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="let"><a href="#let" class="headerlink" title="let"></a>let</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>和var类似 又有点不同</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ul><li><p>声明变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">521</span>,g = <span class="string">&#x27;dasda&#x27;</span>,h = [];</span><br><span class="line"><span class="comment">//可以一次声明多个</span></span><br></pre></td></tr></table></figure></li><li><p>变量不能重复声明，但var可以。作用 防止变量被污染  </p></li><li><p>块级作用域 es5 全局 函数 eval</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;casc&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="comment">//这里会出错，但var可以，因为let只能在这个块级作用域里面生效</span></span><br></pre></td></tr></table></figure></li><li><p>不存在变量提升   </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(song);</span><br><span class="line"><span class="keyword">var</span> song = <span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line"><span class="comment">//此时输出undefined 因为var声明的变量会提前赋一个undefined</span></span><br><span class="line"><span class="comment">//但let不行</span></span><br></pre></td></tr></table></figure></li><li><p>不影响作用域链</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ul><li><p>遍历绑定事件 假设数组长度为3</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;items.length;i++)&#123;</span><br><span class="line">items[i].style.background = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果使用var修改 因为var没有块级作用域 它会一直执行下去，轮到里面的时候，i已经变成了3 而数组没有三的内容。</p></li><li><p>而let由于有块级作用域，里面的内容独立存在，所以不会有全局影响</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>用于定义常量</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ul><li><p>一定要赋初始值</p></li><li><p>常量的值不能被修改</p></li><li><p>块级作用域</p></li><li><p>对于数组和元素的修改不算作对常量的修改 不会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> team = [<span class="string">&#x27;scasc&#x27;</span>,<span class="string">&#x27;casca&#x27;</span>];</span><br><span class="line">team.push(<span class="string">&#x27;ascasc&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>es6允许用户按照一定模式从数组和对象中提取值</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>两种模式</p><ul><li><p>数组的解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shuzu = [<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;cssca&#x27;</span>,<span class="string">&#x27;casc&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [a,b,c] = shuzu;</span><br></pre></td></tr></table></figure></li><li><p>对象的解构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const obj = &#123;</span><br><span class="line">name:&#x27;zzl&#x27;,</span><br><span class="line">age:&#x27;20&#x27;,</span><br><span class="line">function()&#123;</span><br><span class="line">console.log(&quot;scasca&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">let &#123;name,age,f&#125; = obj;</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>引入新的声明字符方式 反引号`</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ul><li><p>一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`dadadada`</span>;</span><br></pre></td></tr></table></figure></li><li><p>内容中可以直接出现换行符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;aaaa&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span></span><br></pre></td></tr></table></figure></li><li><p>变量拼接 ${}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="string">`<span class="subst">$&#123;a&#125;</span>被引用了`</span></span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="简化对象"><a href="#简化对象" class="headerlink" title="简化对象"></a>简化对象</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>es6允许在大括号里面直接写入变量和函数作为对象的属性和方法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ul><li><p>es6允许在大括号里面直接写入变量和函数作为对象的属性和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;zzl&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> change = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;asca&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line"><span class="comment">//以前写法</span></span><br><span class="line"><span class="comment">//name:name;</span></span><br><span class="line"><span class="comment">//change:change;</span></span><br><span class="line"><span class="comment">//improve:function()&#123;</span></span><br><span class="line"><span class="comment">//do sth.</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//现在写法</span></span><br><span class="line">name,</span><br><span class="line">change,</span><br><span class="line"><span class="function"><span class="title">improve</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">cosole.log(<span class="string">&#x27;new method&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>允许使用箭头来定义函数=&gt;</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ul><li><p>允许使用箭头来定义函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//before </span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//do sth.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//now</span></span><br><span class="line"><span class="keyword">let</span> fn ()=&gt;&#123;</span><br><span class="line"><span class="comment">//do sth.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>区别</p><ol><li><p>this指向的是静态资源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> getName1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> getName2 = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置window对象的name属性</span></span><br><span class="line"><span class="built_in">window</span>.name = <span class="string">&#x27;lalalla&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> schoolName = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;babababab&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接调用 此时输出一致</span></span><br><span class="line">getName1();</span><br><span class="line">getName2();</span><br><span class="line"></span><br><span class="line"><span class="comment">//call方法调用 此时 一输出babababab 二还是lalalal </span></span><br><span class="line">getName1.call(schoolName);</span><br><span class="line">getName2.call(schoolName);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>不能作为构造实例化对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Person = <span class="function">(<span class="params">name,age</span>) =&gt;</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>不能使用arguments变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fn = <span class="function">() =&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure></li><li><p>箭头函数的简写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当形参只有一个的时候可以省略小括号</span></span><br><span class="line"><span class="keyword">let</span> add = <span class="function"><span class="params">n</span> =&gt;</span>&#123;</span><br><span class="line"><span class="keyword">return</span> n + n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">9</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//省略花括号 当代码体只有一条语句的时候 此时return必须省略</span></span><br><span class="line"><span class="comment">//而且语句的执行结果就是函数的返回值</span></span><br><span class="line"><span class="keyword">let</span> pow = <span class="function"><span class="params">n</span> =&gt;</span> n * n;</span><br><span class="line"><span class="built_in">console</span>.log(pow(<span class="number">2</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ul><li><p>需求1 点击div 2s之后变成粉色</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">case1 wrong</span><br><span class="line">&lt;div id = <span class="string">&quot;ad&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="keyword">let</span> ad = doucument.getElementById(<span class="string">&#x27;ad&#x27;</span>);</span><br><span class="line">ad.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.style.background = <span class="string">&#x27;pink&#x27;</span>;<span class="comment">//此时由于定时器的this指向window 所以不会变色</span></span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">case2 success</span><br><span class="line">&lt;div id = <span class="string">&quot;ad&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="keyword">let</span> ad = doucument.getElementById(<span class="string">&#x27;ad&#x27;</span>);</span><br><span class="line">ad.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> that = <span class="built_in">this</span>;<span class="comment">//提前存储this</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.style.background = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">case3 success</span><br><span class="line">&lt;div id = <span class="string">&quot;ad&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="keyword">let</span> ad = doucument.getElementById(<span class="string">&#x27;ad&#x27;</span>);</span><br><span class="line">ad.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.style.background = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line"><span class="comment">//使用箭头函数 会找到外面一级的对象</span></span><br><span class="line">    &#125;,<span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>需求二 从数组中返回偶数元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">33</span>,<span class="number">4342</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> result = arr.filter(<span class="function"><span class="params">item</span> =&gt;</span> item%<span class="number">2</span> ===<span class="number">0</span> );</span><br></pre></td></tr></table></figure></li></ul><p>总结</p><ul><li><p>箭头函数适合与this无关的回调，定时器，数组的方式回调</p></li><li><p>不适合与this有关的回调，比如事件回调，对象的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">getName:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name);<span class="comment">//可以返回abc</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">getName:<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.name);<span class="comment">//不可以返回abc，因为此时this指向了window</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="参数默认值"><a href="#参数默认值" class="headerlink" title="参数默认值"></a>参数默认值</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>ES6允许给函数形参赋初始值</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ul><li><p>形参初始值具有默认值的参数 一般位置要靠后 （潜规则）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b,c=<span class="number">10</span></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>));<span class="comment">//此时如果不给c传值 那么c默认是10 </span></span><br><span class="line"></span><br><span class="line">结果：<span class="number">13</span></span><br></pre></td></tr></table></figure></li><li><p>与解构赋值结合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">connect(&#123;</span><br><span class="line"><span class="attr">host</span>:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line"><span class="attr">port</span>:<span class="number">3000</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params">&#123;host=<span class="string">&#x27;127.0.0.1&quot;,port&#125;)&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="params"><span class="function">console.log(host);</span></span></span></span><br><span class="line"><span class="string"><span class="params"><span class="function">console.log(port);</span></span></span></span><br><span class="line"><span class="string"><span class="params"><span class="function">&#125;</span></span></span></span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>ES6引入rest参数，用于获取函数的实参，用来代替arguments</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>获取实参的方式</p><ul><li><p>arguments 此时获取的是一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getShican</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">getShican(<span class="string">&#x27;leb&#x27;</span>,<span class="string">&#x27;zzl&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>rest 参数  三个点加args 此时获取的args是数组 意味着可以用数组的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getS</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;</span><br><span class="line">getS(<span class="string">&#x27;leb&#x27;</span>,<span class="string">&#x27;zzl&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>rest参数必须放到最后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getS</span>(<span class="params">a,b,...args</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(args);</span><br><span class="line">&#125;</span><br><span class="line">getS(<span class="string">&#x27;leb&#x27;</span>,<span class="string">&#x27;zzl&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">a=leb</span><br><span class="line">b=zzl</span><br><span class="line">args=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="spread拓展运算符"><a href="#spread拓展运算符" class="headerlink" title="spread拓展运算符"></a>spread拓展运算符</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>… 拓展运算符可以将数组转换为逗号分隔的参数序列</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>例子</p><ul><li><p>声明一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jojo = [<span class="string">&#x27;jotailang&#x27;</span>,<span class="string">&#x27;jolunuo&#x27;</span>,<span class="string">&#x27;jolin&#x27;</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getS</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">gets(...jojo);</span><br><span class="line"></span><br><span class="line">此时<span class="built_in">arguments</span>里面有三个参数：<span class="string">&#x27;jotailang&#x27;</span>,<span class="string">&#x27;jolunuo&#x27;</span>,<span class="string">&#x27;jolin&#x27;</span></span><br><span class="line">否则就是一个参数</span><br></pre></td></tr></table></figure></li></ul><p>和rest区别</p><ul><li>rest的声明放在函数声明的形参中，这个是放在函数调用的形参中</li></ul><p>拓展运算符的运用</p><ul><li><p>数组的合并</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jojo = [<span class="string">&#x27;jolin&#x27;</span>,<span class="string">&#x27;jostar&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> kingdomrank = [<span class="string">&#x27;boji&#x27;</span>,<span class="string">&#x27;kake&#x27;</span>];</span><br><span class="line"><span class="comment">//const theworld = jojo.contat(kingdomrank);</span></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="comment">//注意使用逗号分割</span></span><br><span class="line"><span class="keyword">const</span> theworld = [...jojo,...kingdomrank];</span><br></pre></td></tr></table></figure></li><li><p>数组的克隆</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jojo = [<span class="string">&#x27;saigouda&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> clonejojo = [...jojo];</span><br></pre></td></tr></table></figure></li><li><p>将伪数组转化为真正的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> divs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> divarr = [...divs];</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Symbol基本使用"><a href="#Symbol基本使用" class="headerlink" title="Symbol基本使用"></a>Symbol基本使用</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>ES6引入一种新的原始数据类型Symbol，表示独一无二的值，它是js语言中的第七种数据类型，是一种类似字符串的数据类型。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>特点</p><ul><li>它的值是唯一的，用来解决命名冲突的问题</li><li>不能和其他数据进行运算</li><li>它定义的对象属性不能使用for…in进行遍历，但是可以使用Reflect.ownkeys来获取对象的所有键名</li></ul><p>创建</p><ul><li><p>创建Symbol</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let s = Symbol();</span><br><span class="line"></span><br><span class="line">let s2 = Symbol(&#x27;jojo&#x27;);</span><br><span class="line">let s3 = Symbol(&#x27;jojo&#x27;);</span><br><span class="line">console.log(s2 === s3);</span><br><span class="line">//false</span><br><span class="line"></span><br><span class="line">//another way</span><br><span class="line">let s4 = Symbol.for(&#x27;jojo&#x27;);</span><br><span class="line">let s5 = Symbol.for(&#x27;jojo&#x27;);</span><br><span class="line">console.log(s4===s5);</span><br><span class="line">//true</span><br></pre></td></tr></table></figure></li><li><p>不能与其他数据进行运算</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ul><li><p>向对象中添加方法up down</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> game = &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> methods = &#123;</span><br><span class="line"><span class="attr">up</span>:<span class="built_in">Symbol</span>(),</span><br><span class="line"><span class="attr">down</span>:<span class="built_in">Symbol</span>()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">game[methods.up] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;i can up&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">game[methods.down] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;i can down&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当想往对象中添加方法的时候，一般要了解对象中的参数，而且存在风险，用这种方式声明的方法，没有风险，可以不用看对象的内容就可以添加</p></li><li><p>方法2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> youxi = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;狼人杀&#x27;</span>,</span><br><span class="line">[<span class="built_in">Symbol</span>(<span class="string">&#x27;say&#x27;</span>)]: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;i can speak&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(youxi)</span><br></pre></td></tr></table></figure></li><li><p>Symbol内置值 </p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="JS的七种数据类型"><a href="#JS的七种数据类型" class="headerlink" title="JS的七种数据类型"></a>JS的七种数据类型</h1><details class="folding-tag" cyan><summary> USONB u are so niubility </summary>              <div class='content'>              <ul><li>u undefined</li><li>s string symbol</li><li>o object</li><li>n null number</li><li>b boolean</li></ul>              </div>            </details><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>迭代器(Iterator)是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署Iterator接口，就可以完成遍历操作。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ul><li><p>es6创造了一种新的遍历命令for…of循环，Iterator接口主要供其消费</p></li><li><p>原生具备iterator接口的数据(可以用for..of遍历)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a <span class="built_in">Array</span></span><br><span class="line">b Arguments</span><br><span class="line">c <span class="built_in">Set</span></span><br><span class="line">d <span class="built_in">Map</span></span><br><span class="line">e <span class="built_in">String</span></span><br><span class="line">f TypedArray</span><br><span class="line">g NodeList</span><br></pre></td></tr></table></figure></li></ul><p>工作原理</p><ul><li><p>首先创建一个指针对象，指向当前数据结构的起始位置</p></li><li><p>第一次调用对象的next方法，指针自动指向数据结构的第一个成员</p></li><li><p>接着不断调用next方法，指针一直往后移动，直到指到最后一个成员</p></li><li><p>每调用next方法返回一个包含==value和done==属性的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">value:当前成员的值</span><br><span class="line"><span class="attr">done</span>:布尔值 表示遍历是否结束 若未结束 返回<span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul><p>注意</p><ul><li>需要自定义遍历数据的时候，要想到迭代器</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><ol><li>生成器是一个特殊的函数</li><li>生成器目的是解决异步编程中的回调问题</li><li>回调函数 node fs ajax mongodb</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ul><li><p>写法上特殊</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello generator&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>输出上特殊</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iterator = gen();</span><br><span class="line">iterator.next();</span><br></pre></td></tr></table></figure></li><li><p>yield分割符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;111&#x27;</span>);</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;分割1&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;222&#x27;</span>);</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;分割2&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;333&#x27;</span>);</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;分割3&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = gen();</span><br><span class="line">iterator.next();</span><br><span class="line">iterator.next();</span><br><span class="line">iterator.next();</span><br></pre></td></tr></table></figure></li><li><p>输出yield的值 遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> gen())&#123;</span><br><span class="line"><span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>迭代器方法</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iterator = gen();</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br></pre></td></tr></table></figure></li></ul><p>生成器函数传参</p><ul><li><p>整体传参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(args);</span><br><span class="line"><span class="keyword">yield</span> <span class="number">111</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = gen(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"></span><br><span class="line">logout:</span><br><span class="line">aaa</span><br><span class="line"><span class="attr">value</span>:<span class="number">111</span> done:<span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>方法传参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params">args</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(args);</span><br><span class="line"><span class="keyword">let</span> one = <span class="keyword">yield</span> <span class="number">111</span>;</span><br><span class="line"><span class="built_in">console</span>.log(one);</span><br><span class="line"><span class="keyword">yield</span> <span class="number">222</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = gen(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next());</span><br><span class="line"><span class="built_in">console</span>.log(iterator.next(<span class="string">&#x27;bbb&#x27;</span>));</span><br><span class="line"></span><br><span class="line">logout:</span><br><span class="line">aaa (args)</span><br><span class="line">value <span class="number">111</span> done <span class="literal">false</span></span><br><span class="line">bbb (one)</span><br><span class="line">value <span class="number">222</span> done <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">注意 此时的bbb是第一个<span class="keyword">yield</span>的整体结果</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>对于异步编程的作用案例</p><ul><li><p>假如需要1s 输出aaa 2s输出bbb 3s输出ccc</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">常规操作 <span class="built_in">setTimeout</span>嵌套</span><br><span class="line">现在利用生成器</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;aaa&#x27;</span>);</span><br><span class="line">iterator.next();</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">two</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;bbb&#x27;</span>);</span><br><span class="line">iterator.next();</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">three</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;ccc&#x27;</span>);</span><br><span class="line">iterator.next();</span><br><span class="line">&#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">yield</span> one();</span><br><span class="line"><span class="keyword">yield</span> two();</span><br><span class="line"><span class="keyword">yield</span> three();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = gen();</span><br><span class="line">iterator.next();</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>Promise是es6引入的异步编程的新解决方法，语法上他是一个构造函数，主要用来封装异步操作获取他失败或者成功的结果。（为了解决回调地狱的问题）</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>实例化Promise对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//使用异步操作</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&#x27;jojo&#x27;</span>;</span><br><span class="line">        <span class="comment">//调用resolve/reject来改变这个promise对象的状态 </span></span><br><span class="line">        resolve(data);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//调用promise对象的then方法</span></span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(reason)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>promise对象有三种状态</li></ul><ol><li>pending 进行中</li><li>fulfilled 已成功</li><li>rejected 已失败</li></ol><ul><li>then有两个形参，成功一般叫value 失败叫reason</li><li><p>只要执行了resolve 就会调用then函数里面的value方法，反之调用reason方法</p></li><li><p>调用then方法，then方法返回的结果是一个promise对象，对象有对象状态和对象值这两个参数，对象的状态由方法的的执行结果而定</p></li></ul><ol><li><p>如果回调函数中返回的结果是一个非promise类型的属性 则状态为成功，返回改属性值 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result =  p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;jojo&#x27;</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="attr">logout</span>:</span><br><span class="line">promise.status:<span class="string">&#x27;resolve&#x27;</span>;</span><br><span class="line">promise.value:<span class="string">&#x27;jojo&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><ul><li>此外如果不写return 那么返回的是undefined 也是非promise类型的属性 所以也会成功 并且返回 undefind</li></ul><ol><li><p>如果回调函数中返回的结果是一个promise类型的属性，则该属性的状态决定then方法的状态</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result =  p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">resolve(<span class="string">&#x27;jojo&#x27;</span>); </span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>抛出错误 那么失败值就是抛出的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result =  p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>链式调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p.then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;).then(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>promise-catch方法 作用原理和不写第一个value的then方法相同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于写错误情况</span></span><br><span class="line">p.catch(<span class="function">(<span class="params">reason</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.warn(reason);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ul><li><p>promise读取文件 注意err和data不要写反</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    fs.readFile(<span class="string">&#x27;./lalala.md&#x27;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) reject(err);</span><br><span class="line">        resolve(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value.toString());</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(reason);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>promise封装ajax 在promise之前，所有成功或者失败的操作都要在事件里面操作，不方便阅读，现在使用promise封装，函数成功和失败的操作都在p.then()里面完成 </p></li><li><p>promise读取多个文件 下面以三个文件为例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span> &#123;</span><br><span class="line">    fs.readFile(<span class="string">&#x27;./a.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        resolve(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">p.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.readFile(<span class="string">&#x27;./b.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve([value,data]);<span class="comment">//将结果转化为数组的形式发送到下一个，因为这个数组的结果就是当前then方法的值</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.readFile(<span class="string">&#x27;./c.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            value.push(data);<span class="comment">//因为上一个传入的是数组 所以现在要读取这个数据需要将其压入数组</span></span><br><span class="line">            resolve(value);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value.join(<span class="string">&#x27;\r\n&#x27;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h1>  <div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>ES6提供了新的数据结构set集合，类似于数组，但成员的值都是唯一的，集合实现了iterator接口，所以可以使用拓展运算符…和for..of进行遍历。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li><p>基本定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="built_in">console</span>.log(s, <span class="keyword">typeof</span> s);</span><br></pre></td></tr></table></figure></li><li><p>可以实现自动去重 但注意这里还不是数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s2 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;bbb&#x27;</span>,<span class="string">&#x27;aaa&#x27;</span>,<span class="string">&#x27;ccc&#x27;</span>]);</span><br><span class="line"> log out: aaa,bbb,ccc</span><br></pre></td></tr></table></figure></li><li><p>size 返回集合的元素个数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2.size;</span><br></pre></td></tr></table></figure></li><li><p>add 增加一共新元素 返回当前集合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2.add(<span class="string">&#x27;ddd&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>delete 删除当前元素 返回boolean值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2.delete(<span class="string">&#x27;aaa&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>has 检测集合中是否包含某个元素，返回boolean值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2.has(<span class="string">&#x27;bbb&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>clear 清空元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s2.clear();</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ol><li><p>数组去重 上面说到去重的办法，但是他还是集合的形式，要通过拓展运算符把他变成数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> result = [...new <span class="built_in">Set</span>(arr)];</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>交集 注意先去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="keyword">new</span> <span class="built_in">Set</span>(arr2);</span><br><span class="line"><span class="comment">//去重之后和arr2进行比对</span></span><br><span class="line"><span class="keyword">let</span> result = [...new <span class="built_in">Set</span>(arr)].filter(<span class="function"><span class="params">item</span>=&gt;</span> <span class="keyword">new</span> <span class="built_in">Set</span>(arr2).has(item));</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li><li><p>并集 注意数组拼接之前需要转化，以及最后去重之后要转化为数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = [...new <span class="built_in">Set</span>([...arr,...arr2])];</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>差集 就是交集的取反</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="keyword">new</span> <span class="built_in">Set</span>(arr2);</span><br><span class="line"><span class="comment">//去重之后和arr2进行比对</span></span><br><span class="line"><span class="keyword">let</span> result = [...new <span class="built_in">Set</span>(arr)].filter(<span class="function"><span class="params">item</span>=&gt;</span> !(<span class="keyword">new</span> <span class="built_in">Set</span>(arr2).has(item));</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>ES6提供了Map数据结构，它类似于对象，也是键值对的集合，但是键的范围不仅限于字符串，各种类型的值，包括对象 都可以作为键。Map也实现了iterator接口，可以使用拓展运算符…和for..of遍历</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>基本方法</p><ol><li>size 返回map的元素个数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">m.size();</span><br></pre></td></tr></table></figure></li><li><p>set 增加一个新的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m.set(<span class="string">&#x27;jojo&#x27;</span>,<span class="string">&#x27;saigouda&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>get 返回键名对象的键值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m.get(<span class="string">&#x27;jojo&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>has 检测其中是否含有某个元素，返回boolean值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(m.has(<span class="string">&#x27;jojo&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li>clear 清空map    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m.clear();</span><br></pre></td></tr></table></figure></li><li>遍历<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> m)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>ES6提供了更接近传统的写法，引入了class类这个概念，作为对象的模板。通过class关键字，可以定义类，基本上，es6的class可以看作是一个语法糖，它的绝大部分功能es5都可以做到，新的class写法只是让对象原型的写法更加清晰，更像面向对象编程的语法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>之前es5的方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Phone</span>(<span class="params">brand,price</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.brand = brand;</span><br><span class="line"><span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加方法</span></span><br><span class="line">Phone.prototype.call = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;i can call&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> huawei = <span class="keyword">new</span> Phone(<span class="string">&#x27;huawei&#x27;</span>,<span class="string">&#x27;2999&#x27;</span>);</span><br><span class="line">huawei.call();</span><br><span class="line"><span class="built_in">console</span>.log(huawei)</span><br></pre></td></tr></table></figure><br>现在的方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JOJO</span></span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name,stand</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.stand = stand;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法必须使用该语法 不能使用es5的call:function()&#123;&#125;</span></span><br><span class="line"><span class="function"><span class="title">call</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;oraoraoraoraora!!!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> jotaro = <span class="keyword">new</span> JOJO(<span class="string">&quot;jotaro&quot;</span>,<span class="string">&quot;starplj&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(jotaro);</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ol><li>类的静态成员<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> name = <span class="string">&#x27;lalala&#x27;</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="function"><span class="title">change</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;cascacs&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> nokia = <span class="keyword">new</span> Phone();</span><br><span class="line"><span class="built_in">console</span>.log(nokia.name);</span><br><span class="line"><span class="comment">//此时会输出undefine 因为name是类的静态属性，不是实例对象的属性</span></span><br><span class="line"><span class="built_in">console</span>.log(Phone.name);</span><br><span class="line"><span class="comment">//logout:lalala</span></span><br></pre></td></tr></table></figure></li><li>类的继承<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先写一个父类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Phone</span>(<span class="params">brand,price</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.brand = brand;</span><br><span class="line"><span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line">Phone.prototype.call = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我可以打电话&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SmartPhone</span>(<span class="params">brand,price,color,size</span>)</span>&#123;</span><br><span class="line">    Phone.call(<span class="built_in">this</span>,brand,price);</span><br><span class="line">    <span class="built_in">this</span>.color = color;</span><br><span class="line">    <span class="built_in">this</span>.size = size;</span><br><span class="line">&#125;</span><br><span class="line">SmartPhone.prototype = <span class="keyword">new</span> Phone;</span><br><span class="line">SmartPhone.prototype.constructor = SmartPhone;</span><br><span class="line"></span><br><span class="line">SmartPhone.prototype.photo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我可以拍照&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">SmartPhone.prototype.playGame = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;我可以玩游戏&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> chuizi = <span class="keyword">new</span> SmartPhone(<span class="string">&#x27;锤子&#x27;</span>,<span class="number">2499</span>,<span class="string">&#x27;黑色&#x27;</span>,<span class="string">&#x27;5.5inch&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(chuizi);</span><br></pre></td></tr></table></figure></li><li>类的继承2<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">brand,price</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.brand = brand;</span><br><span class="line"><span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">call</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;我可以打电话&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">brand,price,color,size</span>)</span>&#123;</span><br><span class="line"><span class="built_in">super</span>(brand,price);<span class="comment">//Phone.call(this,brand,price)</span></span><br><span class="line"><span class="built_in">this</span> color = color;</span><br><span class="line"><span class="built_in">this</span> size = size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">photo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;拍照&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">playGame</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;玩游戏&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> xiaomi  = <span class="keyword">new</span> SmartPhone(<span class="string">&#x27;小米&#x27;</span>,<span class="number">799</span>,<span class="string">&#x27;黑色&#x27;</span>,<span class="string">&#x27;4.22inch&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(xioami);</span><br><span class="line">xiaomi.call();</span><br><span class="line">xiaomi.photo();</span><br><span class="line">xiaomi.playGame();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>子类重写父类方法 重写方法 这个方法可以重写但不能调用父类的<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">brand,price</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.brand = brand;</span><br><span class="line"><span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">call</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;我可以打电话&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmartPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">brand,price,color,size</span>)</span>&#123;</span><br><span class="line"><span class="built_in">super</span>(brand,price);<span class="comment">//Phone.call(this,brand,price)</span></span><br><span class="line"><span class="built_in">this</span> color = color;</span><br><span class="line"><span class="built_in">this</span> size = size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">call</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> xiaomi  = <span class="keyword">new</span> SmartPhone(<span class="string">&#x27;小米&#x27;</span>,<span class="number">799</span>,<span class="string">&#x27;黑色&#x27;</span>,<span class="string">&#x27;4.22inch&#x27;</span>);</span><br><span class="line">xiaomi.call();</span><br></pre></td></tr></table></figure></li><li>get与set<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line">     <span class="keyword">get</span> <span class="title">price</span>()&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&#x27;价格属性被读取了&#x27;</span>);</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&#x27;i love u&#x27;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">set</span> <span class="title">price</span>(<span class="params">newVal</span>)&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">&#x27;价格属性被修改了&#x27;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Phone();</span><br><span class="line"><span class="comment">//console.log(s.price);</span></span><br><span class="line">s.price = <span class="string">&#x27;free&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="数值拓展"><a href="#数值拓展" class="headerlink" title="数值拓展"></a>数值拓展</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>ES6定义了几种数值拓展，对于数值检测很有帮助</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>Number.EPSILON 是js表示的最小精度，约等于2.2x10的-16次方<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">equal</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.abs(a-b)&lt;<span class="built_in">Number</span>.EPSILON;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(equal(<span class="number">0.1</span>+<span class="number">0.2</span>,<span class="number">0.3</span>));</span><br></pre></td></tr></table></figure></li><li>进制数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二进制</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">0b1010</span>;</span><br><span class="line"><span class="comment">// 八进制</span></span><br><span class="line"><span class="keyword">let</span> o = <span class="number">0o777</span>;</span><br><span class="line"><span class="comment">// 十进制</span></span><br><span class="line"><span class="keyword">let</span> d = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 十六进制</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">0xff</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br><span class="line"><span class="built_in">console</span>.log(d);</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure></li><li>Number.isFinite 检测一个数是否为有限数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isFinite(<span class="literal">Infinity</span>));</span><br><span class="line"><span class="comment">//返回false</span></span><br></pre></td></tr></table></figure></li><li>Number.isNaN 检测一个数值是否为NaN</li><li>Number.parseInt Number.parseFloat 字符串转整数</li><li>Number.isInteger() 判断整数</li><li>Number.trunc 将小数部分抹掉</li><li>Math.sign 判断是否为正数 负数 0 如果是正数为1 负数为-1 0为0</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="对象方法拓展"><a href="#对象方法拓展" class="headerlink" title="对象方法拓展"></a>对象方法拓展</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>Object.is 判断两个值是否完全相等 可以判断NaN这种特殊类型<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>,<span class="literal">NaN</span>));</span><br><span class="line"><span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>);</span><br><span class="line"><span class="comment">//false</span></span><br></pre></td></tr></table></figure></li><li>Object.assign 对象的合并 会覆盖原先对象有的属性 没有的属性不会覆盖</li><li>Object.setPrototypeOf Object.getPrototypeOf<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;广师大&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> cities = &#123;</span><br><span class="line">    <span class="attr">xiaoqu</span>:[<span class="string">&#x27;gz&#x27;</span>,<span class="string">&#x27;hy&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(school,cities);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(school));</span><br><span class="line"><span class="built_in">console</span>.log(school);</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>  <h1 id="ES6模块化"><a href="#ES6模块化" class="headerlink" title="ES6模块化"></a>ES6模块化</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>模块化是指将一个大的文件，拆分成许多小的文件，然后将小的文件组合起来<br>优点：</p><ol><li>防止命名冲突</li><li>代码复用</li><li>高维护性</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>模块功能主要由两个命令组成：export和import</p><ul><li>export用于规定模块的对外接口</li><li>import命令用于输入其他模块提供的功能<div class="note warning flat"><p>需要在vscode里面安装liveserver插件</p></div></li></ul><ol><li>export 分别暴露<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建一个new.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> jojo = <span class="string">&#x27;jojo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;balalalalnananan1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//再新建一个index.html</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script type=&quot;module&quot;&gt;</span><br><span class="line">        import * as m1 from &quot;./new.js&quot;;</span><br><span class="line">        console.log(m1);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>export 统一暴露</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jojo = <span class="string">&#x27;jojo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;balalalalnananan1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;jojo,change&#125;;</span><br></pre></td></tr></table></figure></li><li><p>export 默认暴露</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line"><span class="keyword">let</span> jojo = <span class="string">&#x27;jojo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;balalalalnananan1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解构赋值</p><ol><li>应对统一暴露 当已经有声明的对象的时候 可以采用取别名的方法<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;jojo,change&#125; <span class="keyword">from</span> <span class="string">&#x27;./newjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;jojo <span class="keyword">as</span> newjojo,change&#125; <span class="keyword">from</span> <span class="string">&#x27;./newnewjs&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>应对默认暴露 写法必须起别名<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> m3&#125; <span class="keyword">from</span> <span class="string">&#x27;./newjs&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><p>简便形式 只能应对默认暴露<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> m3 <span class="keyword">from</span> <span class="string">&#x27;./newjs&#x27;</span></span><br></pre></td></tr></table></figure></p><p>以上的方法如果在多个模块的时候很不方便 可以使用下面的方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新建一个app.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m1 <span class="keyword">from</span> <span class="string">&#x27;./m1.js&#x27;</span>;</span><br><span class="line"><span class="comment">//在html中引入</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;./app.js&#x27;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>一款代码兼容性转化软件/网站。可以将新特性的代码转化为兼容性的代码</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>需要安装三个工具</p><ol><li>babel-cli babel的一个命令行工具</li><li>babel-preset-env 预设包 可以将最新的es特性转化为es5的语法</li><li>browserify 一个打包工具 （比较简单）</li></ol><p>流程</p><ol><li>初始化<code>npm init --yes</code></li><li><code>npm i babel-cli babel-preset-env browserify -D</code></li><li>局部安装使用<code>npx</code> 全局安装使用<code>babel</code></li><li><code>npx babel js路径 -d 转移到新js路径 --presets=babel-preset-env</code></li><li>打包<code>npx browserify dist/js/app.js -o dist/bundle.js</code>(前者入口js，后者保存路径)</li><li>总结 先编译 再打包</li></ol><p>引入NPM包</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="ES7新特性"><a href="#ES7新特性" class="headerlink" title="ES7新特性"></a>ES7新特性</h1>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue核心</title>
      <link href="/posts/74c7a4e0dbbc/"/>
      <url>/posts/74c7a4e0dbbc/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tip cogs"><p>本文主要用于记录Vue2.0的核心功能，参考视频<a href='https://www.bilibili.com/video/BV1Zy4y1K7SH?p=1'>【尚硅谷Vue2.0+Vue3.0全套教程丨vuejs从入门到精通】</a></p></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>一套用户构建用户界面的渐进式JavaScript框架</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="渐进式"><a href="#渐进式" class="headerlink" title="渐进式"></a>渐进式</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue可以自上而下的逐层进行应用，一个简单的应用只需要一个核心库即可，复杂的应用需要引入各式各样的Vue插件，所谓渐进式就是它能从这样简单的应用变成复杂的应用</p><p>大哥</p><ul><li>🐂 <img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/3f0c7c610b78f81c421629d4c8e815c.png" alt="大哥"></li></ul><p>特点</p><ol><li><p>采用组件化模式，提高代码复用率，让代码更好维护  如：组件为xxx.vue 里面包含了html，css以及js 当需要使用到的时候直接引入。维护：改变不会影响别的组件</p></li><li><p>声明式编码，让编码人员无需直接操作DOM，提高开发效率<img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211206214621.png" alt=""></p></li><li><p>使用虚拟DOM＋优秀的Diff算法，尽量复用DOM节点<br>常规的js如果有新的数据它会继续使用，没有过滤，如果要维护数据量大的对象之类的，每次都会重新渲染到dom<br>而vue采用了虚拟dom，当数据发生改变的时候，使用diff算法，对上一次采用的dom进行数据对比，如果一样，则只渲染新的数据</p></li><li><p>学习vue之前要掌握的js基础知识<br>es6语法规范<br>es6模块化<br>包管理器 会一个 npm or cnpm<br>原型 原型链<br>数组常用方法<br>axios<br>promise</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><details class="folding-tag" cyan><summary> 安装步骤 </summary>              <div class='content'>              <ol><li>进入vue官网<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211217162154.png" alt="点击右上角学习中的教程"><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211217162335.png" alt="点击左侧安装，找到两个版本，选开发"><br>前者用于开发，有提示和警告，后者用于上线生产。</li><li>引入之后控制台输入Vue如果有下面的显示则成功<img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211217212011.png" alt=""></li><li><code>Vue-devtools</code>,下载地址:<a href="https://devtools.vuejs.org/guide/installation.html#chrome">https://devtools.vuejs.org/guide/installation.html#chrome</a></li></ol>              </div>            </details><h1 id="初识vue"><a href="#初识vue" class="headerlink" title="初识vue"></a>初识vue</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">食用前小知识</button></li><li class="tab"><button type="button" data-href="#test-3">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>demo1 用于介绍vue的容器使用以及数据绑定</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>去提示 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.productionTip = false;//阻止vue在启动时生产提示</span><br></pre></td></tr></table></figure></li><li>强制刷新 shift加刷新，一般刷新可能发现这个错误就略过了</li><li>找不到icon404 根路径加入icon</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 插值语法，用两组括号写上一个name --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hi,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;h2&gt;年龄是：18&lt;/h2&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        Vue.config.productionTip = <span class="literal">false</span>; <span class="comment">//阻止vue在启动时生产提示</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建vue实例 里面是个配置对象 key不可以改 值的数据类型不能改 但值可以改（axios</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>, <span class="comment">//el用于指定当前vue为哪个容器服务，值通常为css选择器字符串</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>:<span class="string">&#x27;jojo&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        <span class="comment">//另类写法 document.getElementById(&#x27;root&#x27;);</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 发现x不用接受实例，可以直接删除const x = new Vue(&#123;</span></span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>vue实例和容器只能一一对应，不能一对多和多对一</p><p>注意区分js表达式 和 js代码（语句）</p><ol><li>js表达式 都有个共同的特点：可以返回值 可以被接收<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> a</span><br><span class="line"><span class="number">2.</span> a+b</span><br><span class="line"><span class="number">3.</span> x === y ？<span class="number">1</span> : <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li>js语句<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">if</span>()&#123;&#125;</span><br><span class="line"><span class="number">2.</span> <span class="keyword">for</span>()&#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><p>使用vuedevtools</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211218160248.png"/></div></div><p>总结：</p><ol><li>想让vue工作，就必须创建一个vue实例，而且要传入一个配置对象</li><li>root容器里面的代码依然符合html规范，只不过混入了一些特殊的vue语法</li><li>root容器里的代码呗称为vue模板</li><li>Vue实例和容器是一一对应的</li><li>在真实开发中只会有一个vue实例，配合组件一起使用</li><li>其中括号括号要写js表达式，且xxx可以自动读取到data中的所有属性</li><li>一旦data的数据发生改变，那么页面中用到该数据的地方也会自动更新</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">常见问题</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>分插值语法和指令语法，为vue动态绑定数据提供帮助</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>插值语法：<br>常用于指定标签体的内容，且该内容必须要写js表达式，会从data中读到相应的属性更新</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;xxx&#125;&#125;</span><br></pre></td></tr></table></figure><p>指令语法：<br>常用于指定标签属性，可以简写成: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&#x27;xxxx&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&#x27;xxxx&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><ol><li>如果data中的两个属性重复，虽然不会报错，但它会以你最后写的属性内容作为插值或者指令的内容</li></ol><p>解决办法是：新命名一个属性 或者 新命名属性，让他以对象的形式存在，里面包含这个属性<br>eg</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;xxx&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">name:&#x27;jojo&#x27;,</span><br><span class="line">school:&#123;</span><br><span class="line">name,</span><br><span class="line">age</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">//使用 school.name</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">注意事项</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>单向数据绑定和双向数据绑定</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p><code>v-bind</code>单向数据绑定 注意它可以将里面绑定的内容进行js代码运算 参见后续使用props配置项的时候 传入的数据使用v-bind进行运算<img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211218164328.png" alt=""><br><code>v-model:value</code>双向数据绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">//简写</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211218164657.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p><code>v-bind</code>基本算全能把，但<code>v-model</code>只能用于绑定表单类型的数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:x</span>=<span class="string">&quot;name&quot;</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">//此时如果是vue实例给值 是可以显示出x的 但v-model就会报错</span><br></pre></td></tr></table></figure><p>表单类型数据（输入类 有value值）</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="el与data的两种写法-mount-data的两种写法"><a href="#el与data的两种写法-mount-data的两种写法" class="headerlink" title="el与data的两种写法 mount data的两种写法"></a>el与data的两种写法 mount data的两种写法</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供两种方式连接我们的容器，一种是mount<br>data也一样</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> v = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line"><span class="comment">//el:&#x27;#root&#x27;</span></span><br><span class="line"><span class="comment">//对象式</span></span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数式</span></span><br><span class="line"><span class="attr">data</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span>&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">v.$mount(<span class="string">&#x27;#root&#x27;</span>);</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>当需要组件复用的时候，data需要写成函数否则报错</li><li>data的函数不要写成箭头函数，否则this指向的对象就是window（es6学到）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211218203628.png" alt="MVVM模型图"><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211218204055.png" alt="代码详解"><br>总结：<br>MVVM模型</p><ol><li>M 模型Model data中的数据</li><li>V 视图View 模板代码</li><li>VM 视图模型ViewModel Vue实例</li><li>data中的所有属性 最后都会出现在vm身上</li><li>vm身上所有属性以及vue原型上的所有属性 在vue模板中都可以使用</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>数据代理，操作一个对象为另外一个对象修改属性值（读/写）</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>回顾<code>Object.defineproperty</code>方法 给对象添加属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&quot;jojo&quot;</span>,</span><br><span class="line">            <span class="attr">height</span>:<span class="number">198</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(person,<span class="string">&quot;age&quot;</span>,&#123;</span><br><span class="line">            <span class="attr">value</span>:<span class="number">18</span></span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">console</span>.log(person);</span><br></pre></td></tr></table></figure><br>注意 该方法添加的属性 是不可以遍历出来的 就是不可枚举<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该方法可以把对象的属性遍历成数组，由结果见 不会出现新增的age</span></span><br><span class="line">        <span class="comment">// console.log(Object.keys(person));</span></span><br><span class="line">        <span class="comment">//该方法可以遍历person里面属性的值 也是不会出现age的值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> person)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(person[key]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// console.log(person);</span></span><br></pre></td></tr></table></figure><br>而且该方法，还对属性有很多限制<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(person,<span class="string">&quot;age&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="number">18</span>,</span><br><span class="line">    <span class="attr">enumerable</span>:<span class="literal">true</span>, <span class="comment">//设置成可以枚举 默认是false</span></span><br><span class="line">    <span class="attr">writable</span>:<span class="literal">true</span>, <span class="comment">//设置成可以修改，默认是false</span></span><br><span class="line">    <span class="attr">configurable</span>:<span class="literal">true</span> <span class="comment">//设置成可以删除，默认是false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>现在有个需求 修改对象中新增的属性，就需要用到该方法的get<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(person,<span class="string">&quot;age&quot;</span>,&#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> number;<span class="comment">//每次查询这个新增的值就会触发get方法实时更新</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;有人修改了value&#x27;</span>);</span><br><span class="line">        number = value;<span class="comment">//如果不添加这个 整体还是没有被修改到</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>数据代理<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">x</span>:<span class="number">100</span>&#125;;</span><br><span class="line">      <span class="keyword">let</span> obj2 = &#123;<span class="attr">y</span>:<span class="number">200</span>&#125;;</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(obj2,<span class="string">&#x27;x&#x27;</span>,&#123;</span><br><span class="line">          <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              <span class="keyword">return</span> obj1.x;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">              obj1.x = value;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211219201708.png" alt="控制台操作结果"></p><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211219203157.png" alt="图解原理"><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211219203327.png" alt="图解原理2"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;button v-on:click=&quot;showInfo&quot;&gt;点击我提示信息&lt;/button&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点击我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 需求传参进去，读参出来 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo2($event,666)&quot;</span>&gt;</span>点我提示信息2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 虽然方法可以写在data里面，但一般方法不需要作数据代理和劫持，所以不要写data里面</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>:<span class="string">&#x27;jojo&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//默认传入event</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">showInfo</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&#x27;lalalal&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(event)</span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">showInfo2</span>(<span class="params">event,number</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(event);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(number);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>总结：<br>事件的基本使用:</p><ol><li>使用<code>v-on:xxx</code> 或者 <code>@xxx</code>绑定事件 其中xxx是事件名</li><li>事件的回调需要配置在methods对象中，最终会在vm上</li><li>methods中配置的函数，建议不用箭头函数，否则指向window</li><li>methods中配置的函数，都是被vue所管理的函数，this指向的是vm或者组件实例对象</li><li><code>&#39;@click=&quot;demo&quot;&#39;</code> 和 <code>&#39;@click=&quot;demo($event)&quot;&#39;</code>效果一致，但后者可以传参</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>阻止默认事件 正常写法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.preventDefault();</span><br></pre></td></tr></table></figure><br>vue写法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;xxx&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>啦啦啦啦<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><br>阻止冒泡 正常写法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.stopPropagation();</span><br></pre></td></tr></table></figure><br>vue写法<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;xxx&quot;</span> @<span class="attr">click.stop</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>啦啦啦啦<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><br>汇总：<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211220095810.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>使用@事件.修饰符进行检测<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">name</span>:<span class="string">&#x27;jojo&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">showInfo</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;jojo&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>总结：<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211220191628.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>计算属性只有在其依赖的值发生改变的时候才会出发进行再次计算，相当于一个缓存的作用</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>三个案例计算全名来演示计算属性的作用</p><ol><li>用插值语法计算属性<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    全名：&#123;&#123;firstName+&#x27;-&#x27;+lastName&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>用methods写<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- //注意如果是调用methods 需要写函数名加（） --&gt;</span></span><br><span class="line">    全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName()&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">fullName</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 要写this指代vm 否则取不到对应的属性值</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.lastName</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>用computed计算属性写<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 此处是计算属性里面的属性 不是方法 而且他会自动调用get 所以不能写fullName.get --&gt;</span></span><br><span class="line">    全名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// computed对象里面的 是属性 不是函数/方法 使用的时候需要像属性一样使用它</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// computed里面的方法 自动执行 </span></span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">fullName</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// return this.firstName + &#x27;-&#x27; + this.lastName 不可以这样写 因为它是计算属性 不是methods里面的方法</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;-&#x27;</span> + <span class="built_in">this</span>.lastName;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>总结<br><img src="C:\Users\Zlinni\AppData\Roaming\Typora\typora-user-images\image-20211220203739262.png" alt="image-20211220203739262"></li></ol><p>附简写形式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    fullName: function () &#123;</span><br><span class="line">        return this.firstName + &#x27;-&#x27; + this.lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>第一种写法:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">    <span class="attr">isHot</span>:&#123;</span><br><span class="line">        <span class="attr">immediate</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="function"><span class="title">handler</span>(<span class="params">newValue,oldValue</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;被修改了&#x27;</span>,newValue,oldValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>第二种写法 注意前面必须有实例化对象 且isHot要双引号<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vm.$watch(<span class="string">&#x27;isHot&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="function"><span class="title">handler</span>(<span class="params">newValue, oldValue</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;被修改了&#x27;</span>, newValue, oldValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>第三种写法 简写方法 里面其实就是handler<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">numbers</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;numbers发生了改变&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总结</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211220215830.png"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="深度监视"><a href="#深度监视" class="headerlink" title="深度监视"></a>深度监视</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">总结全篇</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>Vue采用了深度监视，让用户可以监视多级结构下的所有属性</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>代码概览，包括了对多级结构下某个属性的监视和对多级结构下所有属性的监视(deep)\<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;numbers.a&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;numbers.a++&#x27;</span>&gt;</span>点我发生改变<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;numbers.b&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;numbers.b++&#x27;</span>&gt;</span>点我发生改变<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">numbers</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">a</span>:<span class="number">111</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">b</span>:<span class="number">222</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 监视多级结构中某个属性的变化</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#x27;numbers.a&#x27;:&#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     handler()&#123;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//         console.log(&quot;numbers.a发生了改变&quot;);</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 监视多级结构中所有属性的变化</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">numbers</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">deep</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">handler</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">&#x27;numbers发生了改变&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>深度监视：</p><ol><li>vue中的<code>watch</code>默认不监视对象内部属性值的改变 （一层）</li><li>配置了<code>deep:true</code>可以检测对象内部值的改变 （多层）</li></ol><p>注：</p><ol><li>vue自身可以检测对象内部值的改变（参考控制台的直接输入改变） 但它提供的<code>watch</code>默认不行</li><li>使用<code>watch</code>时，根据自身的结构判断是否需要用到<code>deep</code></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="绑定class"><a href="#绑定class" class="headerlink" title="绑定class"></a>绑定class</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue可以通过绑定class动态改变class</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>第一种方法 字符串写法 适用于样式的类名不确定 需要动态绑定<br><code>:class=&quot;xxx&quot;</code><br>xxx为类名 冒号是省略了<code>v-bind</code></p><p>第二种方法 数组写法 适用于要绑定的样式个数不确定，类名也不确定<br><code>:class=&#39;arr&#39;</code><br>下面自己在data里面定义arr 就可以拿取很多情况的类 </p><p>第三种方法 对象写法 适用于要绑定的样式个数确定，名字也确定，但要动态决定用不用<br><code>:class=&#39;classObj&#39;</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">classObj:&#123;</span><br><span class="line"><span class="attr">aaa</span>:<span class="literal">false</span>,</span><br><span class="line"><span class="attr">bbb</span>:<span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="绑定样式"><a href="#绑定样式" class="headerlink" title="绑定样式"></a>绑定样式</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue可以通过绑定样式动态改变样式</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>第一种方法 直接指定 注意样式要驼峰命名<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;fontSize:fsize+&#x27;px&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">new vue(&#123;</span><br><span class="line">data:&#123;</span><br><span class="line">fsize:50</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>第二种方法 对象指定 适用于改变多种样式<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">new vue(&#123;</span><br><span class="line">data:&#123;</span><br><span class="line">styleObj:&#123;</span><br><span class="line">fontSize:&#x27;40px&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>第三种方法 数组写法 同时应用多个样式对象<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;[styleObj1,styleObj2]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">new vue(&#123;</span><br><span class="line">data:&#123;</span><br><span class="line">styleObj1:&#123;</span><br><span class="line">fontSize:&#x27;40px&#x27;,</span><br><span class="line">&#125;,</span><br><span class="line">styleObj2:&#123;</span><br><span class="line">backgroundColor:&#x27;red&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue使用条件渲染指令对显示的元素进行动态处理</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p><code>v-show</code>相当于<code>display:none</code> 当它的值为<code>false</code>的时候隐藏 为<code>true</code>的时候显示<br><code>v-if</code> 也是显示和隐藏 为<code>false</code>隐藏 为<code>true</code>显示<br>区别：</p><ol><li><code>v-show</code>隐藏的元素还在dom中，<code>v-if</code>隐藏的元素不存在了</li></ol><p>还有<code>v-else-if</code>和<code>elseif</code>的作用差不多<br>以及<code>v-else</code>但它的后面不需要跟表达式 直接显示结果<br>且它不能被打断</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211226154035.png"/></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>当需要页面在特定条件下显示多个元素的时候 使用如下几种方法</p><ol><li>直接写多个<code>v-if</code>or <code>v-show</code>  缺点 多次判断很浪费</li><li>直接在多个元素上面包裹<code>div</code> 再写<code>v-if</code>or <code>v-show</code> 缺点：可能会造成样式出错</li><li>最终办法 直接用<code>template</code>标签包括多个元素再写<code>v-if</code>or <code>v-show</code> 因为它是模板标签 不会影响css</li></ol><p>注意：<code>&lt;template&gt;</code>标签只能配合<code>v-if</code> 不能配合<code>v-show</code><br>总结<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211226154745.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h1><h2 id="基本列表"><a href="#基本列表" class="headerlink" title="基本列表"></a>基本列表</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue可以使用<code>v-for</code>对数组or对象进行遍历然后渲染 </p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>对数组遍历  可以用in 或者 of<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- p是形参 自己命名 index是序列号 从0开始 ：key是标识，以便后面渲染 一定要写个id或者index否则无法实现 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这里可以直接用p写插值语法 --&gt;</span></span><br><span class="line">            &#123;&#123;p.name&#125;&#125;---&#123;&#123;p.age&#125;&#125;---&#123;&#123;index&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">persons</span>:[</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;jonasan&#x27;</span>,<span class="attr">age</span>:<span class="string">&#x27;??&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;josefu&#x27;</span>,<span class="attr">age</span>:<span class="string">&#x27;??&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;jotaro&#x27;</span>,<span class="attr">age</span>:<span class="string">&#x27;??&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">            ]</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>对对象遍历<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- p是形参 自己命名 index是序列号 从0开始 ：key是标识， 一定要写个id或者index否则无法实现 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这里可以直接用p写插值语法 --&gt;</span></span><br><span class="line">            &#123;&#123;p.name&#125;&#125;---&#123;&#123;p.age&#125;&#125;---&#123;&#123;index&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>遍历对象<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里要键值对对应 k是键 value是值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,k) in jojo&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;k&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;k&#125;&#125;---&#123;&#123;value&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">persons</span>:[</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;jonasan&#x27;</span>,<span class="attr">age</span>:<span class="string">&#x27;??&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;josefu&#x27;</span>,<span class="attr">age</span>:<span class="string">&#x27;??&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;jotaro&#x27;</span>,<span class="attr">age</span>:<span class="string">&#x27;??&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">            ],</span></span><br><span class="line"><span class="javascript">            <span class="attr">jojo</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">name</span>:<span class="string">&#x27;jotaro&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">height</span>:<span class="number">195</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">stand</span>:<span class="string">&#x27;star platinum&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>遍历字符串<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211226161939.png" alt=""><br>遍历指定次数</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="key的作用与原理"><a href="#key的作用与原理" class="headerlink" title="key的作用与原理"></a>key的作用与原理</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>讲解key的主要作用和原理 方便于理解index和id</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>结论：</p><ol><li>index适用于仅对列表进行渲染 不会破坏排序</li><li>id则都可以 因为它是唯一的标识</li></ol><p>除此之外还涉及到diff算法的对比问题</p><ol><li>用index 的话 如果是倒叙插入（插到最前面）首先它会新建新的虚拟dom和旧的虚拟dom对比 然后对比到不一致的就替换，虽然可以替换，但它只判断两个虚拟dom的内容，所以如果真实dom写了东西（比如对话框 文本框） 它不会识别 </li></ol><p>图例：<img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211227105926.png" alt=""></p><p>最后图文总结<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20211227105042.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>使用列表过滤 实现模糊搜索之类的功能</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>两种方法 一种使用watch 一种使用computed</p><ol><li>使用<code>watch</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>列表过滤<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    search：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;p of filterperson&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;p.name&#125;&#125;---&#123;&#123;p.age&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">keyWord</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">persons</span>:[</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&#x27;承太郎&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&#x27;东方杖助&#x27;</span>,<span class="attr">age</span>:<span class="number">17</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">&#x27;乔瑟夫&#x27;</span>,<span class="attr">age</span>:<span class="number">40</span>&#125;,</span></span><br><span class="line"><span class="javascript">            ],</span></span><br><span class="line"><span class="javascript">            <span class="attr">filterperson</span>:[]</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">keyWord</span>:&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 使用immediate让函数立刻执行 就可以达到显示效果</span></span></span><br><span class="line"><span class="javascript">                <span class="attr">immediate</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">handler</span>(<span class="params">val</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 做到这一步发现需要新建一个数组接收这些过滤的数据</span></span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.filterperson = <span class="built_in">this</span>.persons.filter(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> p.name.indexOf(val) !== -<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;)      </span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>使用<code>computed</code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    filterperson()&#123;</span><br><span class="line">        return this.persons.filter((p)=&gt;&#123;</span><br><span class="line">            return p.name.indexOf(this.keyWord)!==-1;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>略</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>这里要讲一下sort方法 如果返回形参1-形参2 就是升序 反之就是降序<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>列表过滤<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    search：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 2&quot;</span>&gt;</span>升序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 1&quot;</span>&gt;</span>降序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 0&quot;</span>&gt;</span>原顺序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;p of filterperson&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;p.name&#125;&#125;---&#123;&#123;p.age&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">keyWord</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">sortType</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">persons</span>: [&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">name</span>: <span class="string">&#x27;承太郎&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">age</span>: <span class="number">18</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">name</span>: <span class="string">&#x27;东方杖助&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">age</span>: <span class="number">17</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">name</span>: <span class="string">&#x27;乔瑟夫&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    <span class="attr">age</span>: <span class="number">40</span></span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">            ],</span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">filterperson</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> arr =  <span class="built_in">this</span>.persons.filter(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> p.name.indexOf(<span class="built_in">this</span>.keyWord)!==-<span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">                &#125;)</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(<span class="built_in">this</span>.sortType)&#123;</span></span><br><span class="line"><span class="javascript">                    arr.sort(<span class="function">(<span class="params">p1,p2</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="built_in">this</span>.sortType ===<span class="number">1</span> ? p2.age - p1.age : p1.age-p2.age;</span></span><br><span class="line"><span class="javascript">                    &#125;)</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> arr;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="更新时遇到的一个问题"><a href="#更新时遇到的一个问题" class="headerlink" title="更新时遇到的一个问题"></a>更新时遇到的一个问题</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供一个<code>watch</code> 也自带了一个类似<code>watch</code> 的方法 会自动改值 下面引入一个案例的两种做法分析vue是怎么检测数据的</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>分析检测数据的原理<br>需求：添加一个按钮更新 第一个li的信息<br>方法1<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220101132857.png" alt=""><br>这样做是奏效的<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220101132946.png" alt=""><br>方法2<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220101133033.png" alt=""><br>不奏效<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220101133045.png" alt=""><br>从代码层面是改了 但vue没有检测到 参考下面的vue检测数组改变<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220101133136.png" alt=""></p><p>回到数据处理部分分析<br>vue会把<code>vm.data</code>加工成<code>vm._data</code><br>给他添加了<code>get</code>和<code>set</code>方法<br>这样就形成了响应式页面<br>以name为例子 如果改变了name 就会引起<code>set name</code> 的改变 从而解析模板 页面数据用到name的 也会发生改变 生成虚拟dom 新旧dom对比 再渲染</p><p>尝试写一下vue的get 和 set方法 （错误实例）<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220101134233.png" alt=""><br>会导致无限调用 栈溢出<br>vue的写法类似<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">let</span> data = &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;jojo&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建一个监视的实例对象</span></span><br><span class="line">    <span class="keyword">const</span> obs = <span class="keyword">new</span> observer(data);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 准备一个vm实例对象</span></span><br><span class="line">    <span class="keyword">let</span> vm = &#123;&#125;;</span><br><span class="line">    vm.data = data = obs;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">observer</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 获取key值</span></span><br><span class="line">        <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(obj);</span><br><span class="line">        <span class="comment">// 遍历key值</span></span><br><span class="line">        keys.forEach(<span class="function">(<span class="params">k</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(<span class="built_in">this</span>,k,&#123;</span><br><span class="line">                <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> obj[k];</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="function"><span class="title">set</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;k&#125;</span>被修改了`</span>)</span><br><span class="line">                    obj[k] = val;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>上面只考虑了一层对象 没有考虑多层情况 vue就可以做到</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="set方法-动态添加data属性"><a href="#set方法-动态添加data属性" class="headerlink" title="set方法 动态添加data属性"></a>set方法 动态添加data属性</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>set方法用于动态添加响应式的data属性，其中<br>如果模板中值是<code>undefined</code> vue是不会解析的<br>且后添加的数据（不是set方法）生成的 也不是响应式的<br>所以就需要set方法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p><code>Vue.set(target,key,value)</code><br><code>target</code>是对象 可以写的是<code>vm.student</code><br><code>key</code> 键<br><code>value</code>值<br>or<br><code>vm.$set(target,key,value)</code><br>但这个方法有局限。<br>该方法只能添加到data对象的对象里面，不能直接添加到data对象里面。</p><p>注意 结合<code>v-if</code>标签使用更好<br>如果要动态添加的数据显示到页面的某个标签的时候 记得先定义该标签，然后使用<code>v-if</code>决定标签是否显示</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="vue检测数组改变"><a href="#vue检测数组改变" class="headerlink" title="vue检测数组改变"></a>vue检测数组改变</h2><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">总结一图流</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>前面提到不能直接改变整个数组的某个对象 只能分开改变对象的值<br>现在学习如何检测数组改变</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>vue没有为数组里面的每个元素匹配get 和set方法 所以 不是响应式的<br>数据可以直接改变 但vue没有检测到<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220101173247.png" alt=""></p><p>vue操作数组的方法<br>方法1<br>vue对数组的操作有以下的类型 和原生js的方法功能一致 但方法不太相同<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220101173614.png" alt=""><br><code>push</code>在数组最后新增一个元素<br><code>pop</code> 删除最后一个元素<br><code>shift</code>删除第一个元素<br><code>unshift</code> 在数组最前面加一个元素<br><code>splice</code> 在数组的指定位置 添加/修改/删除某个元素<br><code>sort</code>对数组进行排序<br><code>reverse</code> 对数组进行反转</p><p>方法2 用到前面讲的set方法<br><code>Vue.set(vm._data.student.hobby,1,&#39;打台球&#39;)</code><br>直接通过set方法 定位索引值 修改</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220101175232.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="表单收集"><a href="#表单收集" class="headerlink" title="表单收集"></a>表单收集</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>讲解vue怎么对form表单操作进行数据收集以及一些小技巧</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>一图流<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220101204401.png" alt=""><br>比较关键的是单选框和多选框<br>如果你要点击返回xx数据 那就必须在里面配置value值<br>多选框的道理也是一样 如果没有配置那么就是返回checked的值<br>且要注意如果data中有关多选框的属性如果初始值是非数组 那么也是收集checked值，是数组 才收集的是value值<br>以及一些小技巧 修饰符<br><code>lazy</code>等用户输入完了再收集<br><code>number</code>输入的必须是数字<br><code>trim</code>去掉首尾的空格</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供过滤器用于过滤数据，并增加管道的用法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>过滤器实现的工作原理<br>首先获取time到timeFormater 然后timeFormater过滤之后，将过滤的结果重新渲染到模板<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103214849.png" alt=""><br>其次它这个模板里面可以传参也可以不传参，不传参默认也会把前者传过去<br>下面是filter 相当于一个函数<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103215120.png" alt=""></li><li>之后说一下传参的形式<br>传参的话，看上去好像只是传了一个值 但是实际上是传递了两个值 第一个默认传进来的time 用value去接收 第二个是格式字符串 用str来接收 此处用到了es6的新特性 如果有参传进来就用它的值 没有就用默认的值<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103215303.png" alt=""></li><li>多个过滤器可以串联<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103220612.png" alt=""></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>格式化日期dayjs<br><code>dayjs(this.time).format(&#39;YYYY-MM-DD HH:mm:ss&#39;)</code></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="v-text指令"><a href="#v-text指令" class="headerlink" title="v-text指令"></a>v-text指令</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供<code>v-text</code>指令向标签中渲染指定文本内容</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>总结<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103221027.png" alt=""><br>插值语法可以穿插别的东西 但<code>v-text</code>不行<br><code>v-text</code>把给定的内容当成字符串 替换 内容 所以如果写标签是不会替换的</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="v-html指令"><a href="#v-html指令" class="headerlink" title="v-html指令"></a>v-html指令</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供<code>v-html</code>指令进行结构的解析 但涉及到安全性问题</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>总结<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220103222059.png" alt=""><br>浏览器的cookie可以通过js代码获取，如果获取到全部的cookie 导入到自己的浏览器相当于盗号免验证登陆，是借助用户之手操作的严重安全问题</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="v-clock指令"><a href="#v-clock指令" class="headerlink" title="v-clock指令"></a>v-clock指令</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供<code>v-clock</code>方法，配合css使得vue容器在被接管之后再渲染模板标签，解决网速过慢的情况下模板标签先显示出来的问题</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>总结:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220104114706.png" alt=""><br>注意它是没有初始值的</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="v-once指令"><a href="#v-once指令" class="headerlink" title="v-once指令"></a>v-once指令</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供<code>v-once</code>方法，使得有该方法的标签中模板数值只有第一次渲染之后就不变了</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>总结:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220104115458.png" alt=""><br>注意它是没有初始值的</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="v-pre指令"><a href="#v-pre指令" class="headerlink" title="v-pre指令"></a>v-pre指令</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供<code>v-pre</code>方法，可以自定义不被vue容器渲染的静态标签数据，加快编译</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>总结:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220104115716.png" alt=""><br>注意它是没有初始值的</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="vue的自定义方法"><a href="#vue的自定义方法" class="headerlink" title="vue的自定义方法"></a>vue的自定义方法</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue提供自定义方法，让用户去封装指令的方法并且调用。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>函数式<br>需求：创建一个<code>v-big</code>方法 将n值放大十倍<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是n：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是n放大十倍后的值：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">directives</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 有两种声明方法，一种是对象式 一种是函数式</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">big</span>(<span class="params">element,binding</span>)</span>&#123; <span class="comment">//有两个参数 一个是绑定的标签元素 一个是绑定的内容</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(element);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(binding);</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 现在要把数值放大十倍 而且也获得了dom元素 那么直接使用innerText改变n值</span></span></span><br><span class="line"><span class="javascript">                element.innerText = binding.value*<span class="number">10</span>;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 自定义的方法 当模板重新解析的时候会调用方法 不能单说所在的值被修改的时候</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>千万注意 这个新创建的指令并不是<code>return xxx</code>的形式来返回值</li><li>对象式<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是n：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是n放大十倍后的值：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- fbind让其所绑定的input元素默认获取焦点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-fbind:value</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">n</span>: <span class="number">1</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="attr">directives</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 有两种声明方法，一种是对象式 一种是函数式</span></span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">big</span>(<span class="params">element, binding</span>)</span> &#123; <span class="comment">//有两个参数 一个是绑定的标签元素 一个是绑定的内容</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(element);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(binding);</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 现在要把数值放大十倍 而且也获得了dom元素 那么直接使用innerText改变n值</span></span></span><br><span class="line"><span class="javascript">                element.innerText = binding.value * <span class="number">10</span>;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 自定义的方法 当模板重新解析的时候会调用方法 不能单说所在的值被修改的时候</span></span></span><br><span class="line"><span class="javascript">            &#125;,</span></span><br><span class="line"><span class="javascript">            <span class="comment">/*                 fbind(element,binding)&#123;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                                element.value = binding.value;</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                                // 如果这样写 就会发现第一次不绑定 点击之后的都绑定</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                                // 原因是出在了input还没有被渲染到页面上就被绑定了这个事件 所以不会聚焦</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                                // 解决方法 使用对象式来写</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                                element.focus();</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                            &#125; */</span></span></span><br><span class="line"><span class="javascript">            <span class="attr">fbind</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 指令与元素成功绑定时</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">bind</span>(<span class="params">element, binding</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    element.value = binding.value;</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 指令所在元素被插入页面时</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">inserted</span>(<span class="params">element, binding</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    element.focus();</span></span><br><span class="line"><span class="javascript">                &#125;,</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 指令所在的模板被重新解析时</span></span></span><br><span class="line"><span class="javascript">                <span class="function"><span class="title">update</span>(<span class="params">element, binding</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                    element.value = binding.value; </span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>总结<br>它可以写成多个字符串的形式 但要用-连接起来 比如<code>v-big-number</code><br><code>directives</code>里面同时也要写成<code>&#39;big-number&#39;:{}</code><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220104191642.png" alt=""></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="mounted生命周期函数"><a href="#mounted生命周期函数" class="headerlink" title="mounted生命周期函数"></a>mounted生命周期函数</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue在它的执行过程中会执行很多函数，mounted就是其中一个当vue容器挂载完后执行的函数，这些函数统称为生命周期函数</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>见代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 需求 欢迎来到vue透明度从1到0 再到1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;opacity&#125;&quot;</span>&gt;</span>欢迎来到vue<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>:<span class="string">&quot;#root&quot;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">opacity</span>:<span class="number">1</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// vue在挂载完之后会执行一个函数叫mounted</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// vue在生命周期中会执行很多函数 这些函数叫做生命周期函数</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.opacity-=<span class="number">0.01</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(<span class="built_in">this</span>.opacity&lt;=<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.opacity = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">            &#125;, <span class="number">16</span>);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>总结:<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220104193907.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="vue生命周期-8个钩子"><a href="#vue生命周期-8个钩子" class="headerlink" title="vue生命周期 8个钩子"></a>vue生命周期 8个钩子</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li><li class="tab"><button type="button" data-href="#test-3">经典案例</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>vue生命周期使用了8个钩子来提供给用户不同阶段的需求</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>一图流：<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220107102008.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220107102036.png" alt=""><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220107102114.png" alt=""><br>常用的生命周期钩子<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220107103006.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次秋招面试杂谈</title>
      <link href="/posts/8a2953565bdb/"/>
      <url>/posts/8a2953565bdb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tip cogs"><p>&#160; &#160; &#160; &#160;今天参加了学校最新一轮的大型面试会，作为大三的学生写一点面试的收获。</p></div><h2 id="找面试"><a href="#找面试" class="headerlink" title="找面试"></a>找面试</h2><p>&#160; &#160; &#160; &#160;首先进去的第一方面就是逛完所有的校招摊位，找到适合自己的岗位面试。我个人是往前端开发方面走的，所以找的都是这个方面的内容。但基本上走了一圈，发现对技术栈有要求的面试摊位并不多，大多数是挂羊头卖狗肉，有的hr甚至对于这个方面的内容不熟悉，比较像是收打杂的。另外比较标准的就是一个hr和一个技术人员，技术人员专门负责问技术方面的问题，hr根据结果进行分析筛选是否通过第一次面试。</p><h2 id="问问题"><a href="#问问题" class="headerlink" title="问问题"></a>问问题</h2><p>&#160; &#160; &#160; &#160;今天一共找了三个摊位，对其中两个对技术栈有要求的摊位进行询问。大概问了这几个方面的问题，一是对技术栈的知识会有什么具体的提问，二是对于简历上的内容，会比较看重哪个点，三是根据我自身情况，询问面试官的建议。</p><h3 id="技术栈知识"><a href="#技术栈知识" class="headerlink" title="技术栈知识"></a>技术栈知识</h3><p>&#160; &#160; &#160; &#160;总结一下就是基础知识要牢固，但不限于需求上面的知识，有拓展更好，比如了解过后端spring全家桶方面的知识，或者运维上面的内容。另外就是针对技术栈知识会有些基础性的提问，比如js，vue等框架内容的提问。面试之后正常还有一轮笔试，但可能要求没有太高，不会考数据结构之类的问题，这个根据公司自身情况而定。</p><h3 id="简历内容"><a href="#简历内容" class="headerlink" title="简历内容"></a>简历内容</h3><p>&#160; &#160; &#160; &#160;首先问了对于一份简历，hr会侧重于看什么。得到的答案就是基础知识牢固的情况下，个人的项目经历很重要，比如个人博客，各种管理系统之类的，虽然看起来是烂大街的，但要在烂大街的东西中找到自己有用的。面试官说个人项目最好写上去是根据xxx技术开发，然后自身要了解做这个项目会遇到的问题，要有自己的总结和提炼，以及对于这个项目是否有自己创新的地方，好比根据xx技术做xx项目，然后自己换yy技术做xx项目，简而言之就是学以致用。</p><h3 id="自身方面"><a href="#自身方面" class="headerlink" title="自身方面"></a>自身方面</h3><p>&#160; &#160; &#160; &#160;最后是问了自身方面的一些内容，因为自己的学习进度还没到框架，但现在不管是哪个it前端都至少必备一门框架技术，所以vue/react的学习也要提上日程,以及八股文，计网，数据结构，操作系统等等。除此之外还有比赛方面，因为学校开设的前端比赛是真的少之又少，曾经参加过一个后面又被主办方鸽了，现在准备参加蓝桥杯的web比赛，问道hr如果简历上面只有一项比赛经历是否应该写的时候，他建议是先把自己优势的方面写在前面，如果简历的篇幅不够，就可以继续写在后面当作一项内容。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>&#160; &#160; &#160; &#160;上面写的只是个人看法，也不能一概而谈。本次秋招也没有问关于五险一金，工作制度之类的问题，主要的还是了解了一下面试流程。个人感觉基础的东西还是需要去复习与巩固，打好基础才能拓展更多的新知识。虽然学习是反人类的过程，但为了有更好的前景，只能变得更卷。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript(未完结)</title>
      <link href="/posts/df2fc0ed9242/"/>
      <url>/posts/df2fc0ed9242/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tip cogs"><p>本文主要用于记录JavaScript的学习过程，参考视频<a href='https://www.bilibili.com/video/BV1Sy4y1C7ha?from=search&seid=3987261351855349832&spm_id_from=333.337.0.0'>【尚硅谷Web前端ES6教程，涵盖ES6-ES11】</a></p></div><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">主要运用</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>一种高级编程语言</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>表单动态校验</li><li>网页特效</li><li>服务端开发 node.js</li><li>Electron</li><li>App Cordova</li><li>控制硬件 物联网Ruff</li><li>游戏开发 cocos2d.js</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="浏览器执行js的过程"><a href="#浏览器执行js的过程" class="headerlink" title="浏览器执行js的过程"></a>浏览器执行js的过程</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><ul><li>浏览器分为渲染引擎和js引擎</li><li>其中渲染引擎负责HTML和CSS解析，JS引擎负责解析js代码（逐行解析）</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="ECMA-script"><a href="#ECMA-script" class="headerlink" title="ECMA script"></a>ECMA script</h1><h2 id="js的书写位置"><a href="#js的书写位置" class="headerlink" title="js的书写位置"></a>js的书写位置</h2><ol><li>行内式</li></ol><ul><li>编写在行内的js代码 可读性差 在特殊情况下使用</li><li>规定HTML中使用双引号，js中使用单引号</li></ul><ol><li>内嵌式</li></ol><ul><li>script标签中使用，可以写入多行代码，学习常用</li></ul><ol><li>外部js</li></ol><ul><li>引入方式<script src = "js name"></script>&gt;</li><li>标签中不能再写其他信息</li></ul><h2 id="js输入输出语句"><a href="#js输入输出语句" class="headerlink" title="js输入输出语句"></a>js输入输出语句</h2><ol><li>alert(msg) 浏览器弹出提示框</li><li>console.log(msg) 浏览器控制台打印输入信息</li><li>prompt(info) 浏览器弹出输入框，用户可以输入</li></ol><h2 id="js变量"><a href="#js变量" class="headerlink" title="js变量"></a>js变量</h2><ul><li><p>总类型 var 其数据类型是在运行过程中由等号右边的值来确定的</p></li><li><p>声明变量的特殊情况：</p><ol><li><p>只声明不赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sex;</span><br><span class="line"><span class="built_in">console</span>.log(sex);<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></li><li><p>不声明不赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(xxx);<span class="comment">//error</span></span><br></pre></td></tr></table></figure></li><li><p>不声明只赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age);<span class="comment">//10</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="js数据类型"><a href="#js数据类型" class="headerlink" title="js数据类型"></a>js数据类型</h2><ul><li><p>简单数据类型 Number, String, Boolean, Undefined, Null</p></li><li><p>复杂数据类型 Object</p><ul><li>Number:</li></ul><ol><li><p>可以直接输入进制数字 eg 八进制012</p></li><li><p>可以打印数字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">最大值<span class="built_in">Number</span>.MAX_VALUE</span><br><span class="line">最小值<span class="built_in">Number</span>.MIN_VALUE</span><br><span class="line">无穷大<span class="built_in">Number</span>.MAX_VALUE*<span class="number">2</span></span><br><span class="line">无穷小-<span class="built_in">Number</span>.MIN_VALUE</span><br><span class="line">不是数字<span class="literal">NaN</span> <span class="string">&#x27;sda&#x27;</span>-<span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p>方法IsNaN() 判断是否为数字，若不是返回false</p></li></ol><ul><li>String：</li></ul><ol><li><p>字符串引号嵌套 单引号嵌套双引号 双引号嵌套单引号</p></li><li><p>字符串转义符\ eg\b 空格</p></li><li><p>字符串长度 str.length</p></li><li><p>字符串拼接 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;str1&#x27;</span>+<span class="string">&#x27;str2&#x27;</span> = str1str2</span><br><span class="line"><span class="string">&#x27;pink&#x27;</span>+<span class="number">18</span> = pink18</span><br><span class="line"><span class="string">&#x27;pink&#x27;</span>+<span class="literal">true</span> = pinktrue</span><br><span class="line"> <span class="number">12</span>+<span class="number">12</span> = <span class="number">24</span></span><br><span class="line"><span class="string">&#x27;12&#x27;</span>+<span class="number">12</span> = <span class="number">1212</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><ul><li>Boolean, Undefined, Null</li></ul><ol><li><p>true参与加法运算视为1 false视为0</p></li><li><p>如果一个变量声明未赋值 则视为Undefined未定义数据类型 注意 undefined + 1 视为NaN</p></li><li><p>null + 1 = 1</p></li><li><p>typeof返回数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num)<span class="comment">//number</span></span><br><span class="line"><span class="comment">/*注意 与null使用 返回object</span></span><br><span class="line"><span class="comment">作用：与prompt结合使用 获取输入的数据类型*/</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><p>数据类型转换</p><ol><li><p>转换为字符型 toString()或者字符串拼接 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> + <span class="string">&#x27;&#x27;</span><span class="comment">//5</span></span><br></pre></td></tr></table></figure></li><li><p>转化为数字型 parseInt parseFloat 或者 利用 Number() 或者算术运算符 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;12&#x27;</span> - <span class="number">0</span><span class="comment">//12</span></span><br></pre></td></tr></table></figure></li><li><p>转化为布尔型 Boolean() 代表空 否定的值将被转化为false </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span> , <span class="string">&quot;&quot;</span> , <span class="number">0</span> ,<span class="literal">NaN</span> ,<span class="literal">null</span> , <span class="literal">undefined</span> </span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="js运算符-略"><a href="#js运算符-略" class="headerlink" title="js运算符 略"></a>js运算符 略</h2><h2 id="arguments使用"><a href="#arguments使用" class="headerlink" title="arguments使用"></a>arguments使用</h2><ul><li>利用其可以按索引顺序传递实参</li></ul><h2 id="函数声明的两种方式"><a href="#函数声明的两种方式" class="headerlink" title="函数声明的两种方式"></a>函数声明的两种方式</h2><ol><li><p>利用函数关键字自定义函数(命名函数)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure></li><li><p>函数表达式 l</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="js作用域"><a href="#js作用域" class="headerlink" title="js作用域"></a>js作用域</h2><ol><li><p>全局变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在全局作用域下声明的变量叫做全局变量</span><br><span class="line">特殊情况下 函数内不使用<span class="keyword">var</span>声明的变量也是全局变量</span><br></pre></td></tr></table></figure></li><li><p>局部变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">局部变量只能在函数内部使用</span><br><span class="line">在函数内部<span class="keyword">var</span>声明的变量是局部变量</span><br><span class="line">函数的形参实际上是局部变量</span><br></pre></td></tr></table></figure></li><li><p>区别</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">全局变量在任何情况下都可以使用 but只有在浏览器关闭才销毁 比较占用内存</span><br><span class="line">局部变量只在函数内部使用 当程序执行完就销毁 节省内存空间</span><br></pre></td></tr></table></figure></li><li><p>作用域链 ==就近原则==</p><h2 id="js预解析"><a href="#js预解析" class="headerlink" title="js预解析"></a>js预解析</h2></li></ol><ul><li>js引擎运行js分为两步 预解析 代码执行<ol><li>预解析 js引擎会把js里面所有的var和function提升到当前作用域的最前面</li><li>代码执行 按照代码书写的顺序由上往下执行 </li></ol></li><li>预解析分为变量预解析(变量提升)和函数预解析(函数提升)<ol><li>变量提升就是把所有变量声明提升到当前作用域最前面 不提升赋值操作</li><li>函数提升就是把所有函数声明提升到当前作用域的最前面 不调用函数</li></ol></li></ul><h2 id="js对象"><a href="#js对象" class="headerlink" title="js对象"></a>js对象</h2><ul><li><p>对象简介 略</p></li><li><p>创建对象的三种方式</p><ol><li><p>利用字面量创建一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;; 此处创建了一个空对象</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">uname</span>:<span class="string">&#x27;arer&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">20</span>,</span><br><span class="line">    <span class="attr">sex</span>:<span class="string">&#x27;female&#x27;</span>,</span><br><span class="line">    <span class="attr">sayHi</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(‘hi~’);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a 内部的属性名采用键对值的方式 键 属性名:值 属性值</span><br><span class="line">b 多个属性或者方法中间用逗号隔开</span><br><span class="line">c 方法冒号后面跟一个匿名函数</span><br></pre></td></tr></table></figure></li><li><p>利用构造函数创建对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Star</span>(<span class="params">uname,age,sex</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = uname;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    <span class="built_in">this</span>.方法 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ldh = <span class="keyword">new</span> Star(<span class="string">&#x27;ldh&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;man&#x27;</span>);</span><br><span class="line">注意 构造函数名字的首字母要大写 调用函数返回的是一个对象</span><br><span class="line">构造对象 抽取了对象的公共部分 封装到函数里 泛指某一大类<span class="class"><span class="keyword">class</span> 好比汽车设计图 </span></span><br><span class="line"><span class="class">创建对象 特指某一个 通过<span class="title">new</span>关键字创建对象的过程称之为对象实例化 好比汽车本身 </span></span><br></pre></td></tr></table></figure></li><li><p>利用new Object 创建对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="function"><span class="title">Obeject</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">obj.uname = <span class="string">&#x27;arer&#x27;</span>;</span><br><span class="line">obj.age = <span class="number">20</span>;</span><br><span class="line">obj.sex = <span class="string">&#x27;man&#x27;</span>;</span><br><span class="line">obj.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hi~&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">a 利用等号 = 赋值的方法 添加对象的属性和方法</span><br><span class="line">b 每个属性和方法之间用分号结束</span><br></pre></td></tr></table></figure></li></ol></li><li><p>使用对象</p><ol><li>调用对象的属性 对象名.属性名</li><li>or 对象名[‘属性名’]<ol><li>调用对象的方法 对象名.方法名()</li></ol></li></ol></li><li><p>变量 属性 函数 方法的区别</p><ul><li><p>变量和属性都是用来存储数据的 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">变量单独声明并赋值 使用的时候直接写变量名;</span><br><span class="line">属性在对象里面不用声明 使用时必须是对象.属性</span><br></pre></td></tr></table></figure></li><li><p>函数和方法都是用来实现某种功能 做某件事</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">函数单独声明并且调用的函数名() 单独存在;</span><br><span class="line">方法是在对象里面调用的时候 对象.方法()</span><br></pre></td></tr></table></figure></li></ul></li><li><p>遍历对象的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(变量 <span class="keyword">in</span> 对象)&#123;</span><br><span class="line">    <span class="comment">//假设此处变量为k 对象为obj</span></span><br><span class="line">    <span class="built_in">console</span>.log(k);</span><br><span class="line">    <span class="built_in">console</span>.lo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="js内置对象"><a href="#js内置对象" class="headerlink" title="js内置对象"></a>js内置对象</h2><ul><li><p>内置对象简介：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">js中的对象分为三种 自定义对象 内置对象 浏览器对象</span><br><span class="line">前两者是js基础内容 属于ECMAscript 第三个浏览器对象是js独有的，在js API中讲解</span><br><span class="line">内置对象是是js自带的一些对象用于实现一些常用的或者最基本的功能和方法</span><br><span class="line">最大的优点是帮助快速开发</span><br><span class="line">eg </span><br><span class="line"><span class="built_in">Math</span>,<span class="built_in">Date</span>,<span class="built_in">Array</span>,<span class="built_in">String</span> etc</span><br></pre></td></tr></table></figure></li><li><p>Math 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">直接调用 不需要<span class="keyword">new</span></span><br><span class="line">常用方法</span><br><span class="line"><span class="built_in">Math</span>.PI <span class="comment">//圆周率</span></span><br><span class="line"><span class="built_in">Math</span>.floor() <span class="comment">//向下取整</span></span><br><span class="line"><span class="built_in">Math</span>.cell() <span class="comment">//向上取整</span></span><br><span class="line"><span class="built_in">Math</span>.round() <span class="comment">//四舍五入 就近取整 attention -3.5结果是3</span></span><br><span class="line"><span class="built_in">Math</span>.abs() <span class="comment">//绝对值</span></span><br><span class="line"><span class="built_in">Math</span>.max()/<span class="built_in">Math</span>.min() <span class="comment">//求最大值 最小值</span></span><br></pre></td></tr></table></figure></li><li><p>Date 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取当前时间必须实例化</span></span><br><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(now);</span><br><span class="line"><span class="comment">//常用方法</span></span><br><span class="line">getFullyear()</span><br><span class="line">getMonth() <span class="comment">//0-11</span></span><br><span class="line">getDate()</span><br><span class="line">getDay() <span class="comment">//0-6</span></span><br><span class="line">getHours()</span><br><span class="line">getMinutes()</span><br><span class="line">getSeconds()</span><br><span class="line">拓展： 格式化日期时分秒 见“格式化日期时分秒.html”</span><br></pre></td></tr></table></figure></li><li><p>Array 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">i 创建数组的两种方式</span><br><span class="line">利用数组字面量 eg <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">利用<span class="keyword">new</span> <span class="built_in">Array</span>()</span><br><span class="line">eg1 <span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>) 表示数组长度为<span class="number">2</span> 里面有两个空元素</span><br><span class="line">eg2 <span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>,<span class="number">3</span>) 等价于[<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">ii 利用<span class="keyword">instanceof</span> <span class="built_in">Array</span> 来检测是否为数组 eg <span class="keyword">var</span> arr = []; <span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>);</span><br><span class="line">利用 <span class="built_in">Array</span>.isArray(arr); H5新增的方法 ie9以上才支持</span><br><span class="line"></span><br><span class="line">iii 添加/删除元素方法 方法加.即可使用</span><br><span class="line">push() 在数组末尾添加一个元素 返回新的长度</span><br><span class="line">unshift() 在数组开头添加一个或多个元素 返回新的长度</span><br><span class="line">pop() 删除数组最后一个元素 返回它删除元素的值</span><br><span class="line">shift() 删除数组的第一个元素 返回第一个元素的值</span><br><span class="line"></span><br><span class="line">iv 数组排序</span><br><span class="line">reverse() 翻转数组</span><br><span class="line">sort() 排序</span><br><span class="line"></span><br><span class="line">v 数组索引</span><br><span class="line">indexOf(数组元素) 数组中查找给定元素的第一个索引 找不到则返回-<span class="number">1</span></span><br><span class="line">lastIndexOf(数组元素) 从后面开始找数组元素</span><br><span class="line">作用：数组去重 遍历旧数组，拿旧数组的元素去查询新数组，如果该元素没有在新数组出现则添加</span><br><span class="line">利用indexOf() 如果返回-<span class="number">1</span>说明新数组没有存在该元素</span><br><span class="line"></span><br><span class="line">vi 数组转化为字符串</span><br><span class="line">toString() 结果用逗号分隔</span><br><span class="line">join(<span class="string">&#x27;分隔符&#x27;</span>) 结果用输入的分隔符分隔，不输入默认逗号</span><br></pre></td></tr></table></figure></li><li><p>String 对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i 简单数据类型为什么能用length？ 因为<span class="keyword">new</span>将他封装成复杂数据类型</span><br><span class="line">ii 字符串的不可变性？ 改变字符串实际上是地址指向的改变 每次改变都要开辟新空间 浪费资源</span><br><span class="line">iii 未完待续</span><br></pre></td></tr></table></figure></li></ul><h2 id="js简单类型和复杂类型"><a href="#js简单类型和复杂类型" class="headerlink" title="js简单类型和复杂类型"></a>js简单类型和复杂类型</h2><ul><li><p>值类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">简单数据类型/基本数据类型 在存储时变量中存储的是值本身 因此叫值类型</span><br></pre></td></tr></table></figure></li><li><p>引用类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">复杂数据类型，在存储时变量中存储的仅仅是地址，因此叫做引用数据类型，通过<span class="keyword">new</span>关键字创建的对象 比如<span class="built_in">Object</span> <span class="built_in">Array</span> <span class="built_in">Date</span> etc</span><br></pre></td></tr></table></figure></li></ul><h1 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h1><ul><li>API是一些预先定义的函数 目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码或者理解内部工作机制的细节</li><li>简单来说 API是给程序员提供的一组工具 以便能够轻松实现想要完成的功能 </li><li>Web API 是浏览器提供的一套操作浏览器功能和页面元素的API(BOM和DOM)</li></ul><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><ul><li>Document Object Model 简称DOM 文档对象模型</li><li>处理HTML的标准接口</li></ul><h2 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h2><ul><li><p>一个页面就是一个文档 用document表示<img src="image-20210324154900183.png" alt="image-20210324154900183"></p></li><li><p>元素 页面的标签都是元素 用element表示</p></li><li>节点 页面的所有内容都是节点 用node表示</li></ul><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><ul><li><p>id</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(id);</span><br></pre></td></tr></table></figure></li><li><p>标签名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;tag&#x27;</span>); </span><br></pre></td></tr></table></figure></li><li><p>class</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;classname&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>选择器 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line">返回指定选择器的第一个对象</span><br><span class="line"><span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.box&#x27;</span>);</span><br><span class="line">返回指定选择器的所有对象</span><br></pre></td></tr></table></figure></li><li><p>body</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body;</span><br></pre></td></tr></table></figure></li><li><p>html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement;</span><br></pre></td></tr></table></figure></li></ul><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul><li><p>事件三要素 事件源 事件类型 事件处理程序</p></li><li><p>事件源 事件被触发的对象 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>事件类型 如何触发 什么事件 比如onclick</p></li><li><p>事件处理程序 通过一个函数赋值的方式完成</p></li></ul><h2 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h2><ul><li><p>改变元素内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">element.innerText;</span><br><span class="line">不识别html标签</span><br><span class="line">从起始位置到终止位置的内容 但是它除去html</span><br><span class="line">element.innerHTML;</span><br><span class="line">识别html标签</span><br><span class="line">起始位置到终止位置的全部内容 包括html标签 同时保留空格和换行</span><br></pre></td></tr></table></figure></li><li><p>表单属性操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">&#x27;input&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> iv = input.value;</span><br></pre></td></tr></table></figure></li><li><p>样式属性操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">element.style 行内样式操作</span><br><span class="line">element.className 类名样式操作</span><br></pre></td></tr></table></figure></li><li><p>H5自定义属性</p><ol><li><p>自定义属性目的：<br>为了保存并使用数据，有些数据可以保存到页面中而不用保存到数据库中</p></li><li><p>获取方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.getAttribute(<span class="string">&#x27;属性&#x27;</span>)；</span><br></pre></td></tr></table></figure><p>H5新增</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">element.dataset.index;</span><br><span class="line">element.dataset[<span class="string">&#x27;index&#x27;</span>];</span><br><span class="line">前提必须是data-xxx</span><br><span class="line">如果是data-list-name</span><br><span class="line">则获取为</span><br><span class="line">element.dataset.listName：/(驼峰命名法)</span><br></pre></td></tr></table></figure></li><li><p>命名方式:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-index</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>也可以通过js进行设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.setAttribute(<span class="string">&#x27;data-index&#x27;</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><ul><li><p>节点概述 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">一般地 节点至少拥有三个属性</span><br><span class="line">nodeType 节点类型</span><br><span class="line">nodeName 节点名称</span><br><span class="line">nodeValue 节点值</span><br><span class="line">* 元素节点 nodeType为<span class="number">1</span></span><br><span class="line">* 属性节点为<span class="number">2</span></span><br><span class="line">* 文本节点为<span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>节点层级 </p></li></ul><h1 id="事件高级"><a href="#事件高级" class="headerlink" title="事件高级"></a>事件高级</h1><h2 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传统方式注册事件</span></span><br><span class="line">btn[<span class="number">0</span>].click = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//事件侦听注册事件</span></span><br><span class="line"><span class="comment">//里面的事件类型是字符串，必定加引号，而且不用on</span></span><br><span class="line"><span class="comment">//同个事件可以添加多个事件侦听器</span></span><br><span class="line">btn[<span class="number">1</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="解绑事件"><a href="#解绑事件" class="headerlink" title="解绑事件"></a>解绑事件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当点击之后不需要该事件了，则可以使用解绑</span></span><br><span class="line"><span class="comment">//传统方式</span></span><br><span class="line">btn[<span class="number">0</span>].click = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">    btn[<span class="number">0</span>].onclick = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//事件侦听删除</span></span><br><span class="line">btn[<span class="number">1</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>,fn);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">    btn[<span class="number">1</span>].removeEventListener(<span class="string">&#x27;click&#x27;</span>,fn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p>简介</p><ul><li>事件流描述的是从页面中接受事件的顺序</li><li>事件发生时会在元素节点之间按照特定的顺序传播 这个传播过程叫做dom事件流 </li><li>分为三个阶段：1.捕获阶段 2.当前目标阶段 3.冒泡阶段</li></ul><p>注意</p><ul><li>js代码中只能执行捕获或者冒泡其中一个阶段</li><li>onclick和attachEvent（ie）只能得到冒泡阶段     </li><li>事件捕获由上往下，父盒子到子盒子 </li><li>事件冒泡则由下往上，子盒子到父盒子</li></ul><p>如何使用事件捕获/冒泡？</p><ul><li><p>事件捕获</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//addEventListener的第三个参数，true则是事件捕获，不写或者是false则是冒泡</span></span><br><span class="line">div[<span class="number">0</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>,fn,<span class="literal">true</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>有些事件是没有冒泡的 比如onblur onfocus onmouseenter onmouseleave</li></ul><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>简介</p><ul><li>事件对象就是事件的一系列相关数据的集合 跟事件相关 比如鼠标点击里面就包含了鼠标的相关信息 鼠标坐标等 如果是键盘事件就包含了当前键盘事件的信息 比如 判断用户按下了某个按键</li><li>在div.onclick = function(event){}中 event就是一个事件对象 写到我们监听函数的小括号里面 当形参来看</li></ul><p>注意</p><ul><li><p>事件对象只有有了事件才会存在，他是系统给我们自动创建的，不需要我们传递参数</p></li><li><p>可以自己命名 比如event ，evt，e</p></li><li><p>事件对象也有兼容性问题 比如ie678里面只能通过 window.event来写</p></li><li><p>写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e = e || <span class="built_in">window</span>.event</span><br><span class="line">当浏览器认识e的时候 直接赋值为e</span><br><span class="line">当浏览器不认识这个e的时候 e是<span class="literal">undefined</span> 就是<span class="literal">false</span> 然后执行后面的 </span><br></pre></td></tr></table></figure></li></ul><p>常见事件对象属性和方法</p><ul><li>e.target 返回当前触发的对象 this返回的是绑定事件的对象 （元素）</li></ul><p>返回事件类型</p><ul><li>e,type </li></ul><p>阻止默认行为 让链接不跳转 或者 按钮不提交</p><ul><li>e.preventDefault();  dom标准写法</li><li>低版本浏览器 使用e.returnValue </li><li>直接使用return false 也能阻止默认行为  但注意后面的代码不会执行了</li></ul><p>阻止冒泡 面试基本必考 两种方式</p><ul><li><p>e.stopPropagation()</p></li><li><p>兼容性 e.cancelBubble = true; </p></li><li><p>兼容性解决方案</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(e&amp;&amp;e.stopPropagation)&#123;</span><br><span class="line">e.stopPropagation();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意该方法只能阻止一级  所以后面的冒泡还要加方法</p></li></ul><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>简介</p><ul><li>事件冒泡本身的特性 如果盒子比较多的时候 一个一个冒泡时间响应就会很久 使用事件委托能解决这个委托</li><li>事件委托也叫事件代理 jquery里面叫做事件委派</li></ul><p>原理</p><ul><li>不是每个子节点单独设置监听器，而是事件监听器设置在父节点上，然后利用冒泡原理影响设置每个子节点</li><li>eg 给ul注册点击事件 然后利用事件对象中的target来找到当前触发的对象li 因为点击li 事件冒泡触发到ul上 而ul又有注册事件 就会触发事件监听器</li></ul><p>作用</p><ul><li>只操作了一次DOM 提高了程序性能</li></ul><h2 id="常用的鼠标事件"><a href="#常用的鼠标事件" class="headerlink" title="常用的鼠标事件"></a>常用的鼠标事件</h2><p>禁止选中文字和禁止右键菜单</p><ul><li><p>禁止鼠标右键菜单 contextmenu 主要控制应该合适显示上下文菜单  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;contextmenu&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">e.preventDefault();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>禁止鼠标选中 selectstart</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&#x27;selectstart&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">e.preventDefault();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>鼠标事件对象</p><ul><li>MouseEvent<img src="C:\Users\Zlinni\AppData\Roaming\Typora\typora-user-images\image-20211205112133180.png" alt="image-20211205112133180"></li><li>KeyboardEvent<img src="C:\Users\Zlinni\AppData\Roaming\Typora\typora-user-images\image-20211205112254166.png" alt="image-20211205112254166"></li><li>注意 onkeydown和up不区分字母大小写 onkeypress区分大小写</li><li>键盘事件对象e.keyCode可以打印asii码</li></ul><p>案例 jd搜索</p><ul><li>检测用户是否按下s 如果按下s 就把光标定位到搜索框里面</li><li>使用keyCode判断按下的是不是s</li><li>搜索框获得焦点 使用js里面的focus()方法</li></ul><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><p>简介</p><ul><li>浏览器对象模型 Browser Object Model 提供了独立于内容而与浏览器窗口进行交互的对象 核心是window</li><li>BOM由一系列相关的对象构成 并且每个对象都提供了很多方法和属性</li><li>但BOM缺乏标准 js语法标准化组织是ECMA DOM的标准化组织是W3C </li></ul><p>和DOM区别</p><ul><li>如下<img src="C:\Users\Zlinni\AppData\Roaming\Typora\typora-user-images\image-20211205113328066.png" alt="image-20211205113328066"></li></ul><p>BOM的构成</p><ul><li>window对象是浏览器的顶级对象 它具有双重角色</li><li>它是js访问浏览器窗口的一个接口</li><li>它是一个全局对象。定义在全局作用域中的变量，函数都会变成window对象的属性和方法</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb</title>
      <link href="/posts/dc3e93748a4e/"/>
      <url>/posts/dc3e93748a4e/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="javaweb概述"><a href="#javaweb概述" class="headerlink" title="javaweb概述"></a>javaweb概述</h2><h3 id="HTTP概述"><a href="#HTTP概述" class="headerlink" title="HTTP概述"></a>HTTP概述</h3><ul><li>全称 HyperText Transfer Protocol 超文本传输协议</li><li>请求/响应式</li><li>特点</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">支持客户端eg浏览器</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>请求方式get post</p></li><li><p>http1.0 每次只能处理一个http请求 影响网页的访问速度</p></li><li><p>http1.1 处理多请求和响应</p></li><li><p>浏览器向服务器传送请求 = http请求消息</p></li><li><p>服务器将处理后的数据发回给客户端（浏览器） = http响应消息</p></li><li><p>统称http消息</p></li></ul><h3 id="HTTP请求消息"><a href="#HTTP请求消息" class="headerlink" title="HTTP请求消息"></a>HTTP请求消息</h3><ul><li><p>请求行位于请求消息的第一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /index.html HTTP/1.1</span><br><span class="line">get 是请求方式</span><br><span class="line">后面接的是资源路径</span><br><span class="line">最后跟的是请求协议版本</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>http请求方式有八种</p></li><li><p>常见的 两种是==get==和==post==</p></li><li><p>get方式获得的参数直接在url地址后面 但传输的数据量有限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://www.itcast.cn/javaForum?name=youjun&amp;pwd=123</span><br><span class="line">网址后面跟问号 有多个信息则在信息间跟&amp;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>post方式传输的大小没有限制 且 更安全 实际开发用</p></li><li><p>请求头在请求行之后 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host: localhost:8080</span><br><span class="line">格式</span><br><span class="line">请求头字段 冒号 空格 内容</span><br></pre></td></tr></table></figure></li><li><p>常用的请求头字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Accept-Charset 字符集</span><br><span class="line">Accept-Encoding 编码方式</span><br><span class="line">Accept-Language 返回的语言</span><br><span class="line">User-Agent 浏览器版本等浏览器信息</span><br></pre></td></tr></table></figure></li></ul><h3 id="HTTP响应消息"><a href="#HTTP响应消息" class="headerlink" title="HTTP响应消息"></a>HTTP响应消息</h3><ul><li><p>包括 响应状态行 响应消息头 和 实体内容</p></li><li><p>响应状态行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">包括 </span><br><span class="line">http版本 状态吗 对状态码的描述信息</span><br></pre></td></tr></table></figure></li><li><p>状态码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1xx 表示请求已经接受 需要继续处理</span><br><span class="line">2xx 表示请求已成功被服务器接受，理解，并接受</span><br><span class="line">3xx 为了完成请求 客户端需要进一步细化请求</span><br><span class="line">4xx 客户端的请求有错误</span><br><span class="line">5xx 服务器端出现错误</span><br></pre></td></tr></table></figure></li><li><p>常见状态码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">200 表示服务器成功接受了客户端的请求</span><br><span class="line">302 表示请求的资源临时从不同的url响应请求</span><br><span class="line">304 表示客户端缓存的版本是最新的</span><br><span class="line">404 表示服务器找不到请求的资源</span><br><span class="line">500 表示服务器发生错误</span><br></pre></td></tr></table></figure></li></ul><ul><li>响应消息头略</li></ul><h3 id="Web应用的介绍和配置"><a href="#Web应用的介绍和配置" class="headerlink" title="Web应用的介绍和配置"></a>Web应用的介绍和配置</h3><ul><li><p>Tomcat路径下目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bin 放可执行文件和脚本文件</span><br><span class="line">conf 放webxml和serverxml</span><br><span class="line">lib 放jar</span><br><span class="line">webapps web应用程序主要发布目录</span><br></pre></td></tr></table></figure></li><li><p>为什么startup.bat一闪而过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">端口被占用</span><br><span class="line">没有配置好jdk环境</span><br></pre></td></tr></table></figure></li></ul><h2 id="Servlet基础"><a href="#Servlet基础" class="headerlink" title="Servlet基础"></a>Servlet基础</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>用java语言来编写动态资源的开发技术</li></ul><h3 id="servlet继承结构"><a href="#servlet继承结构" class="headerlink" title="servlet继承结构"></a>servlet继承结构</h3><p><img src="image-20210313152227462.png" alt="image-20210313152227462"></p><h4 id="sevlet接口"><a href="#sevlet接口" class="headerlink" title="sevlet接口"></a>sevlet接口</h4><ol><li>init() 初始化</li><li>service() 服务</li><li>destroy() 销毁</li><li>getServletConfig() 获取servletconfig对象，是容器向servlet传递参数的载体</li><li>getServletInfo() 获取servlet相关信息</li></ol><h4 id="servlet的生命周期"><a href="#servlet的生命周期" class="headerlink" title="servlet的生命周期"></a>servlet的生命周期</h4><ul><li>由Web容器（Tomcat）管理，经历三个阶段init→service→destroy</li></ul><h4 id="serializable接口"><a href="#serializable接口" class="headerlink" title="serializable接口"></a>serializable接口</h4><ul><li>Java.IO包中的可序列化接口，用于标识作用</li></ul><h4 id="servletConfig接口"><a href="#servletConfig接口" class="headerlink" title="servletConfig接口"></a>servletConfig接口</h4><ul><li>用于封装tomcat初始化servlet时的配置信息</li></ul><h4 id="GenericServlet实现类"><a href="#GenericServlet实现类" class="headerlink" title="GenericServlet实现类"></a>GenericServlet实现类</h4><ul><li>为抽象类</li><li>设计目的 与应用层协议解耦</li></ul><h4 id="HttpServlet类"><a href="#HttpServlet类" class="headerlink" title="HttpServlet类"></a>HttpServlet类</h4><ul><li>将service中的==servletrequest==和==servletresponse==转为==httpservletrequest==和==httpservletresponse==</li><li>实际开发直接继承该类并重写doxx（）方法 </li></ul><h4 id="HttpServletRequest对象"><a href="#HttpServletRequest对象" class="headerlink" title="HttpServletRequest对象"></a>HttpServletRequest对象</h4><ul><li>用于获取请求数组</li><li>通过对request</li><li>请求方式/url/协议版本</li></ul><h4 id="attention"><a href="#attention" class="headerlink" title="attention"></a>attention</h4><ul><li>get/post post在实体内容中返回 get的信息在链接uri后面生成</li><li>contain()方法匹配字符串</li><li>“hobit”.equals(key);</li></ul><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><ul><li><p>手机平板电脑等设备存储数据的格式不同，但它们之间可以用xml实现数据的交换</p></li><li><p>xml是Extensible Markup Language的缩写 是一种类似于html的标记语言 称为可拓展标记语言</p></li><li><p>xml是一种通用的数据交换格式</p></li><li><p>与html的区别</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line">html标记用来显示数据</span><br><span class="line">xml标记用来描述信息</span><br><span class="line"><span class="number">2.</span></span><br><span class="line">html不区分大小写</span><br><span class="line">xml严格区分</span><br><span class="line"><span class="number">3.</span></span><br><span class="line">html可以有很多根元素</span><br><span class="line">格式良好的xml只能有一个</span><br><span class="line"><span class="number">4.</span></span><br><span class="line">html中空格会自动过滤</span><br><span class="line">xml中空格不会自动删除</span><br><span class="line"><span class="number">5.</span></span><br><span class="line">html标记是预定义的</span><br><span class="line">xml是可随便定义的</span><br><span class="line"><span class="number">6.</span></span><br><span class="line">html中的属性可用可不用</span><br><span class="line">xml的属性必须放在引号里</span><br></pre></td></tr></table></figure></li></ul><h3 id="xml语法"><a href="#xml语法" class="headerlink" title="xml语法"></a>xml语法</h3><ul><li>在一个完整的xml文档中 必须包含一个xml文档声明<img src="image-20210328143759285.png" alt="image-20210328143759285"></li><li>命名规则<img src="image-20210328143929798.png" alt="image-20210328143929798"></li><li>注释的细节<img src="image-20210328144031516.png" alt="image-20210328144031516"></li></ul><h3 id="DTD约束"><a href="#DTD约束" class="headerlink" title="DTD约束"></a>DTD约束</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>早期出现的xml约束模式语言，根据其语法文件创建的是DTD文件</p><h4 id="DTD约束文档"><a href="#DTD约束文档" class="headerlink" title="DTD约束文档"></a>DTD约束文档</h4><ul><li>如下<img src="image-20210328153559582.png" alt="image-20210328153559582"></li></ul><h4 id="引入DTD"><a href="#引入DTD" class="headerlink" title="引入DTD"></a>引入DTD</h4><ul><li>如下<img src="image-20210328153739807.png" alt="image-20210328153739807"></li></ul><h4 id="DTD语法"><a href="#DTD语法" class="headerlink" title="DTD语法"></a>DTD语法</h4><ul><li><p>格式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ELEMENT 元素名称 &gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Schema约束"><a href="#Schema约束" class="headerlink" title="Schema约束"></a>Schema约束</h3><ul><li>同前者 但功能更加强大 相应的语法也复杂很多</li></ul><h2 id="TOMCAT"><a href="#TOMCAT" class="headerlink" title="TOMCAT"></a>TOMCAT</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></p><p><img src="image-20210305202437206.png" alt="image-20210305202437206"></p><p><img src="image-20210305202452493.png" alt="image-20210305202452493"></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><ol><li>bin目录里面找到startup.bat/ linux下使用startup.sh</li><li>打开浏览器 输入127.0.0.1:8080;</li></ol><h4 id="启动问题"><a href="#启动问题" class="headerlink" title="启动问题"></a>启动问题</h4><ol><li>未正确配置jdk</li><li>端口号修改</li><li>startup乱码： 修改conf下的logging.properties，其所有utf-8改为GBK</li></ol><h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><ol><li>点击bin目录内的shutdown.bat</li><li>在命令窗口输入ctrl+C</li><li>强制关闭 直接点x</li></ol><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="部署项目的方式"><a href="#部署项目的方式" class="headerlink" title="部署项目的方式"></a>部署项目的方式</h4><ol><li>直接将项目放在tomcat的webapps下面</li><li>打开浏览器之后输入127.0.0.1/项目文件夹/项目</li><li>简化部署：将项目打包成war包 放置在webapps下面 会自动解压缩并且删除的时候会自动去掉源文件</li><li>在 </li></ol><h3 id="标准访问格式"><a href="#标准访问格式" class="headerlink" title="标准访问格式"></a>标准访问格式</h3><ul><li>协议://域名:端口/资源路径/资源名称</li></ul><h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><ul><li>当用户多次访问这个资源时，其源代码永远不会改变</li><li>会动的静态资源</li></ul><h3 id="动态资源"><a href="#动态资源" class="headerlink" title="动态资源"></a>动态资源</h3><ul><li>当用户多次访问这个资源时，其源代码可能发生改变</li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序员必修 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> javaweb </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu_Linux</title>
      <link href="/posts/7eec245b196a/"/>
      <url>/posts/7eec245b196a/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul><li>略</li></ul><h1 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h1><ol><li><p>全屏显示<img src="image-20210304150047242.png" alt="image-20210304150047242">：进入全屏模式</p></li><li><p>挂起/冻结<img src="image-20210304143956297.png" alt="image-20210304143956297"></p><p>由于开关机的不便性 使用挂起/冻结可以保存linux系统状态</p></li><li><p>硬件参数设置 </p><p>先关机后设置    </p></li><li><p>右下角有状态栏：显示当前硬件状态</p></li></ol><h1 id="快照与系统恢复"><a href="#快照与系统恢复" class="headerlink" title="快照与系统恢复"></a>快照与系统恢复</h1><ol><li><p>右键ubuntulinux 有快照</p></li><li><p>点击拍摄快照之后会保存当前系统状态</p></li><li><p>在虚拟机目录下就会有后缀为snapshot字样的文件</p></li><li><p>当系统出问题的时候可以快速还原到快照状态</p></li></ol><h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><ul><li>对于Linux来说 使用统一的目录树结构，且没有盘符这个概念</li><li>. 代表当前目录 ..代表上级目录</li><li>bin</li></ul><h1 id="用户目录"><a href="#用户目录" class="headerlink" title="用户目录"></a>用户目录</h1><ul><li><p>Linux系统上支持多个用户，每个用户一个目录</p></li><li><p>权限机制：对于普通用户操作的范围只有用户目录，对于root用户可以操作所有范围</p></li></ul><h1 id="常用命令行"><a href="#常用命令行" class="headerlink" title="常用命令行"></a>常用命令行</h1><h2 id="列出子项-ls"><a href="#列出子项-ls" class="headerlink" title="列出子项 ls"></a>列出子项 ls</h2><ul><li><p>查看根目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /</span><br></pre></td></tr></table></figure></li><li><p>查看详细信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /home </span><br></pre></td></tr></table></figure></li><li><p>要点与细节：按住tab键可以自动补全输入的命令和路径</p></li><li><p>输入历史可以按↑↓箭头翻阅</p></li><li><p>宿主机与虚拟机之间可以拷贝粘贴，例如图片和文字</p></li></ul><h2 id="目录切换-pwd"><a href="#目录切换-pwd" class="headerlink" title="目录切换 pwd"></a>目录切换 pwd</h2><ul><li><p>print working directory</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd </span><br></pre></td></tr></table></figure></li></ul><h2 id="切换目录-cd"><a href="#切换目录-cd" class="headerlink" title="切换目录 cd"></a>切换目录 cd</h2><ul><li><p>change directory</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home/zlinni</span><br></pre></td></tr></table></figure></li><li><p>几个特殊的目录：</p><ul><li>~ 主目录</li><li>. 当前目录</li><li>.. 上一级目录</li></ul></li><li><p>绝对路径 从根节点开始 /</p></li><li><p>相对路径 从当前路径开始  ./dir==dir</p></li></ul><h2 id="新建文件-touch"><a href="#新建文件-touch" class="headerlink" title="新建文件 touch"></a>新建文件 touch</h2><ul><li><p>touch</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch 文件名</span><br></pre></td></tr></table></figure></li></ul><h2 id="输入内容-cat"><a href="#输入内容-cat" class="headerlink" title="输入内容 cat"></a>输入内容 cat</h2><ul><li><p>cat 文件名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat files</span><br><span class="line">#查看files中内容</span><br><span class="line">cat -n files</span><br><span class="line">#查看n行内容</span><br></pre></td></tr></table></figure></li><li><p>cat&gt;用户名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat&gt;files</span><br><span class="line">#往cat中输入内容 以ctrl+d结束</span><br></pre></td></tr></table></figure></li><li><p>其他方式输入 &gt; (输出重定向)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date &gt; file</span><br><span class="line">#往file中输入date</span><br></pre></td></tr></table></figure></li></ul><h2 id="创建目录-mkdir"><a href="#创建目录-mkdir" class="headerlink" title="创建目录 mkdir"></a>创建目录 mkdir</h2><ul><li><p>make directory</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir abc</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用-p参数可以将路径的层次目录全部创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p abc/123/test</span><br></pre></td></tr></table></figure></li></ul><h2 id="删除目录-rmdir"><a href="#删除目录-rmdir" class="headerlink" title="删除目录 rmdir"></a>删除目录 rmdir</h2><ul><li><p>remove directory,如果目录非空 操作失败</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir abc</span><br></pre></td></tr></table></figure></li></ul><h2 id="删除文件或者目录-rm"><a href="#删除文件或者目录-rm" class="headerlink" title="删除文件或者目录 rm"></a>删除文件或者目录 rm</h2><ul><li><p>remove</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rfabc</span><br></pre></td></tr></table></figure><p>删除abc目录连同子项一起删除，r表示recursive，f表示force</p></li></ul><h2 id="复制文件或者目录-cp"><a href="#复制文件或者目录-cp" class="headerlink" title="复制文件或者目录 cp"></a>复制文件或者目录 cp</h2><ul><li><p>copy</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp -rf example example2</span><br><span class="line">cp -b example example2 #备份</span><br></pre></td></tr></table></figure></li></ul><h2 id="移到文件或目录-mv"><a href="#移到文件或目录-mv" class="headerlink" title="移到文件或目录 mv"></a>移到文件或目录 mv</h2><ul><li><p>move</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv hello helloworld #把文件a移到b中</span><br><span class="line">mv simply.txt simply2.txt #改变名字 </span><br></pre></td></tr></table></figure></li></ul><h2 id="归档-tar"><a href="#归档-tar" class="headerlink" title="归档 tar"></a>归档 tar</h2><ul><li><p>tape archive 档 案打包</p></li><li><p>创建档案包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf example.tar example</span><br></pre></td></tr></table></figure></li><li><p>c means create</p></li><li><p>v means verbose 显示详情 </p></li><li><p>f means file</p></li><li><p>多目录打包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf xxx.tar file1 file2 file3</span><br></pre></td></tr></table></figure></li><li><p>还原档案包 （解压）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar .xvf example.tar</span><br><span class="line">tar -xvf example.tar -C outdir</span><br><span class="line"># -C参数指定目标目录，默认解压到当前目录下</span><br></pre></td></tr></table></figure></li><li><p>归档并压缩</p></li><li><p>前面的tar没压缩体积大</p></li><li><p>并档并压缩</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf example.tar.gz example</span><br></pre></td></tr></table></figure></li><li><p>解压缩</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf example.tar.gz</span><br><span class="line">tar -zxvf example.tar.gz -C outdir</span><br></pre></td></tr></table></figure></li></ul><h2 id="软链接-ln"><a href="#软链接-ln" class="headerlink" title="软链接 ln"></a>软链接 ln</h2><ul><li><p>即Windows下的“快捷方式”</p></li><li><p>ln link</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ln -s source link</span><br><span class="line">#-s 表示soft软链接（默认为硬）</span><br><span class="line">eg：</span><br><span class="line">ln -s example example2</span><br><span class="line">#便创建了一个名为example2的快捷方式，内部是example的内容</span><br></pre></td></tr></table></figure></li><li><p>特点：</p></li></ul><ol><li>删除软链接对源文件不会有影响</li><li>删除源文件则软链接失效</li><li>使用ls -l 可以清楚的看到快捷方式<img src="image-20210310104651162.png" alt="image-20210310104651162"></li><li><p>直接看颜色<img src="image-20210310104620892.png" alt="image-20210310104620892"></p></li><li><p>可以看出/bin指向的是user/bin目录</p></li></ol><h2 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h2><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><ul><li><p>添加一个用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd -m test1</span><br></pre></td></tr></table></figure></li><li><p>修改用户密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd test1</span><br></pre></td></tr></table></figure></li><li><p>删除用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo userdel test1</span><br></pre></td></tr></table></figure></li></ul><h2 id="超级用户"><a href="#超级用户" class="headerlink" title="超级用户"></a>超级用户</h2><ul><li><p>首次使用时，需要给root设置密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure></li><li><p>切换到root用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su root</span><br><span class="line"># switch user</span><br></pre></td></tr></table></figure></li><li><p>退出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure></li></ul><h2 id="用户和组"><a href="#用户和组" class="headerlink" title="用户和组"></a>用户和组</h2><ul><li><p>创建组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd boys</span><br></pre></td></tr></table></figure></li><li><p>创建用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -m -g boys ming</span><br><span class="line"># -g表示添加用户 同时将用户加到boys组</span><br></pre></td></tr></table></figure></li><li><p>修改现有用户到新的组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -g boys Zlinni</span><br></pre></td></tr></table></figure></li><li><p>查看用户和组</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/group</span><br><span class="line">#每一行表示一个group消息，名字+id</span><br></pre></td></tr></table></figure></li><li><p>查看用户列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br><span class="line">#每一行表示一个用户的信息</span><br></pre></td></tr></table></figure></li></ul><h2 id="文件的权限"><a href="#文件的权限" class="headerlink" title="文件的权限"></a>文件的权限</h2><ul><li><p>-owner 文件的属主</p></li><li><p>-r 文件是否可读 read</p></li><li><p>-w 文件是否可写 write</p></li><li><p>-x 文件是否可执行 excute</p></li><li><p>使用ls -l查看：</p></li><li><ul><li>第一个字符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d 表示目录</span><br><span class="line">l 表示link软链接</span><br><span class="line">- 表示为一个文件</span><br></pre></td></tr></table></figure><ul><li><p>剩下的九个字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r w - r - - r - - </span><br><span class="line">#权限分为三部分 自己 | 同组 | 别人</span><br><span class="line"># r 可读</span><br><span class="line"># w 可写</span><br><span class="line"># x 可执行</span><br></pre></td></tr></table></figure></li></ul></li><li><p>直接在图形界面上看属性 </p></li></ul><h2 id="修改文件权限-chmod"><a href="#修改文件权限-chmod" class="headerlink" title="修改文件权限 chmod"></a>修改文件权限 chmod</h2><ul><li><p>change file mode </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod o+w simply.txt</span><br><span class="line"># o 表示other</span><br><span class="line"># +w 表示增加write权限</span><br></pre></td></tr></table></figure></li><li><p>more</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">chmod a+w simple.txt</span><br><span class="line">#所有人all添加w权限</span><br><span class="line">chmod a-w simple.txt</span><br><span class="line">#所有人减去w权限</span><br><span class="line">chmod u+w simple.txt</span><br><span class="line">#仅用户user自己的权限 +w</span><br><span class="line">chmod o-w simple.txt</span><br><span class="line">#修改别人的other权限-w</span><br></pre></td></tr></table></figure></li></ul><h2 id="修改文件属主-chown"><a href="#修改文件属主-chown" class="headerlink" title="修改文件属主 chown"></a>修改文件属主 chown</h2><ul><li>change owner</li><li>在/opt</li></ul><h2 id="打印-echo"><a href="#打印-echo" class="headerlink" title="打印 echo"></a>打印 echo</h2><ul><li><p>echo </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;helloworld&#x27;</span><br><span class="line">#打印出helloworld</span><br><span class="line">var1 = 22;</span><br><span class="line">echo $var1</span><br><span class="line">#打印出22</span><br></pre></td></tr></table></figure></li></ul><h2 id="指令使用说明-man"><a href="#指令使用说明-man" class="headerlink" title="指令使用说明 man"></a>指令使用说明 man</h2><ul><li><p>manual </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man 指令名</span><br></pre></td></tr></table></figure></li></ul><h2 id="历史指令-history"><a href="#历史指令-history" class="headerlink" title="历史指令 history"></a>历史指令 history</h2><ul><li><p>history</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">history 10</span><br><span class="line">#查询最近的十条</span><br></pre></td></tr></table></figure></li></ul><h2 id="文本编辑器-vim"><a href="#文本编辑器-vim" class="headerlink" title="文本编辑器 vim"></a>文本编辑器 vim</h2><ul><li><p>三种模式</p></li><li><p>命令模式 按键i转化为输入模式 输入冒号进入底线模式  </p></li><li><p>输入模式 按键esc转化为命令模式 先esc再冒号进入底线模式</p></li><li><p>底线模式 最下面一行输入指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#退出命令</span><br><span class="line">:wq 保存并退出</span><br><span class="line">:wq! 保存并强制退出</span><br><span class="line">:q 直接退出</span><br><span class="line">:q 直接强制退出</span><br></pre></td></tr></table></figure></li><li><p>输入到光标左边是i input </p></li><li><p>输入到光标右边是a after the cursor</p></li><li><p>最左边 大写I </p></li><li><p>最右边 大写A</p></li><li><p>输入到光标上边是大写O</p></li><li><p>输入到光标下边是小写o</p></li><li><p>替换字母 r replace</p></li><li><p>剪切一个字母 x</p></li><li><p>剪切一个单词 dw</p></li><li><p>剪切一行 dd</p></li><li><p>粘贴 p paste</p></li><li><p>复制 y </p></li><li><p>复制一个单词 yw</p></li><li><p>复制一行 yy</p></li><li><p>在底线模式输入set number显示行号</p></li><li><p>查找单词 /单词 按下n就到下一行</p></li><li><p>替换单词 :s/旧单词/新单词 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">替换前三行</span><br><span class="line">:1,3 s/old/new</span><br><span class="line">第一行到最后一行</span><br><span class="line">:1,$ s/old/new</span><br></pre></td></tr></table></figure></li><li><p>移动 :1 move 4 把第一行和第四行进行交换</p></li><li><p>复制 :1 copy 4 把第一行复制到第四行后面 </p></li><li><p>删除 :1 d</p></li></ul><h2 id="查找grep"><a href="#查找grep" class="headerlink" title="查找grep"></a>查找grep</h2><ul><li><p>语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">grep ‘查找内容’ 查找文件</span><br><span class="line">grep -i ‘查找内容’ 查找文件 </span><br><span class="line">#可以忽视大小写 ignore</span><br><span class="line">grep -e ‘查找内容’ 查找文件</span><br><span class="line">#用表达式expression去反映查找的内容</span><br><span class="line">grep -v ‘查找内容’ 查找文件</span><br><span class="line">#显示不匹配的内容 versus</span><br><span class="line">grep -n ‘查找内容’ 查找文件</span><br><span class="line">#显示行号</span><br><span class="line">grep -e &#x27;\(hello\)\&#123;2,3\&#125;&#x27; 搜索出现2-3次hello的那行</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">. 一个字符</span><br><span class="line">* 若干个字符 前面一个字符出现若干次</span><br><span class="line">^ 行的开头</span><br><span class="line">$ 行的结尾</span><br><span class="line">[abc] abc其中一个</span><br><span class="line">[a-c] a到c</span><br><span class="line">^#</span><br><span class="line">^$ 空行</span><br><span class="line">! 否定</span><br><span class="line">[[:upper:]]</span><br><span class="line">[[:lower:]]</span><br><span class="line">[[:blank:]]</span><br><span class="line">[[:digit:]]</span><br></pre></td></tr></table></figure><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><ul><li>指令1 |  2 | 3</li></ul><h1 id="Shell-编程基础"><a href="#Shell-编程基础" class="headerlink" title="Shell 编程基础"></a>Shell 编程基础</h1><ul><li><p>程序编译 </p></li><li><p>程序解释</p></li><li><p>编辑一个 文本文件 保存为xxx.sh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">echo &quot;hello,world&quot;</span><br></pre></td></tr></table></figure></li><li><p>添加可执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x xxx.sh</span><br></pre></td></tr></table></figure></li><li><p>执行程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./hello.sh</span><br></pre></td></tr></table></figure></li></ul><h2 id="shell中的变量"><a href="#shell中的变量" class="headerlink" title="shell中的变量"></a>shell中的变量</h2><ul><li><p>shell是一个脚本编程语言</p></li><li><p>定义变量</p></li><li><p>执行命令</p></li><li><p>if判断逻辑 while循环逻辑 </p></li><li><p>自定义函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">定义变量</span><br><span class="line">OUTDIR = /opt</span><br><span class="line"></span><br><span class="line">使用变量</span><br><span class="line">echo &quot;output to : $&#123;OUTDIR&#125;&quot;</span><br><span class="line">ls $&#123;OUTDIR&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ul><li>定义环境变量<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">定义环境变量</span><br><span class="line">export OUTDIR = /opt</span><br><span class="line">显示环境变量</span><br><span class="line">echo $&#123;OUTDIR&#125;</span><br><span class="line">查看所有环境变量</span><br><span class="line">printenv  </span><br></pre></td></tr></table></figure></li><li>可分为全局环境变量和局部环境变量<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">全局环境变量由系统预定义且使用在bash进程</span><br><span class="line">一般使用大写字母表示全局 小写表示局部</span><br></pre></td></tr></table></figure></li></ul><h2 id="环境变量的赋值和访问"><a href="#环境变量的赋值和访问" class="headerlink" title="环境变量的赋值和访问"></a>环境变量的赋值和访问</h2><ul><li><p>赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count=0,等号左右没有空格</span><br></pre></td></tr></table></figure></li><li><p>访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$count</span><br></pre></td></tr></table></figure></li><li><p>使用export命令让局部变量变成全局变量</p></li></ul><h2 id="变量的赋值和运算"><a href="#变量的赋值和运算" class="headerlink" title="变量的赋值和运算"></a>变量的赋值和运算</h2><ul><li><p>字符串长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">expr length &quot;$str&quot;</span><br><span class="line">若要传值 使用反引号</span><br><span class="line">c = `expr length &quot;$str&quot;`</span><br></pre></td></tr></table></figure></li><li><p>查找字符串位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">expr index $str a (要查找的字符串)</span><br><span class="line">* 注意 从1开始</span><br><span class="line">* 有多个字符进行匹配则返回索引最小的值</span><br></pre></td></tr></table></figure></li><li><p>字符串截断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">expr substr $str 2 3</span><br><span class="line">2 开始位置</span><br><span class="line">3 结束位置</span><br></pre></td></tr></table></figure></li><li><p>字符串匹配</p></li><li><p>使用expr必须在运算符前面添加 \ 进行转义，且数字与运算符中间需要腾出空格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">计算（1+2）*5</span><br><span class="line">expr \( 1 \+ 2 \) \* 5</span><br></pre></td></tr></table></figure></li><li><p>使用$[]做运算不需要</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = $[(1+2)*5]</span><br></pre></td></tr></table></figure></li></ul><h2 id="输入输出重定向"><a href="#输入输出重定向" class="headerlink" title="输入输出重定向"></a>输入输出重定向</h2><h2 id="输出重定向和附加输出重定向"><a href="#输出重定向和附加输出重定向" class="headerlink" title="输出重定向和附加输出重定向"></a>输出重定向和附加输出重定向</h2><ul><li><p>输出重定向 覆写原来的内容 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date &gt; file1</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>附加输出重定向 添加的内容在原先的结尾后面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date &gt;&gt; file1</span><br></pre></td></tr></table></figure></li></ul><h2 id="输入重定向和附加输入重定向"><a href="#输入重定向和附加输入重定向" class="headerlink" title="输入重定向和附加输入重定向"></a>输入重定向和附加输入重定向</h2><ul><li><p>原理同上</p></li><li><p>输入重定向</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参数 &lt; file1</span><br></pre></td></tr></table></figure></li><li><p>附加输入重定向 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参数 &lt;&lt; file1</span><br></pre></td></tr></table></figure></li><li><p>特别的 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat &lt; file &gt; file2</span><br><span class="line">等同于</span><br><span class="line">cat &gt; file2 &lt; file</span><br><span class="line">都是先输入重定向获取file的内容再输出到file2</span><br></pre></td></tr></table></figure></li></ul><h2 id="错误输出重定向和附加错误输出重定向"><a href="#错误输出重定向和附加错误输出重定向" class="headerlink" title="错误输出重定向和附加错误输出重定向"></a>错误输出重定向和附加错误输出重定向</h2><ul><li><p>错误输出重定向</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;error message&#125; 2 &gt; file</span><br></pre></td></tr></table></figure></li><li><p>附加错误输出重定向</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;error message&#125; 2 &gt;&gt; file</span><br></pre></td></tr></table></figure></li><li><p>eg</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lsls</span><br><span class="line">得到错误信息 bash:lsls:command is not found</span><br><span class="line">lsls 2 &gt; file</span><br><span class="line">cat file</span><br><span class="line">得到错误信息</span><br></pre></td></tr></table></figure></li></ul><h2 id="管道功能"><a href="#管道功能" class="headerlink" title="管道功能"></a>管道功能</h2><ul><li><p>第一个命令的结果作为第二个命令的输入以此类推</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令1 | 命令2 | 命令3</span><br></pre></td></tr></table></figure></li><li><p>eg 由于/etc里面的文件很多 可以通过管道将列表结果传输到more显示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /etc | more</span><br></pre></td></tr></table></figure></li></ul><h2 id="shell编程"><a href="#shell编程" class="headerlink" title="shell编程"></a>shell编程</h2><h2 id="创建和执行shell脚本"><a href="#创建和执行shell脚本" class="headerlink" title="创建和执行shell脚本"></a>创建和执行shell脚本</h2><ul><li><p>创建的格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!bin/sh</span><br><span class="line">echo hello world！</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>执行 1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">. hello.sh(假设刚刚创建的文件是这个)</span><br><span class="line">且注意.之后跟空格</span><br></pre></td></tr></table></figure></li><li><p>执行2 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">先赋予权限</span><br><span class="line">chmod u+x hello</span><br><span class="line">./hello.sh</span><br></pre></td></tr></table></figure></li><li><p>两种执行方式的区别 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">. hello.sh其实是执行了source hello.sh 不会创建新的进程</span><br><span class="line">./hello.sh则是执行了bash hello.sh 创建新的进程</span><br></pre></td></tr></table></figure></li></ul><h2 id="分支选择结构"><a href="#分支选择结构" class="headerlink" title="分支选择结构"></a>分支选择结构</h2><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if 条件</span><br><span class="line">then </span><br><span class="line">命令</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li><p>如果将if和then写在同一行 需要在then前面加;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if 条件; then</span><br><span class="line">命令</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li><p>如果有两个分支，就可以使用if-else语句，格式为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if 条件</span><br><span class="line">then </span><br><span class="line">命令1</span><br><span class="line">else </span><br><span class="line">命令2</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li></ul><h2 id="case-in"><a href="#case-in" class="headerlink" title="case-in"></a>case-in</h2><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">case 表达式 in</span><br><span class="line">条件1)</span><br><span class="line">命令1</span><br><span class="line">;;</span><br><span class="line">条件2)</span><br><span class="line">命令2</span><br><span class="line">;;</span><br><span class="line">...</span><br><span class="line">*)</span><br><span class="line">命令n</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></li><li><p>eg</p><p><img src="image-20210609203750536.png" alt="image-20210609203750536"></p></li></ul><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while 条件</span><br><span class="line">do </span><br><span class="line">命令</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li></ul><h2 id="until循环"><a href="#until循环" class="headerlink" title="until循环"></a>until循环</h2><ul><li></li></ul><h1 id="考试"><a href="#考试" class="headerlink" title="考试"></a>考试</h1><h1 id="单选"><a href="#单选" class="headerlink" title="单选"></a>单选</h1><p>20道 </p><h1 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h1><p>基础指令</p><h1 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h1><p>基础指令</p><ul><li>三道 加起来20分</li></ul><h1 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h1><p>单独做个脚本</p><ul><li><p>两道 加起来20分</p></li><li><p>考察内容2-4</p></li><li><p>基础知识和课后习题部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!bin/sh</span><br><span class="line">index = `expr length &quot;&quot;$1&quot;`</span><br><span class="line">whle($index&gt;0)</span><br><span class="line">do</span><br><span class="line">str = $str`expr substr &quot;$1&quot; $index 1`</span><br><span class="line">index = $[$index-1]</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h2><ul><li><p>ls -l 第一个字母代表和后面三个字母代表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-a 列出所有项目</span><br><span class="line">-l 以列表形式写出文件</span><br><span class="line">-R 用于递归列出子目录中的的内容</span><br><span class="line">-d 只列出目录</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>cd 熟悉两种路径跳转 当前文件夹和上级文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd .该级</span><br><span class="line">cd ..上级</span><br><span class="line">cd ~主目录root</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>新建文件和新建文件目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch file</span><br><span class="line">mkdir 文件名</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>删除文件 rm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm 文件名</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>删除空的文件夹 rm dir</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir 文件夹</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>如果文件夹非空 rm </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -r </span><br><span class="line">强制删除 实质是递归删除</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>分页指令 more、less</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more 文件名</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>关机方法 shutdown halt 还有？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poweroff 断电</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>重启 reboot shutdown -r 还有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">？</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>输出echo</p></li><li><p>l输入变量在脚本里read</p></li><li><p>通配符 字母数量未定用*  一个字母用？ 代表a-j中间一个数 [a-j]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls /etc/???.conf 列出etc下面由三个字母构成的文件</span><br><span class="line">ls /etc/[a-c]*.conf 列出etc下面由a-c其中一个字母开头的文件</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>命令后面加取地址符号&amp; p48 代表放入后台执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">代表该指令放入后台执行</span><br></pre></td></tr></table></figure><p><img src="image-20210610211429412.png" alt="image-20210610211429412"></p></li><li><p>grep查找 文本的查找 使用通配符 开头^ 结尾$</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">grep ‘查找内容’ 查找文件</span><br><span class="line">grep -i ‘查找内容’ 查找文件 </span><br><span class="line">#可以忽视大小写 ignore</span><br><span class="line">grep -e ‘查找内容’ 查找文件</span><br><span class="line">#用表达式expression去反映查找的内容</span><br><span class="line">grep -v ‘查找内容’ 查找文件</span><br><span class="line">#显示不匹配的内容 versus</span><br><span class="line">grep -n ‘查找内容’ 查找文件</span><br><span class="line">#显示行号</span><br><span class="line">grep -e &#x27;\(hello\)\&#123;2,3\&#125;&#x27; 搜索出现2-3次hello的那行</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>通过文件名查询文件 find +name  -t 查找类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><ul><li><p>输出重定向 &gt; &gt;&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参见笔记</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>管道 |</p></li><li><p>第四章p60脚本编程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参见笔记</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>x执行权限 chmod u+x file</p></li><li><p>默认bash 解释器 source解释器 区别</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash 会创建新的进程</span><br><span class="line">source 不会</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>变量代表输入参数的个数 $# 所有输入参数放到什么变量 第一个参数用什么表示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命令行的参数个数$#</span><br><span class="line">所有输出参数保留在$*</span><br><span class="line">第一个参数用$1表示</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>变量的运算 数值类型和字符类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">参见笔记</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>数字的加减乘除 expr 注意*前面加 \ 转义</p></li><li><p>bc计算器</p></li><li><p>expr的好处是可以将结果赋值给其他变量·``</p></li><li><p>长度 、  抽取子字符串</p></li><li><p>p77 条件的判断</p></li><li><p>数字方面的a》b </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-eq =</span><br><span class="line">-ge &gt;=</span><br><span class="line">-le &lt;=</span><br><span class="line">-gt &gt;</span><br><span class="line">-lt &lt;</span><br><span class="line">-ne ≠</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>字符串的比较 两个字符串是否相等 包括长度判断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">=</span><br><span class="line">！=</span><br><span class="line">&lt;&gt;</span><br><span class="line">-n 长度是否大于0 是否为空</span><br><span class="line">-z 长度是否=0 </span><br></pre></td></tr></table></figure></li></ul><ul><li><p>文件的判断 判断是否为文件 文件夹</p></li><li><p>以上都是单个 </p></li><li><p>多个判断自己看</p></li><li><p>循环结构 for 依次输出五个单词等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!bin/sh</span><br><span class="line"></span><br><span class="line">for(i=0;i&lt;5;i++)</span><br><span class="line">do</span><br><span class="line">echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p>while</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#!bin/sh</span><br><span class="line"></span><br><span class="line">while 条件</span><br><span class="line">do</span><br><span class="line">xxx</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>加两个(())等同于c的环境</p></li><li><p>用户管理 知道怎么新建更改删除用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">useradd 新增用户</span><br><span class="line">选项：</span><br><span class="line">-e 该选项后面给出的是日期参数</span><br><span class="line">-c commit 该选项后面给出的是注释参数</span><br><span class="line">-d directory 该选项后面给出的是路径参数</span><br><span class="line">-g 该选项后面给出组群id或组群名称参数 用于指定用户所属的初始组群</span><br><span class="line">-G 附加组群</span><br><span class="line">-u 数字参数 指定uid</span><br><span class="line">-r 说明创建的是系统用户</span><br><span class="line">useradd -G study -u 1000  testuser</span><br><span class="line"></span><br><span class="line">passwd -S testuser 查看用户密码状态</span><br><span class="line">passwd testuser 修改testuser的密码</span><br><span class="line">ctrl+d结束输入</span><br><span class="line"></span><br><span class="line">usermod 修改用户账号设置</span><br><span class="line">和useradd选项相同，新增一条：</span><br><span class="line">-l 后面给出的是新用户名参数</span><br><span class="line">usermod -c &quot;user for test&quot; testuser</span><br><span class="line">usermod -l tuser testuser</span><br><span class="line"></span><br><span class="line">userdel 删除命令</span><br><span class="line">userdel -r tuser</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>包括用户组的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupadd</span><br><span class="line">groupmod</span><br><span class="line">groupdel</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>p102 切换到另外一个用户的命令 su</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su study</span><br><span class="line">切换到study用户</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>文件管理第七章 当ls -l 哪个代表他的类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ls -l/xxx</span><br><span class="line">- 普通文件</span><br><span class="line">d 目录</span><br><span class="line">c 字符设备文件（鼠标键盘</span><br><span class="line">b 块设备文件block（硬盘</span><br><span class="line">l 符号链接文件link</span><br><span class="line">s 套接字</span><br><span class="line">p 管道pipe</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>块状的设备文件 b</p></li><li><p>字符类型的 c</p></li><li><p>链接文件 l</p></li><li><p>一个是硬链接 一个是软连接的创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">硬链接是目标文件的一个副本 软连接符号链接类似快捷方式记录文件所在路径</span><br><span class="line">ln命令创建链接文件</span><br><span class="line">默认创建硬链接</span><br><span class="line">-s 创建符号链接</span><br><span class="line">touch target</span><br><span class="line">ln -s target symtarget</span><br><span class="line">ls -l symtarget</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>文件权限 增加和减少权限 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rwx</span><br><span class="line">r 4</span><br><span class="line">w 2</span><br><span class="line">x 1</span><br><span class="line">read write execute执行</span><br><span class="line"></span><br><span class="line">分三部分 文件所有者 属组组员 其他用户</span><br><span class="line">eg</span><br><span class="line">-rw-r--r--</span><br><span class="line">root用户对其有可读可写权限 其他用户均只有可读权限</span><br><span class="line"></span><br><span class="line">chmod u+x</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>针对三类人 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root用户 属组用户 和其他用户</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>权限管理的两种模式 字母的数字的如何转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><ul><li><p>第八章 硬盘的文件系统</p></li><li><p>开机的时候以哪一种文件格式去挂载盘ext4</p></li><li><p>系统盘是ext4 </p></li><li><p>fat32是单个文件不能过4g </p></li><li><p>ntfs就可以</p></li><li><p>/etc/fstab p133</p></li><li><p>挂载一个硬盘的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创建一个空节点</span><br><span class="line">mkdir /mnt/usb</span><br><span class="line">mount -t ext4 /dev/sda /mnt/usb</span><br><span class="line">mount -t 类型 挂载区 挂载位置</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>卸载盘的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>挂载盘之前 格式化的命令 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext3/dev/sdc1</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>普通使用的是什么格式 （linux下）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><ul><li><p>分区工具 p151 查询分区的具体信息的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>更改盘的分区命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>硬盘的配额限制命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quotacheck</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>查看当前的盘 打开所有的配额功能 关闭配额功能 更改配额信息 更改配额信息的时候是哪两种配额 针对大小和针对信息的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">quotaon 打开全部配额功能</span><br><span class="line">quotaoff 关闭配额功能</span><br><span class="line">-u user</span><br><span class="line">-g group组群</span><br><span class="line">-v 详细信息</span><br><span class="line">-a 全部扫描</span><br><span class="line">-avug</span><br><span class="line">quota 报告配额使用情况</span><br><span class="line">repquota 报告</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>逻辑卷 为什么需要逻辑卷</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">四个1gb 形成一个4gb</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>怎么样建立一个逻辑卷 使得这个逻辑卷随时可以增加随时可以减少 三个步骤 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pvcreate xxx</span><br><span class="line">将分区转换为物理卷</span><br><span class="line">vgcreate juanzu xxx</span><br><span class="line">指定物理卷用于卷组创建</span><br><span class="line">lvcreate juanzu luojijuan</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>新建和删除的功能对应的指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序员必修 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js</title>
      <link href="/posts/19f6c59c8434/"/>
      <url>/posts/19f6c59c8434/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>nodejs是一个js运行环境runtime 让js可以开发后端程序 几乎能实现其他后端语言能实现的所有function</li><li>nodejs基于googlev8引擎 原用于chrome的js解释部分，但后来被搬到服务器上用于做服务器的软件</li><li>优点 处理高并发 可以实现的功能多</li></ul><h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><ul><li>略</li></ul><h1 id="第一次运行nodejs"><a href="#第一次运行nodejs" class="headerlink" title="第一次运行nodejs"></a>第一次运行nodejs</h1><ul><li>建立app.js，然后console一段信息，打开终端输入node app.js(确保你的终端打开路径正确)，有输出则为配置成功</li></ul><h1 id="创建第一个应用"><a href="#创建第一个应用" class="headerlink" title="创建第一个应用"></a>创建第一个应用</h1><h2 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h2><ul><li><p>创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>用于创建服务器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">http.createServer(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    设置响应头</span><br><span class="line">    状态码是<span class="number">200</span> 文件类型是html 字符集是utf-<span class="number">8</span> </span><br><span class="line">    res.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-type&quot;</span>:<span class="string">&quot;text/html;charset=utf-8&quot;</span>&#125;);</span><br><span class="line">  解决乱码</span><br><span class="line">    res.write(<span class="string">&quot;&lt;head&gt;&lt;meta charset=&#x27;UTF-8&#x27;&gt;&lt;/head&gt;&quot;</span>);</span><br><span class="line">    必写结束响应</span><br><span class="line">    res.end();</span><br><span class="line">    </span><br><span class="line">&#125;).listen(<span class="number">3000</span>);端口</span><br><span class="line">箭头函数是es6新增的特性和<span class="function"><span class="keyword">function</span>差不多</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="url模块"><a href="#url模块" class="headerlink" title="url模块"></a>url模块</h2><ul><li><p>创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>获取地址栏里面的其他属性 解析url  get可以用 post要用第三方中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url.parse(req.url,<span class="literal">true</span>).query;</span><br><span class="line"><span class="literal">true</span>转换为一个对象</span><br><span class="line">返回一个json数组类型</span><br></pre></td></tr></table></figure></li></ul><h2 id="热刷新supervisor"><a href="#热刷新supervisor" class="headerlink" title="热刷新supervisor"></a>热刷新supervisor</h2><ul><li>输入cnpm找到对应网址进行安装指令 注意权限问题</li><li>再安装supervisor 注意权限问题</li><li>然后 将vscode 的默认终端从powershell转化成cmd</li><li>接着 输入supervisor app.js</li><li>便可以进行热更新 每次保存都会重启对应的js</li><li>注意如果报错会一直反复运行</li></ul><h2 id="commandjs-自定义模块"><a href="#commandjs-自定义模块" class="headerlink" title="commandjs 自定义模块"></a>commandjs 自定义模块</h2><ul><li><p>将部分功能性js封装到一个模块里面并且使用 的一种方式</p></li><li><p>下面以模块tools.js为例  看index.js如何调用模块的方法并使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;tools.js</span><br><span class="line">参见nodejs学习/demo3/<span class="built_in">module</span>/tools.js</span><br><span class="line"></span><br><span class="line">&gt;&gt;command02.js</span><br><span class="line">参见nodejs学习/demo3/command02.js</span><br></pre></td></tr></table></figure></li><li><p>暴露方法 分为三类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">单个方法暴露</span><br><span class="line">一个对象多个方法暴露</span><br><span class="line">直接暴露</span><br></pre></td></tr></table></figure></li></ul><h2 id="node-modules"><a href="#node-modules" class="headerlink" title="node_modules"></a>node_modules</h2><ul><li>nodejs的标准库，里面放module的js</li><li>在导入的时候可以直接require(‘模块名/模块.js’)，其中.js可以省略</li></ul><h2 id="生成package-json"><a href="#生成package-json" class="headerlink" title="生成package.json"></a>生成package.json</h2><ul><li>读取路径的时候默认是读取node_modules下面的模块的index.js，而如果想要省略的写法 即直接读取单个模块下面单个js的路径 可以使用package.json将下面的单个js路径改为默认路径</li><li>方法 找到模块文件路径下的单个js 在地址栏输入cmd打开cmd窗口</li><li>之后输入 npm init —yes 就可以生成相关的package.json<img src="image-20211123140552158.png" alt="image-20211123140552158"></li></ul><h2 id="第三方模块导入"><a href="#第三方模块导入" class="headerlink" title="第三方模块导入"></a>第三方模块导入</h2><p>用md5加密模块举例</p><ol><li>网址里面下包</li><li>npm install md5 —save 这样别人就知道你项目里面导入了哪些依赖，然后使用 npm i就可以导入依赖</li><li>var md5 = require(‘md5’);</li><li>md5(‘123132’);</li></ol><h2 id="关于依赖"><a href="#关于依赖" class="headerlink" title="关于依赖"></a>关于依赖</h2><ul><li>如下<img src="image-20211123160511823.png" alt="image-20211123160511823"></li></ul><h1 id="npm指令"><a href="#npm指令" class="headerlink" title="npm指令"></a>npm指令</h1><ul><li>npm -v 看npm版本号</li><li>npm -i 导入依赖</li><li>npm install xx —save 导入xx包并将依赖文件保存</li><li>npm uninstall xx</li><li>npm list 查看当前目录下已经安装的node包</li><li>npm info 模块 查看模块的版本</li><li>npm install xxx@1.2.0 安装指定版本的xx包</li><li>npm init 或者 npm init —yes 生成package.json</li></ul><h2 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h2><ul><li><p>1.fs.stat 检测是文件还是目录</p><p>2.fs.mkdir 创建目录</p><p>3.fs.writeFile 创建写入文件</p><p>4.fs.appendFile 追加文件</p><p>5.fs.readFile 读取文件</p><p>6.fs.readdir 读取目录</p><p>7.fs.rename 重命名</p><p>8.fs.rmdir 删除目录</p><p>9.fs.unlink 删除文件</p></li></ul><h3 id="数据流-管道流"><a href="#数据流-管道流" class="headerlink" title="数据流 管道流"></a>数据流 管道流</h3><ul><li><p>数据流读取数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> readStream = fs.createReadStream(<span class="string">&#x27;./data/output.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line">readStream.on(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;</span><br><span class="line">    str+=data;</span><br><span class="line">    count++;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">readStream.on(<span class="string">&#x27;end&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">    <span class="built_in">console</span>.log(count);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">readStream.on(<span class="string">&#x27;error&#x27;</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>数据流写入数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入数据到文件流</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">500</span>;i++)&#123;</span><br><span class="line">    str+=<span class="string">&#x27;数据流xxxxxxxxxxxxx&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> writeStream = fs.createWriteStream(<span class="string">&#x27;./data/output.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line">writeStream.write(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标记写入完成</span></span><br><span class="line">writeStream.end();</span><br><span class="line"> </span><br><span class="line">writeStream.on(<span class="string">&#x27;finish&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;写入完成&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>管道流 复制文件之类的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 管道流 可以进行数据交换</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> readStream = fs.createReadStream(<span class="string">&#x27;./demo8.zip&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> writeStream = fs.createWriteStream(<span class="string">&#x27;./data/demo8.zip&#x27;</span>);</span><br><span class="line"></span><br><span class="line">readStream.pipe(writeStream);</span><br></pre></td></tr></table></figure></li></ul><h1 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h1><ul><li><p>async 异步函数 await 等待异步函数执行完毕</p></li><li><p>同步就是根据代码全部流程一步一步执行</p></li><li><p>而异步就是遇到异步函数 先将其放到任务栈 然后等待所有其他函数执行完毕 之后再执行异步函数</p></li><li><p>关于js的异步同步执行顺序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">流程如下</span><br><span class="line">先执行同步</span><br><span class="line">再执行全部微任务</span><br><span class="line">再执行第一项宏任务</span><br></pre></td></tr></table></figure></li><li><p>延迟函数类似于异步 </p></li><li><p>异步的一个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> name = <span class="string">&#x27;zhangsan222&#x27;</span>;</span><br><span class="line">            resolve(name);</span><br><span class="line">        &#125;,<span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="keyword">await</span> test();</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br><span class="line">main();</span><br></pre></td></tr></table></figure></li></ul><h1 id="利用http模块，fs模块，url模块，path模块-创建一个静态web服务器"><a href="#利用http模块，fs模块，url模块，path模块-创建一个静态web服务器" class="headerlink" title="利用http模块，fs模块，url模块，path模块 创建一个静态web服务器"></a>利用http模块，fs模块，url模块，path模块 创建一个静态web服务器</h1><ol><li><p>http模块</p><ol><li><p>首先一个网页的基本请求和响应需要用到http模块</p></li><li><p>导入http模块 创建服务器</p></li><li><p>设置响应头</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res.writeHead(<span class="number">200</span>,&#123;</span><br><span class="line"><span class="string">&quot;Content-Type&quot;</span>:<span class="string">&quot;text/html;charset=&#x27;utf-8&#x27;&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line">注意设置状态码和文件类型</span><br></pre></td></tr></table></figure></li><li><p>注意写结束响应 和 端口</p></li></ol></li><li><p>fs模块</p><ol><li>作用是读取本地中的静态资源</li><li>一般用到fs.readFile</li><li>注意写err</li></ol></li><li><p>path模块</p><ol><li><p>作用是将地址中的后缀名给分离出来 (此时使用到path.extname())，传给getMime函数</p></li><li><p>getMime函数的作用是根据后缀名 返回相应的文件类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.getMime = (<span class="function">(<span class="params">extname</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (extname)&#123;</span><br><span class="line"><span class="attr">case</span>: <span class="string">&#x27;.html&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;text/html&#x27;</span>;</span><br><span class="line"><span class="keyword">case</span>: <span class="string">&#x27;.css&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;text/css&#x27;</span>;</span><br><span class="line"><span class="keyword">case</span>: ....</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>url模块</p><ol><li><p>通过url.parse()方法解析req.url里面的pathname</p></li><li><p>原因是使用json的时候 getMime无法将他返回相关的文件类型</p></li><li><p>使用json的时候 不需要地址栏后面的数字</p></li><li><p>所以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pathname = url.parse(req.url).pathname;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>command.js</p><ol><li>modules下面新建的js 暴露一个getFIleMime方法使其根据path模块的extname方法传来的后缀名 返回相应的文件类型</li><li>自定义 自定义比较有限</li><li>通过mime.json文件（该json文件内部写了很多的文件类型 以键值对的形式存在</li><li><p>那么就需要读取mime.json文件 需要用到fs模块中的readFile方法</p><ol><li>如果使用../data/mime.json’会找不到该json文件 原因是他是基于app.js的路径来读取的 所以应该使用./data/mime.json</li><li>其次 输出readFile里面的data值的时候 直接输出是一个buffer流十六进制 需要将其转换成String 此处使用到data.toString()</li><li>之后 我们的根本目的是通过json数组键值对 获取对应的文件类型 所以还要将得到的String字符串转换成json数组 此处使用到 JSON.parse(STRING)</li><li>接着 将json数组传递给Obj类型变量举例mimeObj 但此时如果直接打印mineObj.extname是无法识别的 因为变量属性名只能通过方括号的形式访问 此处用到 mimeObj[extname]</li><li>然后 因为fs.readFile是异步方法 不能直接获取到值 需要使用promise来封装 此处使用到return new Promise((resolve,reject)=&gt;{     异步函数      })，使用里面的参数resolve输出</li><li>最后 app.js中调用该方法的时候 注意在接收传递来的值之前使用await 并且记得await需要在异步函数中使用 即函数要加async</li></ol></li><li>或者使用fs模块里面的readFileSync方法 同步读取方法</li></ol></li></ol><h1 id="Ejs模板引擎"><a href="#Ejs模板引擎" class="headerlink" title="Ejs模板引擎"></a>Ejs模板引擎</h1><ul><li><p>ejs属于后台模板 可以将数据库和文件读取的数据显示到html页面上，他是一个第三方模块 需要用npm安装</p></li><li><p>npm install ejs —save</p></li><li><p>nodejs中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ejs.renderFile(<span class="string">&#x27;./views/login.ejs&#x27;</span>,&#123;</span><br><span class="line"><span class="attr">msg</span>:msg</span><br><span class="line">传入的数据</span><br><span class="line">&#125;,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">回调内容一般必写响应头和结束响应</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>ejs里面传参的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">假设需要传入msg给h3标签</span><br><span class="line">&lt;h3&gt;&lt;%=msg%&gt;&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">假设需要用到for循环传输一个obj数组到li中</span><br><span class="line">&lt;%for(var i=0;i&lt;obj.length;i++)&#123;%&gt;</span><br><span class="line">&lt;li&gt;&lt;%=obj.属性%&gt;&lt;/li&gt;</span><br><span class="line">&lt;%&#125;%&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Get-Post-Put-Delete"><a href="#Get-Post-Put-Delete" class="headerlink" title="Get Post Put Delete"></a>Get Post Put Delete</h1><ul><li><p>获取get传值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line">vargetData = url.parse(req.url).query;</span><br></pre></td></tr></table></figure></li><li><p>获取post传值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> postData = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">req.on(<span class="string">&#x27;data&#x27;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">postData+=chunk;</span><br><span class="line">&#125;);</span><br><span class="line">req.on(<span class="string">&#x27;end&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">        postData = <span class="built_in">JSON</span>.parse(postData);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        req.query = postData;</span><br><span class="line">        <span class="built_in">console</span>.log(queryString.parse(postData));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>put主要用于修改数据 可以用postman软件模拟</p></li><li><p>delete主要用于删除数据</p></li></ul><h1 id="Express框架"><a href="#Express框架" class="headerlink" title="Express框架"></a>Express框架</h1><ul><li><p>简单来说就是一个路由框架 封装了很多路由方法</p></li><li><p>引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>实例化框架 然后通过app.get / app.post 配置路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.get(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">res.send(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">app.post(<span class="string">&quot;/&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">res.send(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>具体封装的方法 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4定义一个全局变量</span></span><br><span class="line"><span class="keyword">let</span> G = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(&#x27;调用app方法&#x27;);</span></span><br><span class="line">    <span class="keyword">if</span> (G[<span class="string">&#x27;/login&#x27;</span>]) &#123;</span><br><span class="line">        <span class="comment">// console.log(&quot;1&quot;);</span></span><br><span class="line">        <span class="comment">// console.log(G[&#x27;./login&#x27;]);</span></span><br><span class="line">        G[<span class="string">&#x27;/login&#x27;</span>](req, res); <span class="comment">//6执行方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">1现在使用express的方法 并理解其原理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 3注册</span></span><br><span class="line">app.get = <span class="function"><span class="keyword">function</span> (<span class="params">str, cb</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//5注册方法 将回调函数传给str </span></span><br><span class="line">    G[str] = cb;</span><br><span class="line">    <span class="comment">// console.log(str);</span></span><br><span class="line">    <span class="comment">// console.log(cb);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.get(&quot;/login&quot;,(req,res)=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     // res.send(&#x27;hello world&#x27;);</span></span><br><span class="line"><span class="comment">//     console.log(&#x27;执行login方法&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line">app.get(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// res.send(&#x27;hello world&#x27;)</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;执行login方法&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2要想使用这个方法 需要给他绑定方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    app(<span class="string">&#x27;req&#x27;</span>, <span class="string">&#x27;res&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure></li><li><p>支持多级路由配置方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/admin/user/add&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>动态路由 可以获取下一级目录的名字 当匹配到改动态路由的时候，不会再往下继续匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&quot;./article/:id&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">var</span> id = req.param[<span class="string">&quot;id&quot;</span>];</span><br><span class="line">res.end(<span class="string">&quot;动态路由&quot;</span>+id);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>配置路由的时候还需要注意顺序的问题 以静态路由优先 随后配置动态</p></li></ul><h2 id="获取get传值"><a href="#获取get传值" class="headerlink" title="获取get传值"></a>获取get传值</h2><ul><li><p>以前是要通过url模块的url.parse(req,url).query来获取 很麻烦</p></li><li><p>现在可以直接使用req.query</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/product&quot;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> query = req.query;</span><br><span class="line"><span class="built_in">console</span>.log(query);</span><br><span class="line">res.end(<span class="string">&quot;product&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="express中使用ejs"><a href="#express中使用ejs" class="headerlink" title="express中使用ejs"></a>express中使用ejs</h2><ul><li><p>安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install ejs --save</span><br></pre></td></tr></table></figure></li><li><p>配置模板引擎</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.set(<span class="string">&quot;view engine&quot;</span>,<span class="string">&quot;ejs&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>express中已经集成了ejs 所以不用引入</p></li><li><p>默认在views文件夹下面，但也要自己新建一个</p></li><li><p>使用的时候</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.render(<span class="string">&quot;ejs名字&quot;</span>,&#123;传入的数据&#125;);</span><br><span class="line">ejs名字可以不用写后缀</span><br></pre></td></tr></table></figure></li><li><p>绑定数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%=shuju%&gt;</span><br></pre></td></tr></table></figure></li><li><p>输出内容的时候解析其中的 html 标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-&lt;h3&gt;lebpig&lt;/h3&gt;%&gt;</span><br></pre></td></tr></table></figure></li><li><p>条件判断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%语句%&gt;</span><br></pre></td></tr></table></figure></li><li><p>在一个ejs里面引入其他ejs<img src="C:\Users\Zlinni\AppData\Roaming\Typora\typora-user-images\image-20211204160943445.png" alt="image-20211204160943445"></p></li><li><p>ejs后缀修改为html 略</p></li></ul><h2 id="利用express-static托管静态文件"><a href="#利用express-static托管静态文件" class="headerlink" title="利用express.static托管静态文件"></a>利用express.static托管静态文件</h2><ul><li><p>如果你的静态资源存放在多个目录下面 可以多次调用express.static 中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.static(<span class="string">&#x27;public&#x27;</span>));</span><br></pre></td></tr></table></figure></li><li><p>虚拟静态目录 略</p></li></ul><h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>简介</p><ul><li>通俗的讲就是匹配路由之前或者匹配路由完成所做的一系列操作 中间件如果想向下匹配的化 需要些 next()</li></ul><p>express可以使用如下几种中间件</p><ul><li>应用级中间件</li><li>路由级中间件</li><li>错误处理中间件</li><li>内置中间件</li><li>第三方中间件、</li></ul><p>其中讲解部分</p><ul><li><p>内置中间件 之前学的托管静态文件↑</p></li><li><p>应用级别中间件 通常用于权限判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">req,res,next</span>)</span>&#123;</span><br><span class="line"><span class="comment">//操作</span></span><br><span class="line">next(); <span class="comment">//表示完成匹配后这个中间件之后的程序继续向下执行 如果不写 会停止</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>错误处理中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">res.status(<span class="number">404</span>).send(<span class="string">&quot;404&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">当页面没有对应的路由的时候 跳转<span class="number">404</span></span><br></pre></td></tr></table></figure></li><li><p>第三方中间件 获取post传值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>安装body-parser</span><br><span class="line">cnpm install body-parser --save</span><br><span class="line"><span class="number">2.</span>配置</span><br><span class="line"><span class="keyword">const</span> bodyparser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line">app.use(bodyParser.urlencoded(&#123;</span><br><span class="line">    <span class="attr">extended</span>: <span class="literal">false</span></span><br><span class="line">&#125;));</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line"><span class="number">3.</span>使用</span><br><span class="line">app.post(<span class="string">&#x27;/doLogin&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> body = req.body;</span><br><span class="line">    res.writeHead(<span class="number">200</span>,&#123;</span><br><span class="line">        <span class="string">&quot;Content-type&quot;</span>:<span class="string">&quot;text/html;charset=utf-8&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    res.end(<span class="string">&#x27;执行提交&#x27;</span>+body.username);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><ul><li><p>安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install cookie-parser --save</span><br></pre></td></tr></table></figure></li><li><p>配置中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(cookieParser())</span><br></pre></td></tr></table></figure></li><li><p>设置cookie</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">res.cookie(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>,&#123;<span class="attr">maxAge</span>:<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>&#125;)</span><br><span class="line"><span class="comment">//代表获取了username张三 并且存放一小时</span></span><br><span class="line"><span class="comment">//maxAge是最大存放时间</span></span><br><span class="line">res.cookie(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>,&#123;<span class="attr">maxAge</span>:<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>,<span class="attr">path</span>:<span class="string">&quot;/article&quot;</span>&#125;)</span><br><span class="line"><span class="comment">//path代表只有xxx能获取cookie</span></span><br><span class="line">&#123;<span class="attr">domin</span>:<span class="string">&#x27;.itying.com&#x27;</span>&#125;</span><br><span class="line"><span class="comment">//domin可以实现多域共享cookie</span></span><br></pre></td></tr></table></figure></li><li><p>cookie的加密</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置中间件的时候传入加密的参数</span></span><br><span class="line">app.use(cookieParser(<span class="string">&quot;suibianxie&quot;</span>));</span><br><span class="line"><span class="comment">//写他的属性</span></span><br><span class="line">res.cookie(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>,&#123;<span class="attr">maxAge</span>:<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>,<span class="attr">signed</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"><span class="comment">//需要得到他的时候 写</span></span><br><span class="line">req.signedCookies</span><br></pre></td></tr></table></figure></li></ul><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>简介</p><ul><li>session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而session保存在服务器上</li><li>session相比cookie要更加安全，由于session保存到服务器上，所以当访问量增多的时候，会比较占用服务器的性能。单个cookie保存的数据大小不能超过4k，很多浏览器限制一个站点最多保存20个cookie。而session没有这方面的限制。session是基于cookie进行工作的。</li></ul><p>session的工作流程</p><ul><li>当浏览器访问服务器并发送第一次请求的时候，服务器会创建一个session对象，生成类似于key value的键值对，然后将key（cookie）返回到浏览器中，浏览器下次再访问时候，携带key（cookie）找到对应的session</li></ul><p>express-session的使用</p><ul><li><p>安装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install express-session --save</span><br></pre></td></tr></table></figure></li><li><p>引入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>设置官方文档提供的中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.use(session(&#123;</span><br><span class="line"><span class="attr">secret</span>:<span class="string">&#x27;keyboard cat&#x27;</span>, <span class="comment">//服务器端生成session的签名</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;xxx&#x27;</span>, <span class="comment">//修改session对应cookie的名称</span></span><br><span class="line"><span class="attr">resave</span>: <span class="literal">true</span>, <span class="comment">//强制存储session 即使它没有变化 默认是false</span></span><br><span class="line"><span class="attr">saveUninitialized</span>: <span class="literal">true</span>, <span class="comment">//强制将未初始化的session存储</span></span><br><span class="line">    <span class="attr">cookie</span>:&#123;</span><br><span class="line">        <span class="attr">maxAge</span>: <span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span> <span class="comment">//true表示只有https协议才能访问cookie  </span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rolling</span>:<span class="literal">true</span> <span class="comment">//在每次请求时强制设置cookie 将重置cookie过期时间，默认false</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置值 req.session.username = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line">获取值 req.session.username;</span><br></pre></td></tr></table></figure></li></ul><h2 id="负载均衡配置"><a href="#负载均衡配置" class="headerlink" title="负载均衡配置"></a>负载均衡配置</h2><ul><li>分布式架构中session保存到数据库的流程<img src="C:\Users\Zlinni\AppData\Roaming\Typora\typora-user-images\image-20211205160754719.png" alt="image-20211205160754719"></li></ul><p>如何使用</p><ul><li><p>安装express-session 和 connect-mongo模块</p></li><li><p>引入模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> session = <span class="built_in">require</span>(<span class="string">&#x27;express-session&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> MongoStore = <span class="built_in">require</span>(<span class="string">&#x27;connect-mongo&#x27;</span>)(session);</span><br></pre></td></tr></table></figure></li><li><p>配置中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app.use(session(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;xxx&#x27;</span>, <span class="comment">//修改session对应cookie的名称</span></span><br><span class="line"><span class="attr">resave</span>: <span class="literal">true</span>, <span class="comment">//强制存储session 即使它没有变化 默认是false</span></span><br><span class="line"><span class="attr">saveUninitialized</span>: <span class="literal">true</span>, <span class="comment">//强制将未初始化的session存储</span></span><br><span class="line">    <span class="attr">cookie</span>:&#123;</span><br><span class="line">        <span class="attr">maxAge</span>: <span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>,</span><br><span class="line">        <span class="attr">secure</span>: <span class="literal">false</span> <span class="comment">//true表示只有https协议才能访问cookie  </span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rolling</span>:<span class="literal">true</span> <span class="comment">//在每次请求时强制设置cookie 将重置cookie过期时间，默认false</span></span><br><span class="line">    <span class="attr">store</span>: <span class="keyword">new</span> MongoStore(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;mongodb://127.0.0.1:27017/xxx&#x27;</span> <span class="comment">//xx代表地址 可以直接用cmd输入mongo找到mongodb对应的地址</span></span><br><span class="line">    <span class="attr">touchAfter</span>: <span class="number">24</span>*<span class="number">3600</span> <span class="comment">//不管发出了多少次请求 24h内只更新一次session 除非你改变session</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure></li></ul><h2 id="路由模块化"><a href="#路由模块化" class="headerlink" title="路由模块化"></a>路由模块化</h2><p>简介 </p><ul><li>express中允许我们通过express.Router创建模块化的 可挂载的路由处理程序</li></ul><h2 id="应用程序生成器"><a href="#应用程序生成器" class="headerlink" title="应用程序生成器"></a>应用程序生成器</h2><p>简介</p><ul><li>通过应用程序生成器可以快速创建一个应用的股价</li></ul><p>指令</p><ul><li><p>如下</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g express-generator</span><br></pre></td></tr></table></figure></li><li><p>验证安装成功</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express -h</span><br></pre></td></tr></table></figure></li><li><p>生成方法</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express --view=ejs 目录</span><br></pre></td></tr></table></figure></li></ul><h2 id="图片上传Multer"><a href="#图片上传Multer" class="headerlink" title="图片上传Multer"></a>图片上传Multer</h2><p>简介</p><ul><li>是nodejs一个中间件，用于处理multpart/form-data类型的表单数据，主要用于上传文件</li><li>注意它不会处理除了上述数据类型的数据</li><li>一般上传图片识别不了 所以需要用到它</li></ul><p>安装</p><ul><li><p>指令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save multer</span><br></pre></td></tr></table></figure></li><li><p>引入模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">&#x27;multer&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> upload = multer(&#123;<span class="attr">dest</span>:<span class="string">&#x27;static/upload&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">//上传目录 一定要存在</span></span><br></pre></td></tr></table></figure></li><li><p>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">&quot;/doAdd&quot;</span>,upload.single(<span class="string">&quot;pic&quot;</span>),<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line"> xxx</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//此处pic是对应的表单的name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//并且form表单要设置类型</span></span><br><span class="line">&lt;form enctype=<span class="string">&#x27;multpart/form-data&#x27;</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="MongoDb数据库"><a href="#MongoDb数据库" class="headerlink" title="MongoDb数据库"></a>MongoDb数据库</h1><h2 id="NoSql介绍"><a href="#NoSql介绍" class="headerlink" title="NoSql介绍"></a>NoSql介绍</h2><ul><li><p>是not only sql的意思 指的是非关系型数据库 是以key-value形式存储的数据库 键值对</p></li><li><p>解决大数据查询问题</p></li><li><p>和传统数据库的简单对比</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">非结构型数据库 没有行列的概念 用json来存储数据，集合相当于“表” 文档相当于“行”</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>图例<img src="C:\Users\Zlinni\AppData\Roaming\Typora\typora-user-images\image-20211203141522995.png" alt="image-20211203141522995"></p></li></ul><h2 id="MongoDb介绍"><a href="#MongoDb介绍" class="headerlink" title="MongoDb介绍"></a>MongoDb介绍</h2><ul><li>是介于关系型数据库和非关系型数据库之间的产品 他 的查询语言非常强大，几乎可以实现类似于关系型数据库表单查询的大多数功能</li><li>特点是高性能 易部署 易使用 存储非常方便</li><li>安装略</li><li>注意配置环境变量</li><li>cmd输入mongo可以开启</li></ul><h2 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h2><ul><li><p>创建数据库 已经创建则切换到这个数据库，如果想要创建成功需要插入一条数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use xxx</span><br><span class="line">db.user.insert(&#123;&quot;name&quot;:&quot;leb&quot;&#125;);</span><br></pre></td></tr></table></figure></li><li><p>查看数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure></li><li><p>插入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.insert(&#123;&quot;name&quot;:&quot;leb&quot;&#125;);</span><br></pre></td></tr></table></figure></li><li><p>删除集合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.drop();</span><br></pre></td></tr></table></figure></li><li><p>删除数据库 需切换到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropDatabase();</span><br></pre></td></tr></table></figure></li><li><p>查找数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find();</span><br></pre></td></tr></table></figure></li><li><p>查找去掉当前聚集集合中的某列的重复数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.distinct(&quot;xxx&quot;);</span><br></pre></td></tr></table></figure></li><li><p>查询age =22 的记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;age:22&#125;);</span><br></pre></td></tr></table></figure></li><li><p>大于22 小于22 大于等于 小于等于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;age:&#123;$gt:22&#125;&#125;);</span><br><span class="line">db.user.find(&#123;age:&#123;$lt:22&#125;&#125;);</span><br><span class="line">db.user.find(&#123;age:&#123;$gte:22&#125;&#125;);</span><br><span class="line">db.user.find(&#123;age:&#123;$lte:22&#125;&#125;);</span><br></pre></td></tr></table></figure></li><li><p>大于22小于26</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;age:&#123;$gt:22,$lt:26&#125;&#125;);</span><br></pre></td></tr></table></figure></li><li><p>查询name中包含mongo的数据 模糊查询用于搜索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;name:/mongo/&#125;);</span><br></pre></td></tr></table></figure></li><li><p>查询指定列name age数据,age&gt;25</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;age:&#123;$gt:25&#125;&#125;,&#123;name:1,age:1&#125;)</span><br><span class="line">相当于</span><br><span class="line">select name,age from user where age&gt;25</span><br></pre></td></tr></table></figure></li><li><p>按照年龄升序 降序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">升序</span><br><span class="line">db.user.find().sort(&#123;age:1&#125;);</span><br><span class="line">降序</span><br><span class="line">db.user.find().sort(&#123;age:-1&#125;);</span><br></pre></td></tr></table></figure></li><li><p>查询前五条数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find().limit(5);</span><br></pre></td></tr></table></figure></li><li><p>查询十条以后的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find().skip(10);</span><br></pre></td></tr></table></figure></li><li><p>修改数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.student.update(&#123;&quot;name&quot;:&quot;小明&quot; &#125;)</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.collectionsNames.remove(&#123;&quot;borough&quot;:&quot;xxzxc&quot;&#125;)</span><br><span class="line">db.users.remove(&#123;age:132&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="索引基础"><a href="#索引基础" class="headerlink" title="索引基础"></a>索引基础</h2><ul><li><p>创建索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.ensureIndex(&#123;&quot;username&quot;:1&#125;)</span><br></pre></td></tr></table></figure></li><li><p>获取当前集合的索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.getIndexes()</span><br></pre></td></tr></table></figure></li><li><p>删除索引的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.dropIndex(&#123;&quot;username&quot;:1&#125;)</span><br></pre></td></tr></table></figure></li></ul><h1 id="Nodejs操作Mongodb"><a href="#Nodejs操作Mongodb" class="headerlink" title="Nodejs操作Mongodb"></a>Nodejs操作Mongodb</h1><ul><li><p>安装指令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongodb --save</span><br></pre></td></tr></table></figure></li><li><p>连接数据库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入mongodb</span></span><br><span class="line"><span class="keyword">const</span> &#123;MongoClient&#125; = <span class="built_in">require</span>(<span class="string">&#x27;mongodb&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数据库连接地址</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;mongodb://127.0.0.1:27017&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义要操作的数据库</span></span><br><span class="line"><span class="keyword">const</span> dbName = <span class="string">&#x27;itying&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化MongoClient 传入数据库连接地址</span></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> MongoClient(url,&#123;<span class="attr">useUnifiedTopology</span>:<span class="literal">true</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line">client.connect(<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;sjk connect successful&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> db = client.db(dbName);<span class="comment">//切换到这个数据库</span></span><br><span class="line">        client.close();<span class="comment">//关闭数据库</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>查找数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.collection(<span class="string">&quot;user&quot;</span>).find(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;leb&quot;</span>&#125;).toArray(<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(data);</span><br><span class="line">            client.close();<span class="comment">//关闭数据库</span></span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></li><li><p>增加数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.collection(<span class="string">&quot;user&quot;</span>).insertOne(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zzl&quot;</span>&#125;,<span class="function">(<span class="params">err,result</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(err);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;add successful&#x27;</span>)</span><br><span class="line">                <span class="built_in">console</span>.log(result);</span><br><span class="line">                client.close();<span class="comment">//关闭数据库</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></li><li><p>修改数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.collection(<span class="string">&quot;user&quot;</span>).updateOne(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;leb&quot;</span>&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;lebpig&quot;</span>&#125;&#125;,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;modify successful&#x27;</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(data);</span><br><span class="line">                client.close();<span class="comment">//关闭数据库</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.collection(<span class="string">&quot;user&quot;</span>).deleteOne(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zzl&quot;</span>&#125;,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">           <span class="keyword">if</span>(err)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&#x27;delete successful&#x27;</span>);</span><br><span class="line">               <span class="built_in">console</span>.log(data);</span><br><span class="line">               client.close();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> nodejs </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/posts/d7ed1be8a814/"/>
      <url>/posts/d7ed1be8a814/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="tip cogs"><p>本文用于介绍ajax的基本使用 参考学习地址<a href="https://www.bilibili.com/video/BV1WC4y1b78y?p=1">【尚硅谷】3小时Ajax入门到精通</a></p></div><h1 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><ul><li>ajax全称asynchronous JavaScript and XML 异步的JavaScript和xml</li><li>是一种无需在加载整个网页的情况下能够更新部分网页的技术</li><li>ajax不是一种新的编程语言 而是一种用于创建更好更快以及交互性更强的web应用程序的技术</li><li>eg 当你在谷歌的搜索框输入关键字的时候 js会把这些字符串发送到服务器然后服务器会返回一个搜索建议的列表 like国内百度</li><li>核心：ajax的核心是XMLHttpRequest对象，XHR为服务器发送请求和解析服务器响应提供了接口，能够用异步的方式从服务器获取新的数据</li><li>通过jquery ajax方法 可以使用httpget和httppost从远程服务器上面请求文本 html xml 或者json 同时还能将这些外部数据直接载入网页的被选元素中 </li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="Http协议的请求报文和响应报文"><a href="#Http协议的请求报文和响应报文" class="headerlink" title="Http协议的请求报文和响应报文"></a>Http协议的请求报文和响应报文</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">请求报文</button></li><li class="tab"><button type="button" data-href="#test-2">响应报文</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>重点是格式与参数<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">行 POST /s?ie=utf-8 HTTP/1.1</span><br><span class="line">头 Host: atguigu.com</span><br><span class="line">   Cookie: name = guigu</span><br><span class="line">   Content-type: application/x-www-form-urlencoded</span><br><span class="line">   User-Agent: chrome 83</span><br><span class="line">空行</span><br><span class="line">体 username = admin&amp;password=admin</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">行 HTTP/1.1 200 OK</span><br><span class="line">头 Content-type: text/html;charset=utf-8</span><br><span class="line">   Content-length: 2048</span><br><span class="line">   Content-encoding: gzip</span><br><span class="line">空行</span><br><span class="line">体&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;aaaa&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">服务端js</button></li><li class="tab"><button type="button" data-href="#test-2">前端网页</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.setHeader(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    res.send(<span class="string">&#x27;hello ajax&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(port, <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Example app listening on port <span class="subst">$&#123;port&#125;</span>!`</span>))</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#result</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">199.9988px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100.0012px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: solid <span class="number">1.0012px</span> black;</span></span><br><span class="line"><span class="css">        &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>点击发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> btn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> result = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;result&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        btn.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 创建对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 做初始化 第一个是请求方法 第二个是请求url</span></span></span><br><span class="line"><span class="javascript">            xhr.open(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://127.0.0.1:3000/server&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 发送</span></span></span><br><span class="line"><span class="javascript">            xhr.send();</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 事件绑定 处理服务端返回的结果</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// on when 当...的时候</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// readystate 是xhr对象中的属性 表示状态0 1 2 3 4 </span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 0 是未初始化 1 是open方法执行完毕 2 是send方法执行完毕 3 表示服务端返回的部分结果 4服务端返回的所有结果</span></span></span><br><span class="line"><span class="javascript">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(xhr.readyState===<span class="number">4</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 判断响应码</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(xhr.status&gt;=<span class="number">200</span>&amp;&amp;xhr.status&lt;<span class="number">300</span>)&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 处理结果 行 头 空行 体</span></span></span><br><span class="line"><span class="javascript"><span class="comment">/*                         // 响应行</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                        console.log(xhr.status);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                        // 响应字符串</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                        console.log(xhr.statusText);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                        // 所有的响应头</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                        console.log(xhr.getAllResponseHeaders);</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                        // 响应体</span></span></span><br><span class="line"><span class="comment"><span class="javascript">                        console.log(xhr.response); */</span></span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 处理数据</span></span></span><br><span class="line"><span class="javascript">                        result.innerText = xhr.response; </span></span><br><span class="line"><span class="javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                         </span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;               </span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;)</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="get方式设置请求体"><a href="#get方式设置请求体" class="headerlink" title="get方式设置请求体"></a>get方式设置请求体</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><p>下面是get的方式<br>在url后面加<code>?key1=value1&amp;key2=value2</code><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220108145415.png" alt=""><br>控制台查看<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220108145521.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="发送post请求"><a href="#发送post请求" class="headerlink" title="发送post请求"></a>发送post请求</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><p>下面这个方法的请求方式换成<code>post</code><br><code>xhr.open(&#39;POST&#39;,&#39;http://127.0.0.1:3000/server&#39;);</code><br>然后在服务端也换成post接收<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">&#x27;/server&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.setHeader(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    res.send(<span class="string">&#x27;hello ajax post&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="post方式设置请求体"><a href="#post方式设置请求体" class="headerlink" title="post方式设置请求体"></a>post方式设置请求体</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><p>在send方法里面设置<br><code>xhr.send(&#39;a=200&amp;b=300&#39;);</code><br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220108150329.png" alt=""><br>可以设置任意类型的数据 只要你的服务端能够处理就可以</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="设置请求头信息"><a href="#设置请求头信息" class="headerlink" title="设置请求头信息"></a>设置请求头信息</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xhr.setRequestHeader(&#x27;Content-type&#x27;, &#x27;application/x-www-form-urlencoded&#x27;);</span><br><span class="line">/*Content-type 用来设置请求体内容的类型 </span><br><span class="line">后边那一长串是参数查询字符串的类型 是固定的写法*/</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="服务端响应json数据"><a href="#服务端响应json数据" class="headerlink" title="服务端响应json数据"></a>服务端响应json数据</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><p>服务端把对象转换成json 根据请求发送到前端<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app.all(<span class="string">&#x27;/json-server&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置响应头 设置允许跨域</span></span><br><span class="line">    res.setHeader(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">// 响应头</span></span><br><span class="line">    res.setHeader(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="comment">// 响应一个数据</span></span><br><span class="line">    <span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;lalalalla&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="built_in">JSON</span>.stringify(data);</span><br><span class="line">    <span class="comment">// 设置响应体</span></span><br><span class="line">    res.send(str);</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>前端 对数据进行处理 手动对数据进行转换<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 处理数据</span><br><span class="line">// 手动对数据进行转换</span><br><span class="line">console.log(xhr.response);</span><br><span class="line">let data = JSON.parse(xhr.response);</span><br><span class="line">result.innerText = data.name; </span><br></pre></td></tr></table></figure><br>自动转换<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//响应json数据 相当于parse了</span><br><span class="line">xhr.responseType = &#x27;json&#x27;;</span><br><span class="line">...</span><br><span class="line">// 自动</span><br><span class="line">result.innerText = xhr.response.name;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="超时设置-网络异常设置"><a href="#超时设置-网络异常设置" class="headerlink" title="超时设置 网络异常设置"></a>超时设置 网络异常设置</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><p>服务端模拟超时<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/timeout-server&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置响应头允许跨域 设置响应头 发送数据</span></span><br><span class="line">    res.setHeader(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    res.setHeader(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        res.send(<span class="string">&#x27;啦啦啦啦&#x27;</span>); </span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br>前端超时设置 超时回调<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const xhr = new XMLHttpRequest();</span><br><span class="line">          // 超时设置</span><br><span class="line">          xhr.timeout = 2000;</span><br><span class="line">          // 超时回调</span><br><span class="line">          xhr.ontimeout = function () &#123;</span><br><span class="line">              alert(&#x27;网络异常 请稍后重试&#x27;)</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><br>超时之后的东西不会显示</p><p>chrome浏览器模拟网络异常<br><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220108180823.png" alt=""></p><p>前端网络异常回调<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 网络异常回调</span><br><span class="line">xhr.onerror = function()&#123;</span><br><span class="line">    alert(&#x27;你的网络似乎出了点问题&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test-1">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test-1"><p>主要是利用let定义xhr这部比较关键 用const的话地址是无法改变的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击发送请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点击取消请求<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> result = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;result&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> xhr = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">    btn[<span class="number">0</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 四步走 创建对象 打开url 发送请求体 事件绑定并处理服务端返回的结果</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 事件绑定两步走 判断状态 判断响应码</span></span></span><br><span class="line"><span class="javascript">        xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">        xhr.open(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:3000/timeout-server&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        xhr.send();</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">    btn[<span class="number">1</span>].addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        xhr.abort();</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="同源策略和跨域解决方案jsonp"><a href="#同源策略和跨域解决方案jsonp" class="headerlink" title="同源策略和跨域解决方案jsonp"></a>同源策略和跨域解决方案jsonp</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>同源策略是指相同地址之间发送请求和接收请求 比如a.com向a.com发送请求<br>跨域就是违背了同源策略的情况</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>跨域的解决方案jsonp<br>利用了html中某些标签本身自带的跨域功能 比如<code>&lt;script&gt;</code>标签<br>使用方法则是</p><ol><li>将需要跨域的资源写在独立的js里面</li><li>通过script标签引入或者动态创建script标签插入body</li><li>将script标签的src设置为对应的地址</li><li>注意结果需要返回js代码</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1 id="跨域问题的解决方案2-CORS"><a href="#跨域问题的解决方案2-CORS" class="headerlink" title="跨域问题的解决方案2 CORS"></a>跨域问题的解决方案2 CORS</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">主要介绍</button></li><li class="tab"><button type="button" data-href="#test-2">基本语法</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><img src="https://cdn.jsdelivr.net/gh/Zlinni/Pic/img/20220108190325.png" alt=""></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.setHeader(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">res.setHeader(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>,<span class="string">&#x27;*&#x27;</span>);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Echarts</title>
      <link href="/posts/2d6e53cb4ffb/"/>
      <url>/posts/2d6e53cb4ffb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><p>是基于js实现的开源可视化库，可以定制多种多样的个性化图表</p></li><li><p>官网地址</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://echarts.apache.org/zh/index.html</span><br></pre></td></tr></table></figure></li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ul><li>使用五部曲<img src="image-20211121093831494.png" alt="image-20211121093831494"></li><li>官网下载可以直接点击github下载 找到echarts.min.js点击之后右上方row点击进行copy</li><li>导入js</li><li>初始化一个dom容器 使其具备类名或者id并设置宽高</li><li>找到相应的案例 复制其中的option 并声明他</li><li>将option分配给echarts实例对象</li></ul><h2 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h2><ul><li>见官方文档</li></ul><h2 id="适配方案分析"><a href="#适配方案分析" class="headerlink" title="适配方案分析"></a>适配方案分析</h2><ul><li><p>总方案一图流<img src="image-20211121094229851.png" alt="image-20211121094229851"></p></li><li><p>为了实现浏览器内容自适应 首先使用flexible.js进行浏览器宽度的检测并修改其中的html文字大小</p></li><li>再配合cssrem插件 页面元素会根据rem适配大小</li><li>最后 再使用flex布局 将页面进行快速布局</li></ul><h2 id="flexible-js和cssrem插件"><a href="#flexible-js和cssrem插件" class="headerlink" title="flexible.js和cssrem插件"></a>flexible.js和cssrem插件</h2><ul><li><p>首先要确定屏幕需要用flexible分成多少份，份数越多越精细</p></li><li><p>其次要看pc端给的效果图宽度是多少</p></li><li><p>举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">假如要用flexiblejs把屏幕分成<span class="number">24</span>份</span><br><span class="line">其中pc端效果图是1920px</span><br><span class="line">那么cssrem插件的基准值就要设置为<span class="number">1920</span>/<span class="number">24</span>=80px</span><br><span class="line">且记得重启vscode使其生效</span><br></pre></td></tr></table></figure></li><li><p>并且 如果对最大最小宽度有所要求 那么设置可以参考如下<img src="image-20211121102128005.png" alt="image-20211121102128005"></p></li></ul><h2 id="边框图片"><a href="#边框图片" class="headerlink" title="边框图片"></a>边框图片</h2><ul><li><p>边框图片运用在特殊的使用场景 盒子样式不同但边框相同</p></li><li><p>边框图片的切图原理：把四个角切出去（九宫格）的由来，中间部分可以铺排拉伸或者环绕<img src="image-20211121144014486.png" alt="image-20211121144014486"></p></li><li><p>边框图片的几个语法<img src="image-20211121144125322.png" alt="image-20211121144125322"></p></li><li><p>边框图片的几个效果<img src="image-20211121144206836.png" alt="image-20211121144206836"></p></li><li><p>边框图片实操举例</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">现在有已经得到切割完数值的上右下左分别为<span class="number">51</span> <span class="number">38</span> <span class="number">20</span> <span class="number">132</span>的边框图片</span><br><span class="line">第一步定义<span class="attribute">border</span>大小</span><br><span class="line"><span class="attribute">border</span>:<span class="number">15px</span> solid red</span><br><span class="line">第二部书写边框宽度 注意是边框宽度而不是边框图片宽度</span><br><span class="line">border-width: <span class="number">51px</span> <span class="number">38px</span> <span class="number">20px</span> <span class="number">132px</span></span><br><span class="line">第三步指定边框图片</span><br><span class="line">border-image-source:<span class="built_in">url</span>(<span class="string">&#x27;imagesrc&#x27;</span>)</span><br><span class="line">第四步切割边框图片 注意不带单位</span><br><span class="line">border-image-slice:<span class="number">51</span> <span class="number">38</span> <span class="number">20</span> <span class="number">132</span></span><br></pre></td></tr></table></figure></li><li><p>由于边框图片已经裁剪的原因 内容盒子出现的位置会在九宫格中心黄色部分<img src="image-20211121153829064.png" alt="image-20211121153829064"></p></li><li><p>解决办法 将子盒子进行定位，调整四个方向的值拉伸盒子</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.panel</span> &#123; </span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">15px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-image-source</span>: url(<span class="string">&#x27;../images/border.png&#x27;</span>);</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">0.6375rem</span> <span class="number">0.475rem</span> <span class="number">0.25rem</span> <span class="number">1.65rem</span>;</span><br><span class="line">    <span class="attribute">border-image-slice</span>: <span class="number">51</span> <span class="number">38</span> <span class="number">20</span> <span class="number">132</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0.25rem</span>;</span><br><span class="line">    <span class="selector-class">.inner</span>&#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: -<span class="number">0.6375rem</span>;</span><br><span class="line">        <span class="attribute">left</span>: -<span class="number">1.65rem</span>;</span><br><span class="line">        <span class="attribute">right</span>: -<span class="number">0.475rem</span>;</span><br><span class="line">        <span class="attribute">bottom</span>: -<span class="number">0.25rem</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0.3rem</span> <span class="number">0.45rem</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery</title>
      <link href="/posts/5e431dbde90b/"/>
      <url>/posts/5e431dbde90b/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="jQuery概述"><a href="#jQuery概述" class="headerlink" title="jQuery概述"></a>jQuery概述</h1><ul><li>jQuery是一个js库，封装了很多方法和函数</li><li>j是JavaScript；Query是查询，意思是查询js，把js中的dom做封装可以快速使用里面的功能</li></ul><h1 id="jQuery的基本使用"><a href="#jQuery的基本使用" class="headerlink" title="jQuery的基本使用"></a>jQuery的基本使用</h1><h2 id="jQuery的入口函数"><a href="#jQuery的入口函数" class="headerlink" title="jQuery的入口函数"></a>jQuery的入口函数</h2><ul><li><p>基本语法$(‘xxx’).xxx</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).hide();</span><br></pre></td></tr></table></figure></li><li><p>页面执行代码的顺序DOM→js，两种方法解决</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">会等待页面DOM加载完之后在执行js</span><br><span class="line">第一种</span><br><span class="line">$(<span class="built_in">document</span>).reday(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    xxx;</span><br><span class="line">&#125;) </span><br><span class="line">第二种</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  xxx;   </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="jQuery的顶级对象"><a href="#jQuery的顶级对象" class="headerlink" title="jQuery的顶级对象"></a>jQuery的顶级对象</h2><ul><li>$是jQuery的顶级对象</li><li>可以代表jQuery 简而言之写的时候两者可以互换</li></ul><h2 id="jQuery对象和DOM对象"><a href="#jQuery对象和DOM对象" class="headerlink" title="jQuery对象和DOM对象"></a>jQuery对象和DOM对象</h2><ul><li><p>用原生js获取过来的对象叫做dom对象，dom对象只能使用原生的js方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsduixiang = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;div&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>用jQuery方法获取过来的对象是jQuery对象，本质是通过$把dom元素进行了包装，且也只能使用jQuery方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>dom对象转换成jQuery对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">直接调用</span><br><span class="line">$(dom对象)</span><br><span class="line">$(<span class="string">&#x27;video&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>jQuery对象转换成dom对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">方法<span class="number">1</span> $(xxx)[index]</span><br><span class="line">原因是他是伪数组</span><br><span class="line">$(<span class="string">&#x27;video&#x27;</span>)[<span class="number">0</span>].play()</span><br><span class="line">方法<span class="number">2</span> $(xxx).get(<span class="number">0</span>).play()</span><br></pre></td></tr></table></figure></li></ul><h1 id="jQuery-常用API"><a href="#jQuery-常用API" class="headerlink" title="jQuery 常用API"></a>jQuery 常用API</h1><h2 id="jQuery基础选择器"><a href="#jQuery基础选择器" class="headerlink" title="jQuery基础选择器"></a>jQuery基础选择器</h2><ul><li><p>获取标准 $(‘选择器’) 里面选择器直接写css选择器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">id选择器 $(<span class="string">&quot;#id&quot;</span>)</span><br><span class="line">全选择器 $(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">类选择器 $(<span class="string">&quot;.class&quot;</span>)</span><br><span class="line">标签选择器 $(<span class="string">&quot;div&quot;</span>)</span><br><span class="line">并集选择器 $(<span class="string">&quot;div,p,li&quot;</span>)</span><br><span class="line">交集选择器 $(<span class="string">&quot;li.current&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="jQuery层级选择器"><a href="#jQuery层级选择器" class="headerlink" title="jQuery层级选择器"></a>jQuery层级选择器</h2><ul><li><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">子代选择器 $(<span class="string">&quot;ul&gt;li&quot;</span>)</span><br><span class="line">后代选择器 $(<span class="string">&quot;ul li&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="jQuery设置样式"><a href="#jQuery设置样式" class="headerlink" title="jQuery设置样式"></a>jQuery设置样式</h2><ul><li><p>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;div&#x27;</span>).css(<span class="string">&#x27;属性&#x27;</span>,<span class="string">&#x27;值&#x27;</span>)</span><br><span class="line">$(<span class="string">&#x27;div&#x27;</span>).css(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="隐式迭代"><a href="#隐式迭代" class="headerlink" title="隐式迭代"></a>隐式迭代</h2><ul><li>遍历内部的DOM元素的过程叫做隐式迭代</li></ul><h2 id="jQuery筛选选择器"><a href="#jQuery筛选选择器" class="headerlink" title="jQuery筛选选择器"></a>jQuery筛选选择器</h2><ul><li><p>例子</p><p>| 语法       | 用法          | 描述                                           |<br>| ————— | ——————- | ——————————————————————— |<br>| :first     | $(‘li:first’) | 获取第一个li元素                               |<br>| :last      | $(‘li:last’)  | 获取最后一个li元素                             |<br>| :eq(index) | $(‘li:eq(2)’) | 获取到的li元素中选择引号为2的元素，索引从0开始 |<br>| :odd       | $(‘li:odd’)   | 获取到索引号为奇数的元素                       |<br>| :even      | $(‘li:even’)  | 获取到索引号为偶数的元素                       |</p></li><li><p>注意 其中的：first是获取第一个xx元素 而不是yy元素下面第一个xx元素</p></li></ul><h2 id="jQuery筛选方法"><a href="#jQuery筛选方法" class="headerlink" title="jQuery筛选方法"></a>jQuery筛选方法</h2><ul><li><p>例子</p><p>| 语法               | 用法                                                   | 说明                                              |<br>| ————————— | ——————————————————————————— | ————————————————————————- |<br>| parent()           | $(“li”).parent()                                       | 查找父级                                          |<br>| children(selector) | $(“ul”).children(“li”) |相当于$(“ul&gt;li”)最近一级亲儿子 |                                                   |<br>| find(selector)     | $(“ul”).find(“li”)    |相当于$(“ul li”) 后代选择器     |                                                   |<br>| siblings(selector) | $(“.first”).siblings(“li”)                             | 查找兄弟节点不包括自己本身                        |<br>| nextAll([expr])    | $(“.first”).nextAll()                                  | 查找当前元素之后的所有同辈元素                    |<br>| prevAll([expr])    | $(“.last”).prevAll()                                   | 查找当前元素之前的所有同辈元素                    |<br>| hasClass(class)    | $(“div”).hasClass(“protected”)                         | 检查当前元素是否有某个特定的类名 如果有则返回true |<br>| eq(index)          | $(“li”).eq(2) | 相当于$(“li:eq(2)”) index从0开始       |                                                   |</p></li></ul><h2 id="jQuery排他思想"><a href="#jQuery排他思想" class="headerlink" title="jQuery排他思想"></a>jQuery排他思想</h2><ul><li>通过隐式迭代的方式省去循环遍历以及循环绑定事件</li><li>例子<img src = image-20211112170315535.png></li><li>案例淘宝服饰精品 点击哪个 哪个显示 其余的不显示<img src = image-20211112200614264.png></li><li>代码<img src = image-20211112200649688.png></li></ul><h2 id="链式编程"><a href="#链式编程" class="headerlink" title="链式编程"></a>链式编程</h2><ul><li><p>为了方便写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现功能：点击其中一个按钮，点中的按钮变色，其他不变</span></span><br><span class="line">      <span class="comment">// 隐式迭代</span></span><br><span class="line">      <span class="comment">// 新增链式编程 </span></span><br><span class="line">      $(<span class="string">&#x27;button&#x27;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;            $(<span class="built_in">this</span>).css(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>).siblings().css(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="jQuery修改css样式方法"><a href="#jQuery修改css样式方法" class="headerlink" title="jQuery修改css样式方法"></a>jQuery修改css样式方法</h2><ul><li><p>参数只写属性名字则返回属性值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>).css(<span class="string">&quot;color&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p>参数的值如果是数字可以不用加引号</p></li><li><p>参数可以是对象形式 采用中括号的方法 方便设置多组样式 使用的时候属性名和属性值要用引号隔开，且属性名可以不用加引号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">方式一</span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).css(&#123;<span class="attr">width</span>:<span class="number">100</span>,<span class="attr">height</span>:<span class="number">100</span>,<span class="attr">background</span>:<span class="string">&quot;pink&quot;</span>&#125;);</span><br><span class="line">方式二</span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).css(&#123;</span><br><span class="line"><span class="attr">width</span>:<span class="number">200</span>,</span><br><span class="line"><span class="attr">height</span>:<span class="number">500</span>,</span><br><span class="line"><span class="attr">backgroundColor</span>:<span class="string">&quot;blue&quot;</span></span><br><span class="line">注意如果是复合属性参考原生js采用驼峰命名法，而且此时的属性值记得双引号</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="设置类样式"><a href="#设置类样式" class="headerlink" title="设置类样式"></a>设置类样式</h2><ul><li><p>方法作用等同于以前的classList ，可以用来操作类样式，注意里面的参数不要加点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>添加类</span><br><span class="line">$(<span class="built_in">this</span>).addClass(<span class="string">&quot;current&quot;</span>)</span><br><span class="line"><span class="number">2.</span>移除类</span><br><span class="line">$(<span class="built_in">this</span>).removeClass(<span class="string">&quot;current&quot;</span>)</span><br><span class="line"><span class="number">3.</span>切换类</span><br><span class="line">$(<span class="built_in">this</span>).toggleClass(<span class="string">&quot;current&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>add和remove都是在原先的基础上追加/删除</p></li></ul><h2 id="动画方法"><a href="#动画方法" class="headerlink" title="动画方法"></a>动画方法</h2><ul><li><p>show() hide() toggle()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.点击缓慢显示</span></span><br><span class="line">       $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           $(<span class="string">&quot;div&quot;</span>).show(<span class="number">1000</span>);</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="comment">//2.点击缓慢隐藏</span></span><br><span class="line">       $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           $(<span class="string">&quot;div&quot;</span>).hide(<span class="number">1000</span>);</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="comment">//3.点击缓慢切换</span></span><br><span class="line">       $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           $(<span class="string">&quot;div&quot;</span>).toggle(<span class="number">1000</span>);</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure></li><li><p>slideUp() slideDown() slideToggle()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//4.上拉</span></span><br><span class="line">      $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">3</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          $(<span class="string">&quot;div&quot;</span>).slideUp(<span class="number">1000</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">//5.下拉</span></span><br><span class="line">      $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">4</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          $(<span class="string">&quot;div&quot;</span>).slideDown(<span class="number">1000</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">     <span class="comment">//  6.切换拉</span></span><br><span class="line">     $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">5</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          $(<span class="string">&quot;div&quot;</span>).slideToggle(<span class="number">1000</span>);</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure></li><li><p>mouseover鼠标经过 mouseout鼠标离开</p></li><li><p>事件切换hover(function(){},function(){}) 两个function相当于mouseover和mouseout，如果只写一个函数则鼠标经过和离开都会触发这个函数</p></li><li><p>淡入淡出效果fadeIn fadeOut fadeToggle </p></li><li><p>变化到透明度fadeTo 注意写透明度 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              $(<span class="string">&quot;div&quot;</span>).fadeIn(<span class="number">1000</span>);</span><br><span class="line">          &#125;)</span><br><span class="line">          $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              $(<span class="string">&quot;div&quot;</span>).fadeOut(<span class="number">1000</span>);</span><br><span class="line">          &#125;)</span><br><span class="line">          $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">              $(<span class="string">&quot;div&quot;</span>).fadeToggle(<span class="number">1000</span>);</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure></li><li><p>高亮显示案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> <span class="title">gaoliang</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;.container div&quot;</span>).hover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            $(<span class="built_in">this</span>).siblings().stop().fadeTo(<span class="number">1000</span>,<span class="number">0.5</span>);</span><br><span class="line">        &#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            $(<span class="built_in">this</span>).siblings().stop().fadeTo(<span class="number">1000</span>,<span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="动画停止"><a href="#动画停止" class="headerlink" title="动画停止"></a>动画停止</h2><ul><li><p>动画效果一旦触发就会执行 但如果多次触发就会造成多个动画或者效果排队执行</p></li><li><p>停止排队的方法stop() 需要写在动画或者效果前面 这样的话相当于停止上一次动画 就不会造成资源上的浪费</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">this</span>).stop().slideToggle(<span class="number">1000</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="animate使用"><a href="#animate使用" class="headerlink" title="animate使用"></a>animate使用</h2><ul><li><p>animate({属性名,属性值},时间)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       $(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           $(<span class="string">&quot;div&quot;</span>).animate(&#123;</span><br><span class="line">               <span class="attr">left</span>:<span class="number">500</span>,</span><br><span class="line">               <span class="attr">top</span>:<span class="number">500</span>,</span><br><span class="line">               <span class="attr">opacity</span>:<span class="number">.4</span></span><br><span class="line">           &#125;,<span class="number">500</span>)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="获取元素属性值"><a href="#获取元素属性值" class="headerlink" title="获取元素属性值"></a>获取元素属性值</h2><ul><li><p>获取元素固有属性prop()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取a的固有属性值</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;a&quot;</span>).prop(<span class="string">&quot;href&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p>给元素的固有属性赋值prop(“属性名”,”属性值”)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;a&quot;</span>).prop(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;bbb&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>获取元素的自定义属性attr()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>).attr(<span class="string">&quot;index&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p>给元素的自定义属性赋值(“属性名”,”属性值”)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).attr(<span class="string">&quot;index&quot;</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure></li><li><p>数据缓存data()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">假设有</span><br><span class="line">&lt;span&gt;<span class="number">111</span>&lt;/span&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-index</span>=<span class="string">&quot;1&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;span&quot;</span>).data(<span class="string">&quot;bianliang&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;span&quot;</span>).data(<span class="string">&quot;bianliang&quot;</span>));</span><br><span class="line">则打印出aaa</span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>).data(<span class="string">&quot;index&quot;</span>));</span><br><span class="line">则打印出<span class="number">1</span></span><br><span class="line"></span><br><span class="line">data()方法可以缓存数据 但dom里面不会显示出来</span><br><span class="line">data()方法可以直接读取h5的属性 并且参数不用写成data- 读出来的变量也是数字型</span><br></pre></td></tr></table></figure></li><li><p>案例全选按钮</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">点击全选按钮 其他三个按钮的状态随之变化</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;&quot;</span> id=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;selectAll&quot;</span>&gt;全选</span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;&quot;</span> id=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;j-check&quot;</span>&gt;商品<span class="number">1</span></span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;&quot;</span> id=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;j-check&quot;</span>&gt;商品<span class="number">2</span></span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;&quot;</span> id=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;j-check&quot;</span> &gt;商品<span class="number">3</span></span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> name=<span class="string">&quot;&quot;</span> id=<span class="string">&quot;&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;selectAll&quot;</span>&gt;全选</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    要想获取checked属性 必须伴随着按钮状态的变化</span><br><span class="line">$(<span class="string">&quot;.selectAll&quot;</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        利用并集选择器将其他的selectAll也给绑定上</span><br><span class="line">        $(<span class="string">&quot;j-checked, .selectAll&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>,$(<span class="built_in">this</span>).prop(<span class="string">&quot;checked&quot;</span>));</span><br><span class="line">    &#125;)</span><br><span class="line">    情况<span class="number">2</span> 如果此时除了全选框之外的复选框都被勾上，全选框也应该变化成为勾上</span><br><span class="line">    找出页面中所有选择框的数量</span><br><span class="line">    <span class="keyword">var</span> jchecknum = $(<span class="string">&quot;.j-check&quot;</span>).length;</span><br><span class="line">    $(<span class="string">&quot;.j-check&quot;</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>($(<span class="string">&quot;.j-check:checked&quot;</span>).length == jchecknum)&#123;</span><br><span class="line">             $(<span class="string">&quot;.selectAll&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             $(<span class="string">&quot;.selectAll&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>,<span class="literal">false</span>);</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="修改元素文本内容"><a href="#修改元素文本内容" class="headerlink" title="修改元素文本内容"></a>修改元素文本内容</h2><ul><li><p>获取设置元素内容html()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">获取设置元素内容html()</span><br><span class="line">     html()方法是直接修改里面的元素内容并且覆盖原先的</span><br><span class="line">     <span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>).html());</span><br><span class="line">     $(<span class="string">&quot;div&quot;</span>).html(<span class="string">&quot;leb猪啊&quot;</span>);</span><br><span class="line">     $(<span class="string">&quot;div&quot;</span>).html(<span class="string">&quot;&lt;span&gt;aaa&lt;/span&gt;&quot;</span>);</span><br><span class="line">     $(<span class="string">&quot;div&quot;</span>).html(<span class="string">&quot;&lt;span&gt;aaa&lt;/span&gt;&quot;</span>);</span><br><span class="line">     覆盖了 只会输出一个</span><br><span class="line">     </span><br><span class="line">     <span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>).html());</span><br></pre></td></tr></table></figure></li><li><p>获取设置元素文本内容text()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;div&quot;</span>).text());</span><br><span class="line">     $(<span class="string">&quot;div&quot;</span>).text(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">     $(<span class="string">&quot;div&quot;</span>).text(<span class="string">&quot;&lt;p&gt;aa&lt;/p&gt;&quot;</span>);<span class="comment">//无法添加标签 只能对文本进行改变</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p>获取设置表单值val()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;input&quot;</span>).val());</span><br><span class="line">      $(<span class="string">&quot;input&quot;</span>).val(<span class="string">&quot;leb dsb&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>案例增减商品数量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">       <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;jianhao&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">       <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;count&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;jiahao&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   &lt;div&gt;</span><br><span class="line">       &lt;button class=&quot;jianhao&quot;&gt;-&lt;/button&gt;</span><br><span class="line">       &lt;input type=&quot;text&quot; class=&quot;count&quot; value=&quot;1&quot;&gt;</span><br><span class="line">       &lt;button class=&quot;jiahao&quot;&gt;+&lt;/but&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       // 要点 只增加本商品的数量，就是点击加号之后兄弟文本框count的值</span><br><span class="line">       $(function()&#123;</span><br><span class="line">           $(&quot;.jiahao&quot;).click(function()&#123;</span><br><span class="line">               var countnum = $(this).siblings(&quot;.count&quot;).val();</span><br><span class="line">               console.log(countnum);</span><br><span class="line">               countnum++;</span><br><span class="line">               $(this).siblings(&quot;.count&quot;).val(countnum);</span><br><span class="line">           &#125;)</span><br><span class="line">           $(&quot;.jianhao&quot;).click(function()&#123;</span><br><span class="line">               var countnum = $(this).siblings(&quot;.count&quot;).val();</span><br><span class="line">               countnum--;</span><br><span class="line">               if(countnum&lt;1)&#123;</span><br><span class="line">                   countnum=1;</span><br><span class="line">               &#125;</span><br><span class="line">               $(this).siblings(&quot;.count&quot;).val(countnum);</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;)</span><br><span class="line">       </span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>案例修改商品小计</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;singalprice&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>单价:<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2.13<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;jianhao&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;count&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;jiahao&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;totalprice&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>总价:<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2.13<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;ul class=&quot;singalprice&quot;&gt;</span><br><span class="line">        &lt;li&gt;单价:&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;22.1&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;button class=&quot;jianhao&quot;&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; class=&quot;count&quot; value=&quot;1&quot;&gt;</span><br><span class="line">    &lt;button class=&quot;jiahao&quot;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;ul class=&quot;totalprice&quot;&gt;</span><br><span class="line">        &lt;li&gt;总价:&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;22.1&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">     </span><br><span class="line">&lt;script&gt;</span><br><span class="line">    // 要点 只增加本商品的数量，就是点击加号之后兄弟文本框count的值</span><br><span class="line">    $(function()&#123;</span><br><span class="line">        $(&quot;.jiahao&quot;).click(function()&#123;</span><br><span class="line">            var countnum = $(this).siblings(&quot;.count&quot;).val();</span><br><span class="line">            var sprice = $(this).siblings(&quot;.singalprice&quot;).find(&quot;li&quot;).eq(1).text();</span><br><span class="line">            countnum++;</span><br><span class="line">            sprice *= countnum;</span><br><span class="line">            console.log(sprice);</span><br><span class="line">            $(this).siblings(&quot;.count&quot;).val(countnum);</span><br><span class="line">            $(this).siblings(&quot;.totalprice&quot;).find(&quot;li&quot;).eq(1).text(sprice);</span><br><span class="line">  </span><br><span class="line">        &#125;)</span><br><span class="line">        $(&quot;.jianhao&quot;).click(function()&#123;</span><br><span class="line">            var countnum = $(this).siblings(&quot;.count&quot;).val();</span><br><span class="line">            var sprice = $(this).siblings(&quot;.singalprice&quot;).find(&quot;li&quot;).eq(1).text();</span><br><span class="line">            countnum--;</span><br><span class="line">            if(countnum&lt;1)&#123;</span><br><span class="line">                countnum=1;</span><br><span class="line">            &#125;</span><br><span class="line">            sprice *= countnum;</span><br><span class="line">            $(this).siblings(&quot;.count&quot;).val(countnum);</span><br><span class="line">            $(this).siblings(&quot;.totalprice&quot;).find(&quot;li&quot;).eq(1).text(sprice);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="祖先选择器"><a href="#祖先选择器" class="headerlink" title="祖先选择器"></a>祖先选择器</h2><ul><li><p>$(“xxx”).parents(“.zuxian”) 返回指定祖先</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;one&quot;</span>&gt;</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;three&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;four&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    </span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">console</span>.log($(<span class="string">&quot;.four&quot;</span>).parents(<span class="string">&quot;.one&quot;</span>));</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h2 id="保留小数"><a href="#保留小数" class="headerlink" title="保留小数"></a>保留小数</h2><ul><li><p>toFix(位数)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">33.336</span>.toFixed(<span class="number">2</span>);</span><br><span class="line">answer = <span class="number">33.34</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="遍历元素"><a href="#遍历元素" class="headerlink" title="遍历元素"></a>遍历元素</h2><ul><li><p>each(index,dom)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">var</span> arr = [<span class="string">&quot;red&quot;</span>,<span class="string">&quot;green&quot;</span>,<span class="string">&quot;blue&quot;</span>];</span><br><span class="line">           $(<span class="string">&quot;div&quot;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i,dom</span>)</span>&#123;</span><br><span class="line">               $(dom).css(<span class="string">&quot;color&quot;</span>,arr[i]);</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure></li><li><p>each()遍历数组，遍历对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  each遍历数组</span></span><br><span class="line">          $.each(arr,<span class="function"><span class="keyword">function</span>(<span class="params">i,ele</span>)</span>&#123;</span><br><span class="line">              <span class="built_in">console</span>.log(i);</span><br><span class="line">              <span class="built_in">console</span>.log(ele);</span><br><span class="line">          &#125;)</span><br><span class="line">         <span class="comment">//  each遍历对象</span></span><br><span class="line">         $.each(&#123;</span><br><span class="line">             <span class="attr">name</span>:<span class="string">&quot;leb&quot;</span>,</span><br><span class="line">             <span class="attr">sex</span>:<span class="string">&quot;female&quot;</span>,</span><br><span class="line">             <span class="attr">hobbies</span>:<span class="string">&quot;balabababababa&quot;</span></span><br><span class="line">         &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">i,ele</span>)</span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(i+<span class="string">&quot;:&quot;</span>+ele);</span><br><span class="line">         &#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="添加和删除元素"><a href="#添加和删除元素" class="headerlink" title="添加和删除元素"></a>添加和删除元素</h2><ul><li><p>添加元素 两种方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">在节点内部添加</span><br><span class="line"><span class="keyword">var</span> li = $(&lt;li&gt;aa&lt;/li&gt;);</span><br><span class="line">在节点内部的前面添加</span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).prepend(li);</span><br><span class="line">在节点内部的后面添加</span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).append(li);</span><br><span class="line"></span><br><span class="line">在节点外部添加</span><br><span class="line"><span class="keyword">var</span> div = $(<span class="string">&quot;&lt;div&gt;我是div&lt;/div&gt;&quot;</span>);</span><br><span class="line">在节点外部的前面添加</span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).before(div);</span><br><span class="line">在节点外部的后面添加</span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).after(div);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>删除元素的三种方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">remove() 自杀法</span><br><span class="line">empty() 杀掉除了自己之外的</span><br><span class="line">html(<span class="string">&quot;&quot;</span>) 同上</span><br></pre></td></tr></table></figure></li></ul><h2 id="获取元素大小i"><a href="#获取元素大小i" class="headerlink" title="获取元素大小i"></a>获取元素大小i</h2><ul><li><p>width() 和 height()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可以直接获取</span><br><span class="line">也可以在里面输入数字设置 不用带单位</span><br></pre></td></tr></table></figure></li><li><p>innerWidth() innerHeight() 获取除自身之外的padding</p></li><li><p>outerWidth() outerHeight() 获取除了自身之外的border</p></li><li><p>outerWidth(true) outerHeight(true) 获取除自身之外的 padding margin border</p></li><li><p>参数为空返回数字型 参数为数字修改相应值</p></li></ul><h2 id="元素位置"><a href="#元素位置" class="headerlink" title="元素位置"></a>元素位置</h2><ul><li><p>offset() 获取设置距离文档的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;.son&quot;</span>).offset());</span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;.son&quot;</span>).offset().top);</span><br></pre></td></tr></table></figure></li><li><p>设置偏移量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.son&quot;</span>).offset(&#123;</span><br><span class="line">          <span class="attr">top</span>:<span class="number">200</span>,</span><br><span class="line">          <span class="attr">left</span>:<span class="number">200</span></span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure></li><li><p>获取距离带有定位父级位置的偏移 position 如果没有定位则以文档为准，且该方法只能获取 不能改变</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log($(<span class="string">&quot;.son&quot;</span>).position());</span><br></pre></td></tr></table></figure></li></ul><h2 id="被卷去的头部"><a href="#被卷去的头部" class="headerlink" title="被卷去的头部"></a>被卷去的头部</h2><ul><li><p>页面滚动事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>被卷去的头部与被卷去的左侧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scrollTop();</span><br><span class="line">scrollLeft();</span><br><span class="line">可以直接设置数字 那么在页面打开的时候就会直接滑动到指定的位置</span><br></pre></td></tr></table></figure></li><li><p>设置一个小功能 当页面移动到某个位置时候显示返回顶部的盒子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">var</span> boxTop = $(<span class="string">&quot;.container&quot;</span>).offset().top;</span><br><span class="line">           $(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log($(<span class="built_in">document</span>).scrollTop());</span><br><span class="line">               <span class="keyword">if</span>($(<span class="built_in">document</span>).scrollTop()&gt;=boxTop)&#123;</span><br><span class="line">                   <span class="comment">//此时container已经在最顶部</span></span><br><span class="line">                   $(<span class="string">&quot;.back&quot;</span>).fadeIn();</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   $(<span class="string">&quot;.back&quot;</span>).fadeOut();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;) </span><br></pre></td></tr></table></figure></li><li><p>注意 window是整个滚动事件的对象 而scrollTop的对象是document</p></li><li><p>再做个点击返回顶部的功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.back&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">               <span class="comment">// $(document).scrollTop(0);</span></span><br><span class="line">               <span class="comment">//这样可以实现回到顶部的功能但是没有动画效果</span></span><br></pre></td></tr></table></figure></li><li><p>于是想到使用animate做动画 但animate是针对==元素==进行操作的方法，所以对象不是document而是body和html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;body,html&quot;</span>).stop().animate(&#123;</span><br><span class="line">                  <span class="attr">scrollTop</span>:<span class="number">0</span></span><br><span class="line">              &#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="on绑定事件"><a href="#on绑定事件" class="headerlink" title="on绑定事件"></a>on绑定事件</h2><ul><li><p>利用on绑定多个事件 其输入格式为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.example&quot;</span>).on(&#123;</span><br><span class="line">    <span class="attr">mouseenter</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; $(<span class="built_in">this</span>).css(<span class="string">&quot;background&quot;</span>,<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>相反的触发方式执行同一函数的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;.example&quot;</span>).on(<span class="string">&quot;mouseenter mouseleave&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">xxx</span><br><span class="line">&#125;)</span><br><span class="line">注意两个事件之间加空格</span><br></pre></td></tr></table></figure></li></ul><h2 id="on事件委派"><a href="#on事件委派" class="headerlink" title="on事件委派"></a>on事件委派</h2><ul><li><p>on还可以实现事件委派：给父元素绑定一个事件，在操作其某个子元素时生效 且this指代的是委托的子元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法格式是$(<span class="string">&quot;父元素&quot;</span>).on(<span class="string">&quot;事件类型&quot;</span>,<span class="string">&quot;子元素&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">xxx;</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="string">&quot;li&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                alert(<span class="number">111</span>);</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure></li></ul><ul><li>与此同时 on委派的事件还可以对动态生成的元素进行操作</li></ul><h2 id="off解绑事件"><a href="#off解绑事件" class="headerlink" title="off解绑事件"></a>off解绑事件</h2><ul><li><p>解除某个元素上面的触发事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;元素&quot;</span>).off(<span class="string">&quot;click&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>解除事件委托</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;ul&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="string">&quot;li&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&quot;ul&quot;</span>).off(<span class="string">&quot;click&quot;</span>,<span class="string">&quot;li&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h2 id="one只触发一次事件"><a href="#one只触发一次事件" class="headerlink" title="one只触发一次事件"></a>one只触发一次事件</h2><ul><li><p>和on差不多 但只触发一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;li&quot;</span>).one(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">&quot;xxxxxxx&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="自动触发事件trigger"><a href="#自动触发事件trigger" class="headerlink" title="自动触发事件trigger"></a>自动触发事件trigger</h2><ul><li><p>自动触发事件的前提是事件有绑定</p></li><li><p>方式一 元素.事件 会触发元素的默认行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).click()</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>方式二 元素.trigger(“触发事件”) 会触发元素的默认行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).trigger(<span class="string">&quot;click&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>方式三 元素.triggerHandler(“触发事件”) 不会触发元素的默认行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).triggerHandler(<span class="string">&quot;click&quot;</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><ul><li><p>事件触发就会有事件对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;div&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(event);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>阻止事件冒泡 stopPropagation()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    cl(<span class="string">&quot;点击了xxx&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).on(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    cl(<span class="string">&quot;点击了div&quot;</span>);</span><br><span class="line">    event.stopPropagation();</span><br><span class="line">&#125;)</span><br><span class="line">此时只会cl “点击了div”</span><br><span class="line">而不会cl 点击了xxx</span><br><span class="line">因为阻止了事件冒泡</span><br></pre></td></tr></table></figure></li></ul><h2 id="对象拷贝"><a href="#对象拷贝" class="headerlink" title="对象拷贝"></a>对象拷贝</h2><ul><li><p>浅拷贝 $.extend(“目标对象”,”拷贝对象”)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;andy&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">$.extend(obj1,obj2);</span><br></pre></td></tr></table></figure></li><li><p>浅拷贝会将原来对象里面的复杂数据类型地址拷贝给目标对象</p></li><li><p>所以如果修改了目标对象的属性 原来对象中的属性也会随之修改</p></li><li><p>深拷贝$.extend(true,”目标对象”,”拷贝对象”)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="number">0</span>,</span><br><span class="line">    <span class="attr">msg</span>: &#123;</span><br><span class="line">            <span class="attr">sex</span>:<span class="string">&quot;男&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">id</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;andy&quot;</span>,</span><br><span class="line">    <span class="attr">msg</span>: &#123;</span><br><span class="line">            <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line">$.extend(<span class="literal">true</span>,obj1,obj2);</span><br><span class="line">obj1.msg.age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line"><span class="built_in">console</span>.log(obj1);</span><br></pre></td></tr></table></figure></li><li><p>深拷贝会将原来对象的属性完全拷贝一份给目标对象</p></li><li><p>但如果目标对象中有不冲突的属性 则会合并该属性</p></li></ul><h2 id="多库共存"><a href="#多库共存" class="headerlink" title="多库共存"></a>多库共存</h2><ul><li><p>因为$符号有时候会导致冲突 所以jquery提供一种方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将所有的$符号替换成 jQuery</span><br><span class="line">eg</span><br><span class="line">jQuery(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>第二种方法 jquery释放对$的控制权 让用户自己决定</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xx = $.noConflict();</span><br></pre></td></tr></table></figure></li></ul><h2 id="jQuery插件"><a href="#jQuery插件" class="headerlink" title="jQuery插件"></a>jQuery插件</h2><ul><li>ex<img src = image-20211119204501828.png></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端进阶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/posts/708096096efb/"/>
      <url>/posts/708096096efb/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>该笔记用百度脑图制作而成，图片如下：<img src="naotu.png" alt="naotu"><br>参考链接: <a href="http://naotu.baidu.com/file/ffff52457c20c717cc7b21def7361808?token=8fbc79fd5c6cc578">http://naotu.baidu.com/file/ffff52457c20c717cc7b21def7361808?token=8fbc79fd5c6cc578</a><br>若链接失效 建议私信</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="/posts/f4f0b9164a1b/"/>
      <url>/posts/f4f0b9164a1b/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>Hyper Text Makeup Language 超文本标记语言</li><li>加入了图片，声音，动画，多媒体等内容</li><li>从一个文件跳转到另一个文件，与世界各地主机的文件连接</li></ul><h2 id="文件连接"><a href="#文件连接" class="headerlink" title="文件连接"></a>文件连接</h2><ul><li>不是编程语言 而是一种标记语言 makeup language</li><li>标记语言也是一套标记标签</li></ul><h2 id="常用浏览器"><a href="#常用浏览器" class="headerlink" title="常用浏览器"></a>常用浏览器</h2><ul><li>ie 火狐 谷歌 edge safari opera 被称为五大浏览器</li><li>浏览器内核： 一种渲染引擎，读取网页内容，整理讯息，计算网页的显示方式并显示页面</li></ul><h2 id="Web标准"><a href="#Web标准" class="headerlink" title="Web标准"></a>Web标准</h2><ul><li>Web标准是由W3C组织和其他标准化组织定制的一系列标准的的集合</li><li>为什么需要Web标准？<br>浏览器不同，显示的页面和排版就有差异</li><li>Web标准的构成<br>结构：整理和分类网页元素，主要是HTML<br>表现：设置网页的版式，颜色，大小等外观格式，主要是CSS<br>行为：网页模型的定义以及交互的编写，主要是JavaScript</li><li>因此，结构写进HTML文件中，表现写到CSS文件中，行为写到Javascript文件中</li></ul><h2 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h2><h3 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h3><ul><li>基本语法概述</li></ul><ol><li>HTML标签是由尖括号包围的关键词 eg <html></li><li>HTML标签通常是成对出现的 eg <html></html>称为双标签，第一个是开始标签，第二个是结束标签</li><li>特殊标签 eg &lt;/br&gt; 称之为单标签</li></ol><ul><li>标签关系</li></ul><ol><li>包含关系</li><li>并列关系</li></ol><h3 id="基本结构标签"><a href="#基本结构标签" class="headerlink" title="基本结构标签"></a>基本结构标签</h3><ul><li>每一个网页都有一个基本标签结构，称为骨架标签；HTML页面也称为HTML文档</li></ul><ol><li><p><html></html>页面中最大的标签，称为根标签</p></li><li><p>文档的头部，注意在其中必须设置的标签是title</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><title></title>让页面有属于自己的网页标题</p></li><li><p><body></body>文档的主题 元素包含文档的所有内容，页面的内容基本都是放进body里面</p></li></ol><h3 id="网页开发工具"><a href="#网页开发工具" class="headerlink" title="网页开发工具"></a>网页开发工具</h3><ul><li>字符集</li></ul><ol><li>在head标签内，可以通过meta标签的charset属性规定HTML文档应该使用哪种字符编码</li><li>UTF-8 万国码，基本包括了全世界所有国家所需要的字符</li><li>&lt;! DOCTYPE html&gt;文档声明类型标签，告诉浏览器这个页面采取html5版本来显示页面</li><li><html lang="en">告诉浏览器或者搜索引擎这个是一个英文网站，本页面将采用英文来显示</li><li><mata charset="UTF-8">必须写，否则乱码。</li></ol><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><h4 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h4><ol><li><p>格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>-<span class="tag">&lt;<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>为head缩写，在标签内的字体会变大变粗</p></li><li><p>由1-6大小逐渐递减</p></li></ol><h4 id="段落和换行标签"><a href="#段落和换行标签" class="headerlink" title="段落和换行标签"></a>段落和换行标签</h4><ol><li><p><p>标签用于定义段落 paragraph</p></li><li><p>&lt;/br&gt;换行标签 break row</p></li></ol><h4 id="文本格式化标签"><a href="#文本格式化标签" class="headerlink" title="文本格式化标签"></a>文本格式化标签</h4><ol><li>加粗<strong></strong>或者<b></b></li><li>倾斜<em></em>或者<i></i></li><li>删除线<del></del>或者<s></s></li><li>下划线<ins></ins>或者<u></u></li></ol><h4 id="div和span标签"><a href="#div和span标签" class="headerlink" title="div和span标签"></a>div和span标签</h4><ol><li><p>没有语义，只是一个盒子，用来装内容的</p></li><li><p>division表示分割 分区 span表示跨度 跨距</p></li><li><p><div>标签用来布局，但是现在一行只能放一个div大盒子</p></li><li><p><span>标签用来布局，一行上面可以放多个span小盒子</p></li></ol><h4 id="图像标签和路径"><a href="#图像标签和路径" class="headerlink" title="图像标签和路径"></a>图像标签和路径</h4><ul><li>图像标签</li></ul><ol><li><p><img>标签用于定义HTML页面中的图像:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;url&quot;</span>/&gt;</span> </span><br><span class="line">其中src是img标签的必须属性，他用于指定图像文件路径和文件名</span><br></pre></td></tr></table></figure></li><li><p>图像标签的其他属性</p><p>| 属性   | 含义     | 描述                                  |<br>| ——— | ———— | ——————————————————- |<br>| src    | 图片路径 | 必须属性                              |<br>| alt    | 文本     | 替换文本，当图像不能显示时 用文本代替 |<br>| title  | 文本     | 提示文本 鼠标放到上面时显示的文字     |<br>| width  | 像素     | 设置图像的宽度                        |<br>| height | 像素     | 设置图像的高度                        |<br>| border | 像素     | 设置图片的边框粗细                    |</p></li></ol><ol><li>图像标签的路径<ul><li>相对路径 文件夹下地址</li><li>绝对路径 绝对地址 带盘符 在default browser里面打开才能显示</li></ul></li></ol><h4 id="超链接标签"><a href="#超链接标签" class="headerlink" title="超链接标签"></a>超链接标签</h4><ul><li><p><a>标签用于定义超链接，从一个页面链接跳转到另一个</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;跳转目标&quot;</span> <span class="attr">target</span>=<span class="string">&quot;目标窗口的弹出方式&quot;</span>&gt;</span>文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>超链接标签的属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">anchor 锚</span><br><span class="line">href 用于指定链接目标url地址</span><br><span class="line">target 用于指定页面的打开方式</span><br><span class="line">      self 为默认值</span><br><span class="line">      blank 为在新窗口中打开</span><br></pre></td></tr></table></figure></li><li><p>链接的分类</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">外部链接</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">内部链接</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;index.html&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">空链接</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;#&quot;</span>&gt;</span>公司地址<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">下载链接</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;img.zip&quot;</span>&gt;</span>下载文件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">网页元素链接</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>  = <span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span> = <span class="string">&quot;img.jpg&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">定位到某个位置</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;#two&quot;</span>&gt;</span>第二集<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 或者 <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span>&gt;</span>第二集介绍<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h4><ul><li><p>总览</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span>用于定义表格</span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>用于定义表格中的行，必须嵌套在<span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span>中</span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>用于定义表格中的单元格 必须嵌套在<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>中</span><br></pre></td></tr></table></figure></li><li><p>表头单元格标签 <th></th></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">表格属性                    align(left,right,center)规定表格相对周围元素的对齐方式</span><br><span class="line">border(1 or &quot;&quot;)规定表格是否拥有边框</span><br><span class="line">cellpadding(像素值)规定单元边沿预期内容之间的空白，默认1像素</span><br><span class="line">cellspacing(像素值)规定单元格之间的空白，默认2像素</span><br><span class="line">width(像素 or 百分比)规定表格的宽度</span><br></pre></td></tr></table></figure></li><li><p>表格结构标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span>标签控制表格的头部区域</span><br><span class="line"><span class="tag">&lt;<span class="name">thbody</span>&gt;</span>标签控制表格的主体区域</span><br><span class="line">作用:更好的分清楚结构</span><br></pre></td></tr></table></figure></li><li><p>合并单元格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">跨行合并：rowspan = &quot;合并单元格的个数&quot;</span><br><span class="line">跨列合并：colspan = &quot;合并单元格的个数&quot;</span><br><span class="line">记得删除多余的单元格</span><br></pre></td></tr></table></figure></li></ul><h4 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h4><ul><li><p>无序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>标签下面嵌套<span class="tag">&lt;<span class="name">li</span>&gt;</span>标签</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>标签不能嵌入其他无关标签</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>里面可以放任何标签</span><br></pre></td></tr></table></figure></li><li><p>有序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span>标签</span><br></pre></td></tr></table></figure></li><li><p>自定义列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span>标签，与<span class="tag">&lt;<span class="name">dt</span>&gt;</span>(定义项目 or 名字)和<span class="tag">&lt;<span class="name">dd</span>&gt;</span>(描述每一个项目 or 名字)一起使用</span><br></pre></td></tr></table></figure></li></ul><h4 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h4><ul><li><p>表单由表单域，表单控件（元素）和提示信息三个部分构成</p></li><li><p>表单域 <form></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">action = &quot;url&quot;用于指定接收并处理表单数据的服务器程序的url地址</span><br><span class="line">method = &quot;get/post&quot;用于设置表单的提交方式</span><br><span class="line">name = &quot;表单域名称&quot;</span><br></pre></td></tr></table></figure></li><li><p>表单控件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">type = &quot;属性值&quot;</span><br><span class="line">单标签</span><br><span class="line">其他属性：</span><br><span class="line">name 自定义 定义input元素名称</span><br><span class="line">value 自定义 定义input元素的值</span><br><span class="line">checked checked 规定此元素首次加载时应当被选用</span><br><span class="line">maxlength 正整数 规定输入字段字符的最大长度</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">用于绑定一个表单元素 当点击label标签中的文本时，浏览器会自动将焦点转到对应元素上</span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span>,记得加id</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">定义下拉列表</span><br><span class="line">格式为<span class="tag">&lt;<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">option</span>&gt;</span>选项<span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">可以在option里面加selected 表示当前项为默认选中项</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/posts/fe8be42e029f/"/>
      <url>/posts/fe8be42e029f/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数据库安装"><a href="#数据库安装" class="headerlink" title="数据库安装"></a>数据库安装</h1><ol><li><p>下载地址：<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p></li><li><p>解压到相应目录 并在目录下配置my.ini文件，信息如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[client]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=utf8</span><br><span class="line"> </span><br><span class="line"><span class="section">[mysqld]</span></span><br><span class="line"><span class="comment"># 设置3306端口</span></span><br><span class="line"><span class="attr">port</span> = <span class="number">3306</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=C:\\web\\mysql-<span class="number">8.0</span>.<span class="number">11</span></span><br><span class="line"><span class="comment"># 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错</span></span><br><span class="line"><span class="comment"># datadir=C:\\web\\sqldata</span></span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="number">20</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line"><span class="attr">character-set-server</span>=utf8</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=INNODB</span><br></pre></td></tr></table></figure></li><li><p>启动数据库</p><p>使用管理员身份开启cmd，切换目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd C:\.....\bin</span><br></pre></td></tr></table></figure><p>初始化数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize --console</span><br></pre></td></tr></table></figure><p>得到密码：（记得保存）</p><p>安装命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql install</span><br></pre></td></tr></table></figure><p>启动命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>登陆数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h localhost -u username -p</span><br></pre></td></tr></table></figure></li></ol><h1 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h1><ol><li><p>查看当前所有的数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases</span><br></pre></td></tr></table></figure></li><li><p>打开指定的库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 库名</span><br></pre></td></tr></table></figure></li><li><p>查看当前库的所有表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables</span><br></pre></td></tr></table></figure></li><li><p>查看其他库的所有表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables from 库名</span><br></pre></td></tr></table></figure></li><li><p>创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table 表名（</span><br><span class="line"> 列名 列类型,</span><br><span class="line"> 列名 列类型,</span><br><span class="line"> ）</span><br></pre></td></tr></table></figure></li><li><p>查看表结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表名</span><br></pre></td></tr></table></figure></li><li><p>查看服务器的版本</p><ul><li><p>方式一：登录到mysql服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select version()</span><br></pre></td></tr></table></figure></li><li><p>方式二：没有登陆到mysql服务器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></figure></li><li><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql --V</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h1><ol><li><p>不区分大小写，但建议关键字大写，表名，列名小写</p></li><li><p>每条命令最好用分号结尾</p></li><li><p>每条命令根据需要换行</p></li><li><p>注释 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">单行注释 #注释文字</span><br><span class="line">单行注释 -- 注释文字</span><br><span class="line">多行注释 /* 注释文字 */</span><br></pre></td></tr></table></figure></li></ol><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><ol><li>ctrl + enter 执行当前语句</li></ol><h1 id="DQL语言的学习"><a href="#DQL语言的学习" class="headerlink" title="DQL语言的学习"></a>DQL语言的学习</h1><h2 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h2><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 查询列表 from 表名</span><br></pre></td></tr></table></figure><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li><p>查询的结果集 是一个虚拟表</p></li><li><p>select 查询列表 类似于system.out.println()</p></li><li><p>select后面跟的查询列表，可以有多个部分组成，中间用逗号隔开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段1,字段2,表达式 from 表</span><br></pre></td></tr></table></figure></li></ol><h2 id="查询常量"><a href="#查询常量" class="headerlink" title="查询常量"></a>查询常量</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 100;</span><br></pre></td></tr></table></figure><h2 id="查询表达式"><a href="#查询表达式" class="headerlink" title="查询表达式"></a>查询表达式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 100%3;</span><br></pre></td></tr></table></figure><h2 id="查询单个字段"><a href="#查询单个字段" class="headerlink" title="查询单个字段"></a>查询单个字段</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#x27;last_name&#x27; from &#x27;employees&#x27;; 引号注意</span><br></pre></td></tr></table></figure><h2 id="查询所有字段"><a href="#查询所有字段" class="headerlink" title="查询所有字段"></a>查询所有字段</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from &#x27;employees&#x27;; 引号注意</span><br></pre></td></tr></table></figure><h2 id="查询函数"><a href="#查询函数" class="headerlink" title="查询函数"></a>查询函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select databases();</span><br><span class="line">select version();</span><br><span class="line">select user();</span><br></pre></td></tr></table></figure><h2 id="起别名"><a href="#起别名" class="headerlink" title="起别名"></a>起别名</h2><p>方式一 使用as关键字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select user() as 用户名;</span><br><span class="line">select user() as &quot;用户名&quot;;</span><br><span class="line">select user() as &#x27;用户名&#x27;;</span><br></pre></td></tr></table></figure><p>方式二使用空格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select user() 用户名;</span><br><span class="line">select last_name &quot;姓 名&quot; from employee;</span><br></pre></td></tr></table></figure><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>查询first_name 和 last_name 拼接成的全名 ==不一致==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select first_name + last_name as &quot;姓名&quot; from employees;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select concat(first_name,last_name) as &quot;姓 名&quot; from employees;</span><br></pre></td></tr></table></figure><p>==特别注意== concat中的字段有null值 后续整个连接的字段都是null</p><p>解决办法： 使用ifnull</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT IFNULL(commission_pct,&#x27;空&#x27;) FROM employees;</span><br><span class="line"># 若该字段为null，则输出“空” 若不为null 原样输出</span><br></pre></td></tr></table></figure><h2 id="distinct的使用"><a href="#distinct的使用" class="headerlink" title="distinct的使用"></a>distinct的使用</h2><p>查询员工涉及到的部门编号有哪些 使用distinct关键词达成去重的效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT department_id FROM employees;</span><br></pre></td></tr></table></figure><h2 id="查看表的结构"><a href="#查看表的结构" class="headerlink" title="查看表的结构"></a>查看表的结构</h2><p>两种方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DESC employees;</span><br><span class="line">SHOW COLUMNS FROM employees;</span><br></pre></td></tr></table></figure><h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT 查询列表</span><br><span class="line">FROM 表名</span><br><span class="line">WHERE 筛选条件;</span><br></pre></td></tr></table></figure><h2 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h2><ol><li>from字句</li><li>where字句</li><li>select字句</li></ol><h2 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h2><ol><li><p>按关系表达式筛选 ==注意== 在mysql中使用&lt;&gt;作为不等于号</p></li><li><p>逻辑运算符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">and</span><br><span class="line">or</span><br><span class="line">not</span><br></pre></td></tr></table></figure></li><li><p>mysql特有的 模糊查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">like</span><br><span class="line">in</span><br><span class="line">between and</span><br><span class="line">is null</span><br></pre></td></tr></table></figure></li></ol><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><h3 id="like"><a href="#like" class="headerlink" title="like"></a>like</h3><ul><li><p>功能: 一般和通配符搭配使用，对字符型数据进行部分匹配查询</p></li><li><p>常见的通配符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_ 任意单个字符</span><br><span class="line">% 任意多个字符</span><br></pre></td></tr></table></figure></li><li><p>案例一 查询姓名中包含字符a的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees WHERE last_name LIKE &#x27;%a%&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>案例二 查询姓名中包含最后一个字符为e的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees WHERE last_name LIKE &#x27;%e&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>案例三 查询姓名中包含第一个字符为e的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees WHERE last_name LIKE &#x27;e%&#x27;;</span><br></pre></td></tr></table></figure></li><li><p>案例四 查询姓名中包含第三个字符为x的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees WHERE last_name LIKE &#x27;__x%&#x27;;</span><br><span class="line">#此处两个下划线</span><br></pre></td></tr></table></figure></li><li><p>案例五 查询姓名中包含第三个字符为_的员工信息 使用转义字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM employees WHERE last_name LIKE &#x27;__\_%&#x27;;</span><br><span class="line">SELECT * FROM employees WHERE last_name LIKE &#x27;__$_%&#x27; ESCAPE &#x27;$&#x27;;</span><br><span class="line">#设置$为转义字符 </span><br></pre></td></tr></table></figure></li></ul><h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><ul><li><p>功能: 查询某字段的值是否属于指定的列表之内</p></li><li><p>语法： in(常量值1，常量值2，常量值3….)</p></li><li><p>案例一 查询部门编号是30/50/90的员工名，部门编号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select last_name,department_id </span><br><span class="line">from employees</span><br><span class="line">where department_id in(30,50,90);</span><br></pre></td></tr></table></figure></li></ul><h3 id="between-and"><a href="#between-and" class="headerlink" title="between and"></a>between and</h3><ul><li><p>function: 判断某个字段的值是否介于xx之间</p></li><li><p>grammar: between and/not between and</p></li><li><p>case1 查询部门编号是30-90之间的部门编号，员工姓名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select department_id,last_name</span><br><span class="line">from employees</span><br><span class="line">where department_id between 30 and 90</span><br></pre></td></tr></table></figure></li></ul><h3 id="is-null"><a href="#is-null" class="headerlink" title="is null"></a>is null</h3><ul><li><p>function:判断某个字段的数值是否为空</p></li><li><p>case1 查询没有奖金的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select *</span><br><span class="line">from employees</span><br><span class="line">where commission_pct is null</span><br></pre></td></tr></table></figure></li><li><p>特点：= 能判断普通的内容，is只能判断null值</p></li></ul><h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><h2 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT 查询列表</span><br><span class="line">FROM 表名</span><br><span class="line">WHERE 筛选条件</span><br><span class="line">ORDER BY 排序列表</span><br></pre></td></tr></table></figure><h2 id="执行顺序-1"><a href="#执行顺序-1" class="headerlink" title="执行顺序"></a>执行顺序</h2><ol><li>from</li><li>where</li><li>select</li><li>order by</li></ol><h2 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h2><ul><li>排序列表可以是单个字段，多个字段，表达式，函数，列数，以及以上的组合</li><li>升序 通过asc 默认</li><li>降序 通过 desc </li><li>根据执行顺序可以用别名排序</li></ul><h2 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h2><ul><li><p>LENGTH 获取字节长度</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ORDER BY LENGTH(last_name);</span><br></pre></td></tr></table></figure></li><li><p>CHAR_LENGTH 获取字符个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ORDER BY CHAR_LENGTH(&#x27;&#x27;);</span><br></pre></td></tr></table></figure></li><li><p>SUBSTR 拼接字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT SUBSTR(&#x27;xxx&#x27;,起始索引,截取的字符长度);</span><br><span class="line">起始索引从1开始 </span><br><span class="line">可以不写截取的字符长度 代表后续全部</span><br></pre></td></tr></table></figure></li><li><p>INSTR 获取字符第一次出现的索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT INSTR(&#x27;AAAAAXCCACACACC&#x27;,&#x27;X&#x27;);</span><br></pre></td></tr></table></figure></li><li><p>TRIM 去前后指定的字符 默认去掉空格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT TRIM(&#x27;   a  &#x27;) AS b</span><br><span class="line">SELECT TRIM(&#x27;X&#x27; FORM &#x27;XXXXXXXAXXXXXXXXX&#x27;) AS a</span><br></pre></td></tr></table></figure></li><li><p>LPAD/RPAD 左填充/右填充</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT LPAD(&#x27;XXX&#x27;,10,&#x27;A&#x27;);</span><br></pre></td></tr></table></figure></li><li><p>STRCMP 比较两个字符大小 大就返回1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT STRCMP(&#x27;abc&#x27;,&#x27;afc&#x27;);</span><br></pre></td></tr></table></figure></li><li><p>UPPER/LOWER 变大写/小写</p></li></ul><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><ul><li>ABS 绝对值</li><li>CELL 向上取整 返回≥该参数的最小整数</li><li>FLOOR 向下取整</li><li>ROUND 四舍五入</li><li>TRUNCATE 截断</li><li>MOD 取余 </li></ul><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><ul><li>NOW() 现在的时间</li><li>CURDATE</li><li>CURTIME</li><li>DATEDIFF 日期差</li><li>DATE_FORMAT() 转换日期格式</li><li>STR_TO_DATE </li></ul><h2 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h2><ul><li><p>IF</p></li><li><p>CASE </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE 表达式</span><br><span class="line">WHEN X THEN 结果1 </span><br><span class="line">WHEN X THEN 结果2</span><br><span class="line">...</span><br><span class="line">ELSE 结果n</span><br><span class="line">END</span><br></pre></td></tr></table></figure></li></ul><h2 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h2><ul><li>sum</li><li>avg</li><li>max</li><li>min</li><li>count</li><li>分组前筛选 where</li><li>分组后筛选 having</li></ul><h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><ul><li><p>内连接 INNER JOIN ON</p></li><li><p>外连接(左连接，右连接)</p></li><li><p>图解<img src="image-20210419152356373.png" alt="image-20210419152356373"><img src="image-20210419152900682.png" alt="image-20210419152900682"></p></li><li><p>自我关联</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查询广东省的所有区域</span><br><span class="line">先找出市</span><br><span class="line">select a.id,a.area,a.pid from area as a join area as b on a.pid = b.id where b.area = &#x27;广东&#x27;;</span><br><span class="line">再根据市找出区</span><br><span class="line">select c.id,c.area,c.pid from area as c join () as d on c.pid = d.id </span><br></pre></td></tr></table></figure></li></ul><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><ul><li><p>查询语句中嵌套另一个select</p></li><li><p>in</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sno,sname from student where sno in(select sno from sc where cno = &#x27;C001&#x27;)</span><br></pre></td></tr></table></figure></li><li><p>exists(重点)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">返回的是true/false</span><br><span class="line">select 之后加什么都可以</span><br><span class="line">与in的区别是</span><br><span class="line">in 会遍历整个表 </span><br><span class="line">exist 找到就返回</span><br></pre></td></tr></table></figure></li><li><p>not exists(重点)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>表中的每一行叫做一个记录，每个记录包含此行中所有信息</p><h2 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h2><p>表的列称之为字段</p><h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2><ul><li><p>表格的字段抽象的是共性的内容，以及共同的属性，这种方式称之为实体</p></li><li><p>用矩形表示实体（对应表名），椭圆表示属性（对应字段），菱形代表关系</p></li><li><img src="image-20210309185356772.png" alt="image-20210309185356772"></li></ul><h2 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h2><p>用于添加索引，加快搜索效率</p><h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><ul><li><p>用于引用主键的内容</p></li><li><p>经常是多的那一方设置外键</p></li><li><p>设置方法：</p><ol><li><p>在表中添加外键的字段</p><p><img src="image-20210316214817698.png" alt="image-20210316214817698"></p></li><li><p>将该字段设置为外键</p><p><img src="image-20210316214659649.png" alt="image-20210316214659649"></p></li></ol></li><li><p>删除时 更新时</p></li></ul><h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><p><img src="image-20210309185737919.png" alt="image-20210309185737919"></p><h2 id="网页系统"><a href="#网页系统" class="headerlink" title="网页系统"></a>网页系统</h2><ul><li>三步骤：</li><li>原型设计</li><li>数据库建模</li><li>编写前后台程序</li></ul><h2 id="数据库建模"><a href="#数据库建模" class="headerlink" title="数据库建模"></a>数据库建模</h2><ul><li>确定实体和关系</li><li>完善整体实体关系图</li><li>根据实体关系图构建表格</li></ul><h1 id="DDL语言"><a href="#DDL语言" class="headerlink" title="DDL语言"></a>DDL语言</h1><h2 id="创建语句create"><a href="#创建语句create" class="headerlink" title="创建语句create"></a>创建语句create</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">列名1 数据类型 约束,</span><br><span class="line">    name varchar(255) unique,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="修改语句Alter"><a href="#修改语句Alter" class="headerlink" title="修改语句Alter"></a>修改语句Alter</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名(</span><br><span class="line">add column 列名 类型 #添加新的字段</span><br><span class="line">    change column 旧列名 新列名 新列类型 #更改字段名称</span><br><span class="line">    modify column 列名 类型 #修改字段类型</span><br><span class="line">    drop column 列名 #删除字段</span><br><span class="line">    rename to 新表名 #表格重命名</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="删除语句Drop"><a href="#删除语句Drop" class="headerlink" title="删除语句Drop"></a>删除语句Drop</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table 表名</span><br></pre></td></tr></table></figure><h2 id="清除语句Truncate"><a href="#清除语句Truncate" class="headerlink" title="清除语句Truncate"></a>清除语句Truncate</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">truncate table 表名</span><br></pre></td></tr></table></figure><ul><li>删除表中的所有记录单表结构保留</li></ul><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><ul><li><p>约束的实质就是表中数据的限制条件，为了报纸表中的记录<strong>完整和有效</strong></p></li><li><p>分为五种约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">非空约束 not null 后面加</span><br><span class="line">唯一性约束 unique 后面加</span><br><span class="line">主键约束 primary key 后面加</span><br><span class="line">外键约束 foreign key </span><br><span class="line">eg</span><br><span class="line">foregin key(外键字段) references 表名(主键字段) </span><br><span class="line">默认 default</span><br><span class="line">eg</span><br><span class="line">name varchar(20) default &#x27;zhangsan&#x27;</span><br></pre></td></tr></table></figure></li></ul><h2 id="约束分类"><a href="#约束分类" class="headerlink" title="约束分类"></a>约束分类</h2><ul><li>表级约束和列级约束 非空约束不能用于表级约束</li></ul><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ul><li>略</li></ul><h1 id="DML数据操作语句"><a href="#DML数据操作语句" class="headerlink" title="DML数据操作语句"></a>DML数据操作语句</h1><h2 id="增加语句insert"><a href="#增加语句insert" class="headerlink" title="增加语句insert"></a>增加语句insert</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表名 (字段1,字段2) values (值1,值2);</span><br></pre></td></tr></table></figure><h2 id="删除语句delete"><a href="#删除语句delete" class="headerlink" title="删除语句delete"></a>删除语句delete</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from 表名</span><br></pre></td></tr></table></figure><h2 id="更新语句update"><a href="#更新语句update" class="headerlink" title="更新语句update"></a>更新语句update</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update 表名 set 列名=值</span><br></pre></td></tr></table></figure><h1 id="DTL事务控制语句"><a href="#DTL事务控制语句" class="headerlink" title="DTL事务控制语句"></a>DTL事务控制语句</h1><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul><li><p>什么是事务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">—事务（Transaction）是访问和更新数据库的程序执行单元；事务中可能包含一个或多个sql语句，这些语句要么都执行，要么都不执行。</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>事务的基本要素ACID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原子性 </span><br><span class="line">一致性</span><br><span class="line">隔离性</span><br><span class="line">持久性</span><br></pre></td></tr></table></figure></li></ul><h2 id="事务控制语句"><a href="#事务控制语句" class="headerlink" title="事务控制语句"></a>事务控制语句</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start transaction开启事务</span><br><span class="line">commit 提交事务</span><br><span class="line">rollback 回滚事务</span><br><span class="line">set transaction 设置事务隔离级别</span><br></pre></td></tr></table></figure><h2 id="事务的隔离性"><a href="#事务的隔离性" class="headerlink" title="事务的隔离性"></a>事务的隔离性</h2><h2 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h2><ul><li><p>指读到了其他事务未提交的数据</p><p><img src="image-20210612110516345.png" alt="image-20210612110516345"></p></li></ul><h2 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h2><p><img src="image-20210612110553199.png" alt="image-20210612110553199"></p><h2 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h2><p><img src="image-20210612110618411.png" alt="image-20210612110618411"></p><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global transaction isolation level read uncommitted;</span><br></pre></td></tr></table></figure><p><img src="image-20210612110853429.png" alt="image-20210612110853429"></p><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><h2 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create procedure 函数名(参数)</span><br><span class="line">eg</span><br><span class="line">delimiter //</span><br><span class="line">create procedure proc1()</span><br><span class="line">begin </span><br><span class="line">select * from user;</span><br><span class="line">end //</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">declare c int default 0;定义一个局部变量c初始值为0</span><br><span class="line">set c=a+b 赋值</span><br><span class="line">如果是字符串类型要给出长度</span><br><span class="line">declare var1 varchar(32) default &quot;&quot;;</span><br><span class="line">且局部变量声明要放在存储过程的最开始否则出错</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@varname</span><br><span class="line">两种创建方式：</span><br><span class="line">set @num = 1;或 set @num:=1;</span><br><span class="line">select @num:=1; 或 select @num:=字段名 from 表名 where </span><br><span class="line">用select必须用:=</span><br><span class="line"></span><br><span class="line">输出用户变量：select</span><br><span class="line"></span><br><span class="line">如果直接写 select @name:=password from user;</span><br><span class="line">则是@name变量的值是最后一条记录的值</span><br></pre></td></tr></table></figure><h2 id="存储过程的参数"><a href="#存储过程的参数" class="headerlink" title="存储过程的参数"></a>存储过程的参数</h2><p>三种存储类型in out inout</p><ul><li><p>IN 输入参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">delimiter //</span><br><span class="line">create proceduce demo1(IN p_in int)</span><br><span class="line">BEGIN</span><br><span class="line">SELECT p_in;</span><br><span class="line">SET p_in = 2;</span><br><span class="line">SELECT p_in;</span><br><span class="line">END //</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>OUT 输出参数</p></li><li><p>INOUT 输入输出参数</p></li></ul><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><ul><li><p>call</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call procedure(参数)</span><br></pre></td></tr></table></figure></li></ul><h2 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h2><ul><li><p>drop</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop procedure 存储过程名称</span><br></pre></td></tr></table></figure></li></ul><h2 id="修改存储过程"><a href="#修改存储过程" class="headerlink" title="修改存储过程"></a>修改存储过程</h2><ul><li><p>alter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter procedure 存储过程名称 [特征]</span><br></pre></td></tr></table></figure></li></ul><h2 id="存储过程的控制语句"><a href="#存储过程的控制语句" class="headerlink" title="存储过程的控制语句"></a>存储过程的控制语句</h2><ul><li><p>if-then-else</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if condition1 then&#123;&#125;</span><br><span class="line">elseif condition2 then</span><br><span class="line">else</span><br><span class="line">end if;</span><br></pre></td></tr></table></figure></li><li><p>例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line">CREATE PROCEDURE IncomeLevel (IN monthly_value INT, OUT income_level VARCHAR(32))</span><br><span class="line">BEGIN</span><br><span class="line">   IF monthly_value &lt;= 4000 THEN</span><br><span class="line">      SET income_level = &#x27;Low Income&#x27;;</span><br><span class="line">   ELSEIF monthly_value &gt; 4000 AND monthly_value &lt;= 7000 THEN</span><br><span class="line">      SET income_level = &#x27;Avg Income&#x27;;</span><br><span class="line">   ELSE</span><br><span class="line">      SET income_level = &#x27;High Income&#x27;;</span><br><span class="line">   END IF;</span><br><span class="line">   SELECT income_level;</span><br><span class="line">END; //</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure></li><li><p>case when</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">case case_value </span><br><span class="line">when xxx then xxx</span><br><span class="line">when xxx then xxx</span><br><span class="line">else xxx</span><br><span class="line">end case</span><br></pre></td></tr></table></figure></li><li><p>例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //  </span><br><span class="line">CREATE PROCEDURE proc3 (in parameter int)  </span><br><span class="line">  begin </span><br><span class="line">case parameter</span><br><span class="line">        when 1 then   </span><br><span class="line">          insert into table1 values(1,&#x27;tom&#x27;);  </span><br><span class="line">        when 2 then   </span><br><span class="line">          insert into table1 values(2,&#x27;lili&#x27;);  </span><br><span class="line">        else   </span><br><span class="line">          insert into table1 values(3,&#x27;lucy&#x27;);  </span><br><span class="line">    end case;  </span><br><span class="line">  end //  </span><br><span class="line">DELIMITER ; </span><br></pre></td></tr></table></figure></li><li><p>while</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while 条件 do</span><br><span class="line">代码</span><br><span class="line">end while;</span><br></pre></td></tr></table></figure></li><li><p>repeat</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repeat </span><br><span class="line">code</span><br><span class="line">until 条件 end repeat</span><br><span class="line">条件判断在结尾</span><br></pre></td></tr></table></figure></li></ul><h1 id="关系运算"><a href="#关系运算" class="headerlink" title="关系运算"></a>关系运算</h1><h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><ul><li>传统的集合运算是二目运算，关系看成元组的集合，其运算关系是从关系的水平方向，即从行的角度进行，有<strong>并，差，交，笛卡尔积</strong>四种运算</li><li>单目运算 一个运算符 eg i++</li><li>双目运算 两个运算符 a+b</li><li>三目运算 三个运算符 a?b:c</li></ul><h2 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h2><p><img src="image-20210614154358625.png" alt="image-20210614154358625"></p><h2 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h2><ul><li>R1和R2的笛卡尔积  R3=R1XR2<img src="image-20210614154559529.png" alt="image-20210614154559529"></li></ul><h2 id="关系运算-1"><a href="#关系运算-1" class="headerlink" title="关系运算"></a>关系运算</h2><ul><li>从操作关系个数上说，分为一元关系操作和二元关系操作。</li><li>一元关系操作包括对==单个==关系进行==垂直分解的投影运算==和进行==水平分解的选择运算==</li><li>二元操作关系则是对==两个==关系进行操作，包括==链接运算和除运算==</li></ul><h2 id="一元关系"><a href="#一元关系" class="headerlink" title="一元关系"></a>一元关系</h2><h1 id="sql考试"><a href="#sql考试" class="headerlink" title="sql考试"></a>sql考试</h1><ul><li>选择题</li><li>简答题（七选四）</li><li>大题<ol><li>查询语句</li><li>数据库设计( 画er图)</li><li>关系代数（一道大题）<img src="image-20210609092445195.png" alt="image-20210609092445195"></li></ol></li></ul><h1 id="sql考试简答"><a href="#sql考试简答" class="headerlink" title="sql考试简答"></a>sql考试简答</h1><h1 id="数据库系统体系结构有多少层"><a href="#数据库系统体系结构有多少层" class="headerlink" title="数据库系统体系结构有多少层"></a>数据库系统体系结构有多少层</h1><p>分为三层：外部层，概念层和内部层</p><p><img src="image-20210609090933593.png" alt="image-20210609090933593"></p><h1 id="什么是事务，简单的阐述一下事务的原子性"><a href="#什么是事务，简单的阐述一下事务的原子性" class="headerlink" title="什么是事务，简单的阐述一下事务的原子性"></a>什么是事务，简单的阐述一下事务的原子性</h1><p>事务（Transaction）是访问和更新数据库的程序执行单元；</p><p>原子性是指一个事务是一个不可分割的工作单位，其中的操作要么都做，要么都不做</p><h1 id="常见的数据库故障有多少种"><a href="#常见的数据库故障有多少种" class="headerlink" title="常见的数据库故障有多少种"></a>常见的数据库故障有多少种</h1><p>5种；事务内部的故障，系统故障，介质故障，计算机病毒故障，用户操作错误</p><h1 id="关系代数的基本运算有哪些"><a href="#关系代数的基本运算有哪些" class="headerlink" title="关系代数的基本运算有哪些"></a>关系代数的基本运算有哪些</h1><p>五种。并 差 投影 选择 笛卡尔积</p><h1 id="等值连接和自然连接的区别"><a href="#等值连接和自然连接的区别" class="headerlink" title="等值连接和自然连接的区别"></a>等值连接和自然连接的区别</h1><ol><li>自然连接一定是等值连接，但等值连接不一定是自然连接</li><li>等值连接要求的分量不一定是公共属性；而自然连接要求相等的分量必须是公共属性</li><li>等值连接不把重复的属性除去，而自然连接要把重复的属性除去</li></ol><h1 id="为什么外键属性的值有时候可以为空"><a href="#为什么外键属性的值有时候可以为空" class="headerlink" title="为什么外键属性的值有时候可以为空"></a>为什么外键属性的值有时候可以为空</h1><p>外键可以为空,一个表的关键的标识是主键,外键是否为空不影响表的结构及数据库设计概念的.外键只起个关联表的作用.</p><h1 id="数据库的完整性约束有哪些子句"><a href="#数据库的完整性约束有哪些子句" class="headerlink" title="数据库的完整性约束有哪些子句"></a>数据库的完整性约束有哪些子句</h1><ol><li>not null 非空约束x</li><li>unique 唯一约束</li><li>primary key 主键约束</li><li>foreign key 外键约束</li><li>default 默认约束</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
